---@meta

---@class Angle
local Angle = {}

---[SHARED] Adds the values of the argument angle to the orignal angle.
--- This functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection.
---@param angle Angle The angle to add.
function Angle:Add(angle) end

---[SHARED] Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection.
---@param scalar number The number to divide by.
function Angle:Div(scalar) end

---[SHARED] Returns a normal vector facing in the direction that the angle points.
---@return Vector The forward direction of the angle
function Angle:Forward() end

---[SHARED] Returns whether the pitch, yaw and roll are 0 or not.
---@return boolean Whether the pitch, yaw and roll are 0 or not.
function Angle:IsZero() end

---[SHARED] Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection.
---@param scalar number The number to multiply.
function Angle:Mul(scalar) end

---[SHARED] Normalizes the angles by applying a module with 360 to pitch, yaw and roll.
function Angle:Normalize() end

---[SHARED] Randomizes each element of this Angle object.
---@param min number The minimum value for each component.
---@param max number The maximum value for each component.
function Angle:Random(min, max) end

---[SHARED] Returns a normal vector facing in the direction that points right relative to the angle's direction.
---@return Vector The right direction of the angle
function Angle:Right() end

---[SHARED] Rotates the angle around the specified axis by the specified degrees.
---@param axis Vector The axis to rotate around as a normalized unit vector. When argument is not a unit vector, you will experience numerical offset errors in the rotated angle.
---@param rotation number The degrees to rotate around the specified axis.
function Angle:RotateAroundAxis(axis, rotation) end

---[SHARED] Copies pitch, yaw and roll from the second angle to the first.
---@param originalAngle Angle The angle to copy the values from.
function Angle:Set(originalAngle) end

---[SHARED] Sets the p, y, and r of the angle.
---@param p number The pitch component of the Angle
---@param y number The yaw component of the Angle
---@param r number The roll component of the Angle
function Angle:SetUnpacked(p, y, r) end

---[SHARED] Snaps the angle to nearest interval of degrees.
--- This will modify the original angle too!
---@param axis string The component/axis to snap. Can be either p/pitch, y/yaw or r/roll.
---@param target number The target angle snap interval
---@return Angle The snapped angle.
function Angle:SnapTo(axis, target) end

---[SHARED] Subtracts the values of the argument angle to the orignal angle. This functions the same as angle1 - angle2 without creating a new angle object, skipping object construction and garbage collection.
---@param angle Angle The angle to subtract.
function Angle:Sub(angle) end

---[SHARED] Returns the angle as a table with three elements.
---@return table The table with elements 1 = p, 2 = y, 3 = r.
function Angle:ToTable() end

---[SHARED] Returns the pitch, yaw, and roll components of the angle.
---@return number, number, number number - p, pitch, x, or Angle[1].
---@return number, number, number number - y, yaw, or Angle[2].
---@return number, number, number number - r, roll, r, or Angle[3].
function Angle:Unpack() end

---[SHARED] Returns a normal vector facing in the direction that points up relative to the angle's direction.
---@return Vector The up direction of the angle.
function Angle:Up() end

---[SHARED] Sets pitch, yaw and roll to 0.
--- This function is faster than doing it manually.
function Angle:Zero() end

---@class CEffectData
local CEffectData = {}

---[SHARED] Returns the angles of the effect.
---@return Angle The angles of the effect
function CEffectData:GetAngles() end

---[SHARED] Returns the attachment ID for the effect.
---@return number The attachment ID of the effect.
function CEffectData:GetAttachment() end

---[SHARED] Returns byte which represents the color of the effect.
---@return number The color of the effect
function CEffectData:GetColor() end

---[SHARED] Returns the damage type of the effect
---@return number Damage type of the effect, see Enums/DMG
function CEffectData:GetDamageType() end

---[SERVER] Returns the entity index of the entity set for the effect.
---@return number The entity index of the entity set for the effect.
function CEffectData:GetEntIndex() end

---[SHARED] Returns the entity assigned to the effect.
---@return Entity The entity assigned to the effect
function CEffectData:GetEntity() end

---[SHARED] Returns the flags of the effect.
---@return number The flags of the effect.
function CEffectData:GetFlags() end

---[SHARED] Returns the hit box ID of the effect.
---@return number The hit box ID of the effect.
function CEffectData:GetHitBox() end

---[SHARED] Returns the magnitude of the effect.
---@return number The magnitude of the effect.
function CEffectData:GetMagnitude() end

---[SHARED] Returns the material ID of the effect.
---@return number The material ID of the effect.
function CEffectData:GetMaterialIndex() end

---[SHARED] Returns the normalized direction vector of the effect.
---@return Vector The normalized direction vector of the effect.
function CEffectData:GetNormal() end

---[SHARED] Returns the origin position of the effect.
---@return Vector The origin position of the effect.
function CEffectData:GetOrigin() end

---[SHARED] Returns the radius of the effect.
---@return number The radius of the effect.
function CEffectData:GetRadius() end

---[SHARED] Returns the scale of the effect.
---@return number The scale of the effect
function CEffectData:GetScale() end

---[SHARED] Returns the start position of the effect.
---@return Vector The start position of the effect
function CEffectData:GetStart() end

---[SHARED] Returns the surface property index of the effect.
---@return number The surface property index of the effect
function CEffectData:GetSurfaceProp() end

---[SHARED] Sets the angles of the effect.
---@param ang Angle The new angles to be set.
function CEffectData:SetAngles(ang) end

---[SHARED] Sets the attachment id of the effect to be created with this effect data.
--- This is internally stored as an integer, but only the first 5 bits will be networked, effectively limiting this function to 0-31 range.
---@param attachment number New attachment ID of the effect.
function CEffectData:SetAttachment(attachment) end

---[SHARED] Sets the "color" of the effect.
--- All this does is provide an addition 8 bits of data for the effect to use. What this will actually do will vary from effect to effect, depending on how a specific effect uses this given data, if at all.
--- Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to 0-255 range.
---@param color number Color represented by a byte.
function CEffectData:SetColor(color) end

---[SHARED] Sets the damage type of the effect to be created with this effect data.
---@param damageType number Damage type, see Enums/DMG.
function CEffectData:SetDamageType(damageType) end

---[SERVER] Sets the entity of the effect via its index.
---@param entIndex number The entity index to be set.
function CEffectData:SetEntIndex(entIndex) end

---[SHARED] Sets the entity of the effect to be created with this effect data.
---@param entity Entity Entity of the effect, mostly used for parenting.
function CEffectData:SetEntity(entity) end

---[SHARED] Sets the flags of the effect. Can be used to change the appearance of a MuzzleFlash effect.
--- Example values for MuzzleFlash effect
--- 
--- 
--- 
--- Flags
--- Description
--- 
--- 
--- 
--- 
--- 1
--- Regular muzzleflash
--- 
--- 
--- 5
--- Combine muzzleflash
--- 
--- 
--- 7
--- Regular muzzle but bigger
--- 
--- 
--- 
--- Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to 0-255 range.
---@param flags number The flags of the effect. Each effect has their own flags.
function CEffectData:SetFlags(flags) end

---[SHARED] Sets the hit box index of the effect.
--- Internally stored as an integer, but only first 11 bits are networked, effectively limiting this function to 0-2047 range.
---@param hitBoxIndex number The hit box index of the effect.
function CEffectData:SetHitBox(hitBoxIndex) end

---[SHARED] Sets the magnitude of the effect.
--- Internally stored as a float with 12 bit precision for networking purposes, limited to range of 0-1023.
---@param magnitude number The magnitude of the effect.
function CEffectData:SetMagnitude(magnitude) end

---[SHARED] Sets the material index of the effect.
--- Internally stored as an integer, but only first 12 bits are networked, effectively limiting this function to 0-4095 range.
---@param materialIndex number The material index of the effect.
function CEffectData:SetMaterialIndex(materialIndex) end

---[SHARED] Sets the normalized (length=1) direction vector of the effect to be created with this effect data. This must be a normalized vector for networking purposes.
---@param normal Vector The normalized direction vector of the effect.
function CEffectData:SetNormal(normal) end

---[SHARED] Sets the origin of the effect to be created with this effect data.
--- Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)
---@param origin Vector Origin of the effect.
function CEffectData:SetOrigin(origin) end

---[SHARED] Sets the radius of the effect to be created with this effect data.
--- Internally stored as a float, but networked as a 10bit float, and is clamped to 0-1023 range.
---@param radius number Radius of the effect.
function CEffectData:SetRadius(radius) end

---[SHARED] Sets the scale of the effect to be created with this effect data.
---@param scale number Scale of the effect.
function CEffectData:SetScale(scale) end

---[SHARED] Sets the start of the effect to be created with this effect data.
--- Limited to world bounds (+-16386 on every axis) and has horrible networking precision. (17 bit float per component)
---@param start Vector Start of the effect.
function CEffectData:SetStart(start) end

---[SHARED] Sets the surface property index of the effect.
--- Internally stored as an integer, but only first 8 bits are networked, effectively limiting this function to -1-254 range.(yes, that's not a mistake)
---@param surfaceProperties number The surface property index of the effect.
function CEffectData:SetSurfaceProp(surfaceProperties) end

---@class CLuaEmitter
local CLuaEmitter = {}

---[CLIENT] Creates a new CLuaParticle with the given material and position.
---@param material string The particles material. Can also be an IMaterial.
---@param position Vector The position to spawn the particle on.
---@return CLuaParticle The created particle, if any.
function CLuaEmitter:Add(material, position) end

---[CLIENT] Manually renders all particles the emitter has created.
function CLuaEmitter:Draw() end

---[CLIENT] Removes the emitter, making it no longer usable from Lua. If particles remain, the emitter will be removed when all particles die.
function CLuaEmitter:Finish() end

---[CLIENT] Returns the amount of active particles of this emitter.
---@return number The amount of active particles of this emitter
function CLuaEmitter:GetNumActiveParticles() end

---[CLIENT] Returns the position of this emitter. This is set when creating the emitter with ParticleEmitter.
---@return Vector Position of this particle emitter.
function CLuaEmitter:GetPos() end

---[CLIENT] Returns whether this emitter is 3D or not. This is set when creating the emitter with ParticleEmitter.
---@return boolean Whether this emitter is 3D or not.
function CLuaEmitter:Is3D() end

---[CLIENT] Returns whether this CLuaEmitter is valid or not.
---@return boolean Whether this CLuaEmitter is valid or not.
function CLuaEmitter:IsValid() end

---[CLIENT] Sets the bounding box for this emitter.
--- Usually the bounding box is automatically determined by the particles, but this function overrides it.
---@param mins Vector The minimum position of the box
---@param maxs Vector The maximum position of the box
function CLuaEmitter:SetBBox(mins, maxs) end

---[CLIENT] This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).
---@param distanceMin number Min distance where the alpha becomes 0.
---@param distanceMax number Max distance where the alpha starts fading.
function CLuaEmitter:SetNearClip(distanceMin, distanceMax) end

---[CLIENT] Prevents all particles of the emitter from automatically drawing.
---@param noDraw boolean Whether we should draw the particles ( false ) or not ( true )
function CLuaEmitter:SetNoDraw(noDraw) end

---[CLIENT] The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.
---@param radius number Particle radius.
function CLuaEmitter:SetParticleCullRadius(radius) end

---[CLIENT] Sets the position of the particle emitter.
---@param position Vector New position.
function CLuaEmitter:SetPos(position) end

---@class CLuaLocomotion
local CLuaLocomotion = {}

---[SERVER] Sets the location we want to get to.
--- Each call of Approach moves the NextBot 1 unit towards the specified goal. The size of this unit is determined by SetDesiredSpeed; the default is 0 (each call of Approach moves the NextBot 0).
--- To achieve smooth movement with Approach, it should be called in a hook like Think, as shown in the example.
---@param goal Vector The vector we want to get to.
---@param goalweight number If unsure then set this to 1.
function CLuaLocomotion:Approach(goal, goalweight) end

---[SERVER] Removes the stuck status from the bot
function CLuaLocomotion:ClearStuck() end

---[SERVER] Sets the direction we want to face
---@param goal Vector The vector we want to face
function CLuaLocomotion:FaceTowards(goal) end

---[SERVER] Returns the acceleration speed
---@return number Current acceleration speed
function CLuaLocomotion:GetAcceleration() end

---[SERVER] Returns whether the Nextbot is allowed to avoid obstacles or not.
---@return boolean Whether this bot is allowed to try to avoid obstacles.
function CLuaLocomotion:GetAvoidAllowed() end

---[SERVER] Returns whether the Nextbot is allowed to climb or not.
---@return boolean Whether this bot is allowed to climb.
function CLuaLocomotion:GetClimbAllowed() end

---[SERVER] Returns the current acceleration as a vector
---@return Vector Current acceleration
function CLuaLocomotion:GetCurrentAcceleration() end

---[SERVER] Gets the height the bot is scared to fall from
---@return number Current death drop height
function CLuaLocomotion:GetDeathDropHeight() end

---[SERVER] Gets the deceleration speed
---@return number Current deceleration speed
function CLuaLocomotion:GetDeceleration() end

---[SERVER] Returns the desired movement speed set by CLuaLocomotion:SetDesiredSpeed
---@return number The desired movement speed.
function CLuaLocomotion:GetDesiredSpeed() end

---[SERVER] Returns the locomotion's gravity.
---@return number The gravity.
function CLuaLocomotion:GetGravity() end

---[SERVER] Return unit vector in XY plane describing our direction of motion - even if we are currently not moving
---@return Vector A vector representing the X and Y movement
function CLuaLocomotion:GetGroundMotionVector() end

---[SERVER] Returns the current ground normal.
---@return Vector The current ground normal.
function CLuaLocomotion:GetGroundNormal() end

---[SERVER] Returns whether the Nextbot is allowed to jump gaps or not.
---@return boolean Whether this bot is allowed to jump gaps.
function CLuaLocomotion:GetJumpGapsAllowed() end

---[SERVER] Gets the height of the bot's jump
---@return number Current jump height
function CLuaLocomotion:GetJumpHeight() end

---[SERVER] Returns maximum jump height of this CLuaLocomotion.
---@return number The maximum jump height.
function CLuaLocomotion:GetMaxJumpHeight() end

---[SERVER] Returns the max rate at which the NextBot can visually rotate.
---@return number Maximum yaw rate
function CLuaLocomotion:GetMaxYawRate() end

---[SERVER] Returns the NextBot this locomotion is associated with.
---@return NextBot The nextbot
function CLuaLocomotion:GetNextBot() end

---[SERVER] Gets the max height the bot can step up
---@return number Current step height
function CLuaLocomotion:GetStepHeight() end

---[SERVER] Returns the current movement velocity as a vector
---@return Vector Current velocity
function CLuaLocomotion:GetVelocity() end

---[SERVER] Returns whether this CLuaLocomotion can reach and/or traverse/move in given CNavArea.
---@param area CNavArea The area to test
---@return boolean Whether this CLuaLocomotion can traverse given CNavArea.
function CLuaLocomotion:IsAreaTraversable(area) end

---[SERVER] Returns true if we're trying to move.
---@return boolean Whether we're trying to move or not.
function CLuaLocomotion:IsAttemptingToMove() end

---[SERVER] Returns true of the locomotion engine is jumping or climbing
---@return boolean Whether we're climbing or jumping or not
function CLuaLocomotion:IsClimbingOrJumping() end

---[SERVER] Returns whether the nextbot this locomotion is attached to is on ground or not.
---@return boolean Whether the nextbot is on ground or not.
function CLuaLocomotion:IsOnGround() end

---[SERVER] Returns true if we're stuck
---@return boolean Whether we're stuck or not
function CLuaLocomotion:IsStuck() end

---[SERVER] Returns whether or not the target in question is on a ladder or not.
---@return boolean If the target is on a ladder or not.
function CLuaLocomotion:IsUsingLadder() end

---[SERVER] Makes the bot jump. It must be on ground (Entity:IsOnGround) and its model must have ACT_JUMP activity.
function CLuaLocomotion:Jump() end

---[SERVER] Makes the bot jump across a gap. The bot must be on ground (Entity:IsOnGround) and its model must have ACT_JUMP activity.
---@param landingGoal Vector 
---@param landingForward Vector 
function CLuaLocomotion:JumpAcrossGap(landingGoal, landingForward) end

---[SERVER] Sets the acceleration speed
---@param speed number Speed acceleration (default is 400)
function CLuaLocomotion:SetAcceleration(speed) end

---[SERVER] Sets whether the Nextbot is allowed try to to avoid obstacles or not. This is used during path generation. Works similarly to nb_allow_avoiding convar. By default bots are allowed to try to avoid obstacles.
---@param allowed boolean Whether this bot should be allowed to try to avoid obstacles.
function CLuaLocomotion:SetAvoidAllowed(allowed) end

---[SERVER] Sets whether the Nextbot is allowed to climb or not. This is used during path generation. Works similarly to nb_allow_climbing convar. By default bots are allowed to climb.
---@param allowed boolean Whether this bot should be allowed to climb.
function CLuaLocomotion:SetClimbAllowed(allowed) end

---[SERVER] Sets the height the bot is scared to fall from.
---@param height number Height (default is 200)
function CLuaLocomotion:SetDeathDropHeight(height) end

---[SERVER] Sets the deceleration speed.
---@param deceleration number New deceleration speed (default is 400)
function CLuaLocomotion:SetDeceleration(deceleration) end

---[SERVER] Sets movement speed.
---@param speed number The new desired speed
function CLuaLocomotion:SetDesiredSpeed(speed) end

---[SERVER] Sets the locomotion's gravity.
--- With values 0 or below, or even lower positive values, the nextbot will start to drift sideways, use CLuaLocomotion:SetVelocity to counteract this.
---@param gravity number New gravity to set. Default is 1000.
function CLuaLocomotion:SetGravity(gravity) end

---[SERVER] Sets whether the Nextbot is allowed to jump gaps or not. This is used during path generation. Works similarly to nb_allow_gap_jumping convar. By default bots are allowed to jump gaps.
---@param allowed boolean Whether this bot should be allowed to jump gaps.
function CLuaLocomotion:SetJumpGapsAllowed(allowed) end

---[SERVER] Sets the height of the bot's jump
---@param height number Height (default is 58)
function CLuaLocomotion:SetJumpHeight(height) end

---[SERVER] Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing.
---@param yawRate number Desired new maximum yaw rate
function CLuaLocomotion:SetMaxYawRate(yawRate) end

---[SERVER] Sets the max height the bot can step up
---@param height number Height (default is 18)
function CLuaLocomotion:SetStepHeight(height) end

---[SERVER] Sets the current movement velocity
---@param velocity Vector 
function CLuaLocomotion:SetVelocity(velocity) end

---@class CLuaParticle
local CLuaParticle = {}

---[CLIENT] Returns the air resistance of the particle.
---@return number The air resistance of the particle
function CLuaParticle:GetAirResistance() end

---[CLIENT] Returns the current orientation of the particle.
---@return Angle The angles of the particle
function CLuaParticle:GetAngles() end

---[CLIENT] Returns the angular velocity of the particle
---@return Angle The angular velocity of the particle
function CLuaParticle:GetAngleVelocity() end

---[CLIENT] Returns the 'bounciness' of the particle.
---@return number The 'bounciness' of the particle 2 means it will gain 100% of its previous velocity, 1 means it will not lose velocity, 0.5 means it will lose half of its velocity with each bounce.
function CLuaParticle:GetBounce() end

---[CLIENT] Returns the color of the particle.
---@return number, number, number number - Red part of the color
---@return number, number, number number - Green part of the color
---@return number, number, number number - Blue part of the color
function CLuaParticle:GetColor() end

---[CLIENT] Returns the amount of time in seconds after which the particle will be destroyed.
---@return number The amount of time in seconds after which the particle will be destroyed
function CLuaParticle:GetDieTime() end

---[CLIENT] Returns the alpha value that the particle will reach on its death.
---@return number The alpha value the particle will fade to
function CLuaParticle:GetEndAlpha() end

---[CLIENT] Returns the length that the particle will reach on its death.
---@return number The length the particle will reach
function CLuaParticle:GetEndLength() end

---[CLIENT] Returns the size that the particle will reach on its death.
---@return number The size the particle will reach
function CLuaParticle:GetEndSize() end

---[CLIENT] Returns the gravity of the particle.
---@return Vector The gravity of the particle.
function CLuaParticle:GetGravity() end

---[CLIENT] Returns the 'life time' of the particle, how long the particle existed since its creation.
--- This value will always be between 0 and CLuaParticle:GetDieTime.
--- It changes automatically as time goes.
--- It can be manipulated using CLuaParticle:SetLifeTime.
--- If the life time of the particle will be more than CLuaParticle:GetDieTime, it will be removed.
---@return number How long the particle existed, in seconds.
function CLuaParticle:GetLifeTime() end

---[CLIENT] Returns the current material of the particle.
---@return IMaterial The material.
function CLuaParticle:GetMaterial() end

---[CLIENT] Returns the absolute position of the particle.
---@return Vector The absolute position of the particle.
function CLuaParticle:GetPos() end

---[CLIENT] Returns the current rotation of the particle in radians, this should only be used for 2D particles.
---@return number The current rotation of the particle in radians
function CLuaParticle:GetRoll() end

---[CLIENT] Returns the current rotation speed of the particle in radians, this should only be used for 2D particles.
---@return number The current rotation speed of the particle in radians
function CLuaParticle:GetRollDelta() end

---[CLIENT] Returns the alpha value which the particle has when it's created.
---@return number The alpha value which the particle has when it's created.
function CLuaParticle:GetStartAlpha() end

---[CLIENT] Returns the length which the particle has when it's created.
---@return number The length which the particle has when it's created.
function CLuaParticle:GetStartLength() end

---[CLIENT] Returns the size which the particle has when it's created.
---@return number The size which the particle has when it's created.
function CLuaParticle:GetStartSize() end

---[CLIENT] Returns the current velocity of the particle.
---@return Vector The current velocity of the particle.
function CLuaParticle:GetVelocity() end

---[CLIENT] Sets the air resistance of the the particle.
---@param airResistance number New air resistance.
function CLuaParticle:SetAirResistance(airResistance) end

---[CLIENT] Sets the angles of the particle.
---@param ang Angle New angle.
function CLuaParticle:SetAngles(ang) end

---[CLIENT] Sets the angular velocity of the the particle.
---@param angVel Angle New angular velocity.
function CLuaParticle:SetAngleVelocity(angVel) end

---[CLIENT] Sets the 'bounciness' of the the particle.
---@param bounce number New 'bounciness' of the particle 2 means it will gain 100% of its previous velocity, 1 means it will not lose velocity, 0.5 means it will lose half of its velocity with each bounce.
function CLuaParticle:SetBounce(bounce) end

---[CLIENT] Sets the whether the particle should collide with the world or not.
---@param shouldCollide boolean Whether the particle should collide with the world or not
function CLuaParticle:SetCollide(shouldCollide) end

---[CLIENT] Sets the function that gets called whenever the particle collides with the world.
---@param collideFunc function Collide callback, the arguments are: CLuaParticle particle - The particle itself Vector hitPos - Position of the collision Vector hitNormal - Direction of the collision, perpendicular to the hit surface
function CLuaParticle:SetCollideCallback(collideFunc) end

---[CLIENT] Sets the color of the particle.
---@param r number The red component.
---@param g number The green component.
---@param b number The blue component.
function CLuaParticle:SetColor(r, g, b) end

---[CLIENT] Sets the time where the particle will be removed.
---@param dieTime number The new die time.
function CLuaParticle:SetDieTime(dieTime) end

---[CLIENT] Sets the alpha value of the particle that it will reach when it dies.
---@param endAlpha number The new alpha value of the particle that it will reach when it dies.
function CLuaParticle:SetEndAlpha(endAlpha) end

---[CLIENT] Sets the length of the particle that it will reach when it dies.
---@param endLength number The new length of the particle that it will reach when it dies.
function CLuaParticle:SetEndLength(endLength) end

---[CLIENT] Sets the size of the particle that it will reach when it dies.
---@param endSize number The new size of the particle that it will reach when it dies.
function CLuaParticle:SetEndSize(endSize) end

---[CLIENT] Sets the directional gravity aka. acceleration of the particle.
---@param gravity Vector The directional gravity.
function CLuaParticle:SetGravity(gravity) end

---[CLIENT] Sets the 'life time' of the particle, how long the particle existed since its creation.
--- This value should always be between 0 and CLuaParticle:GetDieTime.
--- It changes automatically as time goes.
--- If the life time of the particle will be more than CLuaParticle:GetDieTime, it will be removed.
---@param lifeTime number The new life time of the particle.
function CLuaParticle:SetLifeTime(lifeTime) end

---[CLIENT] Sets whether the particle should be affected by lighting.
---@param useLighting boolean Whether the particle should be affected by lighting.
function CLuaParticle:SetLighting(useLighting) end

---[CLIENT] Sets the material of the particle.
---@param mat IMaterial The new material to set. Can also be a string.
function CLuaParticle:SetMaterial(mat) end

---[CLIENT] Sets when the particles think function should be called next, this uses the synchronized server time returned by CurTime.
---@param nextThink number Next think time.
function CLuaParticle:SetNextThink(nextThink) end

---[CLIENT] Sets the absolute position of the particle.
---@param pos Vector The new particle position.
function CLuaParticle:SetPos(pos) end

---[CLIENT] Sets the roll of the particle in radians. This should only be used for 2D particles.
---@param roll number The new rotation of the particle in radians.
function CLuaParticle:SetRoll(roll) end

---[CLIENT] Sets the rotation speed of the particle in radians. This should only be used for 2D particles.
---@param rollDelta number The new rotation speed of the particle in radians.
function CLuaParticle:SetRollDelta(rollDelta) end

---[CLIENT] Sets the initial alpha value of the particle.
---@param startAlpha number Initial alpha.
function CLuaParticle:SetStartAlpha(startAlpha) end

---[CLIENT] Sets the initial length value of the particle.
---@param startLength number Initial length.
function CLuaParticle:SetStartLength(startLength) end

---[CLIENT] Sets the initial size value of the particle.
---@param startSize number Initial size.
function CLuaParticle:SetStartSize(startSize) end

---[CLIENT] Sets the think function of the particle.
---@param thinkFunc function Think function. It has only one argument: CLuaParticle particle - The particle the think hook is set on
function CLuaParticle:SetThinkFunction(thinkFunc) end

---[CLIENT] Sets the velocity of the particle.
---@param vel Vector The new velocity of the particle.
function CLuaParticle:SetVelocity(vel) end

---[CLIENT] Scales the velocity based on the particle speed.
---@param doScale boolean Use velocity scaling.
function CLuaParticle:SetVelocityScale(doScale) end

---@class CMoveData
local CMoveData = {}

---[SHARED] Adds keys to the move data, as if player pressed them.
---@param keys number Keys to add, see Enums/IN
function CMoveData:AddKey(keys) end

---[SHARED] Gets the aim angle. Seems to be same as CMoveData:GetAngles.
---@return Angle Aiming angle
function CMoveData:GetAbsMoveAngles() end

---[SHARED] Gets the aim angle. On client is the same as Entity:GetAngles.
---@return Angle Aiming angle
function CMoveData:GetAngles() end

---[SHARED] Gets which buttons are down
---@return number An integer representing which buttons are down, see Enums/IN
function CMoveData:GetButtons() end

---[SHARED] Returns the center of the player movement constraint. See CMoveData:SetConstraintCenter.
---@return Vector The constraint origin.
function CMoveData:GetConstraintCenter() end

---[SHARED] Returns the radius that constrains the players movement. See CMoveData:SetConstraintRadius.
---@return number The constraint radius
function CMoveData:GetConstraintRadius() end

---[SHARED] Returns the player movement constraint speed scale. See CMoveData:SetConstraintSpeedScale.
---@return number The constraint speed scale
function CMoveData:GetConstraintSpeedScale() end

---[SHARED] Returns the width (distance from the edge of the radius, inward) where the actual movement constraint functions.
---@return number The constraint width
function CMoveData:GetConstraintWidth() end

---[SHARED] Returns an internal player movement variable m_outWishVel.
---@return Vector 
function CMoveData:GetFinalIdealVelocity() end

---[SHARED] Returns an internal player movement variable m_outJumpVel.
---@return Vector 
function CMoveData:GetFinalJumpVelocity() end

---[SHARED] Returns an internal player movement variable m_outStepHeight.
---@return number 
function CMoveData:GetFinalStepHeight() end

---[SHARED] Returns the players forward speed.
---@return number speed
function CMoveData:GetForwardSpeed() end

---[SHARED] Gets the number passed to "impulse" console command
---@return number The impulse
function CMoveData:GetImpulseCommand() end

---[SHARED] Returns the maximum client speed of the player
---@return number The maximum client speed
function CMoveData:GetMaxClientSpeed() end

---[SHARED] Returns the maximum speed of the player.
---@return number The maximum speed
function CMoveData:GetMaxSpeed() end

---[SHARED] Returns the angle the player is moving at. For more info, see CMoveData:SetMoveAngles.
---@return Angle The move direction
function CMoveData:GetMoveAngles() end

---[SHARED] Gets the aim angle. Only works clientside, server returns same as CMoveData:GetAngles.
---@return Angle The aim angle
function CMoveData:GetOldAngles() end

---[SHARED] Get which buttons were down last frame
---@return number An integer representing which buttons were down, see Enums/IN
function CMoveData:GetOldButtons() end

---[SHARED] Gets the player's position.
---@return Vector The player's position.
function CMoveData:GetOrigin() end

---[SHARED] Returns the strafe speed of the player.
---@return number speed
function CMoveData:GetSideSpeed() end

---[SHARED] Returns the vertical speed of the player. ( Z axis of CMoveData:GetVelocity )
---@return number Vertical speed
function CMoveData:GetUpSpeed() end

---[SHARED] Gets the players velocity.
--- This will return Vector(0,0,0) sometimes when walking on props.Issue Tracker: 3413
---@return Vector The players velocity
function CMoveData:GetVelocity() end

---[SHARED] Returns whether the key is down or not
---@param key number The key to test, see Enums/IN
---@return boolean Is the key down or not
function CMoveData:KeyDown(key) end

---[SHARED] Returns whether the key was pressed. If you want to check if the key is held down, try CMoveData:KeyDown
---@param key number The key to test, see Enums/IN
---@return boolean Was the key pressed or not.
function CMoveData:KeyPressed(key) end

---[SHARED] Returns whether the key was released
---@param key number A key to test, see Enums/IN
---@return boolean Was the key released or not.
function CMoveData:KeyReleased(key) end

---[SHARED] Returns whether the key was down or not.
--- Unlike CMoveData:KeyDown, it will return false if CMoveData:KeyPressed is true and it will return true if CMoveData:KeyReleased is true.
---@param key number The key to test, see Enums/IN
---@return boolean Was the key down or not
function CMoveData:KeyWasDown(key) end

---[SHARED] Sets absolute move angles.( ? ) Doesn't seem to do anything.
---@param ang Angle New absolute move angles
function CMoveData:SetAbsMoveAngles(ang) end

---[SHARED] Sets angles.
--- This function does nothing.Issue Tracker: 2382
---@param ang Angle The angles.
function CMoveData:SetAngles(ang) end

---[SHARED] Sets the pressed buttons on the move data
---@param buttons number A number representing which buttons are down, see Enums/IN
function CMoveData:SetButtons(buttons) end

---[SHARED] Sets the center of the player movement constraint. See CMoveData:SetConstraintRadius.
---@param pos Vector The constraint origin.
function CMoveData:SetConstraintCenter(pos) end

---[SHARED] Sets the radius that constrains the players movement.
--- Works with conjunction of:
--- 
--- CMoveData:SetConstraintWidth
--- CMoveData:SetConstraintSpeedScale
--- CMoveData:SetConstraintCenter
---@param radius number The new constraint radius
function CMoveData:SetConstraintRadius(radius) end

---[SHARED] Sets the player movement constraint speed scale. This will be applied to the player within the constraint radius when approaching its edge.
---@param number number The constraint speed scale
function CMoveData:SetConstraintSpeedScale(number) end

---[SHARED] Sets  the width (distance from the edge of the radius, inward) where the actual movement constraint functions.
---@param number number The constraint width
function CMoveData:SetConstraintWidth(number) end

---[SHARED] Sets an internal player movement variable m_outWishVel.
---@param idealVel Vector 
function CMoveData:SetFinalIdealVelocity(idealVel) end

---[SHARED] Sets an internal player movement variable m_outJumpVel.
---@param jumpVel Vector 
function CMoveData:SetFinalJumpVelocity(jumpVel) end

---[SHARED] Sets an internal player movement variable m_outStepHeight.
---@param stepHeight number 
function CMoveData:SetFinalStepHeight(stepHeight) end

---[SHARED] Sets players forward speed.
---@param speed number New forward speed
function CMoveData:SetForwardSpeed(speed) end

---[SHARED] Sets the impulse command. This isn't actually utilised in the engine anywhere.
---@param impulse number The impulse to set
function CMoveData:SetImpulseCommand(impulse) end

---[SHARED] Sets the maximum player speed. Player won't be able to run or sprint faster then this value.
--- This also automatically sets CMoveData:SetMaxSpeed when used in the GM:SetupMove hook. You must set it manually in the GM:Move hook.
--- This must be called on both client and server to avoid prediction errors.
--- This will not reduce speed in air.
--- Setting this to 0 will not make the player stationary. It won't do anything.
---@param maxSpeed number The new maximum speed
function CMoveData:SetMaxClientSpeed(maxSpeed) end

---[SHARED] Sets the maximum speed of the player. This must match with CMoveData:SetMaxClientSpeed both, on server and client.
--- Doesn't seem to be doing anything on it's own, use CMoveData:SetMaxClientSpeed instead.
---@param maxSpeed number The new maximum speed
function CMoveData:SetMaxSpeed(maxSpeed) end

---[SHARED] Sets the serverside move angles, making the movement keys act as if player was facing that direction.
--- This does nothing clientside.Issue Tracker: 1181
---@param dir Angle The aim direction.
function CMoveData:SetMoveAngles(dir) end

---[SHARED] Sets old aim angles. ( ? ) Doesn't seem to be doing anything.
---@param aimAng Angle The old angles
function CMoveData:SetOldAngles(aimAng) end

---[SHARED] Sets the 'old' pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down.
---@param buttons number A number representing which buttons were down, see Enums/IN
function CMoveData:SetOldButtons(buttons) end

---[SHARED] Sets the players position.
---@param pos Vector The position
function CMoveData:SetOrigin(pos) end

---[SHARED] Sets players strafe speed.
---@param speed number Strafe speed
function CMoveData:SetSideSpeed(speed) end

---[SHARED] Sets vertical speed of the player. ( Z axis of CMoveData:SetVelocity )
---@param speed number Vertical speed to set
function CMoveData:SetUpSpeed(speed) end

---[SHARED] Sets the player's velocity
---@param velocity Vector The velocity to set
function CMoveData:SetVelocity(velocity) end

---@class CNavArea
local CNavArea = {}

---[SERVER] Adds a hiding spot onto this nav area.
--- There's a limit of 255 hiding spots per area.
---@param pos Vector The position on the nav area
---@param flags number Flags describing what kind of hiding spot this is.  0 = None (Not recommended) 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby 2 = good sniper spot, had at least one decent sniping corridor 4 = perfect sniper spot, can see either very far, or a large area, or both 8 = exposed, spot in the open, usually on a ledge or cliff  Values over 255 will be clamped.
function CNavArea:AddHidingSpot(pos, flags) end

---[SERVER] Adds this CNavArea to the closed list, a list of areas that have been checked by A* pathfinding algorithm.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
function CNavArea:AddToClosedList() end

---[SERVER] Adds this CNavArea to the Open List.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
function CNavArea:AddToOpenList() end

---[SERVER] Clears the open and closed lists for a new search.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
function CNavArea:ClearSearchLists() end

---[SERVER] Returns the height difference between the edges of two connected navareas.
---@param navarea CNavArea 
---@return number The height change
function CNavArea:ComputeAdjacentConnectionHeightChange(navarea) end

---[SERVER] Returns the Enums/NavDir direction that the given vector faces on this CNavArea.
---@param pos Vector The position to compute direction towards.
---@return number The direction the vector is in relation to this CNavArea. See Enums/NavDir.
function CNavArea:ComputeDirection(pos) end

---[SERVER] Returns the height difference on the Z axis of the two CNavAreas. This is calculated from the center most point on both CNavAreas.
---@param navArea CNavArea The nav area to test against.
---@return number The ground height change.
function CNavArea:ComputeGroundHeightChange(navArea) end

---[SERVER] Connects this CNavArea to another CNavArea or CNavLadder with a one way connection. ( From this area to the target )
--- See CNavLadder:ConnectTo for making the connection from ladder to area.
---@param area CNavArea The CNavArea or CNavLadder this area leads to.
function CNavArea:ConnectTo(area) end

---[SERVER] Returns true if this CNavArea contains the given vector.
---@param pos Vector The position to test.
---@return boolean True if the vector was inside and false otherwise.
function CNavArea:Contains(pos) end

---[SERVER] Disconnects this nav area from given area or ladder. (Only disconnects one way)
---@param area CNavArea The CNavArea or CNavLadder this to disconnect from.
function CNavArea:Disconnect(area) end

---[SERVER] Draws this navarea on debug overlay.
function CNavArea:Draw() end

---[SERVER] Draws the hiding spots on debug overlay. This includes sniper/exposed spots too!
function CNavArea:DrawSpots() end

---[SERVER] Returns a table of all the CNavAreas that have a  ( one and two way ) connection from this CNavArea.
--- If an area has a one-way incoming connection to this CNavArea, then it will not be returned from this function, use CNavArea:GetIncomingConnections to get all one-way incoming connections.
--- See CNavArea:GetAdjacentAreasAtSide for a function that only returns areas from one side/direction.
---@return table A table of all CNavArea that have a ( one and two way ) connection from this CNavArea. Returns an empty table if this area has no outgoing connections to any other areas.
function CNavArea:GetAdjacentAreas() end

---[SERVER] Returns a table of all the CNavAreas that have a ( one and two way ) connection from this CNavArea in given direction.
--- If an area has a one-way incoming connection to this CNavArea, then it will not be returned from this function, use CNavArea:GetIncomingConnections to get all incoming connections.
--- See CNavArea:GetAdjacentAreas for a function that returns all areas from all sides/directions.
---@param navDir number The direction, in which to look for CNavAreas, see Enums/NavDir.
---@return table A table of all CNavArea that have a ( one and two way ) connection from this CNavArea in given direction. Returns an empty table if this area has no outgoing connections to any other areas in given direction.
function CNavArea:GetAdjacentAreasAtSide(navDir) end

---[SERVER] Returns the amount of CNavAreas that have a connection ( one and two way ) from this CNavArea.
--- See CNavArea:GetAdjacentCountAtSide for a function that only returns area count from one side/direction.
---@return number The amount of CNavAreas that have a connection ( one and two way ) from this CNavArea.
function CNavArea:GetAdjacentCount() end

---[SERVER] Returns the amount of CNavAreas that have a connection ( one or two way ) from this CNavArea in given direction.
--- See CNavArea:GetAdjacentCount for a function that returns CNavArea count from/in all sides/directions.
---@param navDir number The direction, in which to look for CNavAreas, see Enums/NavDir.
---@return number The amount of CNavAreas that have a connection ( one or two way ) from this CNavArea in given direction.
function CNavArea:GetAdjacentCountAtSide(navDir) end

---[SERVER] Returns the attribute mask for the given CNavArea.
---@return number Attribute mask for this CNavArea, see Enums/NAV_MESH for the specific flags. A navmesh that was generated with nav_quicksave set to 1 will have all CNavAreas attribute masks set to 0A navmesh that was generated with nav_quicksave set to 1 will have all CNavAreas attribute masks set to 0A navmesh that was generated with nav_quicksave set to 1 will have all CNavAreas attribute masks set to 0
function CNavArea:GetAttributes() end

---[SERVER] Returns the center most vector point for the given CNavArea.
---@return Vector The center vector.
function CNavArea:GetCenter() end

---[SERVER] Returns the closest point of this Nav Area from the given position.
---@param pos Vector The given position, can be outside of the Nav Area bounds.
---@return Vector The closest position on this Nav Area.
function CNavArea:GetClosestPointOnArea(pos) end

---[SERVER] Returns the vector position of the corner for the given CNavArea.
---@param cornerid number The target corner to get the position of, takes Enums/NavCorner.
---@return Vector The corner position.
function CNavArea:GetCorner(cornerid) end

---[SERVER] Returns the cost from starting area this area when pathfinding. Set by CNavArea:SetCostSoFar.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@return number The cost so far.
function CNavArea:GetCostSoFar() end

---[SERVER] Returns a table of very bad hiding spots in this area.
--- See also CNavArea:GetHidingSpots.
---@return table A table of Vectors
function CNavArea:GetExposedSpots() end

---[SERVER] Returns size info about the nav area.
---@return table Returns a table containing the following keys:  Vector hi| Vector lo| number SizeX| number SizeY| number SizeZ|
function CNavArea:GetExtentInfo() end

---[SERVER] Returns a table of good hiding spots in this area.
--- See also CNavArea:GetExposedSpots.
---@param type number The type of spots to include.  0 = None (Not recommended) 1 = In Cover/basically a hiding spot, in a corner with good hard cover nearby 2 = good sniper spot, had at least one decent sniping corridor 4 = perfect sniper spot, can see either very far, or a large area, or both 8 = exposed, spot in the open, usually on a ledge or cliff, same as GetExposedSpots Values over 255 and below 0 will be clamped.
---@return table A table of Vectors
function CNavArea:GetHidingSpots(type) end

---[SERVER] Returns this CNavAreas unique ID.
---@return number The unique ID.
function CNavArea:GetID() end

---[SERVER] Returns a table of all the CNavAreas that have a one-way connection to this CNavArea.
--- If a CNavArea has a two-way connection to or from this CNavArea then it will not be returned from this function, use CNavArea:GetAdjacentAreas to get outgoing ( one and two way ) connections.
--- See CNavArea:GetIncomingConnectionsAtSide for a function that returns one-way incoming connections from  only one side/direction.
---@return table A table of all CNavAreas with one-way connection to this CNavArea. Returns an empty table if there are no one-way incoming connections to this CNavArea.
function CNavArea:GetIncomingConnections() end

---[SERVER] Returns a table of all the CNavAreas that have a one-way connection to this CNavArea from given direction.
--- If a CNavArea has a two-way connection to or from this CNavArea then it will not be returned from this function, use CNavArea:GetAdjacentAreas to get outgoing ( one and two way ) connections.
--- See CNavArea:GetIncomingConnections for a function that returns one-way incoming connections from  all sides/directions.
---@param navDir number The direction, from which to look for CNavAreas, see Enums/NavDir.
---@return table A table of all CNavAreas with one-way connection to this CNavArea from given direction. Returns an empty table if there are no one-way incoming connections to this CNavArea from given direction.
function CNavArea:GetIncomingConnectionsAtSide(navDir) end

---[SERVER] Returns all CNavLadders that have a ( one or two way ) connection from this CNavArea.
--- See CNavArea:GetLaddersAtSide for a function that only returns CNavLadders in given direction.
---@return table The CNavLadders that have a ( one or two way ) connection from this CNavArea.
function CNavArea:GetLadders() end

---[SERVER] Returns all CNavLadders that have a ( one or two way ) connection from ( one and two way ) this CNavArea in given direction.
--- See CNavArea:GetLadders for a function that returns CNavLadder from/in all sides/directions.
---@param navDir number The direction, in which to look for CNavLadders. 0 = Up ( LadderDirectionType::LADDER_UP ) 1 = Down ( LadderDirectionType::LADDER_DOWN )
---@return table The CNavLadders that have a ( one or two way ) connection from this CNavArea in given direction.
function CNavArea:GetLaddersAtSide(navDir) end

---[SERVER] Returns the parent CNavArea
---@return CNavArea The parent CNavArea
function CNavArea:GetParent() end

---[SERVER] Returns how this CNavArea is connected to its parent.
---@return number See Enums/NavTraverseType
function CNavArea:GetParentHow() end

---[SERVER] Returns the Place of the nav area.
---@return string The place of the nav area, or no value if it doesn't have a place set.
function CNavArea:GetPlace() end

---[SERVER] Returns a random CNavArea that has an outgoing ( one or two way ) connection from this CNavArea in given direction.
---@param navDir number The direction, in which to look for CNavAreas, see Enums/NavDir.
---@return CNavArea The random CNavArea that has an outgoing ( one or two way ) connection from this CNavArea in given direction, if any.
function CNavArea:GetRandomAdjacentAreaAtSide(navDir) end

---[SERVER] Returns a random point on the nav area.
---@return Vector The random point on the nav area.
function CNavArea:GetRandomPoint() end

---[SERVER] Returns the width this Nav Area.
---@return number 
function CNavArea:GetSizeX() end

---[SERVER] Returns the height of this Nav Area.
---@return number 
function CNavArea:GetSizeY() end

---[SERVER] Returns the total cost when passing from starting area to the goal area through this node. Set by CNavArea:SetTotalCost.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@return number The total cost
function CNavArea:GetTotalCost() end

---[SERVER] Returns the elevation of this Nav Area at the given position.
---@param pos Vector The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task.
---@return number The elevation.
function CNavArea:GetZ(pos) end

---[SERVER] Returns true if the given CNavArea has this attribute flag set.
---@param attribs number Attribute mask to check for, see Enums/NAV_MESH
---@return boolean True if the CNavArea matches the given mask. False otherwise.
function CNavArea:HasAttributes(attribs) end

---[SERVER] Returns whether the nav area is blocked or not, i.e. whether it can be walked through or not.
---@param teamID number The team ID to test, -2 = any team. Only 2 actual teams are available, 0 and 1.
---@param ignoreNavBlockers boolean Whether to ignore func_nav_blocker entities.
---@return boolean Whether the area is blocked or not
function CNavArea:IsBlocked(teamID, ignoreNavBlockers) end

---[SERVER] Returns whether this node is in the Closed List.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@return boolean Whether this node is in the Closed List.
function CNavArea:IsClosed() end

---[SERVER] Returns whether this CNavArea can completely (i.e. all corners of this area can see all corners of the given area) see the given CNavArea.
---@param area CNavArea The CNavArea to test.
---@return boolean Whether the given area is visible from this area
function CNavArea:IsCompletelyVisible(area) end

---[SERVER] Returns whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea.
--- See CNavArea:IsConnectedAtSide for a function that only checks for outgoing connections in one direction.
---@param navArea CNavArea The CNavArea to test against.
---@return boolean Whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea.
function CNavArea:IsConnected(navArea) end

---[SERVER] Returns whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea in given direction.
--- See CNavArea:IsConnected for a function that checks all sides.
---@param navArea CNavArea The CNavArea to test against.
---@param navDirType number The direction, in which to look for the connection. See Enums/NavDir
---@return boolean Whether this CNavArea has an outgoing ( one or two way ) connection to given CNavArea in given direction.
function CNavArea:IsConnectedAtSide(navArea, navDirType) end

---[SERVER] Returns whether this Nav Area is in the same plane as the given one.
---@param navArea CNavArea The Nav Area to test.
---@return boolean Whether we're coplanar or not.
function CNavArea:IsCoplanar(navArea) end

---[SERVER] Returns whether this Nav Area is flat within the tolerance of the nav_coplanar_slope_limit_displacement and nav_coplanar_slope_limit convars.
---@return boolean Whether this CNavArea is mostly flat.
function CNavArea:IsFlat() end

---[SERVER] Returns whether this area is in the Open List.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@return boolean Whether this area is in the Open List.
function CNavArea:IsOpen() end

---[SERVER] Returns whether the Open List is empty or not.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@return boolean Whether the Open List is empty or not.
function CNavArea:IsOpenListEmpty() end

---[SERVER] Returns if this position overlaps the Nav Area within the given tolerance.
---@param pos Vector The overlapping position to test.
---@param tolerance number The tolerance of the overlapping, set to 0 for no tolerance.
---@return boolean Whether the given position overlaps the Nav Area or not.
function CNavArea:IsOverlapping(pos, tolerance) end

---[SERVER] Returns true if this CNavArea is overlapping the given CNavArea.
---@param navArea CNavArea The CNavArea to test against.
---@return boolean True if the given CNavArea overlaps this CNavArea at any point.
function CNavArea:IsOverlappingArea(navArea) end

---[SERVER] Returns whether this CNavArea can see given position.
---@param pos Vector The position to test.
---@param ignoreEnt Entity If set, the given entity will be ignored when doing LOS tests
---@return boolean Whether the given position is visible from this area
function CNavArea:IsPartiallyVisible(pos, ignoreEnt) end

---[SERVER] Returns whether this CNavArea can potentially see the given CNavArea.
---@param area CNavArea The CNavArea to test.
---@return boolean Whether the given area is visible from this area
function CNavArea:IsPotentiallyVisible(area) end

---[SERVER] Returns if we're shaped like a square.
---@return boolean If we're a square or not.
function CNavArea:IsRoughlySquare() end

---[SERVER] Whether this Nav Area is placed underwater.
---@return boolean Whether we're underwater or not.
function CNavArea:IsUnderwater() end

---[SERVER] Returns whether this CNavArea is valid or not.
---@return boolean Whether this CNavArea is valid or not.
function CNavArea:IsValid() end

---[SERVER] Returns whether we can be seen from the given position.
---@param pos Vector The position to check.
---@return boolean, Vector boolean - Whether we can be seen or not.
---@return boolean, Vector Vector - If we can be seen, this is returned with either the center or one of the corners of the Nav Area.
function CNavArea:IsVisible(pos) end

---[SERVER] Drops a corner or all corners of a CNavArea to the ground below it.
---@param corner number The corner(s) to drop, uses Enums/NavCorner
function CNavArea:PlaceOnGround(corner) end

---[SERVER] Removes a CNavArea from the Open List with the lowest cost to traverse to from the starting node, and returns it.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@return CNavArea The CNavArea from the Open List with the lowest cost to traverse to from the starting node.
function CNavArea:PopOpenList() end

---[SERVER] Removes the given nav area.
function CNavArea:Remove() end

---[SERVER] Removes this node from the Closed List.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
function CNavArea:RemoveFromClosedList() end

---[SERVER] Sets the attributes for given CNavArea.
---@param attribs number The attribute bitflag. See Enums/NAV_MESH
function CNavArea:SetAttributes(attribs) end

---[SERVER] Sets the position of a corner of a nav area.
---@param corner number The corner to set, uses Enums/NavCorner
---@param position Vector The new position to set.
function CNavArea:SetCorner(corner, position) end

---[SERVER] Sets the cost from starting area this area when pathfinding.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@param cost number The cost so far
function CNavArea:SetCostSoFar(cost) end

---[SERVER] Sets the new parent of this CNavArea.
---@param parent CNavArea The new parent to set
---@param how number How we get from parent to us using Enums/NavTraverseType
function CNavArea:SetParent(parent, how) end

---[SERVER] Sets the Place of the nav area.
--- There is a limit of 256 Places per nav file.
---@param place string Set to "" to remove place from the nav area.
---@return boolean Returns true of operation succeeded, false otherwise.
function CNavArea:SetPlace(place) end

---[SERVER] Sets the total cost when passing from starting area to the goal area through this node.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
---@param cost number The total cost of the path to set. Must be above or equal 0.
function CNavArea:SetTotalCost(cost) end

---[SERVER] Moves this open list to appropriate position based on its CNavArea:GetTotalCost compared to the total cost of other areas in the open list.
--- Used in pathfinding via the A* algorithm.
--- More information can be found on the Simple Pathfinding page.
function CNavArea:UpdateOnOpenList() end

---@class CNavLadder
local CNavLadder = {}

---[SERVER] Connects this ladder to a CNavArea with a one way connection. ( From this ladder to the target area ).
--- See CNavArea:ConnectTo for making the connection from area to ladder.
---@param area CNavArea The area this ladder leads to.
function CNavLadder:ConnectTo(area) end

---[SERVER] Disconnects this ladder from given area in a single direction.
---@param area CNavArea The CNavArea this to disconnect from.
function CNavLadder:Disconnect(area) end

---[SERVER] Returns the bottom most position of the ladder.
---@return Vector The bottom most position of the ladder.
function CNavLadder:GetBottom() end

---[SERVER] Returns the bottom area of the CNavLadder.
---@return CNavArea 
function CNavLadder:GetBottomArea() end

---[SERVER] Returns this CNavLadders unique ID.
---@return number The unique ID.
function CNavLadder:GetID() end

---[SERVER] Returns the length of the ladder.
---@return number The length of the ladder.
function CNavLadder:GetLength() end

---[SERVER] Returns the direction of this CNavLadder. ( The direction in which players back will be facing if they are looking directly at the ladder )
---@return Vector The direction of this CNavLadder.
function CNavLadder:GetNormal() end

---[SERVER] Returns the world position based on given height relative to the ladder.
---@param height number The Z position in world space coordinates.
---@return Vector The closest point on the ladder to that height.
function CNavLadder:GetPosAtHeight(height) end

---[SERVER] Returns the topmost position of the ladder.
---@return Vector The topmost position of the ladder.
function CNavLadder:GetTop() end

---[SERVER] Returns the top behind CNavArea of the CNavLadder.
---@return CNavArea The top behind CNavArea of the CNavLadder.
function CNavLadder:GetTopBehindArea() end

---[SERVER] Returns the top forward CNavArea of the CNavLadder.
---@return CNavArea The top forward CNavArea of the CNavLadder.
function CNavLadder:GetTopForwardArea() end

---[SERVER] Returns the top left CNavArea of the CNavLadder.
---@return CNavArea The top left CNavArea of the CNavLadder.
function CNavLadder:GetTopLeftArea() end

---[SERVER] Returns the top right CNavArea of the CNavLadder.
---@return CNavArea The top right CNavArea of the CNavLadder.
function CNavLadder:GetTopRightArea() end

---[SERVER] Returns the width of the ladder in Hammer Units.
---@return number The width of the ladder in Hammer Units.
function CNavLadder:GetWidth() end

---[SERVER] Returns whether this CNavLadder has an outgoing ( one or two way ) connection to given CNavArea in given direction.
---@param navArea CNavArea The CNavArea to test against.
---@param navDirType number The direction, in which to look for the connection. See Enums/NavDir
---@return boolean Whether this CNavLadder has an outgoing ( one or two way ) connection to given CNavArea in given direction.
function CNavLadder:IsConnectedAtSide(navArea, navDirType) end

---[SERVER] Returns whether this CNavLadder is valid or not.
---@return boolean Whether this CNavLadder is valid or not.
function CNavLadder:IsValid() end

---[SERVER] Removes the given nav ladder.
function CNavLadder:Remove() end

---[SERVER] Sets the bottom area of the CNavLadder.
---@param area CNavArea 
function CNavLadder:SetBottomArea(area) end

---[SERVER] Sets the top behind area of the CNavLadder.
---@param area CNavArea 
function CNavLadder:SetTopBehindArea(area) end

---[SERVER] Sets the top forward area of the CNavLadder.
---@param area CNavArea 
function CNavLadder:SetTopForwardArea(area) end

---[SERVER] Sets the top left area of the CNavLadder.
---@param area CNavArea 
function CNavLadder:SetTopLeftArea(area) end

---[SERVER] Sets the top right area of the CNavLadder.
---@param area CNavArea 
function CNavLadder:SetTopRightArea(area) end

---@class CNewParticleEffect
local CNewParticleEffect = {}

---[CLIENT] Adds a control point to the particle system.
--- This function will not work if the CNewParticleEffect:GetOwner entity is not valid
---@param cpID number The control point ID, 0 to 63.
---@param ent Entity The entity to attach the control point to.
---@param partAttachment number See Enums/PATTACH.
---@param entAttachment number The attachment ID on the entity to attach the particle system to
---@param offset Vector The offset from the Entity:GetPos of the entity we are attaching this CP to.
function CNewParticleEffect:AddControlPoint(cpID, ent, partAttachment, entAttachment, offset) end

---[CLIENT] 
---@return boolean 
function CNewParticleEffect:GetAutoUpdateBBox() end

---[CLIENT] Returns the name of the particle effect this system is set to emit.
---@return string The name of the particle effect.
function CNewParticleEffect:GetEffectName() end

---[CLIENT] Returns the highest control point number for given particle system.
---@return boolean The highest control point number for given particle system, 0 to 63.
function CNewParticleEffect:GetHighestControlPoint() end

---[CLIENT] Returns the owner of the particle system, the entity the particle system is attached to.
---@return Entity The owner of the particle system.
function CNewParticleEffect:GetOwner() end

---[CLIENT] Returns whether the particle system has finished emitting particles or not.
---@return boolean Whether the particle system has finished emitting particles or not.
function CNewParticleEffect:IsFinished() end

---[CLIENT] Returns whether the particle system is valid or not.
---@return boolean Whether the particle system is valid or not.
function CNewParticleEffect:IsValid() end

---[CLIENT] Returns whether the particle system is intended to be used on a view model?
---@return boolean 
function CNewParticleEffect:IsViewModelEffect() end

---[CLIENT] Forces the particle system to render using current rendering context.
--- Can be used to render the particle system in vgui panels, etc.
--- Used in conjunction with CNewParticleEffect:SetShouldDraw.
function CNewParticleEffect:Render() end

---[CLIENT] Forces the particle system to restart emitting particles.
function CNewParticleEffect:Restart() end

---[CLIENT] Sets a value for given control point.
---@param cpID number The control point ID, 0 to 63.
---@param value Vector The value to set for given control point.
function CNewParticleEffect:SetControlPoint(cpID, value) end

---[CLIENT] Essentially makes child control point follow the parent entity.
---@param child number The child control point ID, 0 to 63.
---@param parent Entity The parent entity to follow.
function CNewParticleEffect:SetControlPointEntity(child, parent) end

---[CLIENT] Sets the forward direction for given control point.
---@param cpID number The control point ID, 0 to 63.
---@param forward Vector The forward direction for given control point
function CNewParticleEffect:SetControlPointForwardVector(cpID, forward) end

---[CLIENT] Sets the orientation for given control point.
---@param cpID number The control point ID, 0 to 63.
---@param forward Vector The forward direction for given control point
---@param right Vector The right direction for given control point
---@param up Vector The up direction for given control point
function CNewParticleEffect:SetControlPointOrientation(cpID, forward, right, up) end

---[CLIENT] Essentially makes child control point follow the parent control point.
---@param child number The child control point ID, 0 to 63.
---@param parent number The parent control point ID, 0 to 63.
function CNewParticleEffect:SetControlPointParent(child, parent) end

---[CLIENT] Sets the right direction for given control point.
---@param cpID number The control point ID, 0 to 63.
---@param right Vector The right direction for given control point.
function CNewParticleEffect:SetControlPointRightVector(cpID, right) end

---[CLIENT] Sets the upward direction for given control point.
---@param cpID number The control point ID, 0 to 63.
---@param upward Vector The upward direction for given control point
function CNewParticleEffect:SetControlPointUpVector(cpID, upward) end

---[CLIENT] 
---@param isViewModel boolean 
function CNewParticleEffect:SetIsViewModelEffect(isViewModel) end

---[CLIENT] Forces the particle system to stop automatically rendering.
--- Used in conjunction with CNewParticleEffect:Render.
---@param should boolean Whether to automatically draw the particle effect or not.
function CNewParticleEffect:SetShouldDraw(should) end

---[CLIENT] Sets the sort origin for given particle system. This is used as a helper to determine which particles are in front of which.
---@param origin Vector The new sort origin.
function CNewParticleEffect:SetSortOrigin(origin) end

---[CLIENT] Starts the particle emission.
---@param infiniteOnly boolean 
function CNewParticleEffect:StartEmission(infiniteOnly) end

---[CLIENT] Stops the particle emission.
---@param infiniteOnly boolean 
---@param removeAllParticles boolean 
---@param wakeOnStop boolean 
function CNewParticleEffect:StopEmission(infiniteOnly, removeAllParticles, wakeOnStop) end

---[CLIENT] Stops particle emission and destroys all particles instantly. Also detaches the particle effect from the entity it was attached to.
--- This function will work identically to CNewParticleEffect:StopEmission( false, true ) if  CNewParticleEffect:GetOwner entity is not valid.
--- Consider using CNewParticleEffect:StopEmission( false, true ) instead, which has same effect, but doesn't require owner entity, and does't detach the particle system from its entity.
function CNewParticleEffect:StopEmissionAndDestroyImmediately() end

---@class CRecipientFilter
local CRecipientFilter = {}

---[SERVER] Adds all players to the recipient filter.
function CRecipientFilter:AddAllPlayers() end

---[SERVER] Adds all players that are in the same PAS (Potentially Audible Set) as this position.
---@param pos Vector A position that players may be able to hear, usually the position of an entity the sound is playing played from.
function CRecipientFilter:AddPAS(pos) end

---[SERVER] Adds a player to the recipient filter
---@param Player Player Player to add to the recipient filter.
function CRecipientFilter:AddPlayer(Player) end

---[SERVER] Adds all players that are in the same PVS(Potential Visibility Set) as this position.
---@param Position Vector PVS position that players may be able to see.
function CRecipientFilter:AddPVS(Position) end

---[SERVER] Adds all players that are on the given team to the filter.
---@param teamid number Team index to add players from.
function CRecipientFilter:AddRecipientsByTeam(teamid) end

---[SERVER] Returns the number of valid players in the recipient filter.
---@return number Number of valid players in the recipient filter.
function CRecipientFilter:GetCount() end

---[SERVER] Returns a table of all valid players currently in the recipient filter.
---@return table A table of all valid players currently in the recipient filter.
function CRecipientFilter:GetPlayers() end

---[SERVER] Removes all players from the recipient filter.
function CRecipientFilter:RemoveAllPlayers() end

---[SERVER] Removes all players from the filter that are in Potentially Audible Set for given position.
---@param position Vector The position to test
function CRecipientFilter:RemovePAS(position) end

---[SERVER] Removes the player from the recipient filter.
---@param Player Player The player that should be in the recipient filter if you call this function.
function CRecipientFilter:RemovePlayer(Player) end

---[SERVER] Removes all players that can see this PVS from the recipient filter.
---@param pos Vector Position that players may be able to see.
function CRecipientFilter:RemovePVS(pos) end

---[SERVER] Removes all players that are on the given team from the filter.
---@param teamid number Team index to remove players from.
function CRecipientFilter:RemoveRecipientsByTeam(teamid) end

---[SERVER] Removes all players that are not on the given team from the filter.
---@param teamid number Team index.
function CRecipientFilter:RemoveRecipientsNotOnTeam(teamid) end

---@class CSEnt
local CSEnt = {}

---[CLIENT] Removes the clientside entity
function CSEnt:Remove() end

---@class CSoundPatch
local CSoundPatch = {}

---[SHARED] Adjust the pitch, alias the speed at which the sound is being played.
--- This invokes the GM:EntityEmitSound.
---@param pitch number The pitch can range from 0-255. Where 100 is the original pitch.
---@param deltaTime number The time to fade from previous to the new pitch.
function CSoundPatch:ChangePitch(pitch, deltaTime) end

---[SHARED] Adjusts the volume of the sound played.
--- Appears to only work while the sound is being played.
---@param volume number The volume ranges from 0 to 1.
---@param deltaTime number Time to fade the volume from previous to new value from.
function CSoundPatch:ChangeVolume(volume, deltaTime) end

---[SHARED] Fades out the volume of the sound from the current volume to 0 in the given amount of seconds.
---@param seconds number Fade time.
function CSoundPatch:FadeOut(seconds) end

---[SHARED] Returns the DSP ( Digital Signal Processor ) effect for the sound.
---@return number The DSP effects of the sound List of DSP's are Pick from the here.
function CSoundPatch:GetDSP() end

---[SHARED] Returns the current pitch.
---@return number The current pitch, can range from 0-255.
function CSoundPatch:GetPitch() end

---[SHARED] Returns the current sound level.
---@return number The current sound level, see Enums/SNDLVL.
function CSoundPatch:GetSoundLevel() end

---[SHARED] Returns the current volume.
---@return number The current volume, ranging from 0 to 1.
function CSoundPatch:GetVolume() end

---[SHARED] Returns whenever the sound is being played.
---@return boolean Is playing or not
function CSoundPatch:IsPlaying() end

---[SHARED] Starts to play the sound. This will reset the sound's volume and pitch to their default values. See CSoundPatch:PlayEx
function CSoundPatch:Play() end

---[SHARED] Same as CSoundPatch:Play but with 2 extra arguments allowing to set volume and pitch directly.
---@param volume number The volume ranges from 0 to 1.
---@param pitch number The pitch can range from 0-255.
function CSoundPatch:PlayEx(volume, pitch) end

---[SHARED] Sets the DSP (Digital Signal Processor) effect for the sound. Similar to Player:SetDSP but for individual sounds.
---@param dsp number The DSP effect to set. Pick from the list of DSP's
function CSoundPatch:SetDSP(dsp) end

---[SHARED] Sets the sound level in decibel.
---@param level number The sound level in decibel. See Enums/SNDLVL
function CSoundPatch:SetSoundLevel(level) end

---[SHARED] Stops the sound from being played.
--- This will not work if the entity attached to this sound patch (specified by CreateSound) is invalid.Issue Tracker: 3260
function CSoundPatch:Stop() end

---@class CTakeDamageInfo
local CTakeDamageInfo = {}

---[SHARED] Increases the damage by damageIncrease.
---@param damageIncrease number The damage to add.
function CTakeDamageInfo:AddDamage(damageIncrease) end

---[SHARED] Returns the ammo type used by the weapon that inflicted the damage.
---@return number Ammo type ID
function CTakeDamageInfo:GetAmmoType() end

---[SHARED] Returns the attacker ( character who originated the attack ), for example a player or an NPC that shot the weapon.
---@return Entity The attacker
function CTakeDamageInfo:GetAttacker() end

---[SHARED] Returns the initial unmodified by skill level ( game.GetSkillLevel ) damage.
---@return number baseDamage
function CTakeDamageInfo:GetBaseDamage() end

---[SHARED] Returns the total damage.
---@return number damage
function CTakeDamageInfo:GetDamage() end

---[SHARED] Gets the current bonus damage.
---@return number Bonus damage
function CTakeDamageInfo:GetDamageBonus() end

---[SHARED] Gets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.
---@return number The custom damage type
function CTakeDamageInfo:GetDamageCustom() end

---[SHARED] Returns a vector representing the damage force.
--- Can be set with CTakeDamageInfo:SetDamageForce.
---@return Vector The damage force
function CTakeDamageInfo:GetDamageForce() end

---[SHARED] Returns the position where the damage was or is going to be applied to.
--- Can be set using CTakeDamageInfo:SetDamagePosition.
---@return Vector The damage position
function CTakeDamageInfo:GetDamagePosition() end

---[SHARED] Returns a bitflag which indicates the damage type(s) of the damage.
--- Consider using CTakeDamageInfo:IsDamageType instead. Value returned by this function can contain multiple damage types.
---@return number Damage type(s), a combination of Enums/DMG
function CTakeDamageInfo:GetDamageType() end

---[SHARED] Returns the inflictor of the damage. This is not necessarily a weapon.
--- For hitscan weapons this is the weapon.
--- For projectile weapons this is the projectile.
--- For a more reliable method of getting the weapon that damaged an entity, use GetAttacker with GetActiveWeapon.
---@return Entity The inflictor
function CTakeDamageInfo:GetInflictor() end

---[SHARED] Returns the maximum damage. See CTakeDamageInfo:SetMaxDamage
---@return number maxDmg
function CTakeDamageInfo:GetMaxDamage() end

---[SHARED] Returns the initial, unmodified position where the damage occured.
---@return Vector position
function CTakeDamageInfo:GetReportedPosition() end

---[SHARED] Returns true if the damage was caused by a bullet.
---@return boolean isBulletDmg
function CTakeDamageInfo:IsBulletDamage() end

---[SHARED] Returns whenever the damageinfo contains the damage type specified.
---@param dmgType number Damage type to test. See Enums/DMG.
---@return boolean Whether this damage contains specified damage type or not
function CTakeDamageInfo:IsDamageType(dmgType) end

---[SHARED] Returns whenever the damageinfo contains explosion damage.
---@return boolean isExplDamage
function CTakeDamageInfo:IsExplosionDamage() end

---[SHARED] Returns whenever the damageinfo contains fall damage.
---@return boolean isFallDmg
function CTakeDamageInfo:IsFallDamage() end

---[SHARED] Scales the damage by the given value.
---@param scale number Value to scale the damage with.
function CTakeDamageInfo:ScaleDamage(scale) end

---[SHARED] Changes the ammo type used by the weapon that inflicted the damage.
---@param ammoType number Ammo type ID
function CTakeDamageInfo:SetAmmoType(ammoType) end

---[SHARED] Sets the attacker ( character who originated the attack ) of the damage, for example a player or an NPC.
---@param ent Entity The entity to be set as the attacker.
function CTakeDamageInfo:SetAttacker(ent) end

---[SHARED] Sets the initial unmodified by skill level ( game.GetSkillLevel ) damage. This function will not update or touch CTakeDamageInfo:GetDamage.
---@param number number baseDamage
function CTakeDamageInfo:SetBaseDamage(number) end

---[SHARED] Sets the amount of damage.
---@param damage number The value to set the absolute damage to.
function CTakeDamageInfo:SetDamage(damage) end

---[SHARED] Sets the bonus damage. Bonus damage isn't automatically applied, so this will have no outer effect by default.
---@param damage number The extra damage to be added.
function CTakeDamageInfo:SetDamageBonus(damage) end

---[SHARED] Sets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.
---@param DamageType number Any integer - can be based on your own custom enums.
function CTakeDamageInfo:SetDamageCustom(DamageType) end

---[SHARED] Sets the directional force of the damage.
--- This function seems to have no effect on player knockback. To disable knockback entirely, see EFL_NO_DAMAGE_FORCES or use workaround example below.
---@param force Vector The vector to set the force to.
function CTakeDamageInfo:SetDamageForce(force) end

---[SHARED] Sets the position of where the damage gets applied to.
---@param pos Vector The position where the damage will be applied.
function CTakeDamageInfo:SetDamagePosition(pos) end

---[SHARED] Sets the damage type.
---@param type number The damage type, see Enums/DMG.
function CTakeDamageInfo:SetDamageType(type) end

---[SHARED] Sets the inflictor of the damage for example a weapon.
--- For hitscan/bullet weapons this should the weapon.
--- For projectile ( rockets, etc ) weapons this should be the projectile.
---@param inflictor Entity The new inflictor.
function CTakeDamageInfo:SetInflictor(inflictor) end

---[SHARED] Sets the maximum damage this damage event can cause.
---@param maxDamage number Maximum damage value.
function CTakeDamageInfo:SetMaxDamage(maxDamage) end

---[SHARED] Sets the origin of the damage.
---@param pos Vector The location of where the damage is originating
function CTakeDamageInfo:SetReportedPosition(pos) end

---[SHARED] Subtracts the specified amount from the damage.
---@param damage number Value to subtract.
function CTakeDamageInfo:SubtractDamage(damage) end

---@class CUserCmd
local CUserCmd = {}

---[SHARED] Sets the buttons as a bitflag. See also CUserCmd:GetButtons.
--- If you are looking to affect player movement, you may need to use CUserCmd:SetForwardMove instead of setting the keys.
---@param buttons number Bitflag representing which buttons are "down", see Enums/IN.
function CUserCmd:SetButtons(buttons) end

---[SHARED] Adds a single key to the active buttons bitflag. See also CUserCmd:SetButtons.
---@param key number Key to add, see Enums/IN.
function CUserCmd:AddKey(key) end

---[SHARED] Removes all keys from the command.
--- If you are looking to affect player movement, you may need to use CUserCmd:ClearMovement instead of clearing the buttons.
function CUserCmd:ClearButtons() end

---[SHARED] Clears the movement from the command.
--- See also CUserCmd:SetForwardMove, CUserCmd:SetSideMove and  CUserCmd:SetUpMove.
function CUserCmd:ClearMovement() end

---[SHARED] Returns an increasing number representing the index of the user cmd.
--- The value returned is occasionally 0 inside GM:CreateMove and GM:StartCommand. It is advised to check for a non-zero value if you wish to get the correct number.
---@return number The command number
function CUserCmd:CommandNumber() end

---[SHARED] Returns a bitflag indicating which buttons are pressed.
---@return number Pressed buttons, see Enums/IN
function CUserCmd:GetButtons() end

---[SHARED] The speed the client wishes to move forward with, negative if the clients wants to move backwards.
---@return number The desired speed
function CUserCmd:GetForwardMove() end

---[SHARED] Gets the current impulse from the client, usually 0. See impulses list and some GMod specific impulses.
---@return number The impulse
function CUserCmd:GetImpulse() end

---[SHARED] Returns the scroll delta as whole number.
---@return number Scroll delta
function CUserCmd:GetMouseWheel() end

---[SHARED] Returns the delta of the angular horizontal mouse movement of the player.
---@return number xDelta
function CUserCmd:GetMouseX() end

---[SHARED] Returns the delta of the angular vertical mouse movement of the player.
---@return number yDelta
function CUserCmd:GetMouseY() end

---[SHARED] The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.
---@return number requestSpeed
function CUserCmd:GetSideMove() end

---[SHARED] The speed the client wishes to move up with, negative if the clients wants to move down.
---@return number requestSpeed
function CUserCmd:GetUpMove() end

---[SHARED] Gets the direction the player is looking in.
---@return Angle The direction the player is looking in.
function CUserCmd:GetViewAngles() end

---[SHARED] When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.
--- This will never return true clientside.
---@return boolean isForced
function CUserCmd:IsForced() end

---[SHARED] Returns true if the specified button(s) is pressed.
---@param key number Bitflag representing which button to check, see Enums/IN.
---@return boolean Is key down or not
function CUserCmd:KeyDown(key) end

---[SHARED] Removes a key bit from the current key bitflag.
--- For movement you will want to use CUserCmd:SetForwardMove, CUserCmd:SetUpMove and CUserCmd:SetSideMove.
---@param button number Bitflag to be removed from the key bitflag, see Enums/IN.
function CUserCmd:RemoveKey(button) end

---[SHARED] Forces the associated player to select a weapon. This is used internally in the default HL2 weapon selection HUD.
--- This may not work immediately if the current command is in prediction. Use input.SelectWeapon to switch the weapon from the client when the next available command can do so.
--- This is the ideal function to use to create a custom weapon selection HUD, as it allows prediction to run properly for WEAPON:Deploy and GM:PlayerSwitchWeapon
---@param weapon Weapon The weapon entity to select.
function CUserCmd:SelectWeapon(weapon) end

---[SHARED] Sets the buttons as a bitflag. See also CUserCmd:GetButtons.
--- If you are looking to affect player movement, you may need to use CUserCmd:SetForwardMove instead of setting the keys.
---@param buttons number Bitflag representing which buttons are "down", see Enums/IN.
function CUserCmd:SetButtons(buttons) end

---[SHARED] Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.
--- See also CUserCmd:ClearMovement, CUserCmd:SetSideMove and CUserCmd:SetUpMove.
---@param speed number The new speed to request. The client will not be able to move faster than their set walk/sprint speed.
function CUserCmd:SetForwardMove(speed) end

---[SHARED] Sets the impulse command to be sent to the server.
--- Here are a few examples of impulse numbers:
--- 
--- 100 toggles their flashlight
--- 101 gives the player all Half-Life 2 weapons with sv_cheats set to 1
--- 200 toggles holstering / restoring the current weapon
--- When holstered, the EF_NODRAW flag is set on the active weapon.
--- 154 toggles noclip
--- 
--- See full list
---@param impulse number The impulse to send.
function CUserCmd:SetImpulse(impulse) end

---[SHARED] Sets the scroll delta.
---@param speed number The scroll delta.
function CUserCmd:SetMouseWheel(speed) end

---[SHARED] Sets the delta of the angular horizontal mouse movement of the player.
--- See also CUserCmd:SetMouseY.
---@param speed number Angular horizontal move delta.
function CUserCmd:SetMouseX(speed) end

---[SHARED] Sets the delta of the angular vertical mouse movement of the player.
--- See also CUserCmd:SetMouseX.
---@param speed number Angular vertical move delta.
function CUserCmd:SetMouseY(speed) end

---[SHARED] Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.
--- See also CUserCmd:SetForwardMove and  CUserCmd:SetUpMove.
---@param speed number The new speed to request.
function CUserCmd:SetSideMove(speed) end

---[SHARED] Sets speed the client wishes to move upwards with, negative to move down.
--- See also CUserCmd:SetSideMove and  CUserCmd:SetForwardMove.
--- This function does not move the client up/down ladders. To force ladder movement, consider CUserCMD:SetButtons and use IN_FORWARD from Enums/IN.
---@param speed number The new speed to request.
function CUserCmd:SetUpMove(speed) end

---[SHARED] Sets the direction the client wants to move in.
--- For human players, the pitch (vertical) angle should be clamped to +/- 89° to prevent the player's view from glitching.For fake clients (those created with player.CreateNextBot), this functionally dictates the 'move angles' of the bot. This typically functions separately from the colloquial view angles. This can be utilized by CUserCmd:SetForwardMove and its related functions.
---@param viewAngle Angle New view angles.
function CUserCmd:SetViewAngles(viewAngle) end

---[SHARED] Returns tick count since joining the server.
--- This will always return 0 for bots.Returns 0 clientside during prediction calls. If you are trying to use CUserCmd:Set*() on the client in a movement or command hook, keep doing so till TickCount returns a non-zero number to maintain prediction.
---@return number The amount of ticks passed since joining the server.
function CUserCmd:TickCount() end

---@class Color
local Color = {}

---[SHARED] Sets the red, green, blue, and alpha of the color.
---@param r number The red component
---@param g number The green component
---@param b number The blue component
---@param a number The alpha component
function Color:SetUnpacked(r, g, b, a) end

---[SHARED] Converts a Color into HSL color space. This calls ColorToHSL internally.
---@return number, number, number number - The hue in degrees [0, 360).
---@return number, number, number number - The saturation in the range [0, 1].
---@return number, number, number number - The lightness in the range [0, 1].
function Color:ToHSL() end

---[SHARED] Converts a Color into HSV color space. This calls ColorToHSV internally.
---@return number, number, number number - The hue in degrees [0, 360).
---@return number, number, number number - The saturation in range [0, 1].
---@return number, number, number number - The value in range [0, 1].
function Color:ToHSV() end

---[SHARED] Returns the color as a table with four elements.
---@return table The table with elements 1 = r, 2 = g, 3 = b, 4 = a.
function Color:ToTable() end

---[SHARED] Translates the Color into a Vector, losing the alpha channel.
--- This will also range the values from 0 - 255 to 0 - 1
--- r / 255 -> x
--- g / 255 -> y
--- b / 255 -> z
--- This is the opposite of Vector:ToColor
---@return Vector The created Vector
function Color:ToVector() end

---[SHARED] Returns the red, green, blue, and alpha of the color.
---@return number, number, number, number number - Red
---@return number, number, number, number number - Green
---@return number, number, number, number number - Blue
---@return number, number, number, number number - Alpha
function Color:Unpack() end

---@class ConVar
local ConVar = {}

---[SHARED] Tries to convert the current string value of a ConVar to a boolean.
---@return boolean The boolean value of the console variable. If the variable is numeric and not 0, the result will be true. Otherwise the result will be false.
function ConVar:GetBool() end

---[SHARED] Returns the default value of the ConVar
---@return string The default value of the console variable.
function ConVar:GetDefault() end

---[SHARED] Returns the Enums/FCVAR flags of the ConVar
---@return number The bitflag. See Enums/FCVAR
function ConVar:GetFlags() end

---[SHARED] Attempts to convert the ConVar value to a float
---@return number The float value of the console variable. If the value cannot be converted to a float, it will return 0.
function ConVar:GetFloat() end

---[SHARED] Returns the help text assigned to that convar.
---@return string The help text
function ConVar:GetHelpText() end

---[SHARED] Attempts to convert the ConVar value to a integer.
---@return number The integer value of the console variable. If it fails to convert to an integer, it will return 0. All float/decimal values will be rounded down. ( With math.floor )
function ConVar:GetInt() end

---[SHARED] Returns the maximum value of the ConVar
---@return number The maximum value of the ConVar
function ConVar:GetMax() end

---[SHARED] Returns the minimum value of the ConVar
---@return number The minimum value of the ConVar
function ConVar:GetMin() end

---[SHARED] Returns the name of the ConVar.
---@return string The name of the console variable.
function ConVar:GetName() end

---[SHARED] Returns the current ConVar value as a string.
---@return string The current console variable value as a string.
function ConVar:GetString() end

---[SHARED] Returns whether the specified flag is set on the ConVar
---@param flag number The Enums/FCVAR flag to test
---@return boolean Whether the flag is set or not
function ConVar:IsFlagSet(flag) end

---[SHARED] Reverts ConVar to its default value
function ConVar:Revert() end

---[SHARED] Sets a ConVar's value to 1 or 0 based on the input boolean. This can only be ran on ConVars created from within Lua.
---@param value boolean Value to set the ConVar to.
function ConVar:SetBool(value) end

---[SHARED] Sets a ConVar's value to the input number.
--- This can only be ran on ConVars created from within Lua.
---@param value number Value to set the ConVar to.
function ConVar:SetFloat(value) end

---[SHARED] Sets a ConVar's value to the input number after converting it to an integer.
--- This can only be ran on ConVars created from within Lua.
---@param value number Value to set the ConVar to.
function ConVar:SetInt(value) end

---[SHARED] Sets a ConVar's value to the input string. This can only be ran on ConVars created from within Lua.
---@param value string Value to set the ConVar to.
function ConVar:SetString(value) end

---@class ContentHeader
local ContentHeader = {}

---[CLIENT] Creates a DermaMenu and adds a delete option before opening the menu
---@param style string 
---@param hookname string A Populate Hook like PopulateEntities
function ContentHeader:OpenMenu(style, hookname) end

---@class ContentIcon
local ContentIcon = {}

---[CLIENT] Returns the color set by ContentIcon:SetColor
---@return table See Color
function ContentIcon:GetColor() end

---[CLIENT] Returns the content type used to save and restore the content icon in a spawnlist.
---@return string The content type, for example "entity" or "weapon".
function ContentIcon:GetContentType() end

---[CLIENT] Returns a table of weapon classes for the content icon with "NPC" content type to be randomly chosen from when user tries to spawn the NPC.
---@return table A table of weapon classes to be chosen from when user tries to spawn the NPC.
function ContentIcon:GetNPCWeapon() end

---[CLIENT] Returns the internal "name" for the content icon, usually a class name for an entity.
---@return string Internal "name" to be used when user left clicks the icon.
function ContentIcon:GetSpawnName() end

---[CLIENT] A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a DermaMenu here with additional options.
function ContentIcon:OpenMenu() end

---[CLIENT] Sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon.
---@param adminOnly boolean Whether this content should be admin only or not
function ContentIcon:SetAdminOnly(adminOnly) end

---[CLIENT] Sets the color for the content icon. Currently is not used by the content icon panel.
---@param clr table The color to set. See Color
function ContentIcon:SetColor(clr) end

---[CLIENT] Sets the content type used to save and restore the content icon in a spawnlist.
---@param type string The content type, for example "entity" or "weapon"
function ContentIcon:SetContentType(type) end

---[CLIENT] Sets the material to be displayed as the content icon.
---@param path string Path to the icon to use.
function ContentIcon:SetMaterial(path) end

---[CLIENT] Sets the tool tip and the "nice" name to be displayed by the content icon.
---@param name string "Nice" name to display.
function ContentIcon:SetName(name) end

---[CLIENT] Sets a table of weapon classes for the content icon with "NPC" content type to be randomly chosen from when user tries to spawn the NPC.
---@param weapons table A table of weapon classes to be chosen from when user tries to spawn the NPC.
function ContentIcon:SetNPCWeapon(weapons) end

---[CLIENT] Sets the internal "name" for the content icon, usually a class name for an entity.
---@param name string Internal "name" to be used when user left clicks the icon.
function ContentIcon:SetSpawnName(name) end

---@class ContentSidebar
local ContentSidebar = {}

---[CLIENT] Creates a Save Notification which will be shown when SANDBOX:SpawnlistContentChanged has been called.
---@param style string 
---@param hookname string A Populate Hook like PopulateEntities
function ContentSidebar:CreateSaveNotification(style, hookname) end

---[CLIENT] Internally calls ContentSidebar:EnableSearch, ContentSidebar:CreateSaveNotification and creates a ContentSidebarToolbox which is accessible under ContentSidebar.Toolbox. Call the Hook SANDBOX:OpenToolbox to open the created Toolbox
function ContentSidebar:EnableModify() end

---[CLIENT] Creates a search bar which will be displayed over the Nodes.
---@param style string 
---@param hookname string A Populate Hook like PopulateEntities
function ContentSidebar:EnableSearch(style, hookname) end

---@class ContextBase
local ContextBase = {}

---[CLIENT] Called by spawnmenu functions (when creating a context menu) to fill this control with data.
---@param contextData table A two-membered table:  string convar - The console variable to use. Calls ContextBase:SetConVar. string label - The text to display inside the control's label.
function ContextBase:ControlValues(contextData) end

---[CLIENT] Returns the ConVar for the panel to change/handle, set by ContextBase:SetConVar
---@return string The ConVar for the panel to change.
function ContextBase:ConVar() end

---[CLIENT] Sets the ConVar for the panel to change/handle.
---@param cvar string The ConVar for the panel to change.
function ContextBase:SetConVar(cvar) end

---[CLIENT] You should override this function and use it to check whether your convar value changed.
function ContextBase:TestForChanges() end

---@class ControlPanel
local ControlPanel = {}

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- It is recommended to use DForm's members instead.
--- Adds a control to the control panel.
---@param type string The control type to add. The complete list is:  header textbox label checkbox/toggle slider propselect matselect ropematerial button numpad color combobox listbox materialgallery
---@param controlinfo table Each control takes their own table structure. You may search "AddControl" on GitHub for examples. Here is a full list of each type and the table members it requires:  header  description   textbox:  label (def: "Untitled") command   label:  text   checkbox, toggle (same thing):  label (def: "Untitled") command help (boolean, if true assumes label is a language string (#tool.toolname.stuff) and adds .help at the end)   slider: (DForm:NumSlider)  type (optional string, if equals float then 2 digits after the decimal will be used, otherwise 0) label (def: Untitled) command min (def: 0) max (def: 100) help (boolean, see above)   propselect:  (data goes directly to PropSelect's :ControlValues(data))   matselect:  (data goes directly to MatSelect's :ControlValues(data))   ropematerial:  convar (notice: NOT called command this time!)   button:  label / text (if label is missing will use text. Def: No Label) command   numpad:  command command2 label label2   color:  label red (convar) green (convar) blue (convar) alpha (convar)   combobox:  menubutton (if doesn't equal "1", becomes a listbox) folder options (optional, ha) cvars (optional)   listbox:  height (if set, becomes DListView, otherwise is CtrlListBox) label (def: unknown) options (optional)   materialgallery:  width (def: 32) height (def: 32) rows (def: 4) convar options
function ControlPanel:AddControl(type, controlinfo) end

---[CLIENT] Adds an item by calling DForm:AddItem.
---@param panel Panel Panel to add as an item to the control panel.
function ControlPanel:AddPanel(panel) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Alias of Panel:Clear.
function ControlPanel:ClearControls() end

---[CLIENT] Creates a CtrlColor (a color picker) panel and adds it as an item.
---@param label string The label for this color picker.
---@param convarR string Name of the convar that will store the R component of the selected color.
---@param convarG string Name of the convar that will store the G component of the selected color.
---@param convarB string Name of the convar that will store the B component of the selected color.
---@param convarA string Name of the convar that will store the A component of the selected color.
---@return Panel The created CtrlColor panel.
function ControlPanel:ColorPicker(label, convarR, convarG, convarB, convarA) end

---[CLIENT] Sets control values of the control panel.
---@param data table A two-membered table:  boolean closed - Sets if the control panel should be unexpanded. string label - The text to display inside the control's label.
function ControlPanel:ControlValues(data) end

---[CLIENT] Calls the given function with this panel as the only argument. Used by the spawnmenu to populate the control panel.
---@param func function A function that takes one argument:  ControlPanel panelToPopulate
function ControlPanel:FillViaFunction(func) end

---[CLIENT] Returns this control panel.
---@return ControlPanel The same control panel the function is being called on.
function ControlPanel:GetEmbeddedPanel() end

---[CLIENT] Creates a CtrlNumPad (a Sandbox key binder) panel and adds it as an item.
---@param label1 string The label for the left key binder.
---@param convar1 string The name of the convar that will store the key code for player selected key of the left key binder.
---@param label2 string If set and convar2 is set, the label for the right key binder.
---@param convar2 string If set and label2 is set, the name of the convar that will store the key code for player selected key of the right key binder.
---@return Panel The created CtrlNumPad panel.
function ControlPanel:KeyBinder(label1, convar1, label2, convar2) end

---[CLIENT] Creates a MatSelect panel and adds it as an item.
---@param convar string Calls MatSelect:SetConVar with this value.
---@param options table If specified, calls MatSelect:AddMaterial(key, value) for each table entry. If the table key is a number, the function will instead be called with the value as both arguments.
---@param autostretch boolean If specified, calls MatSelect:SetAutoHeight with this value.
---@param width number If specified, calls MatSelect:SetItemWidth with this value.
---@param height number If specified, calls MatSelect:SetItemHeight with this value.
---@return MatSelect The created MatSelect panel.
function ControlPanel:MatSelect(convar, options, autostretch, width, height) end

---[CLIENT] Creates a ControlPresets panel and adds it as an item.
---@param group string The preset group. Must be unique.
---@param cvarList table A table of convar names as keys and their defaults as the values. Typically the output of Tool:BuildConVarList.
---@return Panel The created ControlPresets panel.
function ControlPanel:ToolPresets(group, cvarList) end

---@class ControlPresets
local ControlPresets = {}

---[CLIENT] Adds a convar to be managed by this control.
---@param convar string The convar to add.
function ControlPresets:AddConVar(convar) end

---[CLIENT] Get a list of all Console Variables being managed by this panel.
---@return table numbered table of convars
function ControlPresets:GetConVars() end

---[CLIENT] Set the name label text.
---@param name string The text to put in the label
function ControlPresets:SetLabel(name) end

---@class DAdjustableModelPanel
local DAdjustableModelPanel = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by the panel to perform mouse capture operations when adjusting the model.
function DAdjustableModelPanel:CaptureMouse() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used.
function DAdjustableModelPanel:FirstPersonControls() end

---[CLIENT] Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See DAdjustableModelPanel:SetFirstPerson for more information.
---@return boolean Whether first person controls are enabled. See DAdjustableModelPanel:FirstPersonControls.
function DAdjustableModelPanel:GetFirstPerson() end

---[CLIENT] Enables mouse and keyboard-based adjustment of the perspective.
--- This is set to true automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the PANEL:OnMousePressed event.
---@param enable boolean Whether to enable/disable first person controls. See DAdjustableModelPanel:FirstPersonControls.
function DAdjustableModelPanel:SetFirstPerson(enable) end

---@class DAlphaBar
local DAlphaBar = {}

---[CLIENT] Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified.
---@return table The current base color.
function DAlphaBar:GetBarColor() end

---[CLIENT] Returns the alpha value of the alpha bar.
---@return number The current alpha value.
function DAlphaBar:GetValue() end

---[CLIENT] Called when user changes the desired alpha value with the control.
---@param alpha number The new alpha value
function DAlphaBar:OnChange(alpha) end

---[CLIENT] Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified.
---@param clr table The new Color to set. See Color.
function DAlphaBar:SetBarColor(clr) end

---[CLIENT] Sets the alpha value or the alpha bar.
---@param alpha number The new alpha value to set
function DAlphaBar:SetValue(alpha) end

---@class DBinder
local DBinder = {}

---[CLIENT] Gets the code of the key currently bound by the DBinder. Same as DBinder:GetValue.
---@return number The key code of the bound key. See Enums/KEY.
function DBinder:GetSelectedNumber() end

---[CLIENT] Gets the code of the key currently bound by the DBinder. Same as DBinder:GetSelectedNumber.
---@return number The key code of the bound key. See Enums/KEY.
function DBinder:GetValue() end

---[CLIENT] Called when the player selects a new bind.
---@param iNum number The new bound key. See input.GetKeyName.
function DBinder:OnChange(iNum) end

---[CLIENT] Sets the current key bound by the DBinder, and updates the button's text as well as the ConVar.
---@param keyCode number The key code of the key to bind. See Enums/KEY.
function DBinder:SetSelectedNumber(keyCode) end

---[CLIENT] Alias of DBinder:SetSelectedNumber.
---@param keyCode number The key code of the key to bind. See Enums/KEY.
function DBinder:SetValue(keyCode) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used to set the text of the DBinder to the current key binding, or NONE.
function DBinder:UpdateText() end

---@class DBubbleContainer
local DBubbleContainer = {}

---[CLIENT] Sets the speech bubble position and size along with the dialog point position.
---@param x number The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point.
---@param y number The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels.
---@param w number The width of the bubble container.
---@param h number The height of the bubble container.
function DBubbleContainer:OpenForPos(x, y, w, h) end

---@class DButton
local DButton = {}

---[CLIENT] Called when the button is left clicked (on key release) by the player.
--- This will be called after DButton:IsDown.
--- See also DButton:DoRightClick.
function DButton:DoClick() end

---[CLIENT] Called when the button is right clicked (on key release) by the player.
--- See also DButton:DoClick.
function DButton:DoRightClick() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Returns value set by DButton:SetDrawBorder. See that page for more info.
---@return boolean value set by DButton:SetDrawBorder.
function DButton:GetDrawBorder() end

---[CLIENT] Returns true if the DButton is currently depressed (a user is clicking on it).
---@return boolean Whether or not the button is depressed.
function DButton:IsDown() end

---[CLIENT] Sets a console command to be called when the button is clicked.
--- This overrides the button's DoClick method.
---@param command string The console command to be called.
---@param args string The arguments for the command.
function DButton:SetConsoleCommand(command, args) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use Panel:SetEnabled instead.
--- Sets whether or not the DButton is disabled.
--- When disabled, the button is greyed out and cannot be clicked.
---@param disable boolean When true Enable the button, when false Disable the button.
function DButton:SetDisabled(disable) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does absolutely nothing at all. Default value is automatically set to true.
---@param draw boolean Does nothing.
function DButton:SetDrawBorder(draw) end

---[CLIENT] Sets an image to be displayed as the button's background. Alias of DButton:SetImage
---@param img string The image file to use, relative to /materials. If this is nil, the image background is removed.
function DButton:SetIcon(img) end

---[CLIENT] Sets an image to be displayed as the button's background.
--- See DButton:SetMaterial for equivalent function that uses IMaterial instead.
--- Also see: DImageButton
---@param img string The image file to use, relative to /materials. If this is nil, the image background is removed.
function DButton:SetImage(img) end

---[CLIENT] Sets an image to be displayed as the button's background.
--- See DButton:SetImage for equivalent function that uses file paths instead. Also see DImageButton.
---@param img IMaterial The material to use. If this is nil, the image background is removed.
function DButton:SetMaterial(img) end

---[CLIENT] A hook called from within DLabel's PANEL:ApplySchemeSettings to determine the color of the text on display.
---@param skin table A table supposed to contain the color values listed above.
function DButton:UpdateColours(skin) end

---@class DCategoryList
local DCategoryList = {}

---[CLIENT] Adds a DCollapsibleCategory to the list.
---@param categoryName string The name of the category to add.
---@return Panel The created DCollapsibleCategory
function DCategoryList:Add(categoryName) end

---[CLIENT] Adds an element to the list.
---@param element Panel VGUI element to add to the list.
function DCategoryList:AddItem(element) end

---[CLIENT] Calls Panel:UnselectAll on all child elements, if they have it.
function DCategoryList:UnselectAll() end

---@class DCheckBox
local DCheckBox = {}

---[CLIENT] Gets the checked state of the checkbox.
---@return boolean Whether the box is checked or not.
function DCheckBox:GetChecked() end

---[CLIENT] Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons.
---@return boolean Whether the checkbox is being clicked.
function DCheckBox:IsEditing() end

---[CLIENT] Called when the "checked" state is changed.
---@param bVal boolean Whether the CheckBox is checked or not.
function DCheckBox:OnChange(bVal) end

---[CLIENT] Sets the checked state of the checkbox. Does not call the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods, unlike DCheckBox:SetValue.
---@param checked boolean Whether the box should be checked or not.
function DCheckBox:SetChecked(checked) end

---[CLIENT] Sets the checked state of the checkbox, and calls the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods.
---@param checked boolean Whether the box should be checked or not.
function DCheckBox:SetValue(checked) end

---[CLIENT] Toggles the checked state of the checkbox, and calls the checkbox's DCheckBox:OnChange and Panel:ConVarChanged methods. This is called by DCheckBox:DoClick.
function DCheckBox:Toggle() end

---@class DCheckBoxLabel
local DCheckBoxLabel = {}

---[CLIENT] Gets the checked state of the checkbox. This calls the checkbox's DCheckBox:GetChecked function.
---@return boolean Whether the box is checked or not.
function DCheckBoxLabel:GetChecked() end

---[CLIENT] Gets the indentation of the element on the X axis.
---@return number How much the content is moved to the right in pixels
function DCheckBoxLabel:GetIndent() end

---[CLIENT] Called when the "checked" state is changed.
---@param bVal boolean Whether the checkbox is checked or unchecked.
function DCheckBoxLabel:OnChange(bVal) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You really should be using DCheckBoxLabel:SetTextColor instead
--- Sets the color of the DCheckBoxLabel's text to the bright text color defined in the skin.
---@param bright boolean true makes the text bright.
function DCheckBoxLabel:SetBright(bright) end

---[CLIENT] Sets the checked state of the checkbox. Does not call DCheckBoxLabel:OnChange or Panel:ConVarChanged, unlike DCheckBoxLabel:SetValue.
---@param checked boolean Whether the box should be checked or not.
function DCheckBoxLabel:SetChecked(checked) end

---[CLIENT] Sets the console variable to be set when the checked state of the DCheckBoxLabel changes.
---@param convar string The name of the convar to set
function DCheckBoxLabel:SetConVar(convar) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You really should be using DCheckBoxLabel:SetTextColor instread
--- Sets the text of the DCheckBoxLabel to be dark colored.
---@param darkify boolean True to be dark, false to be default
function DCheckBoxLabel:SetDark(darkify) end

---[CLIENT] Sets the font of the text part of the DCheckBoxLabel.
---@param font string Font name
function DCheckBoxLabel:SetFont(font) end

---[CLIENT] Sets the indentation of the element on the X axis.
---@param ident number How much in pixels to move the content to the right
function DCheckBoxLabel:SetIndent(ident) end

---[CLIENT] Sets the text color for the DCheckBoxLabel.
---@param color table The text color. Uses the Color.
function DCheckBoxLabel:SetTextColor(color) end

---[CLIENT] Sets the checked state of the checkbox, and calls DCheckBoxLabel:OnChange and the checkbox's Panel:ConVarChanged methods.
---@param checked boolean Whether the box should be checked or not (1 or 0 can also be used).
function DCheckBoxLabel:SetValue(checked) end

---[CLIENT] Toggles the checked state of the DCheckBoxLabel.
function DCheckBoxLabel:Toggle() end

---@class DCollapsibleCategory
local DCollapsibleCategory = {}

---[CLIENT] Adds a new text button to the collapsible category, like the tool menu in Spawnmenu.
---@param name string The name of the button
---@return Panel The DButton
function DCollapsibleCategory:Add(name) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal function that handles the open/close animations.
---@param anim table 
---@param delta number 
---@param data table 
function DCollapsibleCategory:AnimSlide(anim, delta, data) end

---[CLIENT] Forces the category to open or collapse
---@param expand boolean True to open, false to collapse
function DCollapsibleCategory:DoExpansion(expand) end

---[CLIENT] Returns the expand/collapse animation time set by DCollapsibleCategory:SetAnimTime.
---@return number The animation time in seconds
function DCollapsibleCategory:GetAnimTime() end

---[CLIENT] Returns whether the DCollapsibleCategory is expanded or not.
---@return boolean If expanded it will return true.
function DCollapsibleCategory:GetExpanded() end

---[CLIENT] Returns the header height of the DCollapsibleCategory.
--- See also DCollapsibleCategory:SetHeaderHeight.
---@return number The current height of the header.
function DCollapsibleCategory:GetHeaderHeight() end

---[CLIENT] No Description
---@return Panel 
function DCollapsibleCategory:GetList() end

---[CLIENT] Doesn't actually do anything.
--- Returns the number set by DCollapsibleCategory:SetPadding.
---@return number 
function DCollapsibleCategory:GetPadding() end

---[CLIENT] Returns whether or not the background should be painted.
---@return boolean If the background is painted or not
function DCollapsibleCategory:GetPaintBackground() end

---[CLIENT] No Description
---@return number 
function DCollapsibleCategory:GetStartHeight() end

---[CLIENT] Called by DCollapsibleCategory:Toggle. This function does nothing by itself, as you're supposed to overwrite it.
---@param expanded boolean If it was expanded or not
function DCollapsibleCategory:OnToggle(expanded) end

---[CLIENT] Sets the time in seconds it takes to expand the DCollapsibleCategory
---@param time number The time in seconds it takes to expand
function DCollapsibleCategory:SetAnimTime(time) end

---[CLIENT] Sets the contents of the DCollapsibleCategory.
---@param pnl Panel The panel, containing the contents for the DCollapsibleCategory, mostly an DScrollPanel
function DCollapsibleCategory:SetContents(pnl) end

---[CLIENT] Sets whether the DCollapsibleCategory is expanded or not upon opening the container.
--- You should use DCollapsibleCategory:Toggle or DCollapsibleCategory:DoExpansion instead.
---@param expanded boolean Whether it shall be expanded or not by default
function DCollapsibleCategory:SetExpanded(expanded) end

---[CLIENT] Sets the header height of the DCollapsibleCategory.
--- See also DCollapsibleCategory:GetHeaderHeight.
---@param height number The new height to set. Default height is 20.
function DCollapsibleCategory:SetHeaderHeight(height) end

---[CLIENT] Sets the name of the DCollapsibleCategory.
---@param label string The label/name of the DCollapsibleCategory.
function DCollapsibleCategory:SetLabel(label) end

---[CLIENT] No Description
---@param pnl Panel 
function DCollapsibleCategory:SetList(pnl) end

---[CLIENT] Doesn't actually do anything.
---@param padding number 
function DCollapsibleCategory:SetPadding(padding) end

---[CLIENT] Sets whether or not the background should be painted.
---@param paint boolean 
function DCollapsibleCategory:SetPaintBackground(paint) end

---[CLIENT] No Description
---@param height number 
function DCollapsibleCategory:SetStartHeight(height) end

---[CLIENT] Toggles the expanded state of the DCollapsibleCategory.
--- See DCollapsibleCategory:GetExpanded for a function to retrieve the expanded state.
function DCollapsibleCategory:Toggle() end

---[CLIENT] No Description
function DCollapsibleCategory:UnselectAll() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to update the "AltLine" property on all "child" panels.
function DCollapsibleCategory:UpdateAltLines() end

---@class DColorButton
local DColorButton = {}

---[CLIENT] Returns the color of the button
---@return table The Color of the button
function DColorButton:GetColor() end

---[CLIENT] Returns the unique ID set by DColorButton:SetID.
--- Used internally by DColorPalette
---@return number The unique ID of the button
function DColorButton:GetID() end

---[CLIENT] Returns whether the DColorButton is currently being pressed (the user is holding it down).
---@return boolean 
function DColorButton:IsDown() end

---[CLIENT] Sets the color of the DColorButton.
---@param color table A Color to set the color as
---@param noTooltip boolean If true, the tooltip will not be reset to display the selected color.
function DColorButton:SetColor(color, noTooltip) end

---[CLIENT] Used internally by DColorPalette to detect which button is which.
---@param id number A unique ID to give this button
function DColorButton:SetID(id) end

---@class DColorCombo
local DColorCombo = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called internally to create panels necessary for this panel to work.
function DColorCombo:BuildControls() end

---[CLIENT] Returns the color of the DColorCombo.
---@return table A Color
function DColorCombo:GetColor() end

---[CLIENT] Returns true if the panel is currently being edited
--- More of a internal method, it technically should only ever work (i.e. return true) inside DColorCombo:OnValueChanged.
---@return boolean 
function DColorCombo:IsEditing() end

---[CLIENT] Called when the value (color) of this panel was changed.
---@param newcol table 
function DColorCombo:OnValueChanged(newcol) end

---[CLIENT] Sets the color of this panel.
---@param clr table A Color.
function DColorCombo:SetColor(clr) end

---@class DColorCube
local DColorCube = {}

---[CLIENT] Returns the base Color set by DColorCube:SetBaseRGB.
---@return table A Color
function DColorCube:GetBaseRGB() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Returns the value set by DColorCube:SetHue.
---@return number 
function DColorCube:GetHue() end

---[CLIENT] Returns the color cube's current set color.
---@return table The set color, uses Color.
function DColorCube:GetRGB() end

---[CLIENT] Function which is called when the color cube slider is moved (through user input). Meant to be overridden.
---@param color table The new color, uses Color.
function DColorCube:OnUserChanged(color) end

---[CLIENT] Sets the base color and the color used to draw the color cube panel itself.
--- Calling this when using a color that isn't 100% saturated and valued (HSVToColor with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like DColorCube:GetRGB and DColorCube:OnUserChanged. You should use DColorCube:SetColor instead
---@param color table The base color to set, uses Color.
function DColorCube:SetBaseRGB(color) end

---[CLIENT] Sets the base color of the color cube and updates the slider position.
---@param color table The color to set, uses Color.
function DColorCube:SetColor(color) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Appears to do nothing and unused.
---@param hue number 
function DColorCube:SetHue(hue) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to set the real "output" color of the panel.
---@param clr table A Color
function DColorCube:SetRGB(clr) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the color cube RGB based on the given x and y position and returns its arguments. Similar to DColorCube:UpdateColor.
---@param x number The x position to sample color from/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).
---@param y number The y position to sample color from/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).
---@return number, number number - The given x position.
---@return number, number number - The given y position.
function DColorCube:TranslateValues(x, y) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the color cube RGB based on the given x and y position. Similar to DColorCube:TranslateValues.
---@param x number The x position to set color to/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).
---@param y number The y position to set color to/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).
function DColorCube:UpdateColor(x, y) end

---@class DColorMixer
local DColorMixer = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
function DColorMixer:ConVarThink() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@param cvar string 
function DColorMixer:DoConVarThink(cvar) end

---[CLIENT] Return true if alpha bar is shown, false if not.
---@return boolean Return true if shown, false if not.
function DColorMixer:GetAlphaBar() end

---[CLIENT] Returns the current selected color.
---@return table The current selected color as a Color.
function DColorMixer:GetColor() end

---[CLIENT] Returns the ConVar name for the alpha channel of the color.
--- See also:
--- 
--- DColorMixer:GetConVarR - For the red channel
--- DColorMixer:GetConVarG - For the green channel
--- DColorMixer:GetConVarB - For the blue channel
---@return string The ConVar name for the alpha channel of the color
function DColorMixer:GetConVarA() end

---[CLIENT] Returns the ConVar name for the blue channel of the color.
--- See also:
--- 
--- DColorMixer:GetConVarR - For the red channel
--- DColorMixer:GetConVarG - For the green channel
--- DColorMixer:GetConVarA - For the alpha channel
---@return string The ConVar name for the blue channel of the color
function DColorMixer:GetConVarB() end

---[CLIENT] Returns the ConVar name for the green channel of the color.
--- See also:
--- 
--- DColorMixer:GetConVarR - For the red channel
--- DColorMixer:GetConVarB - For the blue channel
--- DColorMixer:GetConVarA - For the alpha channel
---@return string The ConVar name for the green channel of the color
function DColorMixer:GetConVarG() end

---[CLIENT] Returns the ConVar name for the red channel of the color.
--- See also:
--- 
--- DColorMixer:GetConVarG - For the green channel
--- DColorMixer:GetConVarB - For the blue channel
--- DColorMixer:GetConVarA - For the alpha channel
---@return string The ConVar name for the red channel of the color
function DColorMixer:GetConVarR() end

---[CLIENT] Return true if palette is shown, false if not.
---@return boolean Return true if shown, false if not.
function DColorMixer:GetPalette() end

---[CLIENT] Returns the color as a normalized Vector.
---@return Vector A vector representing the color of the DColorMixer, each value being in range of 0 to 1. Alpha is not included.
function DColorMixer:GetVector() end

---[CLIENT] Return true if the wangs are shown, false if not.
---@return boolean Return true if shown, false if not.
function DColorMixer:GetWangs() end

---[CLIENT] Show/Hide the alpha bar in DColorMixer
---@param show boolean Show / Hide the alpha bar
function DColorMixer:SetAlphaBar(show) end

---[CLIENT] Sets the base color of the DColorCube part of the DColorMixer.
--- See also DColorCube:SetBaseRGB
---@param clr table Color
function DColorMixer:SetBaseColor(clr) end

---[CLIENT] Sets the color of the DColorMixer
---@param color table The color to set. See Color
function DColorMixer:SetColor(color) end

---[CLIENT] Sets the ConVar name for the alpha channel of the color.
--- See also:
--- 
--- DColorMixer:SetConVarR - For the red channel
--- DColorMixer:SetConVarG - For the green channel
--- DColorMixer:SetConVarB - For the blue channel
---@param convar string The ConVar name for the alpha channel of the color
function DColorMixer:SetConVarA(convar) end

---[CLIENT] Sets the ConVar name for the blue channel of the color.
--- See also:
--- 
--- DColorMixer:SetConVarR - For the red channel
--- DColorMixer:SetConVarG - For the green channel
--- DColorMixer:SetConVarA - For the alpha channel
---@param convar string The ConVar name for the blue channel of the color
function DColorMixer:SetConVarB(convar) end

---[CLIENT] Sets the ConVar name for the green channel of the color.
--- See also:
--- 
--- DColorMixer:SetConVarR - For the red channel
--- DColorMixer:SetConVarB - For the blue channel
--- DColorMixer:SetConVarA - For the alpha channel
---@param convar string The ConVar name for the green channel of the color
function DColorMixer:SetConVarG(convar) end

---[CLIENT] Sets the ConVar name for the red channel of the color.
--- See also:
--- 
--- DColorMixer:SetConVarG - For the green channel
--- DColorMixer:SetConVarB - For the blue channel
--- DColorMixer:SetConVarA - For the alpha channel
---@param convar string The ConVar name for the red channel of the color
function DColorMixer:SetConVarR(convar) end

---[CLIENT] Sets the label's text to show.
---@param text string Set to non empty string to show the label and its text. Give it an empty string or nothing and the label will be hidden.
function DColorMixer:SetLabel(text) end

---[CLIENT] Show or hide the palette panel
---@param enabled boolean Show or hide the palette panel?
function DColorMixer:SetPalette(enabled) end

---[CLIENT] Sets the color of DColorMixer from a Vector. Alpha is not included.
---@param vec Vector The color to set. It is expected that the vector will have values be from 0 to 1. (i.e. be normalized)
function DColorMixer:SetVector(vec) end

---[CLIENT] Show / Hide the colors indicators in DColorMixer
---@param show boolean Show / Hide the colors indicators
function DColorMixer:SetWangs(show) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
function DColorMixer:TranslateValues() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Use DColorMixer:SetColor instead!
---@param clr table 
function DColorMixer:UpdateColor(clr) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@param cvar string The ConVar name
---@param part string The color part to set the cvar to. "r", "g", "b" or "a".
---@param clr table The Color
function DColorMixer:UpdateConVar(cvar, part, clr) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@param clr table The Color
function DColorMixer:UpdateConVars(clr) end

---[CLIENT] Called when the player changes the color of the DColorMixer.
--- The returned color will not have the color metatable.
---@param col table The new color. See Color
function DColorMixer:ValueChanged(col) end

---@class DColorPalette
local DColorPalette = {}

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Basically the same functionality as DColorPalette:OnValueChanged, you should use that instead!
---@param clr table The new color via the Color
---@param btn Panel The DColorButton that was pressed.
function DColorPalette:DoClick(clr, btn) end

---[CLIENT] Returns the size of each palette button. Set by DColorPalette:SetButtonSize.
---@return number The size of each palette button
function DColorPalette:GetButtonSize() end

---[CLIENT] Returns the ConVar name for the alpha channel of the color.
--- See also:
--- 
--- DColorPalette:GetConVarR - For the red channel
--- DColorPalette:GetConVarG - For the green channel
--- DColorPalette:GetConVarB - For the blue channel
---@return string The ConVar name for the alpha channel of the color
function DColorPalette:GetConVarA() end

---[CLIENT] Returns the ConVar name for the blue channel of the color.
--- See also:
--- 
--- DColorPalette:GetConVarR - For the red channel
--- DColorPalette:GetConVarG - For the green channel
--- DColorPalette:GetConVarA - For the alpha channel
---@return string The ConVar name for the blue channel of the color
function DColorPalette:GetConVarB() end

---[CLIENT] Returns the ConVar name for the green channel of the color.
--- See also:
--- 
--- DColorPalette:GetConVarR - For the red channel
--- DColorPalette:GetConVarB - For the blue channel
--- DColorPalette:GetConVarA - For the alpha channel
---@return string The ConVar name for the green channel of the color
function DColorPalette:GetConVarG() end

---[CLIENT] Returns the ConVar name for the red channel of the color.
--- See also:
--- 
--- DColorPalette:GetConVarG - For the green channel
--- DColorPalette:GetConVarB - For the blue channel
--- DColorPalette:GetConVarA - For the alpha channel
---@return string The ConVar name for the red channel of the color
function DColorPalette:GetConVarR() end

---[CLIENT] Returns the number of rows of the palette, provided 6 colors fill each row. This value is equal to the number of colors in the DColorPalette divided by 6.
---@return number Number of rows of the DColorPalette.
function DColorPalette:GetNumRows() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to make sure changes on one palette affect other palettes with same name.
function DColorPalette:NetworkColorChange() end

---[CLIENT] Called when a palette button has been pressed
---@param pnl Panel The DColorButton that was pressed.
function DColorPalette:OnRightClickButton(pnl) end

---[CLIENT] Called when the color is changed after clicking a new value.
---@param newcol table The new color of the DColorPalette
function DColorPalette:OnValueChanged(newcol) end

---[CLIENT] Resets this entire color palette to a default preset one, without saving.
--- See DColorPalette:ResetSavedColors for version that also saves the changes.
function DColorPalette:Reset() end

---[CLIENT] Resets this entire color palette to a default preset one and saves the changes.
--- See DColorPalette:Reset for version that does not save the changes.
function DColorPalette:ResetSavedColors() end

---[CLIENT] Saves the color of given button across sessions.
--- The color is saved as a panel cookie, see Panel:SetCookie and Panel:SetCookieName.
--- 
--- It is expected that the amount of colors per palette (Panel:SetCookieName) is the same every time.
---@param btn Panel The button to save the color of. Used to get the ID of the button.
---@param clr table The color to save to this button's index
function DColorPalette:SaveColor(btn, clr) end

---[CLIENT] Sets the size of each palette button.
--- This is best kept to such a number, where this equation would return a whole number:
--- WidthOfColorPalette / ButtonSize= WholeNumber
--- If not, there will be ugly whitespace on the right side of the panel.
---@param size number Sets the new size
function DColorPalette:SetButtonSize(size) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Currently does nothing. Intended to "select" the color.
---@param clr table 
function DColorPalette:SetColor(clr) end

---[CLIENT] Clears the palette and adds new buttons with given colors.
---@param tab table A number indexed table where each value is a Color
function DColorPalette:SetColorButtons(tab) end

---[CLIENT] Sets the ConVar name for the alpha channel of the color.
--- See also:
--- 
--- DColorPalette:SetConVarR - For the red channel
--- DColorPalette:SetConVarG - For the green channel
--- DColorPalette:SetConVarB - For the blue channel
---@param convar string The ConVar name for the alpha channel of the color
function DColorPalette:SetConVarA(convar) end

---[CLIENT] Sets the ConVar name for the blue channel of the color.
--- See also:
--- 
--- DColorPalette:SetConVarR - For the red channel
--- DColorPalette:SetConVarG - For the green channel
--- DColorPalette:SetConVarA - For the alpha channel
---@param convar string The ConVar name for the blue channel of the color
function DColorPalette:SetConVarB(convar) end

---[CLIENT] Sets the ConVar name for the green channel of the color.
--- See also:
--- 
--- DColorPalette:SetConVarR - For the red channel
--- DColorPalette:SetConVarB - For the blue channel
--- DColorPalette:SetConVarA - For the alpha channel
---@param convar string The ConVar name for the green channel of the color
function DColorPalette:SetConVarG(convar) end

---[CLIENT] Sets the ConVar name for the red channel of the color.
--- See also:
--- 
--- DColorPalette:SetConVarG - For the green channel
--- DColorPalette:SetConVarB - For the blue channel
--- DColorPalette:SetConVarA - For the alpha channel
---@param convar string The ConVar name for the red channel of the color
function DColorPalette:SetConVarR(convar) end

---[CLIENT] Roughly sets the number of colors that can be picked by the user. If the DColorPalette is exactly 6 rows tall, this function will set the number of colors shown per row in the palette.
--- DColorPalette:Reset or DColorPalette:ResetSavedColors must be called after this function to apply changes.
---@param rows number Scale for the range of colors that the user can pick. Default is 8.
function DColorPalette:SetNumRows(rows) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal helper function for DColorPalette:UpdateConVars.
---@param name string The name of the console variable to set
---@param key string The key of the 3rd argument to set the convar to Possible values: "r", "g", "b", "a"
---@param clr table The Color to retrieve the info from.
function DColorPalette:UpdateConVar(name, key, clr) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Updates all the console variables set by DColorPalette:SetConVarR and so on with given color.
--- Called internally when a palette color is clicked.
---@param clr table A Color
function DColorPalette:UpdateConVars(clr) end

---@class DColumnSheet
local DColumnSheet = {}

---[CLIENT] Adds a new column/tab.
---@param name string Name of the column/tab
---@param pnl Panel Panel to be used as contents of the tab. This normally would be a DPanel
---@param icon string Icon for the tab. This will ideally be a silkicon, but any material name can be used.
---@return table A table containing the following keys:  Panel Button - The created tab button that will switch to the given panel Panel Panel - The given panel to switch to when the button is pressed
function DColumnSheet:AddSheet(name, pnl, icon) end

---[CLIENT] Returns the active button of this DColumnSheet.
---@return Panel The active button
function DColumnSheet:GetActiveButton() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Makes a button an active button for this DColumnSheet.
---@param active Panel The button to make active button
function DColumnSheet:SetActiveButton(active) end

---[CLIENT] Makes the tabs/buttons show only the image and no text.
function DColumnSheet:UseButtonOnlyStyle() end

---@class DComboBox
local DComboBox = {}

---[CLIENT] Adds a choice to the combo box.
---@param value string The text show to the user.
---@param data any The data accompanying this string. If left empty, the value argument is used instead. Can be accessed with the second argument of DComboBox:GetSelected, DComboBox:GetOptionData and as an argument of DComboBox:OnSelect.
---@param select boolean Should this be the default selected text show to the user or not.
---@param icon string Adds an icon for this choice.
---@return number The index of the new option.
function DComboBox:AddChoice(value, data, select, icon) end

---[CLIENT] Adds a spacer below the currently last item in the drop down. Recommended to use with DComboBox:SetSortItems set to false.
function DComboBox:AddSpacer() end

---[CLIENT] Selects a combo box option by its index and changes the text displayed at the top of the combo box.
---@param value string The text to display at the top of the combo box.
---@param index number The option index.
function DComboBox:ChooseOption(value, index) end

---[CLIENT] Selects an option within a combo box based on its table index.
---@param index number Selects the option with given index.
function DComboBox:ChooseOptionID(index) end

---[CLIENT] Clears the combo box's text value, choices, and data values.
function DComboBox:Clear() end

---[CLIENT] Closes the combo box menu. Called when the combo box is clicked while open.
function DComboBox:CloseMenu() end

---[CLIENT] Returns an option's data based on the given index.
---@param index number The option index.
---@return any The option's data value.
function DComboBox:GetOptionData(index) end

---[CLIENT] Returns an option's text based on the given index.
---@param index number The option index.
---@return string The option's text value.
function DComboBox:GetOptionText(index) end

---[CLIENT] Returns an option's text based on the given data.
---@param data string The data to look up the name of. If given a number and no matching data was found, the function will test given data against each tonumber'd data entry.
---@return string The option's text value. If no matching data was found, the data itself will be returned. If multiple identical data entries exist, the first instance will be returned.
function DComboBox:GetOptionTextByData(data) end

---[CLIENT] Returns the currently selected option's text and data
---@return string, any string - The option's text value.
---@return string, any any - The option's stored data.
function DComboBox:GetSelected() end

---[CLIENT] Returns the index (ID) of the currently selected option.
---@return number The ID of the currently selected option.
function DComboBox:GetSelectedID() end

---[CLIENT] Returns an whether the items in the dropdown will be alphabetically sorted or not.
--- See DComboBox:SetSortItems.
---@return boolean True if enabled, false otherwise.
function DComboBox:GetSortItems() end

---[CLIENT] Returns whether or not the combo box's menu is opened.
---@return boolean True if the menu is open, false otherwise.
function DComboBox:IsMenuOpen() end

---[CLIENT] Called when the player opens the dropdown menu.
---@param menu Panel The DMenu menu panel.
function DComboBox:OnMenuOpened(menu) end

---[CLIENT] Called when an option in the combo box is selected. This function does nothing by itself, you're supposed to overwrite it.
---@param index number The index of the option for use with other DComboBox functions.
---@param value string The name of the option.
---@param data any The data assigned to the option.
function DComboBox:OnSelect(index, value, data) end

---[CLIENT] Opens the combo box drop down menu. Called when the combo box is clicked.
function DComboBox:OpenMenu() end

---[CLIENT] Sets whether or not the items should be sorted alphabetically in the dropdown menu of the DComboBox. If set to false, items will appear in the order they were added by DComboBox:AddChoice calls.
--- This is enabled by default.
---@param sort boolean true to enable, false to disable
function DComboBox:SetSortItems(sort) end

---[CLIENT] Sets the text shown in the combo box when the menu is not collapsed.
---@param value string The text in the DComboBox.
function DComboBox:SetValue(value) end

---@class DDragBase
local DDragBase = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal function used in DDragBase:MakeDroppable
---@param drops table 
---@param bDoDrop boolean 
---@param command string 
---@param y number 
---@param x number 
function DDragBase:DropAction_Copy(drops, bDoDrop, command, y, x) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal function used in DDragBase:DropAction_Copy
---@param drops table 
---@param bDoDrop boolean 
---@param command string 
---@param y number 
---@param x number 
function DDragBase:DropAction_Normal(drops, bDoDrop, command, y, x) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal function used in DDragBase:DropAction_Normal
---@param drops table 
---@param bDoDrop boolean 
---@param command string 
---@param y number 
---@param x number 
function DDragBase:DropAction_Simple(drops, bDoDrop, command, y, x) end

---[CLIENT] No Description
---@return string Name of the DnD family.
function DDragBase:GetDnD() end

---[CLIENT] No Description
---@return boolean 
function DDragBase:GetUseLiveDrag() end

---[CLIENT] Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls Panel:Receiver.
---@param name string The unique name for the receiver slot. Only droppable panels with the same DnD name as this can be dropped on the panel.
---@param allowCopy boolean Whether or not to allow droppable panels to be copied when the ctrl key is held down.
function DDragBase:MakeDroppable(name, allowCopy) end

---[CLIENT] Called when anything is dropped on or rearranged within the DDragBase.
function DDragBase:OnModified() end

---[CLIENT] No Description
---@param name string Name of the DnD family.
function DDragBase:SetDnD(name) end

---[CLIENT] Determines where you can drop stuff.
--- "4" for left
--- "5" for center
--- "6" for right
--- "8" for top
--- "2" for bottom
---@param pos string Where you're allowed to drop things.
function DDragBase:SetDropPos(pos) end

---[CLIENT] No Description
---@param newState boolean 
function DDragBase:SetUseLiveDrag(newState) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal function used in DDragBase:DropAction_Normal
---@param drop number 
---@param pnl Panel 
function DDragBase:UpdateDropTarget(drop, pnl) end

---@class DDrawer
local DDrawer = {}

---[CLIENT] Closes the DDrawer.
function DDrawer:Close() end

---[CLIENT] Return the Open Size of DDrawer.
---@return number Open size.
function DDrawer:GetOpenSize() end

---[CLIENT] Return the Open Time of DDrawer.
---@return number Time in seconds.
function DDrawer:GetOpenTime() end

---[CLIENT] Opens the DDrawer.
function DDrawer:Open() end

---[CLIENT] Set the height of DDrawer
---@param Value number Height of DDrawer. Default is 100.
function DDrawer:SetOpenSize(Value) end

---[CLIENT] Set the time (in seconds) for DDrawer to open.
---@param value number Length in seconds. Default is 0.3
function DDrawer:SetOpenTime(value) end

---[CLIENT] Toggles the DDrawer.
function DDrawer:Toggle() end

---@class DEntityProperties
local DEntityProperties = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called internally by DEntityProperties:RebuildControls.
---@param varname string 
---@param editdata table 
function DEntityProperties:EditVariable(varname, editdata) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called internally when an entity being edited became invalid.
--- You should use DEntityProperties:OnEntityLost instead.
function DEntityProperties:EntityLost() end

---[CLIENT] Called when we were editing an entity and then it became invalid (probably removed)
function DEntityProperties:OnEntityLost() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called internally by DEntityProperties:SetEntity to rebuild the controls.
function DEntityProperties:RebuildControls() end

---[CLIENT] Sets the entity to be edited by this panel. The entity must support the Editable Entities system or nothing will happen.
---@param ent Entity The entity to edit
function DEntityProperties:SetEntity(ent) end

---@class DExpandButton
local DExpandButton = {}

---[CLIENT] Returns whether this DExpandButton is expanded or not.
---@return boolean True if expanded, false otherwise
function DExpandButton:GetExpanded() end

---[CLIENT] Sets whether this DExpandButton should be expanded or not. Only changes appearance.
---@param expanded boolean True to expand ( visually will show a "-" )
function DExpandButton:SetExpanded(expanded) end

---@class DFileBrowser
local DFileBrowser = {}

---[CLIENT] Clears the file tree and list, and resets all values.
function DFileBrowser:Clear() end

---[CLIENT] Returns the root directory/folder of the file tree.
---@return string The path to the root folder.
function DFileBrowser:GetBaseFolder() end

---[CLIENT] Returns the current directory/folder being displayed.
---@return string The directory the file list is currently displaying.
function DFileBrowser:GetCurrentFolder() end

---[CLIENT] Returns the current file type filter on the file list.
---@return string The current filter applied to the file list.
function DFileBrowser:GetFileTypes() end

---[CLIENT] Returns the DTree Node that the file tree stems from.
--- This is a child of the root node of the DTree.
---@return Panel The DTree_Node used for the tree.
function DFileBrowser:GetFolderNode() end

---[CLIENT] Returns whether or not the model viewer mode is enabled. In this mode, files are displayed as SpawnIcons instead of a list.
---@return boolean Whether or not files will be displayed using SpawnIcons.
function DFileBrowser:GetModels() end

---[CLIENT] Returns the name being used for the file tree.
---@return string The name used for the root of the file tree.
function DFileBrowser:GetName() end

---[CLIENT] Returns whether or not the file tree is open.
---@return boolean Whether or not the file tree is open.
function DFileBrowser:GetOpen() end

---[CLIENT] Returns the access path of the file tree. This is GAME unless changed with DFileBrowser:SetPath.
--- See file.Read for how paths work.
---@return string The current access path i.e. "GAME", "LUA", "DATA" etc.
function DFileBrowser:GetPath() end

---[CLIENT] Returns the current search filter on the file tree.
---@return string The filter in use on the file tree.
function DFileBrowser:GetSearch() end

---[CLIENT] Called when a file is double-clicked.
--- Double-clicking a file or icon will trigger both this and DFileBrowser:OnSelect.
---@param filePath string The path to the file that was double-clicked.
---@param selectedPanel Panel The panel that was double-clicked to select this file.This will either be a DListView_Line or SpawnIcon depending on whether the model viewer mode is enabled. See DFileBrowser:SetModels.
function DFileBrowser:OnDoubleClick(filePath, selectedPanel) end

---[CLIENT] Called when a file is right-clicked.
--- When not in model viewer mode, DFileBrowser:OnSelect will also be called if the file is not already selected.
---@param filePath string The path to the file that was right-clicked.
---@param selectedPanel Panel The panel that was right-clicked to select this file. This will either be a DListView_Line or SpawnIcon depending on whether the model viewer mode is enabled. See DFileBrowser:SetModels.
function DFileBrowser:OnRightClick(filePath, selectedPanel) end

---[CLIENT] Called when a file is selected.
---@param filePath string The path to the file that was selected.
---@param selectedPanel Panel The panel that was clicked to select this file.This will either be a DListView_Line or SpawnIcon depending on whether the model viewer mode is enabled. See DFileBrowser:SetModels.
function DFileBrowser:OnSelect(filePath, selectedPanel) end

---[CLIENT] Sets the root directory/folder of the file tree.
--- This needs to be set for the file tree to be displayed.
---@param baseDir string The path to the folder to use as the root.
function DFileBrowser:SetBaseFolder(baseDir) end

---[CLIENT] Sets the directory/folder from which to display the file list.
---@param currentDir string The directory to display files from.
function DFileBrowser:SetCurrentFolder(currentDir) end

---[CLIENT] Sets the file type filter for the file list.
--- This accepts the same file extension wildcards as file.Find.
---@param fileTypes string A list of file types to display, separated by spaces e.g. "*.lua *.txt *.mdl""*.lua *.txt *.mdl"
function DFileBrowser:SetFileTypes(fileTypes) end

---[CLIENT] Enables or disables the model viewer mode. In this mode, files are displayed as SpawnIcons instead of a list.
--- This should only be used for .mdl files; the spawn icons will display error models for others. See DFileBrowser:SetFileTypes
---@param showModels boolean Whether or not to display files using SpawnIcons.
function DFileBrowser:SetModels(showModels) end

---[CLIENT] Sets the name to use for the file tree.
---@param treeName string The name for the root of the file tree. Passing no value causes this to be the base folder name. See DFileBrowser:SetBaseFolder.
function DFileBrowser:SetName(treeName) end

---[CLIENT] Opens or closes the file tree.
---@param open boolean true to open the tree, false to close it.
---@param useAnim boolean If true, the DTree's open/close animation is used.
function DFileBrowser:SetOpen(open, useAnim) end

---[CLIENT] Sets the access path for the file tree. This is set to GAME by default.
--- See file.Read for how paths work.
---@param path string The access path i.e. "GAME", "LUA", "DATA" etc.
function DFileBrowser:SetPath(path) end

---[CLIENT] Sets the search filter for the file tree.
--- This accepts the same wildcards as file.Find.
---@param filter string The filter to use on the file tree.
function DFileBrowser:SetSearch(filter) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called to set up the DTree and file viewer when a base path has been set.
--- Calls DFileBrowser:SetupTree and DFileBrowser:SetupFiles.
---@return boolean Whether or not the variables needed to set up have been defined.
function DFileBrowser:Setup() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called to set up the DListView or DIconBrowser by DFileBrowser:Setup.
--- The icon browser is used when in models mode. See DFileBrowser:SetModels.
---@return boolean Whether or not the files pane was set up successfully.
function DFileBrowser:SetupFiles() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called to set up the DTree by DFileBrowser:Setup.
---@return boolean Whether or not the tree was set up successfully.
function DFileBrowser:SetupTree() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Builds the file or icon list for the current directory.
--- You should use DFileBrowser:SetCurrentFolder to change the directory.
---@param currentDir string The directory to populate the list from.
function DFileBrowser:ShowFolder(currentDir) end

---[CLIENT] Sorts the file list.
--- This is only functional when not using the model viewer. See DFileBrowser:SetModels
---@param descending boolean The sort order. true for descending (z-a), false for ascending (a-z).
function DFileBrowser:SortFiles(descending) end

---@class DForm
local DForm = {}

---[CLIENT] Adds one or two items to the DForm.
--- If this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.
--- Internally, this function is used by the various DForm functions to, for example, add labels to the left of buttons.
---@param left Panel Left-hand element to add to the DForm.
---@param right Panel Right-hand element to add to the DForm.
function DForm:AddItem(left, right) end

---[CLIENT] Adds a DButton onto the DForm
---@param text string The text on the button
---@param concommand string The concommand to run when the button is clicked
---@param ... ... The arguments to pass on to the concommand when the button is clicked
---@return Panel The created DButton
function DForm:Button(text, concommand, ...) end

---[CLIENT] Adds a DCheckBoxLabel onto the DForm.
--- This will run DCheckBoxLabel:OnChange when being added. This is caused by Panel:SetConVar being used when this function is used. To avoid this, use DForm:AddItem with a DCheckBoxLabel.
---@param label string The label to be set next to the check box
---@param convar string The console variable to change when this is changed
---@return Panel The created DCheckBoxLabel
function DForm:CheckBox(label, convar) end

---[CLIENT] Adds a DComboBox onto the DForm
---@param title string Text to the left of the combo box
---@param convar string Console variable to change when the user selects something from the dropdown.
---@return Panel, Panel Panel - The created DComboBox
---@return Panel, Panel Panel - The created DLabel
function DForm:ComboBox(title, convar) end

---[CLIENT] Adds a DLabel onto the DForm. Unlike DForm:Help, this is indented and is colored blue, depending on the derma skin.
---@param help string The help message to be displayed.
---@return Panel The created DLabel
function DForm:ControlHelp(help) end

---[CLIENT] Adds a DLabel onto the DForm as a helper
---@param help string The help message to be displayed
---@return Panel The created DLabel
function DForm:Help(help) end

---[CLIENT] Adds a DListBox onto the DForm
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- Use DListView with DForm:AddItem instead.
---@param label string The label to set on the DListBox
---@return Panel, Panel Panel - The created DListBox
---@return Panel, Panel Panel - The created DLabel
function DForm:ListBox(label) end

---[CLIENT] Adds a DNumberWang onto the DForm
---@param label string The label to be placed next to the DNumberWang
---@param convar string The console variable to change when the slider is changed
---@param min number The minimum value of the slider
---@param max number The maximum value of the slider
---@param decimals number The number of decimals to allow in the slider (Optional)
---@return Panel, Panel Panel - The created DNumberWang
---@return Panel, Panel Panel - The created DLabel
function DForm:NumberWang(label, convar, min, max, decimals) end

---[CLIENT] Adds a DNumSlider onto the DForm
---@param label string The label of the DNumSlider
---@param convar string The console variable to change when the slider is changed
---@param min number The minimum value of the slider
---@param max number The maximum value of the slider
---@param decimals number The number of decimals to allow on the slider. (Optional)
---@return Panel The created DNumSlider
function DForm:NumSlider(label, convar, min, max, decimals) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- This is derived from the deprecated DPanelSelect.
--- Creates a DPanelSelect and docks it to the top of the DForm.
---@return Panel The created DPanelSelect.
function DForm:PanelSelect() end

---[CLIENT] Creates a PropSelect panel and docks it to the top of the DForm.
---@param label string The label to display above the prop select.
---@param convar string The convar to set the selected model to.
---@param models table A table of models to display for selection. Supports 2 formats:  Key is the model and value are the convars to set when that model is selected in format convar=value An table of tables where each table must have the following keys:   string model - The model. number skin - Model's skin. Defaults to 0 string tooltip - Displayed when user hovers over the model. Defaults to the model path. The key of the table is the value of the convar.
---@param height number The height of the prop select panel, in 64px icon increments.
---@return Panel The created PropSelect panel.
function DForm:PropSelect(label, convar, models, height) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
function DForm:Rebuild() end

---[CLIENT] Sets the title (header) name of the DForm. This is Label until set.
---@param name string The new header name.
function DForm:SetName(name) end

---[CLIENT] Adds a DTextEntry to a DForm
---@param label string The label to be next to the text entry
---@param convar string The console variable to be changed when the text entry is changed
---@return Panel, Panel Panel - The created DTextEntry
---@return Panel, Panel Panel - The created DLabel
function DForm:TextEntry(label, convar) end

---@class DFrame
local DFrame = {}

---[CLIENT] Centers the frame relative to the whole screen and invalidates its layout. This overrides Panel:Center.
function DFrame:Center() end

---[CLIENT] Hides or removes the DFrame, and calls DFrame:OnClose.
--- To set whether the frame is hidden or removed, use DFrame:SetDeleteOnClose.
function DFrame:Close() end

---[CLIENT] Gets whether the background behind the frame is being blurred.
---@return boolean Whether or not background blur is enabled.
function DFrame:GetBackgroundBlur() end

---[CLIENT] Determines whether or not the DFrame will be removed when it is closed. This is set with DFrame:SetDeleteOnClose.
---@return boolean Whether or not the frame will be removed on close.
function DFrame:GetDeleteOnClose() end

---[CLIENT] Gets whether or not the frame is draggable by the user.
---@return boolean Whether the frame is draggable or not.
function DFrame:GetDraggable() end

---[CLIENT] Gets whether or not the frame is part of a derma menu. This is set with DFrame:SetIsMenu.
---@return boolean Whether or not this frame is a menu component.
function DFrame:GetIsMenu() end

---[CLIENT] Gets the minimum height the DFrame can be resized to by the user.
--- You must call DFrame:SetSizable before the user can resize the frame.
---@return number The minimum height the user can resize the frame to.
function DFrame:GetMinHeight() end

---[CLIENT] Gets the minimum width the DFrame can be resized to by the user.
--- You must call DFrame:SetSizable before the user can resize the frame.
---@return number The minimum width the user can resize the frame to.
function DFrame:GetMinWidth() end

---[CLIENT] Gets whether or not the shadow effect bordering the DFrame is being drawn.
---@return boolean Whether or not the shadow is being drawn.
function DFrame:GetPaintShadow() end

---[CLIENT] Gets whether or not the DFrame is restricted to the boundaries of the screen resolution.
---@return boolean Whether or not the frame is restricted.
function DFrame:GetScreenLock() end

---[CLIENT] Gets whether or not the DFrame can be resized by the user.
--- This is achieved by clicking and dragging in the bottom right corner of the frame.
---@return boolean Whether the frame can be resized or not.
function DFrame:GetSizable() end

---[CLIENT] Returns the title of the frame.
---@return string Title of the frame.
function DFrame:GetTitle() end

---[CLIENT] Determines if the frame or one of its children has the screen focus.
---@return boolean Whether or not the frame has focus.
function DFrame:IsActive() end

---[CLIENT] Called when the DFrame is closed with DFrame:Close. This applies when the close button in the DFrame's control box is clicked.
--- This function does nothing and is safe to override.
--- This is not called when the DFrame is removed with Panel:Remove, see PANEL:OnRemove for that.
function DFrame:OnClose() end

---[CLIENT] Indicate that the background elements won't be usable.
---@param blur boolean Whether or not to block mouse on background panels or not.
function DFrame:SetBackgroundBlur(blur) end

---[CLIENT] Determines whether or not the DFrame is removed when it is closed with DFrame:Close.
---@param shouldDelete boolean Whether or not to delete the frame on close. This is true by default.
function DFrame:SetDeleteOnClose(shouldDelete) end

---[CLIENT] Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar.
---@param draggable boolean Whether to be draggable or not.
function DFrame:SetDraggable(draggable) end

---[CLIENT] Adds or removes an icon on the left of the DFrame's title.
---@param path string Set to nil to remove the icon. Otherwise, set to file path to create the icon.
function DFrame:SetIcon(path) end

---[CLIENT] Sets whether the frame is part of a derma menu or not.
--- If this is set to true, CloseDermaMenus will not be called when the frame is clicked, and thus any open menus will remain open.
---@param isMenu boolean Whether or not this frame is a menu component.
function DFrame:SetIsMenu(isMenu) end

---[CLIENT] Sets the minimum height the DFrame can be resized to by the user.
--- This only applies to users attempting to resize the frame; Panel:SetTall and similar methods will not be affected. You must call DFrame:SetSizable before the user can resize the frame.
---@param minH number The minimum height the user can resize the frame to.
function DFrame:SetMinHeight(minH) end

---[CLIENT] Sets the minimum width the DFrame can be resized to by the user.
--- This only applies to users attempting to resize the frame; Panel:SetWide and similar methods will not be affected. You must call DFrame:SetSizable before the user can resize the frame.
---@param minW number The minimum width the user can resize the frame to.
function DFrame:SetMinWidth(minW) end

---[CLIENT] Sets whether or not the shadow effect bordering the DFrame should be drawn.
---@param shouldPaint boolean Whether or not to draw the shadow. This is true by default.
function DFrame:SetPaintShadow(shouldPaint) end

---[CLIENT] Sets whether the DFrame is restricted to the boundaries of the screen resolution.
---@param lock boolean If true, the frame cannot be dragged outside of the screen bounds
function DFrame:SetScreenLock(lock) end

---[CLIENT] Sets whether or not the DFrame can be resized by the user.
--- This is achieved by clicking and dragging in the bottom right corner of the frame.
--- You can set the minimum size using DFrame:SetMinWidth and DFrame:SetMinHeight.
---@param sizeable boolean Whether the frame should be resizeable or not.
function DFrame:SetSizable(sizeable) end

---[CLIENT] Sets the title of the frame.
---@param title string New title of the frame.
function DFrame:SetTitle(title) end

---[CLIENT] Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed.
---@param show boolean false hides the control box; this is true by default.
function DFrame:ShowCloseButton(show) end

---@class DGrid
local DGrid = {}

---[CLIENT] Adds a new item to the grid.
---@param item Panel The item to add. It will be forced visible and parented to the DGrid.
function DGrid:AddItem(item) end

---[CLIENT] Returns the number of columns of this DGrid. Set by DGrid:SetCols.
---@return number The number of columns of this DGrid
function DGrid:GetCols() end

---[CLIENT] Returns the width of each column of the DGrid, which is set by DGrid:SetColWide.
---@return number The width of each column
function DGrid:GetColWide() end

---[CLIENT] Returns a list of panels in the grid.
---@return table A list of Panels.
function DGrid:GetItems() end

---[CLIENT] Returns the height of each row of the DGrid, which is set by DGrid:SetRowHeight.
---@return number The height of each row
function DGrid:GetRowHeight() end

---[CLIENT] Removes given panel from the DGrid:GetItems.
---@param item Panel Item to remove from the grid
---@param bDontDelete boolean If set to true, the actual panel will not be removed via Panel:Remove.
function DGrid:RemoveItem(item, bDontDelete) end

---[CLIENT] Sets the number of columns this panel should have.
--- The DGrid will resize its width to match this value.
---@param cols number The desired number of columns
function DGrid:SetCols(cols) end

---[CLIENT] Sets the width of each column.
--- The cell panels (grid items) will not be resized or centered.
---@param colWidth number The width of each column.
function DGrid:SetColWide(colWidth) end

---[CLIENT] Sets the height of each row.
--- The cell panels (grid items) will not be resized or centered.
---@param rowHeight number The height of each row
function DGrid:SetRowHeight(rowHeight) end

---[CLIENT] Sorts the items in the grid. Does not visually update the grid, use Panel:InvalidateLayout for that.
---@param key string A key in the panel from DGrid:GetItems. The key's value must be numeric.
---@param desc boolean True for descending order, false for ascending.
function DGrid:SortByMember(key, desc) end

---@class DHTML
local DHTML = {}

---[CLIENT] Defines a Javascript function that when called will call a Lua callback.
--- Must be called after the HTML document has fully loaded.
---@param library string Library name of the JS function you are defining.
---@param name string Name of the JS function you are defining.
---@param callback function Function called when the JS function is called. Arguments passed to the JS function will be passed here.
function DHTML:AddFunction(library, name, callback) end

---[CLIENT] Runs/Executes a string as JavaScript code in a panel.
--- This function does NOT evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.This function is an alias of DHTML:QueueJavascript (source).
---@param js string Specify JavaScript code to be executed.
function DHTML:Call(js) end

---[CLIENT] Called when the page inside the DHTML window runs console.log. This can also be called within the Lua environment to emulate console.log. If the contained message begins with RUNLUA: the following text will be executed as code within the Lua environment (this is how Lua is called from DHTML windows).
---@param msg string The message to be logged (or Lua code to be executed; see above).
function DHTML:ConsoleMessage(msg) end

---[CLIENT] Returns if the loaded page can run Lua code, set by DHTML:SetAllowLua
---@return boolean Whether or not Lua code can be called from the loaded page.
function DHTML:GetAllowLua() end

---[CLIENT] Runs/Executes a string as JavaScript code in a panel.
--- This function does NOT evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.If Panel:IsVisible is false, PANEL:Think will NOT run, meaning the Javascript Queue will not be processed.Consider overriding PANEL:Paint to stop the panel from drawing instead.
---@param js string Specify JavaScript code to be executed.
function DHTML:QueueJavascript(js) end

---[CLIENT] Determines whether the loaded page can run Lua code or not. See DHTML for how to run Lua from a DHTML window.
---@param allow boolean Whether or not to allow Lua.
function DHTML:SetAllowLua(allow) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Broken. Use the CSS overflow rule instead.
--- Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS overflow rule.
---@param show boolean True if scrollbars should be visible.
function DHTML:SetScrollbars(show) end

---[CLIENT] Stops the loading of the HTML panel's current page.
function DHTML:StopLoading() end

---@class DHTMLControls
local DHTMLControls = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
function DHTMLControls:FinishedLoading() end

---[CLIENT] Sets the color of the navigation buttons.
---@param clr table A Color
function DHTMLControls:SetButtonColor(clr) end

---[CLIENT] Sets the DHTML element to control with these DHTMLControls.
---@param dhtml Panel The HTML panel
function DHTMLControls:SetHTML(dhtml) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
function DHTMLControls:StartedLoading() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Basically adds an URL to the history.
---@param url string 
function DHTMLControls:UpdateHistory(url) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
function DHTMLControls:UpdateNavButtonStatus() end

---@class DHorizontalDivider
local DHorizontalDivider = {}

---[CLIENT] Returns the width of the horizontal divider bar, set by DHorizontalDivider:SetDividerWidth.
---@return number The width of the horizontal divider bar
function DHorizontalDivider:GetDividerWidth() end

---[CLIENT] Returns whether or not the player is currently dragging the middle divider bar.
---@return boolean Whether or not the player is currently dragging the middle divider bar.
function DHorizontalDivider:GetDragging() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns the local X coordinate of where the player started dragging the thing
---@return number 
function DHorizontalDivider:GetHoldPos() end

---[CLIENT] Returns the left side content of the DHorizontalDivider
---@return Panel The content on the left side
function DHorizontalDivider:GetLeft() end

---[CLIENT] Returns the minimum width of the left side, set by DHorizontalDivider:SetLeftMin.
---@return number The minimum width of the left side
function DHorizontalDivider:GetLeftMin() end

---[CLIENT] Returns the current width of the left side, set by DHorizontalDivider:SetLeftWidth or by the user.
---@return number The current width of the left side
function DHorizontalDivider:GetLeftWidth() end

---[CLIENT] Returns the middle content, set by DHorizontalDivider:SetMiddle.
---@return Panel The middle content
function DHorizontalDivider:GetMiddle() end

---[CLIENT] Returns the right side content
---@return Panel The right side content
function DHorizontalDivider:GetRight() end

---[CLIENT] Returns the minimum width of the right side, set by DHorizontalDivider:SetRightMin.
---@return number The minimum width of the right side
function DHorizontalDivider:GetRightMin() end

---[CLIENT] Sets the width of the horizontal divider bar.
---@param width number The width of the horizontal divider bar.
function DHorizontalDivider:SetDividerWidth(width) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether the player is dragging the divider or not
---@param dragonot boolean 
function DHorizontalDivider:SetDragging(dragonot) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the local X coordinate of where the player started dragging the thing
---@param x number 
function DHorizontalDivider:SetHoldPos(x) end

---[CLIENT] Sets the left side content of the DHorizontalDivider.
---@param pnl Panel The panel to set as the left side
function DHorizontalDivider:SetLeft(pnl) end

---[CLIENT] Sets the minimum width of the left side
---@param minWidth number The minimum width of the left side
function DHorizontalDivider:SetLeftMin(minWidth) end

---[CLIENT] Sets the current/starting width of the left side.
--- The width of the right side is automatically calculated by subtracting this from the total width of the DHorizontalDivider.
---@param width number The current/starting width of the left side
function DHorizontalDivider:SetLeftWidth(width) end

---[CLIENT] Sets the middle content, over the draggable divider bar panel.
---@param middle Panel The middle content
function DHorizontalDivider:SetMiddle(middle) end

---[CLIENT] Sets the right side content
---@param pnl Panel The right side content
function DHorizontalDivider:SetRight(pnl) end

---[CLIENT] Sets the minimum width of the right side
---@param minWidth number The minimum width of the right side
function DHorizontalDivider:SetRightMin(minWidth) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
function DHorizontalDivider:StartGrab() end

---@class DHorizontalScroller
local DHorizontalScroller = {}

---[CLIENT] Adds a panel to the DHorizontalScroller.
---@param pnl Panel The panel to add. It will be automatically parented.
function DHorizontalScroller:AddPanel(pnl) end

---[CLIENT] Returns the internal canvas panel where the content of DHorizontalScroller are placed on.
---@return Panel The DDragBase panel.
function DHorizontalScroller:GetCanvas() end

---[CLIENT] No Description
---@return number 
function DHorizontalScroller:GetOverlap() end

---[CLIENT] No Description
---@return boolean 
function DHorizontalScroller:GetShowDropTargets() end

---[CLIENT] Same as DDragBase:MakeDroppable.
--- TODO: Transclude or whatever to here?
---@param name string 
function DHorizontalScroller:MakeDroppable(name) end

---[CLIENT] Called when the panel is scrolled.
function DHorizontalScroller:OnDragModified() end

---[CLIENT] Scrolls the DHorizontalScroller to given child panel.
---@param target Panel The target child panel. Must be a child of DHorizontalScroller:GetCanvas
function DHorizontalScroller:ScrollToChild(target) end

---[CLIENT] Controls the spacing between elements of the horizontal scroller.
---@param overlap number Overlap in pixels. Positive numbers will make elements overlap each other, negative will add spacing.
function DHorizontalScroller:SetOverlap(overlap) end

---[CLIENT] Sets the scroll amount, automatically clamping the value.
---@param scroll number The new scroll amount
function DHorizontalScroller:SetScroll(scroll) end

---[CLIENT] No Description
---@param newState boolean 
function DHorizontalScroller:SetShowDropTargets(newState) end

---[CLIENT] Same as DDragBase:SetUseLiveDrag
---@param newState boolean 
function DHorizontalScroller:SetUseLiveDrag(newState) end

---@class DIconBrowser
local DIconBrowser = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Automatically called to fill the browser with icons. Will not work if DIconBrowser:SetManual is set to true.
function DIconBrowser:Fill() end

---[CLIENT] A simple unused search feature, hides all icons that do not contain given text in their file path.
---@param text string The text to search for
function DIconBrowser:FilterByText(text) end

---[CLIENT] Returns whether or not the browser should fill itself with icons.
---@return boolean 
function DIconBrowser:GetManual() end

---[CLIENT] Returns the currently selected icon's file path.
---@return string The currently selected icon's file path.
function DIconBrowser:GetSelectedIcon() end

---[CLIENT] Called when the selected icon was changed. Use DIconBrowser:GetSelectedIcon to get the selected icon's filepath.
function DIconBrowser:OnChange() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Use DIconBrowser:OnChange instead
function DIconBrowser:OnChangeInternal() end

---[CLIENT] Scrolls the browser to the selected icon
function DIconBrowser:ScrollToSelected() end

---[CLIENT] Selects an icon from file path
---@param icon string The file path of the icon to select. Do not include the "materials/" part.
function DIconBrowser:SelectIcon(icon) end

---[CLIENT] Sets whether or not the browser should automatically fill itself with icons.
---@param manual boolean 
function DIconBrowser:SetManual(manual) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Set the currently selected file path. Do not use. Use DIconBrowser:SelectIcon instead.
---@param str string 
function DIconBrowser:SetSelectedIcon(str) end

---@class DIconLayout
local DIconLayout = {}

---[CLIENT] Creates a replica of the DIconLayout it is called on.
---@return Panel The replica.
function DIconLayout:Copy() end

---[CLIENT] Copies the contents (Child elements) of another DIconLayout to itself.
---@param from Panel DIconLayout to copy from.
function DIconLayout:CopyContents(from) end

---[CLIENT] Returns the size of the border.
---@return number 
function DIconLayout:GetBorder() end

---[CLIENT] Returns the direction that it will be layed out, using the DOCK enumerations.
---@return number Layout direction.
function DIconLayout:GetLayoutDir() end

---[CLIENT] Returns the distance between two 'icons' on the X axis.
---@return number Distance between two 'icons' on the X axis.
function DIconLayout:GetSpaceX() end

---[CLIENT] Returns distance between two "Icons" on the Y axis.
---@return number distance between two "Icons" on the Y axis.
function DIconLayout:GetSpaceY() end

---[CLIENT] Returns whether the icon layout will stretch its height to fit all the children.
--- See also DIconLayout:GetStretchWidth
---@return boolean 
function DIconLayout:GetStretchHeight() end

---[CLIENT] Returns whether the icon layout will stretch its width to fit all the children.
--- See also DIconLayout:GetStretchHeight
---@return boolean 
function DIconLayout:GetStretchWidth() end

---[CLIENT] Resets layout vars before calling Panel:InvalidateLayout. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed.
function DIconLayout:Layout() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to layout the child elements if the DIconLayout:SetLayoutDir is set to LEFT (See Enums/DOCK).
function DIconLayout:LayoutIcons_LEFT() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to layout the child elements if the DIconLayout:SetLayoutDir is set to TOP (See Enums/DOCK).
function DIconLayout:LayoutIcons_TOP() end

---[CLIENT] Called when the panel is modified.
function DIconLayout:OnModified() end

---[CLIENT] Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call DIconLayout:Layout in order for the changes to take effect.
---@param width number The border (padding) inside the DIconLayout.
function DIconLayout:SetBorder(width) end

---[CLIENT] Sets the direction that it will be layed out, using the Enums/DOCK.
--- Currently only TOP and LEFT are supported.
---@param direction number Enums/DOCK
function DIconLayout:SetLayoutDir(direction) end

---[CLIENT] Sets the horizontal (x) spacing between children within the DIconLayout. You must call DIconLayout:Layout in order for the changes to take effect.
---@param xSpacing number The width of the gap between child objects.
function DIconLayout:SetSpaceX(xSpacing) end

---[CLIENT] Sets the vertical (y) spacing between children within the DIconLayout. You must call DIconLayout:Layout in order for the changes to take effect.
---@param ySpacing number The vertical gap between rows in the DIconLayout.
function DIconLayout:SetSpaceY(ySpacing) end

---[CLIENT] If set to true, the icon layout will stretch its height to fit all the children.
--- See also DIconLayout:SetStretchWidth
---@param do_stretch boolean 
function DIconLayout:SetStretchHeight(do_stretch) end

---[CLIENT] If set to true, the icon layout will stretch its width to fit all the children.
--- See also DIconLayout:SetStretchHeight
---@param stretchW boolean 
function DIconLayout:SetStretchWidth(stretchW) end

---@class DImage
local DImage = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Actually loads the IMaterial to render it. Called from DImage:LoadMaterial.
function DImage:DoLoadMaterial() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- "Fixes" the current material of the DImage if it has VertexLit shader by creating a new one with the same name and a prefix of "_DImage" and automatically calling DImage:SetMaterial with the new material.
--- This fixes the problem where using materials using shaders that expect lighting information causing "weird" flickering when displayed in 2D/Unlit environment.
function DImage:FixVertexLitMaterial() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns the texture path set by DImage:SetFailsafeMatName.
---@return string 
function DImage:GetFailsafeMatName() end

---[CLIENT] Returns the image loaded in the image panel.
---@return string The path to the image that is loaded.
function DImage:GetImage() end

---[CLIENT] Returns the color override of the image panel.
---@return table The color override of the image. Uses the Color.
function DImage:GetImageColor() end

---[CLIENT] Returns whether the DImage should keep the aspect ratio of its image when being resized.
--- See DImage:SetKeepAspect for more info on how it works.
---@return boolean Whether the DImage should keep the aspect ratio of its image when being resized.
function DImage:GetKeepAspect() end

---[CLIENT] Returns the current Material of the DImage.
---@return IMaterial 
function DImage:GetMaterial() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns the texture path set by DImage:SetMatName.
---@return string 
function DImage:GetMatName() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Initializes the loading process of the material to render if it is not loaded yet.
--- You do not need to call this function. It is done for you automatically.
function DImage:LoadMaterial() end

---[CLIENT] Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides Panel:PaintAt.
---@param posX number The x coordinate to draw the panel from.
---@param posY number The y coordinate to draw the panel from.
---@param width number The width of the panel image to be drawn.
---@param height number The height of the panel image to be drawn.
function DImage:PaintAt(posX, posY, width, height) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the backup material to be loaded when the image is first rendered. Used by DImage:SetOnViewMaterial.
---@param backupMat string 
function DImage:SetFailsafeMatName(backupMat) end

---[CLIENT] Sets the image to load into the frame. If the first image can't be loaded and strBackup is set, that image will be loaded instead.
--- This eventually calls DImage:SetMaterial.
---@param strImage string The path of the image to load. When no file extension is supplied the VMT file extension is used.
---@param strBackup string The path of the backup image.
function DImage:SetImage(strImage, strBackup) end

---[CLIENT] Sets the image's color override.
---@param col table The color override of the image. Uses the Color.
function DImage:SetImageColor(col) end

---[CLIENT] Sets whether the DImage should keep the aspect ratio of its image when being resized.
--- Note that this will not try to fit the image inside the button, but instead it will fill the button with the image.
---@param keep boolean true to keep the aspect ratio, false not to
function DImage:SetKeepAspect(keep) end

---[CLIENT] Sets a Material directly as an image.
---@param mat IMaterial The material to set
function DImage:SetMaterial(mat) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the material to be loaded when the image is first rendered. Used by DImage:SetOnViewMaterial.
---@param mat string 
function DImage:SetMatName(mat) end

---[CLIENT] Similar to DImage:SetImage, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.
--- Useful for cases like DIconBrowser, where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time.
---@param mat string 
---@param backupMat string 
function DImage:SetOnViewMaterial(mat, backupMat) end

---[CLIENT] Returns true if the image is not yet loaded.
---@return boolean 
function DImage:Unloaded() end

---@class DImageButton
local DImageButton = {}

---[CLIENT] Returns the "image" of the DImageButton. Equivalent of DImage:GetImage.
---@return string The path to the image that is loaded.
function DImageButton:GetImage() end

---[CLIENT] Returns whether the image inside the button should be stretched to fit it or not
--- See DImageButton:SetStretchToFit
---@return boolean 
function DImageButton:GetStretchToFit() end

---[CLIENT] Sets the color of the image. Equivalent of DImage:SetImageColor
---@param color table The Color to set
function DImageButton:SetColor(color) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Alias of DImageButton:SetImage.
function DImageButton:SetIcon() end

---[CLIENT] Sets the "image" of the DImageButton. Equivalent of DImage:SetImage.
---@param strImage string The path of the image to load. When no file extension is supplied the VMT file extension is used.
---@param strBackup string The path of the backup image.
function DImageButton:SetImage(strImage, strBackup) end

---[CLIENT] Hides or shows the image of the image button. Internally this calls Panel:SetVisible on the internal DImage.
---@param visible boolean Set true to make it visible ( default ), or false to hide the image
function DImageButton:SetImageVisible(visible) end

---[CLIENT] Sets whether the DImageButton should keep the aspect ratio of its image. Equivalent of DImage:SetKeepAspect.
--- Note that this will not try to fit the image inside the button, but instead it will fill the button with the image.
---@param keep boolean true to keep the aspect ratio, false not to
function DImageButton:SetKeepAspect(keep) end

---[CLIENT] Sets a Material directly as an image. Equivalent of DImage:SetMaterial.
---@param mat IMaterial The material to set
function DImageButton:SetMaterial(mat) end

---[CLIENT] See DImage:SetOnViewMaterial
---@param mat string 
---@param backup string 
function DImageButton:SetOnViewMaterial(mat, backup) end

---[CLIENT] Sets whether the image inside the DImageButton should be stretched to fill the entire size of the button, without preserving aspect ratio.
--- If set to false, the image will not be resized at all.
---@param stretch boolean True to stretch, false to not to stretch
function DImageButton:SetStretchToFit(stretch) end

---@class DKillIcon
local DKillIcon = {}

---[CLIENT] Gets the killicon being shown.
---@return string The name of the killicon currently being displayed.
function DKillIcon:GetName() end

---[CLIENT] Sets the killicon to be displayed. You should call Panel:SizeToContents following this.
--- Killicons can be added with killicon.Add and killicon.AddFont.
---@param iconName string The name of the killicon to be displayed.
function DKillIcon:SetName(iconName) end

---@class DLabel
local DLabel = {}

---[CLIENT] Called when the label is left clicked (on key release) by the player.
--- This will be called after DLabel:OnDepressed and DLabel:OnReleased.
--- This can be overridden; by default, it calls DLabel:Toggle.
--- See also DLabel:DoRightClick, DLabel:DoMiddleClick and DLabel:DoDoubleClick.
function DLabel:DoClick() end

---[CLIENT] Called just before DLabel:DoClick.
--- In DLabel does nothing and is safe to override. Used by DMenuOption and DCollapsibleCategory's tabs.
function DLabel:DoClickInternal() end

---[CLIENT] Called when the label is double clicked by the player with left clicks.
--- DLabel:SetDoubleClickingEnabled must be set to true for this hook to work, which it is by default.
--- This will be called after DLabel:OnDepressed and DLabel:OnReleased and DLabel:DoClick.
--- See also DLabel:DoRightClick and DLabel:DoMiddleClick.
function DLabel:DoDoubleClick() end

---[CLIENT] Called just before DLabel:DoDoubleClick. In DLabel does nothing and is safe to override.
function DLabel:DoDoubleClickInternal() end

---[CLIENT] Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.
--- This will be called after DLabel:OnDepressed and DLabel:OnReleased.
--- See also DLabel:DoClick, DLabel:DoRightClick and DLabel:DoDoubleClick.
function DLabel:DoMiddleClick() end

---[CLIENT] Called when the label is right clicked (on key release) by the player.
--- This will be called after DLabel:OnDepressed and DLabel:OnReleased.
--- See also DLabel:DoClick, DLabel:DoMiddleClick and DLabel:DoDoubleClick.
function DLabel:DoRightClick() end

---[CLIENT] Returns whether the label stretches vertically or not.
--- Set by DLabel:SetAutoStretchVertical.
---@return boolean Whether the label stretches vertically or not.
function DLabel:GetAutoStretchVertical() end

---[CLIENT] Returns whether the DLabel should set its text color to the current skin's bright text color.
--- See DLabel:SetBright.
---@return boolean 
function DLabel:GetBright() end

---[CLIENT] Returns the actual color of the text.
--- See also DLabel:GetTextColor and DLabel:GetTextStyleColor.
---@return table The the actual color of the text.
function DLabel:GetColor() end

---[CLIENT] Returns whether the DLabel should set its text color to the current skin's dark text color.
--- See DLabel:SetDark.
---@return boolean 
function DLabel:GetDark() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use Panel:IsEnabled instead.
--- Gets the disabled state of the DLabel. This is set with DLabel:SetDisabled.
---@return boolean The disabled state of the label.
function DLabel:GetDisabled() end

---[CLIENT] Returns whether or not double clicking will call DLabel:DoDoubleClick.
--- See DLabel:SetDoubleClickingEnabled.
---@return boolean true = enabled, false means disabled
function DLabel:GetDoubleClickingEnabled() end

---[CLIENT] Returns the current font of the DLabel. This is set with DLabel:SetFont.
---@return string The name of the font in use.
function DLabel:GetFont() end

---[CLIENT] Returns whether the DLabel should set its text color to the current skin's highlighted text color.
--- See DLabel:SetHighlight.
---@return boolean 
function DLabel:GetHighlight() end

---[CLIENT] Returns whether the toggle functionality is enabled for a label. Set with DLabel:SetIsToggle.
---@return boolean Whether or not toggle functionality is enabled.
function DLabel:GetIsToggle() end

---[CLIENT] Returns the "override" text color, set by DLabel:SetTextColor.
---@return table The color of the text, or nil.
function DLabel:GetTextColor() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns the "internal" or fallback color of the text.
--- See also DLabel:GetTextColor and DLabel:SetTextStyleColor.
---@return table The "internal" color of the text
function DLabel:GetTextStyleColor() end

---[CLIENT] Returns the current toggle state of the label. This can be set with DLabel:SetToggle and toggled with DLabel:Toggle.
--- In order to use toggle functionality, you must first call DLabel:SetIsToggle with true, as it is disabled by default.
---@return boolean The current toggle state.
function DLabel:GetToggle() end

---[CLIENT] Called when the player presses the label with any mouse button.
--- This works as an alternative to PANEL:OnMousePressed as that hook is used heavily by DLabel and overriding it will break functionality.
--- See also DLabel:DoClick, DLabel:DoMiddleClick, DLabel:DoRightClick, DLabel:OnReleased and DLabel:DoDoubleClick.
function DLabel:OnDepressed() end

---[CLIENT] Called when the player releases any mouse button on the label. This is always called after DLabel:OnDepressed.
--- This works as an alternative to PANEL:OnMouseReleased as that hook is used heavily by DLabel and overriding it will break functionality.
--- See also DLabel:DoClick, DLabel:DoMiddleClick, DLabel:DoRightClick and DLabel:DoDoubleClick.
function DLabel:OnReleased() end

---[CLIENT] Called when the toggle state of the label is changed by DLabel:Toggle.
--- In order to use toggle functionality, you must first call DLabel:SetIsToggle with true, as it is disabled by default.
---@param toggleState boolean The new toggle state.
function DLabel:OnToggled(toggleState) end

---[CLIENT] Automatically adjusts the height of the label dependent of the height of the text inside of it.
---@param stretch boolean Whenever to stretch the label vertically or not.
function DLabel:SetAutoStretchVertical(stretch) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You really should use DLabel:SetTextColor.
--- Sets the color of the text to the bright text color defined in the skin.
--- See also DLabel:SetDark and DLabel:SetHighlight.
--- You should only consider using this if you are using background elements that are not manually painted and are using the skin colors.
---@param bright boolean Whenever to set the text to bright or not.
function DLabel:SetBright(bright) end

---[CLIENT] Changes color of label. Alias of DLabel:SetTextColor.
---@param color table The color to set. Uses the Color structure.
function DLabel:SetColor(color) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You really should use DLabel:SetTextColor.
--- Sets the color of the text to the dark text color defined in the skin.
--- See also DLabel:SetBright and DLabel:SetHighlight.
--- You should only consider using this if you are using background elements that are not manually painted and are using the skin colors.
---@param dark boolean Whenever to set the text to dark or not.
function DLabel:SetDark(dark) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use Panel:SetEnabled instead.
--- Sets the disabled state of the DLabel.
--- When disabled, the label does not respond to click, toggle or drag & drop actions.
---@param disable boolean true to disable the DLabel, false to enable it.
function DLabel:SetDisabled(disable) end

---[CLIENT] Sets whether or not double clicking should call DLabel:DoDoubleClick.
--- This is enabled by default.
---@param enable boolean true to enable, false to disable
function DLabel:SetDoubleClickingEnabled(enable) end

---[CLIENT] Sets the font of the label.
---@param fontName string The name of the font. See here for a list of existing fonts. Alternatively, use surface.CreateFont to create your own custom font.
function DLabel:SetFont(fontName) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You really should use DLabel:SetTextColor.
--- Sets the color of the text to the highlight text color defined in the skin.
--- For the default Derma skin this makes the label red.
--- See also DLabel:SetBright and DLabel:SetDark.
--- You should only consider using this if you are using background elements that are not manually painted and are using the skin colors.
---@param highlight boolean true to set the label's color to skins's text highlight color, false otherwise.
function DLabel:SetHighlight(highlight) end

---[CLIENT] Enables or disables toggle functionality for a label. Retrieved with DLabel:GetIsToggle.
--- You must call this before using DLabel:SetToggle, DLabel:GetToggle or DLabel:Toggle.
---@param allowToggle boolean Whether or not to enable toggle functionality.
function DLabel:SetIsToggle(allowToggle) end

---[CLIENT] Sets the text color of the DLabel. This will take precedence over DLabel:SetTextStyleColor.
---@param color table The text color. Uses the Color.
function DLabel:SetTextColor(color) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Use DLabel:SetTextColor instead!
--- Used by DLabel:SetDark, DLabel:SetBright and DLabel:SetHighlight to set the text color without affecting DLabel:SetTextColor calls.
---@param color table The text color. Uses the Color.
function DLabel:SetTextStyleColor(color) end

---[CLIENT] Sets the toggle state of the label. This can be retrieved with DLabel:GetToggle and toggled with DLabel:Toggle.
--- In order to use toggle functionality, you must first call DLabel:SetIsToggle with true, as it is disabled by default.
---@param toggleState boolean The toggle state to be set.
function DLabel:SetToggle(toggleState) end

---[CLIENT] Toggles the label's state. This can be set and retrieved with DLabel:SetToggle and DLabel:GetToggle.
--- In order to use toggle functionality, you must first call DLabel:SetIsToggle with true, as it is disabled by default.
function DLabel:Toggle() end

---[CLIENT] A hook called from within PANEL:ApplySchemeSettings to determine the color of the text on display.
---@param skin table A table supposed to contain the color values listed above.
function DLabel:UpdateColours(skin) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called internally to update the color of the text.
function DLabel:UpdateFGColor() end

---@class DLabelEditable
local DLabelEditable = {}

---[CLIENT] Returns whether the editable label will stretch to the text entered or not.
---@return boolean Whether the editable label will stretch to the text entered or not.
function DLabelEditable:GetAutoStretch() end

---[CLIENT] A hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.
--- Allows you to override/modify the text that will be set to display.
---@param txt string The original user input text
---@return string If provided, will override the text that will be applied to the label itself.
function DLabelEditable:OnLabelTextChanged(txt) end

---[CLIENT] Sets whether the editable label should stretch to the text entered or not.
---@param stretch boolean Whether the editable label should stretch to the text entered or not.
function DLabelEditable:SetAutoStretch(stretch) end

---@class DLabelURL
local DLabelURL = {}

---[CLIENT] Gets the current text color of the DLabelURL. Alias as DLabelURL:GetTextColor.
---@return table The current text Color.
function DLabelURL:GetColor() end

---[CLIENT] Gets the current text color of the DLabelURL set by DLabelURL:SetTextColor.
---@return table The current text Color.
function DLabelURL:GetTextColor() end

---[CLIENT] Returns the color set by DLabelURL:SetTextStyleColor.
---@return table The Color
function DLabelURL:GetTextStyleColor() end

---[CLIENT] Alias of DLabelURL:SetTextColor.
---@param col table The Color to use.
function DLabelURL:SetColor(col) end

---[CLIENT] Sets the text color of the DLabelURL. Overrides DLabelURL:SetTextStyleColor.
--- This should only be used immediately after it is created, and otherwise Panel:SetFGColor.
---@param col table The Color to use.
function DLabelURL:SetTextColor(col) end

---[CLIENT] Sets the base text color of the DLabelURL. This is overridden by DLabelURL:SetTextColor.
---@param color table The Color to set
function DLabelURL:SetTextStyleColor(color) end

---@class DListView
local DListView = {}

---[CLIENT] Adds a column to the listview.
---@param column string The name of the column to add.
---@param position number Sets the ordering of this column compared to other columns. Starting index is 1.
---@return Panel The newly created DListView_Column.
function DListView:AddColumn(column, position) end

---[CLIENT] Adds a line to the list view.
---@param ... ... Values for a new row in the DListView, If several arguments are supplied, each argument will correspond to a respective column in the DListView.
---@return Panel The newly created DListView_Line.
function DListView:AddLine(...) end

---[CLIENT] Clears the current selection in the DListView.
function DListView:ClearSelection() end

---[CLIENT] Gets the width of a column.
---@param column number The column to get the width of.
---@return number Width of the column.
function DListView:ColumnWidth(column) end

---[CLIENT] Creates the lines and gets the height of the contents, in a DListView.
---@return number The height of the contents
function DListView:DataLayout() end

---[CLIENT] Removes the scrollbar.
function DListView:DisableScrollbar() end

---[CLIENT] Called when a line in the DListView is double clicked.
---@param lineID number The line number of the double clicked line.
---@param line Panel The double clicked DListView_Line.
function DListView:DoDoubleClick(lineID, line) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal helper function called from the PANEL:PerformLayout of DListView.
function DListView:FixColumnsLayout() end

---[CLIENT] Gets the canvas.
---@return Panel The canvas.
function DListView:GetCanvas() end

---[CLIENT] Returns the height of the data of the DListView.
--- See also DListView:SetDataHeight.
---@return number The height of the data of the DListView.
function DListView:GetDataHeight() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- See DListView:SetDirty.
---@return boolean 
function DListView:GetDirty() end

---[CLIENT] Returns the height of the header of the DListView.
--- See also DListView:SetHeaderHeight.
---@return number The height of the header of the DListView.
function DListView:GetHeaderHeight() end

---[CLIENT] Returns whether the header line should be visible on not.
---@return boolean Whether the header line should be visible on not.
function DListView:GetHideHeaders() end

---[CLIENT] Returns the height of DListView:GetCanvas.
--- Intended to represent the height of all data lines.
---@return number The height of DListView:GetCanvas.
function DListView:GetInnerTall() end

---[CLIENT] Gets the DListView_Line at the given index.
---@param id number The index of the line to get.
---@return Panel The DListView_Line at the given index.
function DListView:GetLine(id) end

---[CLIENT] Gets all of the lines added to the DListView.
---@return table The lines added to the DListView.
function DListView:GetLines() end

---[CLIENT] Returns whether multiple lines can be selected or not.
--- See DListView:SetMultiSelect.
---@return boolean Whether multiple lines can be selected or not.
function DListView:GetMultiSelect() end

---[CLIENT] Gets all of the lines that are currently selected.
---@return table A table of DListView_Lines.
function DListView:GetSelected() end

---[CLIENT] Gets the currently selected DListView_Line index.
--- If DListView:SetMultiSelect is set to true, only the first line of all selected lines will be returned. Use DListView:GetSelected instead to get all of the selected lines.
---@return number, Panel number - The index of the currently selected line.
---@return number, Panel Panel - The currently selected DListView_Line.
function DListView:GetSelectedLine() end

---[CLIENT] Returns whether sorting of columns by clicking their headers is allowed or not.
--- See also DListView:SetSortable.
---@return boolean Whether sorting of columns by clicking their headers is allowed or not
function DListView:GetSortable() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Converts LineID to SortedID
---@param lineId number The DListView_Line:GetID of a line to look up
---@return number 
function DListView:GetSortedID(lineId) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Use DListView:OnRowSelected instead!
--- Called whenever a line is clicked.
---@param line Panel The selected line.
---@param isSelected boolean Boolean indicating whether the line is selected.
function DListView:OnClickLine(line, isSelected) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called from DListView_Column.
---@param column Panel The column which initialized the resize
---@param size number 
function DListView:OnRequestResize(column, size) end

---[CLIENT] Called when a row is right-clicked
---@param lineID number The line ID of the right clicked line
---@param line Panel The line panel itself, a DListView_Line.
function DListView:OnRowRightClick(lineID, line) end

---[CLIENT] Called internally by DListView:OnClickLine when a line is selected. This is the function you should override to define the behavior when a line is selected.
---@param rowIndex number The index of the row/line that the user clicked on.
---@param row Panel The DListView_Line that the user clicked on.
function DListView:OnRowSelected(rowIndex, row) end

---[CLIENT] Removes a line from the list view.
---@param line number Removes the given row, by row id (same number as DListView:GetLine).
function DListView:RemoveLine(line) end

---[CLIENT] Selects the line at the first index of the DListView if one has been added.
function DListView:SelectFirstItem() end

---[CLIENT] Selects a line in the listview.
---@param Line Panel The line to select.
function DListView:SelectItem(Line) end

---[CLIENT] Sets the height of all lines of the DListView except for the header line.
--- See also DListView:SetHeaderHeight.
---@param height number The new height to set. Default value is 17.
function DListView:SetDataHeight(height) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to signify if the DListView needs a rebuild.
---@param isDirty boolean 
function DListView:SetDirty(isDirty) end

---[CLIENT] Sets the height of the header line of the DListView.
--- See also DListView:SetDataHeight.
---@param height number The new height to set. Default value is 16.
function DListView:SetHeaderHeight(height) end

---[CLIENT] Sets whether the header line should be visible on not.
---@param hide boolean Whether the header line should be visible on not.
function DListView:SetHideHeaders(hide) end

---[CLIENT] Sets whether multiple lines can be selected by the user by using the ctrl or ⇧ shift keys. When set to false, only one line can be selected.
---@param allowMultiSelect boolean Whether multiple lines can be selected or not
function DListView:SetMultiSelect(allowMultiSelect) end

---[CLIENT] Enables/disables the sorting of columns by clicking.
--- This will only affect columns that are created after this function is called. Existing columns will be unaffected.
---@param isSortable boolean Whether sorting columns with clicking is allowed or not.
function DListView:SetSortable(isSortable) end

---[CLIENT] Sorts the items in the specified column.
---@param columnIndex number The index of the column that should be sorted.
---@param descending boolean Whether the items should be sorted in descending order or not.
function DListView:SortByColumn(columnIndex, descending) end

---[CLIENT] Sorts the list based on given columns.
--- All arguments are optional
---@param column1 number 
---@param descrending1 boolean 
---@param column2 number 
---@param descrending2 boolean 
---@param column3 number 
---@param descrending3 boolean 
---@param column4 number 
---@param descrending4 boolean 
function DListView:SortByColumns(column1, descrending1, column2, descrending2, column3, descrending3, column4, descrending4) end

---@class DListView_Column
local DListView_Column = {}

---[CLIENT] Gets the index used for this column.
---@return number The column index of the DListView_Column.
function DListView_Column:GetColumnID() end

---[CLIENT] Resizes the column, additionally adjusting the size of the column to the right, if any.
---@param size number The amount to add to the current column's width. Positive values will make it wider, and negative values will make it thinner.
function DListView_Column:ResizeColumn(size) end

---[CLIENT] Sets the fixed width of the column.
---@param width number The number value which will determine a fixed width.
function DListView_Column:SetFixedWidth(width) end

---[CLIENT] Sets the maximum width of a column.
---@param width number The number value which will determine a maximum width.
function DListView_Column:SetMaxWidth(width) end

---[CLIENT] Sets the minimum width of a column.
---@param width number The number value which will determine a minimum width.
function DListView_Column:SetMinWidth(width) end

---[CLIENT] Sets the text in the column's header.
---@param name string The new name that the column's header will use.
function DListView_Column:SetName(name) end

---[CLIENT] Sets the text alignment for the column
---@param alignment number The direction of the content, based on the number pad.           7: top-left 8: top-center 9: top-right   4: middle-left 5: center 6: middle-right   1: bottom-left 2: bottom-center 3: bottom-right
function DListView_Column:SetTextAlign(alignment) end

---[CLIENT] Sets the width of the panel.
---@param width number The number value which will determine panel width.
function DListView_Column:SetWidth(width) end

---@class DListView_Line
local DListView_Line = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by DListView:DataLayout
---@param pnl DListView The list view.
function DListView_Line:DataLayout(pnl) end

---[CLIENT] Returns whether this line is odd or even in the list. This is internally used (and set) to change the looks of every other line.
---@return boolean Whether this line is 'alternative'.
function DListView_Line:GetAltLine() end

---[CLIENT] Gets the string held in the specified column of a DListView_Line panel.
--- This is the same thing as doing DListView_Line:GetValue( column_number ).
---@param column number The number of the column to retrieve the text from, starts with 1.
---@return string The contents of the specified column.
function DListView_Line:GetColumnText(column) end

---[CLIENT] Returns the ID of this line, set automatically in DListView:AddLine.
---@return number The ID of this line.
function DListView_Line:GetID() end

---[CLIENT] Returns the parent DListView of this line.
---@return DListView The parent DListView of this line.
function DListView_Line:GetListView() end

---[CLIENT] Returns the data stored on given cell of this line.
--- Used in the DListView:SortByColumn function in case you want to sort with something else than the text.
---@param column number The number of the column to write the text from, starts with 1.
---@return any The data that is set for given column of this line, if any.
function DListView_Line:GetSortValue(column) end

---[CLIENT] Returns whether this line is selected.
---@return boolean Whether this line is selected.
function DListView_Line:IsLineSelected() end

---[CLIENT] Called when the player right clicks this line.
function DListView_Line:OnRightClick() end

---[CLIENT] Called when the player selects this line.
function DListView_Line:OnSelect() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether this line is odd or even in the list. This is internally used (and set automatically) to change the looks of every other line.
---@param alt boolean Whether this line is 'alternative'.
function DListView_Line:SetAltLine(alt) end

---[CLIENT] Sets the string held in the specified column of a DListView_Line panel.
---@param column number The number of the column to write the text from, starts with 1.
---@param value string Column text you want to set
---@return DLabel The DLabel in which the text was set.
function DListView_Line:SetColumnText(column, value) end

---[CLIENT] Sets whether this line is selected or not.
---@param selected boolean Whether this line is selected.
function DListView_Line:SetSelected(selected) end

---[CLIENT] Allows you to store data per column.
--- Used in the DListView:SortByColumn function in case you want to sort with something else than the text.
---@param column number The number of the column to write the text from, starts with 1.
---@param data any Data for given column on the line you wish to set.
function DListView_Line:SetSortValue(column, data) end

---@class DMenu
local DMenu = {}

---[CLIENT] Creates a DMenuOptionCVar and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value.
---@param strText string The text of the button
---@param convar string The console variable to change
---@param on string The value of the console variable to set when the option is checked
---@param off string The value of the console variable to set when the option is unchecked
---@param funcFunction function If set, the function will be called every time the option is pressed/clicked/selected. It will have only one argument: Panel pnl - The created DMenuOptionCVar
---@return Panel The created DMenuOptionCVar
function DMenu:AddCVar(strText, convar, on, off, funcFunction) end

---[CLIENT] Add an option to the DMenu
---@param name string Name of the option.
---@param func function Function to execute when this option is clicked.
---@return Panel Returns the created DMenuOption panel.
function DMenu:AddOption(name, func) end

---[CLIENT] Adds a panel to the DMenu as if it were an option.
--- This invokes DScrollPanel:AddItem and will not create a new panel if a class name is passed, unlike Panel:Add.
---@param pnl Panel The panel that you want to add.
function DMenu:AddPanel(pnl) end

---[CLIENT] Adds a horizontal line spacer.
function DMenu:AddSpacer() end

---[CLIENT] Add a sub menu to the DMenu
---@param Name string Name of the sub menu.
---@param func function Function to execute when this sub menu is clicked.
---@return Panel, Panel Panel - The created sub DMenu
---@return Panel, Panel Panel - The created DMenuOption
function DMenu:AddSubMenu(Name, func) end

---[CLIENT] Returns the number of child elements of DMenu's DScrollPanel:GetCanvas.
---@return number The number of child elements
function DMenu:ChildCount() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Clears all highlights made by DMenu:HighlightItem.
--- Doesn't appear to be used or do anything.
function DMenu:ClearHighlights() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally by DMenu:OpenSubMenu.
---@param menu Panel The menu to close
function DMenu:CloseSubMenu(menu) end

---[CLIENT] Gets a child by its index.
---@param childIndex number The index of the child to get. Unlike Panel:GetChild, this index starts at 1.Unlike Panel:GetChild, this index starts at 1.Unlike Panel:GetChild, this index starts at 1.
function DMenu:GetChild(childIndex) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Set by DMenu:SetDeleteSelf
---@return boolean 
function DMenu:GetDeleteSelf() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Returns the value set by DMenu:SetDrawBorder.
---@return boolean 
function DMenu:GetDrawBorder() end

---[CLIENT] Returns whether the DMenu should draw the icon column with a different color or not.
--- See DMenu:SetDrawColumn
---@return boolean Whether to draw the column or not
function DMenu:GetDrawColumn() end

---[CLIENT] Returns the maximum height of the DMenu.
---@return number The maximum height in pixels
function DMenu:GetMaxHeight() end

---[CLIENT] Returns the minimum width of the DMenu in pixels
---@return number the minimum width of the DMenu
function DMenu:GetMinimumWidth() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns the currently opened submenu.
--- Used internally to store the open submenu by DMenu:Hide, DMenu:OpenSubMenu.
---@return Panel The currently opened submenu, if any.
function DMenu:GetOpenSubMenu() end

---[CLIENT] Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively.
function DMenu:Hide() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Highlights selected item in the DMenu by setting the item's key "Highlight" to true.
--- Doesn't appear to be working or used.
---@param item Panel The item to highlight.
function DMenu:HighlightItem(item) end

---[CLIENT] Opens the DMenu at the current mouse position
---@param x number Position (X coordinate) to open the menu at.
---@param y number Position (Y coordinate) to open the menu at.
---@param skipanimation any This argument does nothing.
---@param ownerpanel Panel If x and y are not set manually, setting this argument will offset the y position of the opened menu by the height of given panel.
function DMenu:Open(x, y, skipanimation, ownerpanel) end

---[CLIENT] Closes any active sub menus, and opens a new one.
---@param item Panel The DMenuOption to open the submenu at
---@param menu Panel The submenu to open. If set to nil, the function just closes existing submenus.
function DMenu:OpenSubMenu(item, menu) end

---[CLIENT] Called when a option has been selected
---@param option Panel The DMenuOption that was selected
---@param optionText string The options text
function DMenu:OptionSelected(option, optionText) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by DMenuOption. Calls DMenu:OptionSelected.
---@param option Panel The DMenuOption that called this function
function DMenu:OptionSelectedInternal(option) end

---[CLIENT] Set to true by default. IF set to true, the menu will be deleted when it is closed, not simply hidden.
--- This is used by DMenuBar
---@param newState boolean true to delete menu on close, false to simply hide.
function DMenu:SetDeleteSelf(newState) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
---@param bool boolean 
function DMenu:SetDrawBorder(bool) end

---[CLIENT] Sets whether the DMenu should draw the icon column with a different color.
---@param draw boolean Whether to draw the column or not
function DMenu:SetDrawColumn(draw) end

---[CLIENT] Sets the maximum height the DMenu can have. If the height of all menu items exceed this value, a scroll bar will be automatically added.
---@param maxHeight number The maximum height of the DMenu to set, in pixels
function DMenu:SetMaxHeight(maxHeight) end

---[CLIENT] Sets the minimum width of the DMenu. The menu will be stretched to match the given value.
---@param minWidth number The minimum width of the DMenu in pixels
function DMenu:SetMinimumWidth(minWidth) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to store the open submenu by DMenu:Hide, DMenu:OpenSubMenu, DMenu:CloseSubMenu
---@param item Panel The menu to store
function DMenu:SetOpenSubMenu(item) end

---@class DMenuBar
local DMenuBar = {}

---[CLIENT] Creates a new DMenu object tied to a DButton with the given label on the menu bar.
--- This will create a new menu regardless of whether or not one with the same label exists. To add or get a menu, use DMenuBar:AddOrGetMenu.
---@param label string The name (label) of the derma menu to create.
---@return Panel The new DMenu which will be opened when the button is clicked.
function DMenuBar:AddMenu(label) end

---[CLIENT] Retrieves a DMenu object from the menu bar. If one with the given label doesn't exist, a new one is created.
--- To add a DMenu without checking, use DMenuBar:AddMenu.
---@param label string The name (label) of the derma menu to get or create.
---@return Panel The DMenu with the given label.
function DMenuBar:AddOrGetMenu(label) end

---[CLIENT] Returns the DMenuBar's background color
---@return table The background's color. See Color
function DMenuBar:GetBackgroundColor() end

---[CLIENT] Returns whether or not the DMenuBar is disabled
---@return boolean Is disabled
function DMenuBar:GetDisabled() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use DMenuBar:GetPaintBackground instead.
--- Returns whether or not the background should be painted. Is the same as DMenuBar:GetPaintBackground
---@return boolean Should the background be painted
function DMenuBar:GetDrawBackground() end

---[CLIENT] Returns whether or not the panel is a menu. Used for closing menus when another panel is selected.
---@return boolean Is a menu
function DMenuBar:GetIsMenu() end

---[CLIENT] If a menu is visible/opened, then the menu is returned.
---@return Panel Returns the visible/open menu or nil.
function DMenuBar:GetOpenMenu() end

---[CLIENT] Returns whether or not the background should be painted. Is the same as DMenuBar:GetDrawBackground
---@return boolean Should the background be painted
function DMenuBar:GetPaintBackground() end

---[CLIENT] Sets the background color
---@param color table See Color
function DMenuBar:SetBackgroundColor(color) end

---[CLIENT] Sets whether or not the panel is disabled
---@param disable boolean Should be disabled or not
function DMenuBar:SetDisabled(disable) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use DMenuBar:SetPaintBackground
--- Sets whether or not the background should be painted. Is the same as DMenuBar:SetPaintBackground
---@param shouldPaint boolean Should the background be painted
function DMenuBar:SetDrawBackground(shouldPaint) end

---[CLIENT] Sets whether or not the panel is a menu. Used for closing menus when another panel is selected.
---@param isMenu boolean Is this a menu
function DMenuBar:SetIsMenu(isMenu) end

---[CLIENT] Sets whether or not the background should be painted. Is the same as DMenuBar:SetDrawBackground
---@param shouldPaint boolean Should the background be painted
function DMenuBar:SetPaintBackground(shouldPaint) end

---@class DMenuOption
local DMenuOption = {}

---[CLIENT] Creates a sub DMenu and returns it. Has no duplicate call protection.
---@return Panel The created DMenu to add options to.
function DMenuOption:AddSubMenu() end

---[CLIENT] Returns the checked state of DMenuOption.
---@return boolean Are we checked or not
function DMenuOption:GetChecked() end

---[CLIENT] Returns whether the DMenuOption is a checkbox option or a normal button option.
---@return boolean 
function DMenuOption:GetIsCheckable() end

---[CLIENT] No Description
---@return Panel A DMenu
function DMenuOption:GetMenu() end

---[CLIENT] Called whenever the DMenuOption's checked state changes.
---@param checked boolean The new checked state
function DMenuOption:OnChecked(checked) end

---[CLIENT] Sets the checked state of the DMenuOption. Does not invoke DMenuOption:OnChecked.
---@param checked boolean 
function DMenuOption:SetChecked(checked) end

---[CLIENT] Sets whether the DMenuOption is a checkbox option or a normal button option.
---@param checkable boolean 
function DMenuOption:SetIsCheckable(checkable) end

---[CLIENT] No Description
---@param pnl Panel 
function DMenuOption:SetMenu(pnl) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally by DMenuOption:AddSubMenu to create the submenu arrow and assign the created submenu to be opened this this option is hovered.
---@param menu Panel 
function DMenuOption:SetSubMenu(menu) end

---[CLIENT] Toggles the checked state of DMenuOption. Does not respect DMenuOption:GetIsCheckable.
function DMenuOption:ToggleCheck() end

---@class DMenuOptionCVar
local DMenuOptionCVar = {}

---[CLIENT] Returns the console variable used by the DMenuOptionCVar.
---@return string The console variable used
function DMenuOptionCVar:GetConVar() end

---[CLIENT] Returns the value of the console variable when the DMenuOptionCVar is not checked.
---@return string The value
function DMenuOptionCVar:GetValueOff() end

---[CLIENT] Return the value of the console variable when the DMenuOptionCVar is checked.
---@return string The value
function DMenuOptionCVar:GetValueOn() end

---[CLIENT] Sets the console variable to be used by DMenuOptionCVar.
---@param cvar string The console variable name to set
function DMenuOptionCVar:SetConVar(cvar) end

---[CLIENT] Sets the value of the console variable when the DMenuOptionCVar is not checked.
---@param value string The value
function DMenuOptionCVar:SetValueOff(value) end

---[CLIENT] Sets the value of the console variable when the DMenuOptionCVar is checked.
---@param value string The value
function DMenuOptionCVar:SetValueOn(value) end

---@class DModelPanel
local DModelPanel = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by the DModelPanel's paint hook to draw the model and background.
function DModelPanel:DrawModel() end

---[CLIENT] Returns the ambient lighting used on the rendered entity.
---@return table The color of the ambient lighting.
function DModelPanel:GetAmbientLight() end

---[CLIENT] Returns whether or not the panel entity should be animated when the default DModelPanel:LayoutEntity function is called.
---@return boolean True if the panel entity can be animated with Entity:SetSequence directly, false otherwise.
function DModelPanel:GetAnimated() end

---[CLIENT] Returns the animation speed of the panel entity, see DModelPanel:SetAnimSpeed.
---@return number The animation speed.
function DModelPanel:GetAnimSpeed() end

---[CLIENT] Returns the position of the model viewing camera.
---@return Vector The position of the camera.
function DModelPanel:GetCamPos() end

---[CLIENT] Returns the color of the rendered entity.
---@return table The color of the entity, see Color.
function DModelPanel:GetColor() end

---[CLIENT] Returns the entity being rendered by the model panel.
---@return CSEnt The rendered entity (client-side)
function DModelPanel:GetEntity() end

---[CLIENT] Returns the FOV (field of view) the camera is using.
---@return number The FOV of the camera.
function DModelPanel:GetFOV() end

---[CLIENT] Returns the angles of the model viewing camera. Is nil until changed with DModelPanel:SetLookAng.
---@return Angle The angles of the camera.
function DModelPanel:GetLookAng() end

---[CLIENT] Returns the position the viewing camera is pointing toward.
---@return Vector The position the camera is pointing toward.
function DModelPanel:GetLookAt() end

---[CLIENT] Gets the model of the rendered entity.
---@return string The model of the rendered entity.
function DModelPanel:GetModel() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- By default, this function slowly rotates and animates the entity being rendered.
--- If you want to change this behavior, you should override it.
---@param entity Entity The entity that is being rendered.
function DModelPanel:LayoutEntity(entity) end

---[CLIENT] Called when the entity of the DModelPanel was drawn.
--- This is a rendering hook with 3d drawing context.
---@param ent Entity The clientside entity of the DModelPanel that has been drawn.
function DModelPanel:PostDrawModel(ent) end

---[CLIENT] Called before the entity of the DModelPanel is drawn.
---@param ent Entity The clientside entity of the DModelPanel that has been drawn.
---@return boolean Return false to stop the entity from being drawn. This will also cause DModelPanel:PostDrawModel to stop being called.
function DModelPanel:PreDrawModel(ent) end

---[CLIENT] This function is used in the DModelPanel:LayoutEntity. It will set the active model to the last set animation using Entity:SetSequence. By default, it is the walking animation.
function DModelPanel:RunAnimation() end

---[CLIENT] Sets the ambient lighting used on the rendered entity.
---@param color table The color of the ambient lighting.
function DModelPanel:SetAmbientLight(color) end

---[CLIENT] Sets whether or not to animate the entity when the default DModelPanel:LayoutEntity is called.
---@param animated boolean True to animate, false otherwise.
function DModelPanel:SetAnimated(animated) end

---[CLIENT] Sets the speed used by DModelPanel:RunAnimation to advance frame on an entity sequence.
--- Entity:FrameAdvance doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by DModelPanel:GetAnimSpeed
---@param animSpeed number The animation speed.
function DModelPanel:SetAnimSpeed(animSpeed) end

---[CLIENT] Sets the position of the camera.
---@param pos Vector The position to set the camera at.
function DModelPanel:SetCamPos(pos) end

---[CLIENT] Sets the color of the rendered entity.
--- This does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the DModelPanel page
---@param color table The render color of the entity.
function DModelPanel:SetColor(color) end

---[CLIENT] Sets the directional lighting used on the rendered entity.
---@param direction number The light direction, see Enums/BOX.
---@param color table The color of the directional lighting.
function DModelPanel:SetDirectionalLight(direction, color) end

---[CLIENT] Sets the entity to be rendered by the model panel.
--- If you set ent to a shared entity you must set ent to nil before removing this panel or else a "Trying to remove server entity on client!" error is thrown
---@param ent Entity The new panel entity.
function DModelPanel:SetEntity(ent) end

---[CLIENT] Sets the panel camera's FOV (field of view).
---@param fov number The field of view value.
function DModelPanel:SetFOV(fov) end

---[CLIENT] Sets the angles of the camera.
---@param ang Angle The angles to set the camera to.
function DModelPanel:SetLookAng(ang) end

---[CLIENT] Makes the panel's camera face the given position. Basically sets the camera's angles (DModelPanel:SetLookAng) after doing some math.
---@param pos Vector The position to orient the camera toward.
function DModelPanel:SetLookAt(pos) end

---[CLIENT] Sets the model of the rendered entity.
--- This function may give a different model than expected. This is not a bug, however this problem may appear with some player models which are renamed several times in a wrong way. To solve that, you can use Entity:SetModel and Entity:SetModelName on the internal panel entity. More information : https://github.com/Facepunch/garrysmod-issues/issues/4534.
---@param model string The model to apply to the entity.
function DModelPanel:SetModel(model) end

---[CLIENT] No Description
---@param path string The path to the scene file. (.vcd)
function DModelPanel:StartScene(path) end

---@class DModelSelect
local DModelSelect = {}

---[CLIENT] Sets the height of the panel in the amount of 64px spawnicons.
--- Overrides Panel:SetHeight.
---@param num number Basically how many rows of 64x64 px spawnicons should fit in this DModelSelect
function DModelSelect:SetHeight(num) end

---[CLIENT] Called to set the list of models within the panel element.
---@param models table Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar.
---@param convar string 
---@param dontSort boolean 
---@param DontCallListConVars boolean 
function DModelSelect:SetModelList(models, convar, dontSort, DontCallListConVars) end

---@class DNotify
local DNotify = {}

---[CLIENT] Adds a panel to the notification
---@param pnl Panel The panel to add
---@param lifeLength number If set, overrides DNotify:SetLife.
function DNotify:AddItem(pnl, lifeLength) end

---[CLIENT] Returns the current alignment of this notification panel. Set by DNotify:SetAlignment.
---@return number The numpad alignment
function DNotify:GetAlignment() end

---[CLIENT] Returns all the items added with DNotify:AddItem.
---@return table A table of Panels.
function DNotify:GetItems() end

---[CLIENT] Returns the display time in seconds of the DNotify. This is set with
--- DNotify:SetLife.
---@return number The display time in seconds.
function DNotify:GetLife() end

---[CLIENT] Returns the spacing between items set by DNotify:SetSpacing.
---@return number 
function DNotify:GetSpacing() end

---[CLIENT] Sets the alignment of the child panels in the notification
---@param alignment number It's the Numpad alignment, 6 is right, 9 is top left, etc.
function DNotify:SetAlignment(alignment) end

---[CLIENT] Sets the display time in seconds for the DNotify.
---@param time number The time in seconds.
function DNotify:SetLife(time) end

---[CLIENT] Sets the spacing between child elements of the notification panel.
---@param spacing number 
function DNotify:SetSpacing(spacing) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
function DNotify:Shuffle() end

---@class DNumSlider
local DNumSlider = {}

---[CLIENT] Returns the amount of numbers after the decimal point.
---@return number 0 for whole numbers only, 1 for one number after the decimal point, etc.
function DNumSlider:GetDecimals() end

---[CLIENT] Returns the default value of the slider, if one was set by DNumSlider:SetDefaultValue
---@return number The default value of the slider
function DNumSlider:GetDefaultValue() end

---[CLIENT] Returns the maximum value of the slider
---@return number The maximum value of the slider
function DNumSlider:GetMax() end

---[CLIENT] Returns the minimum value of the slider
---@return number The minimum value of the slider
function DNumSlider:GetMin() end

---[CLIENT] Returns the range of the slider, basically maximum value - minimum value.
---@return number The range of the slider
function DNumSlider:GetRange() end

---[CLIENT] Returns the DTextEntry component of the slider.
---@return Panel The DTextEntry.
function DNumSlider:GetTextArea() end

---[CLIENT] Returns the value of the DNumSlider
---@return number The value of the slider.
function DNumSlider:GetValue() end

---[CLIENT] Returns true if either the DTextEntry, the DSlider or the DNumberScratch are being edited.
---@return boolean Whether or not the DNumSlider is being edited by the player.
function DNumSlider:IsEditing() end

---[CLIENT] Called when the value of the slider is changed, through code or changing the slider.
---@param value number The new value of the DNumSlider.
function DNumSlider:OnValueChanged(value) end

---[CLIENT] Resets the slider to the default value, if one was set by DNumSlider:SetDefaultValue.
--- This function is called by the DNumSlider when user middle mouse clicks on the draggable knob of the slider.
function DNumSlider:ResetToDefaultValue() end

---[CLIENT] Sets the console variable to be updated when the value of the slider is changed.
---@param cvar string The name of the ConVar to be updated.
function DNumSlider:SetConVar(cvar) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Calls DLabel:SetDark on the DLabel part of the DNumSlider.
---@param dark boolean 
function DNumSlider:SetDark(dark) end

---[CLIENT] Sets the desired amount of numbers after the decimal point.
--- This doesn't affect values passed to DNumSlider:OnValueChanged.To get right values passed to DNumSlider:OnValueChanged use math.Round.
---@param decimals number 0 for whole numbers only, 1 for one number after the decimal point, etc.
function DNumSlider:SetDecimals(decimals) end

---[CLIENT] Sets the default value of the slider, to be used by DNumSlider:ResetToDefaultValue or by middle mouse clicking the draggable knob of the slider.
---@param default number The new default value of the slider to set
function DNumSlider:SetDefaultValue(default) end

---[CLIENT] Sets the maximum value for the slider.
---@param max number The value to set as maximum for the slider.
function DNumSlider:SetMax(max) end

---[CLIENT] Sets the minimum value for the slider
---@param min number The value to set as minimum for the slider.
function DNumSlider:SetMin(min) end

---[CLIENT] Sets the minimum and the maximum value of the slider.
---@param min number The minimum value of the slider.
---@param max number The maximum value of the slider.
function DNumSlider:SetMinMax(min, max) end

---[CLIENT] Sets the value of the DNumSlider.
---@param val number The value to set.
function DNumSlider:SetValue(val) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@param x number 
---@param y number 
---@return number, number number - 
---@return number, number number - The second passed argument.
function DNumSlider:TranslateSliderValues(x, y) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
function DNumSlider:UpdateNotches() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.
--- This is an internal function. Override DNumSlider:OnValueChanged instead.
---@param value number The value the slider has been changed to.
function DNumSlider:ValueChanged(value) end

---@class DNumberScratch
local DNumberScratch = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by DNumberScratch:DrawScreen.
---@param level number 
---@param x number 
---@param y number 
---@param w number 
---@param h number 
---@param range number 
---@param value number 
---@param min number 
---@param max number 
function DNumberScratch:DrawNotches(level, x, y, w, h, range, value, min, max) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by DNumberScratch:PaintScratchWindow.
---@param x number 
---@param y number 
---@param w number 
---@param h number 
function DNumberScratch:DrawScreen(x, y, w, h) end

---[CLIENT] Returns whether this panel is active or not, i.e. if the player is currently changing its value.
---@return boolean 
function DNumberScratch:GetActive() end

---[CLIENT] Returns the desired amount of numbers after the decimal point.
---@return number 0 for whole numbers only, 1 for one number after the decimal point, etc.
function DNumberScratch:GetDecimals() end

---[CLIENT] Returns the real value of the DNumberScratch as a number.
--- See also DNumberScratch:GetTextValue and DNumberScratch:GetFraction.
---@return number The real value of the DNumberScratch
function DNumberScratch:GetFloatValue() end

---[CLIENT] Returns the value of the DNumberScratch as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the DNumberScratch.
--- See also:
--- 
--- DNumberScratch:GetTextValue
--- DNumberScratch:GetFloatValue
--- DNumberScratch:SetFraction
---@return number A value between 0 and 1
function DNumberScratch:GetFraction() end

---[CLIENT] Returns the maximum value that can be selected on the number scratch
---@return number The maximum value that can be selected on the number scratch
function DNumberScratch:GetMax() end

---[CLIENT] Returns the minimum value that can be selected on the number scratch
---@return number The minimum value that can be selected on the number scratch
function DNumberScratch:GetMin() end

---[CLIENT] Returns the range of the DNumberScratch. Basically max value - min value.
---@return number The range of the DNumberScratch
function DNumberScratch:GetRange() end

---[CLIENT] Returns whether the scratch window should be visible or not.
---@return boolean 
function DNumberScratch:GetShouldDrawScreen() end

---[CLIENT] Returns the real value of the DNumberScratch as a string.
--- See also DNumberScratch:GetFloatValue and DNumberScratch:GetFraction.
---@return string The real value of the DNumberScratch
function DNumberScratch:GetTextValue() end

---[CLIENT] Returns the zoom level of the scratch window
---@return number 
function DNumberScratch:GetZoom() end

---[CLIENT] Returns the ideal zoom level for the panel based on the DNumberScratch:GetRange.
---@return number The ideal zoom level for the panel based on the panels range.
function DNumberScratch:IdealZoom() end

---[CLIENT] Returns whether the player is currently editing the value of the DNumberScratch.
---@return boolean 
function DNumberScratch:IsEditing() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used to lock the cursor in place.
function DNumberScratch:LockCursor() end

---[CLIENT] Called when the value of the DNumberScratch is changed.
---@param newValue number The new value
function DNumberScratch:OnValueChanged(newValue) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used to paint the 'scratch' window.
function DNumberScratch:PaintScratchWindow() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether or not the panel is 'active'.
--- Forcing this panel to be active may not work.
---@param active boolean true to activate, false to deactivate.
function DNumberScratch:SetActive(active) end

---[CLIENT] Sets the desired amount of numbers after the decimal point.
---@param decimals number 0 for whole numbers only, 1 for one number after the decimal point, etc.
function DNumberScratch:SetDecimals(decimals) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Does not trigger DNumberScratch:OnValueChanged
--- Use DNumberScratch:SetValue instead.
---@param val number The value to set
function DNumberScratch:SetFloatValue(val) end

---[CLIENT] Sets the value of the DNumberScratch as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the DNumberScratch
---@param frac number A value between 0 and 1
function DNumberScratch:SetFraction(frac) end

---[CLIENT] Sets the max value that can be selected on the number scratch
---@param max number The maximum number
function DNumberScratch:SetMax(max) end

---[CLIENT] Sets the minimum value that can be selected on the number scratch.
---@param min number The minimum number
function DNumberScratch:SetMin(min) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window.
---@param shouldDraw boolean 
function DNumberScratch:SetShouldDrawScreen(shouldDraw) end

---[CLIENT] Sets the value of the DNumberScratch and triggers DNumberScratch:OnValueChanged
---@param val number The value to set.
function DNumberScratch:SetValue(val) end

---[CLIENT] Sets the zoom level of the scratch panel.
---@param zoom number 
function DNumberScratch:SetZoom(zoom) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Forces the assigned ConVar to be updated to the value of this DNumberScratch
function DNumberScratch:UpdateConVar() end

---@class DNumberWang
local DNumberWang = {}

---[CLIENT] Returns the amount of decimal places allowed in the number selector, set by DNumberWang:SetDecimals
---@return number The amount of decimal places allowed in the number selector.
function DNumberWang:GetDecimals() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Returns whatever is set by DNumberWang:SetFloatValue or 0.
---@return number 
function DNumberWang:GetFloatValue() end

---[CLIENT] Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument val is supplied, that number will be computed instead.
---@param val number The fraction numerator.
function DNumberWang:GetFraction(val) end

---[CLIENT] Returns interval at which the up and down buttons change the current value.
---@return number The current interval.
function DNumberWang:GetInterval() end

---[CLIENT] Returns the maximum numeric value allowed by the number selector.
---@return number The maximum value.
function DNumberWang:GetMax() end

---[CLIENT] Returns the minimum numeric value allowed by the number selector.
---@return number The minimum number.
function DNumberWang:GetMin() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- This function returns the panel it is used on.
---@return Panel self
function DNumberWang:GetTextArea() end

---[CLIENT] Returns the numeric value inside the number selector.
---@return number The numeric value.
function DNumberWang:GetValue() end

---[CLIENT] Hides the number selector arrows.
function DNumberWang:HideWang() end

---[CLIENT] Called when the number selector value is changed.
---@param val number The new value of the number selector.
function DNumberWang:OnValueChanged(val) end

---[CLIENT] Sets the amount of decimal places allowed in the number selector.
---@param num number The amount of decimal places.
function DNumberWang:SetDecimals(num) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Appears to do nothing.
---@param val number 
function DNumberWang:SetFloatValue(val) end

---[CLIENT] Sets the value of the number selector based on the given fraction number.
---@param val number The fraction of the number selector's range.
function DNumberWang:SetFraction(val) end

---[CLIENT] Sets interval at which the up and down buttons change the current value.
---@param min number The new interval.
function DNumberWang:SetInterval(min) end

---[CLIENT] Sets the maximum numeric value allowed by the number selector.
---@param max number The maximum value.
function DNumberWang:SetMax(max) end

---[CLIENT] Sets the minimum numeric value allowed by the number selector.
---@param min number The minimum value.
function DNumberWang:SetMin(min) end

---[CLIENT] Sets the minimum and maximum value allowed by the number selector.
---@param min number The minimum value.
---@param max number The maximum value.
function DNumberWang:SetMinMax(min, max) end

---[CLIENT] Sets the value of the DNumberWang and triggers DNumberWang:OnValueChanged
---@param val number The value to set.
function DNumberWang:SetValue(val) end

---@class DPanel
local DPanel = {}

---[CLIENT] Returns the panel's background color.
--- By default this returns nil even though the default background color is white
---@return table Color of the panel's background.
function DPanel:GetBackgroundColor() end

---[CLIENT] Returns whether or not the panel is disabled.
---@return boolean True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255).
function DPanel:GetDisabled() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use DPanel:GetPaintBackground instead.
--- Returns whether or not the panel background is being drawn. Alias of DPanel:GetPaintBackground.
---@return boolean True if the panel background is drawn, false otherwise.
function DPanel:GetDrawBackground() end

---[CLIENT] Returns whether or not the panel background is being drawn.
---@return boolean True if the panel background is drawn, false otherwise.
function DPanel:GetPaintBackground() end

---[CLIENT] Sets the background color of the panel.
---@param color table The background color.
function DPanel:SetBackgroundColor(color) end

---[CLIENT] Sets whether or not to disable the panel.
---@param disabled boolean True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255).
function DPanel:SetDisabled(disabled) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use DPanel:SetPaintBackground instead.
--- Sets whether or not to draw the panel background. Alias of DPanel:SetPaintBackground.
---@param draw boolean True to show the panel's background, false to hide it.
function DPanel:SetDrawBackground(draw) end

---[CLIENT] Sets whether or not to paint/draw the panel background.
---@param paint boolean True to show the panel's background, false to hide it.
function DPanel:SetPaintBackground(paint) end

---@class DPanelList
local DPanelList = {}

---[CLIENT] Adds a existing panel to the end of DPanelList.
---@param pnl Panel Panel to be used as element of list
---@param state string If set to "ownline", the item will take its own entire line.
function DPanelList:AddItem(pnl, state) end

---[CLIENT] Removes all items.
function DPanelList:CleanList() end

---[CLIENT] Enables/creates the vertical scroll bar so that the panel list can be scrolled through.
function DPanelList:EnableVerticalScrollbar() end

---[CLIENT] Returns all panels has added by DPanelList:AddItem
---@return table A table of panels used as items of DPanelList.
function DPanelList:GetItems() end

---[CLIENT] Returns offset of list items from the panel borders set by DPanelList:SetPadding
---@return number Offset from panel borders
function DPanelList:GetPadding() end

---[CLIENT] Returns distance between list items set by DPanelList:SetSpacing
---@return number Distance between panels
function DPanelList:GetSpacing() end

---[CLIENT] 
---@param insert Panel The panel to insert
---@param strLineState string If set to "ownline", no other panels will be placed to the left or right of the panel we are inserting
function DPanelList:InsertAtTop(insert, strLineState) end

---[CLIENT] Sets the offset of the lists items from the panel borders
---@param Offset number Offset from panel borders
function DPanelList:SetPadding(Offset) end

---[CLIENT] Sets distance between list items
---@param Distance number Distance between panels
function DPanelList:SetSpacing(Distance) end

---@class DPanelOverlay
local DPanelOverlay = {}

---[CLIENT] Returns the border color of the DPanelOverlay set by DPanelOverlay:SetColor.
---@return table The set color. Uses the Color.
function DPanelOverlay:GetColor() end

---[CLIENT] Returns the type of the DPanelOverlay set by DPanelOverlay:SetType.
---@return number The set type.
function DPanelOverlay:GetType() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally by the panel for type 3.
---@param cola table 
---@param colb table 
---@param colc table 
---@param cold table 
---@param size number 
function DPanelOverlay:PaintDifferentColours(cola, colb, colc, cold, size) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally by the panel for types 1 and 2.
---@param size number 
function DPanelOverlay:PaintInnerCorners(size) end

---[CLIENT] Sets the border color of the DPanelOverlay.
---@param color table The color to set. Uses the Color.
function DPanelOverlay:SetColor(color) end

---[CLIENT] Sets the type of the DPanelOverlay.
---@param type number The type to set. Possible value are:  1 - 8px corners of given color 2 - 4px corners of given type 3 - 2 top? corners of hardcoded color, 2 other corners of given color
function DPanelOverlay:SetType(type) end

---@class DProgress
local DProgress = {}

---[CLIENT] Returns the progress bar's fraction. 0 is 0% and 1 is 100%.
---@return number Current fraction of the progress bar.
function DProgress:GetFraction() end

---[CLIENT] Sets the fraction of the progress bar. 0 is 0% and 1 is 100%.
---@param fraction number Fraction of the progress bar. Range is 0 to 1 (0% to 100%).
function DProgress:SetFraction(fraction) end

---@class DProperties
local DProperties = {}

---[CLIENT] Creates a row in the properties panel.
---@param category string The category to list this row under
---@param name string The label of this row
---@return Panel An internal Row panel. It has 2 methods of interest:  Setup( string type, table vars )  Call to set up the panel as one of the DProperty_<type> panels. vars parameter is directly fed into the created DProperty_<type> panels' Setup function.   SetValue( any value )  Call to set the value on the created DProperty_<type> panel.
function DProperties:CreateRow(category, name) end

---[CLIENT] Returns the DScrollPanel all the properties panels are attached to.
---@return Panel A DScrollPanel canvas
function DProperties:GetCanvas() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns (or creates) a category of properties.
--- See DProperties:CreateRow for adding actual properties.
---@param name string Name of the category
---@param create boolean Create a new category if it doesn't exist.
---@return Panel An internal panel.
function DProperties:GetCategory(name, create) end

---@class DPropertySheet
local DPropertySheet = {}

---[CLIENT] Adds a new tab.
---@param name string Name of the tab
---@param pnl Panel Panel to be used as contents of the tab. This normally should be a DPanel
---@param icon string Icon for the tab. This will ideally be a silkicon, but any material name can be used.
---@param noStretchX boolean Should DPropertySheet try to fill itself with given panel horizontally.
---@param noStretchY boolean Should DPropertySheet try to fill itself with given panel vertically.
---@param tooltip string Tooltip for the tab when user hovers over it with his cursor
---@return table A table containing the following keys:  Panel Tab - The created DTab. string Name - Name of the created tab Panel Panel - The contents panel of the tab
function DPropertySheet:AddSheet(name, pnl, icon, noStretchX, noStretchY, tooltip) end

---[CLIENT] Removes tab and/or panel from the parent DPropertySheet.
---@param tab Panel The DTab of the sheet from DPropertySheet. See DPropertySheet:GetItems.
---@param removePanel boolean Set to true to remove the associated panel object as well.
---@return Panel The panel of the tab.
function DPropertySheet:CloseTab(tab, removePanel) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal function that handles the cross fade animation when the player switches tabs.
---@param anim table 
---@param delta number 
---@param data table 
function DPropertySheet:CrossFade(anim, delta, data) end

---[CLIENT] Returns the active DTab of this DPropertySheet.
---@return Panel The DTab
function DPropertySheet:GetActiveTab() end

---[CLIENT] Returns the amount of time (in seconds) it takes to fade between tabs.
--- Set by DPropertySheet:SetFadeTime
---@return number The amount of time (in seconds) it takes to fade between tabs.
function DPropertySheet:GetFadeTime() end

---[CLIENT] Returns a list of all tabs of this DPropertySheet.
---@return table A table of tables. Each table contains 3 key-value pairs:  string Name - The name of the tab. Panel Tab - The DTab associated with the tab. Panel Panel - The Panel associated with the tab.
function DPropertySheet:GetItems() end

---[CLIENT] Gets the padding from the parent panel to child panels.
---@return number Padding
function DPropertySheet:GetPadding() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Returns whatever value was set by DPropertySheet:SetShowIcons.
---@return boolean 
function DPropertySheet:GetShowIcons() end

---[CLIENT] Called when a player switches the tabs.
--- Source code states that this is meant to be overridden.
---@param old Panel The previously active DTab
---@param new Panel The newly active DTab
function DPropertySheet:OnActiveTabChanged(old, new) end

---[CLIENT] Sets the active tab of the DPropertySheet.
---@param tab Panel The DTab to set active. See DPropertySheet:GetItems
function DPropertySheet:SetActiveTab(tab) end

---[CLIENT] Sets the amount of time (in seconds) it takes to fade between tabs.
---@param time number The amount of time it takes (in seconds) to fade between tabs.
function DPropertySheet:SetFadeTime(time) end

---[CLIENT] Sets the padding from parent panel to children panel.
---@param padding number Amount of padding
function DPropertySheet:SetPadding(padding) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
---@param show boolean 
function DPropertySheet:SetShowIcons(show) end

---[CLIENT] Creates a close button on the right side of the DPropertySheet that will run the given callback function when pressed.
---@param func function Callback function to be called when the close button is pressed.
function DPropertySheet:SetupCloseButton(func) end

---[CLIENT] Sets the width of the DPropertySheet to fit the contents of all of the tabs.
function DPropertySheet:SizeToContentWidth() end

---[CLIENT] Switches the active tab to a tab with given name.
---@param name string Case sensitive name of the tab.
function DPropertySheet:SwitchToName(name) end

---@class DProperty_Combo
local DProperty_Combo = {}

---[CLIENT] Add a choice to your combo control.
---@param Text string Shown text.
---@param data any Stored Data.
---@param select boolean Select this element?
function DProperty_Combo:AddChoice(Text, data, select) end

---[CLIENT] Called after the user selects a new value.
---@param data any The new data that was selected.
function DProperty_Combo:DataChanged(data) end

---[CLIENT] Set the selected option.
---@param Id number Id of the choice to be selected.
function DProperty_Combo:SetSelected(Id) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets up a combo control.
---@param data table Data to use to set up the combo box control. See Editable Entities. Structure:  string text - The default label for this combo box table values - The values to add to the combo box. Keys are the "nice" text, values are the data value to send. table icons - The icons for each value. They will be matched by key name. boolean select - The "nice" name/key of the value that should be initially selected.
function DProperty_Combo:Setup(data) end

---@class DProperty_Generic
local DProperty_Generic = {}

---[CLIENT] Sets up a generic control for use by DProperties.
---@param data table See Editable Entities.
function DProperty_Generic:Setup(data) end

---@class DProperty_VectorColor
local DProperty_VectorColor = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by a property row to setup a color selection control.
---@param settings table A table of settings. None of the values are used for this property. See Editable Entities.
function DProperty_VectorColor:Setup(settings) end

---[CLIENT] Sets the color value of the property.
---@param color Vector Sets the color to use in a DProperty_VectorColor.
function DProperty_VectorColor:SetValue(color) end

---@class DRGBPicker
local DRGBPicker = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns the color at given position on the internal texture.
---@param x number The X coordinate on the texture to get the color from
---@param y number The Y coordinate on the texture to get the color from
---@return table, number, number table - Color
---@return table, number, number number - The X-coordinate clamped to the texture's width.
---@return table, number, number number - The Y-coordinate clamped to the texture's height.
function DRGBPicker:GetPosColor(x, y) end

---[CLIENT] Returns the color currently set on the color picker.
---@return table The color set on the color picker, see Color.
function DRGBPicker:GetRGB() end

---[CLIENT] Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.
---@param col table The color that is selected on the color picker (Color form).
function DRGBPicker:OnChange(col) end

---[CLIENT] Sets the color stored in the color picker.
--- This function is meant to be called internally and will not update the position of the color picker line or call DRGBPicker:OnChange
---@param color table The color to set, see Color.
function DRGBPicker:SetRGB(color) end

---@class DScrollPanel
local DScrollPanel = {}

---[CLIENT] Parents the passed panel to the DScrollPanel's canvas.
---@param pnl Panel The panel to add.
function DScrollPanel:AddItem(pnl) end

---[CLIENT] Clears the DScrollPanel's canvas, removing all added items.
function DScrollPanel:Clear() end

---[CLIENT] Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.
---@return Panel The canvas
function DScrollPanel:GetCanvas() end

---[CLIENT] Gets the DScrollPanels padding
---@return number DScrollPanels padding
function DScrollPanel:GetPadding() end

---[CLIENT] Returns the vertical scroll bar of the panel.
---@return Panel The DVScrollBar.
function DScrollPanel:GetVBar() end

---[CLIENT] Return the width of the DScrollPanel's canvas.
---@return number The width of the DScrollPanel's canvas
function DScrollPanel:InnerWidth() end

---[CLIENT] 
function DScrollPanel:Rebuild() end

---[CLIENT] Scrolls to the given child
---@param panel Panel The panel to scroll to, must be a child of the DScrollPanel.
function DScrollPanel:ScrollToChild(panel) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the canvas of the DScrollPanel.
---@param canvas Panel The new canvas
function DScrollPanel:SetCanvas(canvas) end

---[CLIENT] Sets the DScrollPanel's padding. This function appears to be unused.
---@param padding number The padding of the DScrollPanel.
function DScrollPanel:SetPadding(padding) end

---@class DShape
local DShape = {}

---[CLIENT] Returns the current type of shape this panel is set to display.
--- See DShape:SetBorderColor.
---@return table The border color See Color
function DShape:GetBorderColor() end

---[CLIENT] Returns the color set to display the shape with.
---@return table The Color
function DShape:GetColor() end

---[CLIENT] Returns the current type of shape this panel is set to display.
--- See DShape:SetType.
---@return string 
function DShape:GetType() end

---[CLIENT] Sets the border color of the shape.
--- Currently does nothing.
---@param clr table The desired border color. See Color
function DShape:SetBorderColor(clr) end

---[CLIENT] Sets the color to display the shape with.
---@param clr table The Color
function DShape:SetColor(clr) end

---[CLIENT] Sets the shape to be drawn.
---@param type string The render type of the DShape. Only rectangles (Rect) work currently. If you don't define a type immediately, the PANEL:Paint method will generate errors until you do.
function DShape:SetType(type) end

---@class DSlider
local DSlider = {}

---[CLIENT] Identical to DSlider:IsEditing
---@return boolean 
function DSlider:GetDragging() end

---[CLIENT] Returns the draggable panel's lock on the X axis.
--- See DSlider:SetLockX for more info.
---@return number 
function DSlider:GetLockX() end

---[CLIENT] Returns the draggable panel's lock on the Y axis.
--- See DSlider:SetLockY for more info.
---@return number 
function DSlider:GetLockY() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Does not affect anything by default.
--- Returns the current notch color, set by DSlider:SetNotchColor
---@return Color The current color
function DSlider:GetNotchColor() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Appears to be non functioning, however is still used by panels such as DNumSlider.
---@return number 
function DSlider:GetNotches() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
---@return any 
function DSlider:GetNumSlider() end

---[CLIENT] Returns the target position of the draggable "knob" panel of the slider on the X axis.
--- Set by DSlider:SetSlideX.
---@return number The value range seems to be from 0 to 1
function DSlider:GetSlideX() end

---[CLIENT] Returns the target position of the draggable "knob" panel of the slider on the Y axis.
--- Set by DSlider:SetSlideY.
---@return number The value range seems to be from 0 to 1
function DSlider:GetSlideY() end

---[CLIENT] Returns the value set by DSlider:SetTrapInside.
---@return boolean 
function DSlider:GetTrapInside() end

---[CLIENT] Returns true if this element is being edited by the player.
---@return boolean 
function DSlider:IsEditing() end

---[CLIENT] Called when the values of this slider panel were changed.
---@param x number The X axis position of the slider in range 0-1
---@param y number The Y axis position of the slider in range 0-1
function DSlider:OnValueChanged(x, y) end

---[CLIENT] Sets the background for the slider.
---@param path string Path to the image.
function DSlider:SetBackground(path) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether or not the slider is being dragged.
---@param dragging boolean 
function DSlider:SetDragging(dragging) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
function DSlider:SetImage() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
function DSlider:SetImageColor() end

---[CLIENT] Sets the lock on the X axis.
--- For example the value 0.5 will lock the draggable panel to half the width of the slider's panel.
---@param lockX number Set to nil to reset lock. The value range is from 0 to 1.
function DSlider:SetLockX(lockX) end

---[CLIENT] Sets the lock on the Y axis.
--- For example the value 0.5 will lock the draggable panel to half the height of the slider's panel.
---@param lockY number Set to nil to reset lock. The value range is from 0 to 1.
function DSlider:SetLockY(lockY) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Does not affect anything by default.
--- Sets the current notch color, overriding the color set by the derma skin.
---@param clr Color The new color to set
function DSlider:SetNotchColor(clr) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Appears to be non functioning, however is still used by panels such as DNumSlider.
---@param notches number 
function DSlider:SetNotches(notches) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
---@param slider any 
function DSlider:SetNumSlider(slider) end

---[CLIENT] Used to position the draggable panel of the slider on the X axis.
---@param x number The value range seems to be from 0 to 1
function DSlider:SetSlideX(x) end

---[CLIENT] Used to position the draggable panel of the slider on the Y axis.
---@param y number The value range seems to be from 0 to 1
function DSlider:SetSlideY(y) end

---[CLIENT] Makes the slider itself, the "knob", trapped within the bounds of the slider panel. Example:
---@param trap boolean 
function DSlider:SetTrapInside(trap) end

---[CLIENT] For override by child panels, such as DNumSlider. Allows changing the output values of the slider.
---@param x number The input X coordinate, in range of 0-1.
---@param y number The input Y coordinate, in range of 0-1.
---@return number, number number - The output X coordinate, in range of 0-1.
---@return number, number number - The output X coordinate, in range of 0-1.
function DSlider:TranslateValues(x, y) end

---@class DSprite
local DSprite = {}

---[CLIENT] Gets the color the sprite is using as a modifier.
---@return table The Color being used.
function DSprite:GetColor() end

---[CLIENT] No Description
---@return Vector 
function DSprite:GetHandle() end

---[CLIENT] Gets the material the sprite is using.
---@return IMaterial The material in use.
function DSprite:GetMaterial() end

---[CLIENT] Gets the 2D rotation angle of the sprite, in the plane of the screen.
---@return number The anti-clockwise rotation in degrees.
function DSprite:GetRotation() end

---[CLIENT] Sets the color modifier for the sprite.
---@param color table The Color to use.
function DSprite:SetColor(color) end

---[CLIENT] Seems to be an unused feature. Does nothing.
---@param vec Vector 
function DSprite:SetHandle(vec) end

---[CLIENT] Sets the source material for the sprite.
---@param material IMaterial The material to use. This will ideally be an UnlitGeneric.
function DSprite:SetMaterial(material) end

---[CLIENT] Sets the 2D rotation angle of the sprite, in the plane of the screen.
---@param ang number The anti-clockwise rotation in degrees.
function DSprite:SetRotation(ang) end

---@class DTab
local DTab = {}

---[CLIENT] Returns the panel that the tab represents.
---@return Panel Panel added to the sheet using DPropertySheet:AddSheet.
function DTab:GetPanel() end

---[CLIENT] Returns whether the tab is the currently selected tab of the associated DPropertySheet.
---@return Boolean Currently selected tab.
function DTab:IsActive() end

---@class DTextEntry
local DTextEntry = {}

---[CLIENT] Called whenever the value of the panel has been updated (whether by user input or otherwise).
--- It allows you to determine whether a user can modify the TextEntry's text.
--- By default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.
--- This is actually an engine hook that only works on TextEntry derived elements.
---@param char string The last character entered into the panel.
---@return boolean Return true to prevent the value from changing, false to allow it.
function DTextEntry:AllowInput(char) end

---[CLIENT] Returns whether a string is numeric or not.
--- Always returns false if the DTextEntry:SetNumeric is set to false.
---@param strValue string The string to check.
---@return boolean Whether the string is numeric or not.
function DTextEntry:CheckNumeric(strValue) end

---[CLIENT] Called by the DTextEntry when a list of autocompletion options is requested. Meant to be overridden.
---@param inputText string Player's current input.
---@return table If a table is returned, the values of the table will show up as autocomplete suggestions for the user.
function DTextEntry:GetAutoComplete(inputText) end

---[CLIENT] Returns the cursor color of a DTextEntry.
---@return table The color of the cursor as a Color.
function DTextEntry:GetCursorColor() end

---[CLIENT] Returns whether pressing Enter can cause the panel to lose focus. Note that a multiline DTextEntry cannot be escaped using the Enter key even when this function returns true.
---@return boolean Whether pressing the Enter key can cause the panel to lose focus.
function DTextEntry:GetEnterAllowed() end

---[CLIENT] Returns the contents of the DTextEntry as a number.
---@return number Text of the DTextEntry as a float, or nil if it cannot be converted to a number using tonumber.
function DTextEntry:GetFloat() end

---[CLIENT] Similar to DTextEntry:GetFloat, but rounds the value to the nearest integer.
---@return number Text of the DTextEntry as a round number, or nil if it cannot be converted to a number.
function DTextEntry:GetInt() end

---[CLIENT] Returns whether only numeric characters (123456789.-) can be entered into the DTextEntry.
---@return boolean Whether the DTextEntry is numeric or not.
function DTextEntry:GetNumeric() end

---[CLIENT] Whether the background is displayed or not
---@return boolean false hides the background; this is true by default.
function DTextEntry:GetPaintBackground() end

---[CLIENT] Return current color of panel placeholder
---@return table Current placeholder color
function DTextEntry:GetPlaceholderColor() end

---[CLIENT] Returns the placeholder text set with DTextEntry:SetPlaceholderText.
---@return string 
function DTextEntry:GetPlaceholderText() end

---[CLIENT] Returns the text color of a DTextEntry.
---@return table The color of the text as a Color.
function DTextEntry:GetTextColor() end

---[CLIENT] Returns whether the DTextEntry is set to run DTextEntry:OnValueChange every time a character is typed or deleted or only when Enter is pressed.
---@return boolean 
function DTextEntry:GetUpdateOnType() end

---[CLIENT] Returns whether this DTextEntry is being edited or not. (i.e. has focus)
---@return boolean Whether this DTextEntry is being edited or not
function DTextEntry:IsEditing() end

---[CLIENT] Determines whether or not DTextEntry is in multi-line mode. This is set with DTextEntry:SetMultiline.
---@return boolean Whether the object is in multi-line mode or not.
function DTextEntry:IsMultiline() end

---[CLIENT] Called internally by DTextEntry:OnTextChanged when the user modifies the text in the DTextEntry.
--- You should override this function to define custom behavior when the DTextEntry text changes.
function DTextEntry:OnChange() end

---[CLIENT] Called whenever enter is pressed on a DTextEntry.
--- DTextEntry:IsEditing will still return true in this callback!
---@param value string The current text of the DTextEntry
function DTextEntry:OnEnter(value) end

---[CLIENT] Called whenever the DTextEntry gains focus.
function DTextEntry:OnGetFocus() end

---[CLIENT] Called from DTextEntry's TextEntry:OnKeyCodeTyped override whenever a valid character is typed while the text entry is focused.
---@param keyCode number They key code of the key pressed, see Enums/KEY.
function DTextEntry:OnKeyCode(keyCode) end

---[CLIENT] Called whenever the DTextEntry lose focus.
function DTextEntry:OnLoseFocus() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called internally when the text inside the DTextEntry changes.
--- You should not override this function. Use DTextEntry:OnValueChange instead.
---@param noMenuRemoval boolean Determines whether to remove the autocomplete menu (false) or not (true).
function DTextEntry:OnTextChanged(noMenuRemoval) end

---[CLIENT] Called internally when the text changes of the DTextEntry are applied. (And set to the attached console variable, if one is given)
--- See also DTextEntry:OnChange for a function that is called on every text change, even if the console variable is not updated.
--- You should override this function to define custom behavior when the text changes.
--- This method is called:
--- 
--- When Enter is pressed after typing
--- When DTextEntry:SetValue is used
--- For every key typed - only if DTextEntry:SetUpdateOnType was set to true (default is false)
---@param value string The DTextEntry text.
function DTextEntry:OnValueChange(value) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- You really should be using DTextEntry:GetAutoComplete instead.
--- Builds a DMenu for the DTextEntry based on the input table.
---@param tab table Table containing results from DTextEntry:GetAutoComplete.
function DTextEntry:OpenAutoComplete(tab) end

---[CLIENT] Sets the cursor's color in  DTextEntry (the blinking line).
---@param color table The color to set the cursor to.
function DTextEntry:SetCursorColor(color) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use Panel:SetEnabled instead.
--- Disables input on a DTextEntry and greys it out visually. This differs from DTextEntry:SetEditable which doesn't visually change the textbox.
---@param disabled boolean Whether the textbox should be disabled
function DTextEntry:SetDisabled(disabled) end

---[CLIENT] Disables Input on a DTextEntry. This differs from DTextEntry:SetDisabled - SetEditable will not affect the appearance of the textbox.
---@param enabled boolean Whether the DTextEntry should be editable
function DTextEntry:SetEditable(enabled) end

---[CLIENT] Sets whether pressing the Enter key will cause the DTextEntry to lose focus or not, provided it is not multiline. This is true by default.
---@param allowEnter boolean If set to false, pressing Enter will not cause the panel to lose focus and will never call DTextEntry:OnEnter.
function DTextEntry:SetEnterAllowed(allowEnter) end

---[CLIENT] Changes the font of the DTextEntry.
---@param font string The name of the font to be changed to.
function DTextEntry:SetFont(font) end

---[CLIENT] Enables or disables the history functionality of  DTextEntry.
---@param enable boolean Whether to enable history or not.
function DTextEntry:SetHistoryEnabled(enable) end

---[CLIENT] Enables or disables the multi-line functionality of DTextEntry.
---@param multiline boolean Whether to enable multiline or not.
function DTextEntry:SetMultiline(multiline) end

---[CLIENT] Sets whether or not to decline non-numeric characters as input.
--- Numeric characters are 1234567890.-
---@param numericOnly boolean Whether to accept only numeric characters.
function DTextEntry:SetNumeric(numericOnly) end

---[CLIENT] Sets whether to show background.
---@param show boolean false hides the background; this is true by default.
function DTextEntry:SetPaintBackground(show) end

---[CLIENT] Allow you to set placeholder color.
---@param color table The color of the placeholder.
function DTextEntry:SetPlaceholderColor(color) end

---[CLIENT] Sets the placeholder text that will be shown while the text entry has no user text. The player will not need to delete the placeholder text if they decide to start typing.
---@param text string 
function DTextEntry:SetPlaceholderText(text) end

---[CLIENT] Sets whether or not the panel accepts tab key.
--- Disabling tab key prevents the panel from unfocusing by mouse, however, still works for focusing to other keyboard focus.
---@param enabled boolean Whether the DTextEntry should ignore tab
function DTextEntry:SetTabbingDisabled(enabled) end

---[CLIENT] Sets the text color of the DTextEntry.
---@param color table The text color. Uses the Color.
function DTextEntry:SetTextColor(color) end

---[CLIENT] Sets whether we should fire DTextEntry:OnValueChange every time we type or delete a character or only when Enter is pressed.
---@param updateOnType boolean 
function DTextEntry:SetUpdateOnType(updateOnType) end

---[CLIENT] Sets the text of the DTextEntry and calls DTextEntry:OnValueChange.
--- The text of the DTextEntry only changes if it's not currently being typed in. If you would rather set the text regardless, use Panel:SetText.
---@param text string The value to set.
function DTextEntry:SetValue(text) end

---@class DTileLayout
local DTileLayout = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Clears the panel's tile table. Used by DTileLayout:LayoutTiles.
function DTileLayout:ClearTiles() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called to designate a range of tiles as occupied by a panel.
---@param x number The x coordinate of the top-left corner of the panel.
---@param y number The y coordinate of the top-left corner of the panel.
---@param w number The panel's width.
---@param h number The panel's height.
function DTileLayout:ConsumeTiles(x, y, w, h) end

---[CLIENT] Creates and returns an exact copy of the DTileLayout.
---@return Panel The created copy.
function DTileLayout:Copy() end

---[CLIENT] Creates copies of all the children from the given panel object and parents them to this one.
---@param source Panel The source panel from which to copy all children.
function DTileLayout:CopyContents(source) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Finds the coordinates of the first group of free tiles that fit the given size.
---@param x number The x coordinate to start looking from.
---@param y number The y coordinate to start looking from.
---@param w number The needed width.
---@param h number The needed height.
---@return number, number number - The x coordinate of the found available space.
---@return number, number number - The y coordinate of the found available space.
function DTileLayout:FindFreeTile(x, y, w, h) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Determines if a group of tiles is vacant.
---@param x number The x coordinate of the first tile.
---@param y number The y coordinate of the first tile.
---@param w number The width needed.
---@param h number The height needed.
---@return boolean Whether or not this group is available for occupation.
function DTileLayout:FitsInTile(x, y, w, h) end

---[CLIENT] Returns the size of each single tile, set with DTileLayout:SetBaseSize.
---@return number Base tile size.
function DTileLayout:GetBaseSize() end

---[CLIENT] Returns the border spacing set by DTileLayout:SetBorder.
---@return number 
function DTileLayout:GetBorder() end

---[CLIENT] Returns the minimum height the DTileLayout can resize to.
---@return number The minimum height the panel can shrink to.
function DTileLayout:GetMinHeight() end

---[CLIENT] Returns the X axis spacing between 2 elements set by DTileLayout:SetSpaceX.
---@return number 
function DTileLayout:GetSpaceX() end

---[CLIENT] Returns the Y axis spacing between 2 elements set by DTileLayout:SetSpaceY.
---@return number 
function DTileLayout:GetSpaceY() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Gets the occupied state of a tile.
---@param x number The x coordinate of the tile.
---@param y number The y coordinate of the tile.
---@return any The occupied state of the tile, normally 1 or nil.
function DTileLayout:GetTile(x, y) end

---[CLIENT] Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel.
function DTileLayout:Layout() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by PANEL:PerformLayout to arrange and lay out the child panels, if it has changed in size.
function DTileLayout:LayoutTiles() end

---[CLIENT] Called when anything is dropped on or rearranged within the DTileLayout.
function DTileLayout:OnModified() end

---[CLIENT] Sets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.
--- If you are setting the size of the children properly then you probably don't need to change this.
---@param size number The size of each tile. It is recommended you use 2ⁿ (16, 32, 64...) numbers, and those above 4, as numbers lower than this will result in many tiles being processed and therefore slow operation.
function DTileLayout:SetBaseSize(size) end

---[CLIENT] Sets the spacing between the border/edge of the DTileLayout and all the elements inside.
---@param border number 
function DTileLayout:SetBorder(border) end

---[CLIENT] Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often.
---@param minH number The minimum height the panel can shrink to.
function DTileLayout:SetMinHeight(minH) end

---[CLIENT] Sets the spacing between 2 elements in the DTileLayout on the X axis.
---@param spacingX number 
function DTileLayout:SetSpaceX(spacingX) end

---[CLIENT] Sets the spacing between 2 elements in the DTileLayout on the Y axis.
---@param spaceY number 
function DTileLayout:SetSpaceY(spaceY) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called to set the occupied state of a tile.
---@param x number The x coordinate of the tile.
---@param y number The y coordinate of the tile.
---@param state any The new state of the tile, normally 1 or nil.
function DTileLayout:SetTile(x, y, state) end

---@class DTooltip
local DTooltip = {}

---[CLIENT] Forces the tooltip to close. This will remove the panel.
function DTooltip:Close() end

---[CLIENT] Used to draw a triangle beneath the DTooltip
--- Requires DTooltip:SetContents, without this it will error
---@param x number arrow location on the x axis
---@param y number arrow location on the y axis
function DTooltip:DrawArrow(x, y) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets up the tooltip for display for given panel and starts the timer.
--- Normally you wouldn't call this and you'd use Panel:SetTooltip, Panel:SetTooltipPanel or Panel:SetTooltipPanelOverride.
---@param pnl Panel The panel to open the tooltip for.
function DTooltip:OpenForPanel(pnl) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Positions the DTooltip so it doesn't stay in the same draw position.
function DTooltip:PositionTooltip() end

---[CLIENT] What Panel you want put inside of the DTooltip
--- You can only have one Panel at a time; use Parenting to add more
---@param panel Panel Contents
---@param bDelete boolean If set to true, the panel in the first argument will be automatically removed when DTooltip is closed via DTooltip:Close.
function DTooltip:SetContents(panel, bDelete) end

---@class DTree
local DTree = {}

---[CLIENT] Add a node to the DTree
---@param name string Name of the option.
---@param icon string The icon that will show nexto the node in the DTree.
---@return Panel Returns the created DTree_Node panel.
function DTree:AddNode(name, icon) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Calls directly to Panel:InvalidateLayout.
--- Called by DTree_Nodes when a sub element has been expanded or collapsed.
--- Used as a placeholder function alongside DTree:ExpandTo, DTree:SetExpanded and DTree:MoveChildTo.
--- The DTree acts a root node and methods with the same name in DTree_Node call to the parent.
---@param bExpand boolean 
function DTree:ChildExpanded(bExpand) end

---[CLIENT] Called when the any node is clicked. Called by DTree_Node:DoClick.
---@param node DTree_Node The right clicked node.
---@return boolean 
function DTree:DoClick(node) end

---[CLIENT] Called when the any node is right clicked. Called by DTree_Node:DoRightClick.
---@param node DTree_Node The right clicked node.
---@return boolean 
function DTree:DoRightClick(node) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Does nothing. Used as a placeholder empty function alongside DTree:MoveChildTo, DTree:SetExpanded and DTree:ChildExpanded.
--- The DTree acts a root node and methods with the same name in DTree_Node call to the parent.
---@param bExpand boolean 
function DTree:ExpandTo(bExpand) end

---[CLIENT] Returns the status of DTree:SetClickOnDragHover. See that for more info.
---@return boolean 
function DTree:GetClickOnDragHover() end

---[CLIENT] Returns the indentation size of the DTree, the distance between each "level" of the tree is offset on the left from the previous level.
--- Currently this feature has no effect on the DTree element.
---@return number The indentation size.
function DTree:GetIndentSize() end

---[CLIENT] Returns the height of each DTree_Node in the tree.
---@return number The height of each DTree_Node in the tree.
function DTree:GetLineHeight() end

---[CLIENT] Returns the currently selected node.
---@return Panel Curently selected node.
function DTree:GetSelectedItem() end

---[CLIENT] Returns whether or not the Silkicons next to each node of the DTree will be displayed.
--- Individual icons can be set with DTree_Node:SetIcon or passed as the second argument in DTree:AddNode.
---@return boolean Whether or not the silkicons next to each node will be displayed.
function DTree:GetShowIcons() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Does nothing.
function DTree:LayoutTree() end

---[CLIENT] Moves given node to the top of DTrees children. (Makes it the topmost mode)
--- Used as a placeholder function alongside DTree:ExpandTo, DTree:SetExpanded and DTree:ChildExpanded.
--- The DTree acts a root node and methods with the same name in DTree_Node call to the parent.
---@param child Panel The node to move
---@param pos number We advise against using this. It may be changed or removed in a future update. Unused, does nothing.We advise against using this. It may be changed or removed in a future update.We advise against using this. It may be changed or removed in a future update.
function DTree:MoveChildTo(child, pos) end

---[CLIENT] This function is called when a node within a tree is selected.
---@param node Panel The node that was selected.
function DTree:OnNodeSelected(node) end

---[CLIENT] Returns the root DTree_Node, the node that is the parent to all other nodes of the DTree.
---@return Panel Root node.
function DTree:Root() end

---[CLIENT] Enables the "click when drag-hovering" functionality.
--- If enabled, when hovering over any DTree_Node of this DTree while dragging a panel, the node will be automatically clicked on (and subsequently DTree:OnNodeSelected will be called) to open any attached panels, such as spawnlists in spawnmenu.
--- See also: PANEL:DragHoverClick.
---@param enable boolean 
function DTree:SetClickOnDragHover(enable) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Does nothing. Is not called by the DTree itself.
--- Used as a placeholder empty function alongside DTree:ExpandTo, DTree:MoveChildTo and DTree:ChildExpanded to prevent errors when DTree_Node:SetExpanded is incorrectly used on a DTree.
---@param bExpand boolean 
function DTree:SetExpanded(bExpand) end

---[CLIENT] Sets the indentation size of the DTree, the distance between each "level" of the tree is offset on the left from the previous level.
--- Currently this feature has no effect on the DTree element.
---@param size number The new indentation size.
function DTree:SetIndentSize(size) end

---[CLIENT] Sets the height of each DTree_Node in the tree.
--- The default value is 17.
---@param h number The height to set.
function DTree:SetLineHeight(h) end

---[CLIENT] Set the currently selected top-level node.
---@param node Panel DTree_Node to select.
function DTree:SetSelectedItem(node) end

---[CLIENT] Sets whether or not the Silkicons next to each node of the DTree will be displayed.
--- Individual icons can be set with DTree_Node:SetIcon or passed as the second argument in DTree:AddNode.
---@param show boolean Whether or not to show icons.
function DTree:SetShowIcons(show) end

---[CLIENT] Returns whether or not the Silkicons next to each node of the DTree will be displayed.
--- Alias of DTree:GetShowIcons.
---@return boolean Whether or not the silkicons next to each node will be displayed.
function DTree:ShowIcons() end

---@class DTree_Node
local DTree_Node = {}

---[CLIENT] A helper function that adds a new node and calls to DTree_Node:MakeFolder on it.
---@param name string The name of the new node
---@param folder string The folder in the filesystem to use, relative to the garrysmod/ folder.
---@param path string The path to search in. See File Search Paths
---@param showFiles boolean Should files be added as nodes (true) or folders only (false)
---@param wildcard string The wildcard to use when searching for files.
---@param bDontForceExpandable boolean 
---@return Panel The created DTree_Node
function DTree_Node:AddFolder(name, folder, path, showFiles, wildcard, bDontForceExpandable) end

---[CLIENT] Add a child node to the DTree_Node
---@param name string Name of the node.
---@param icon string The icon that will show next to the node in the DTree.
---@return Panel Returns the created DTree_Node panel.
function DTree_Node:AddNode(name, icon) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds the given panel to the child nodes list, a DListLayout.
---@param pnl Panel The panel to add.
function DTree_Node:AddPanel(pnl) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Internal function that handles the expand/collapse animations.
---@param anim table 
---@param delta number 
---@param data table 
function DTree_Node:AnimSlide(anim, delta, data) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.
---@param expanded boolean 
function DTree_Node:ChildExpanded(expanded) end

---[CLIENT] Cleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.
--- Appears the be completely unused by the game on its own.
function DTree_Node:CleanList() end

---[CLIENT] Create and returns a copy of this node, including all the sub-nodes.
---@return Panel The copied DTree_Node.
function DTree_Node:Copy() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Creates the container DListLayout for the DTree_Nodes.
--- This is called automatically so you don't have to.
function DTree_Node:CreateChildNodes() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically to update the status of DTree_Node:GetLastChild on children of this node.
function DTree_Node:DoChildrenOrder() end

---[CLIENT] Called when the node is clicked.
--- See also DTree_Node:DoRightClick.
---@return boolean Return true to prevent DoClick from being called on parent nodes or the DTree itself.
function DTree_Node:DoClick() end

---[CLIENT] Called when the node is right clicked.
--- See also DTree_Node:DoClick.
---@return boolean Return true to prevent DoRightClick from being called on parent nodes or the DTree itself.
function DTree_Node:DoRightClick() end

---[CLIENT] Expands or collapses this node, as well as ALL child nodes of this node.
--- Works opposite of DTree_Node:ExpandTo.
---@param expand boolean Whether to expand (true) or collapse (false)
function DTree_Node:ExpandRecurse(expand) end

---[CLIENT] Collapses or expands all nodes from the topmost-level node to this one.
--- Works opposite of DTree_Node:ExpandRecurse.
---@param expand boolean Whether to expand (true) or collapse (false)
function DTree_Node:ExpandTo(expand) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically from DTree_Node:PopulateChildrenAndSelf and DTree_Node:PopulateChildren to populate this node with child nodes of files and folders.
---@param bAndChildren boolean Does nothing. Set to true if called from DTree_Node:PopulateChildren.
---@param bExpand boolean Expand self once population process is finished.
function DTree_Node:FilePopulate(bAndChildren, bExpand) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically from DTree_Node:FilePopulate to actually fill the node with sub-nodes based on set preferences like should files be added, etc.
---@param files table A list of files in this folder
---@param folders table A list of folder in this folder.
---@param foldername string The folder name/path this node represents
---@param path string The Path ID search was performed with. See File Search Paths
---@param bAndChildren boolean Inherited from the FilePopulate call. Does nothing
---@param wildcard string The wildcard that was given
function DTree_Node:FilePopulateCallback(files, folders, foldername, path, bAndChildren, wildcard) end

---[CLIENT] Returns n-th child node.
--- Basically an alias of Panel:GetChild.
---@param num number The number of the child to get, starting with 0
---@return Panel The child panel, if valid ID is given
function DTree_Node:GetChildNode(num) end

---[CLIENT] Returns the number of child nodes this node has. For use with DTree_Node:GetChildNode
---@return number Number of child nodes.
function DTree_Node:GetChildNodeCount() end

---[CLIENT] Returns a table containing all child nodes of this node.
---@return table A list of all child nodes.
function DTree_Node:GetChildNodes() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Returns value set by DTree_Node:SetDirty.
---@return boolean 
function DTree_Node:GetDirty() end

---[CLIENT] Returns whether the double clock to collapse/expand functionality is enabled on this node.
---@return boolean 
function DTree_Node:GetDoubleClickToOpen() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns what is set by DTree_Node:SetDraggableName.
---@return string 
function DTree_Node:GetDraggableName() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns whether or not this node is drawing lines
---@return boolean 
function DTree_Node:GetDrawLines() end

---[CLIENT] Returns whether the node is expanded or not.
---@return boolean Expanded or not.
function DTree_Node:GetExpanded() end

---[CLIENT] Returns the filepath of the file attached to this node.
---@return string 
function DTree_Node:GetFileName() end

---[CLIENT] Returns the folder path to search in, set by DTree_Node:MakeFolder.
---@return string The folder path.
function DTree_Node:GetFolder() end

---[CLIENT] Returns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.
--- See also DTree_Node:SetForceShowExpander.
---@return boolean 
function DTree_Node:GetForceShowExpander() end

---[CLIENT] Returns whether the expand button (little + button) should be shown or hidden.
---@return boolean 
function DTree_Node:GetHideExpander() end

---[CLIENT] Returns the image path to the icon of this node.
---@return string The path to the image
function DTree_Node:GetIcon() end

---[CLIENT] Returns the indentation level of the DTree this node belongs to.
--- Alias of DTree:GetIndentSize, see it for more info.
---@return number The indentation level.
function DTree_Node:GetIndentSize() end

---[CLIENT] Returns whether this node is the last child on this level or not.
---@return boolean 
function DTree_Node:GetLastChild() end

---[CLIENT] The height of a single DTree_Node of the DTree this node belongs to.
--- Alias of DTree:GetLineHeight.
---@return number The height of a single DTree_Node.
function DTree_Node:GetLineHeight() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@return boolean 
function DTree_Node:GetNeedsChildSearch() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns whether or not the node is set to be populated from the filesystem.
---@return boolean 
function DTree_Node:GetNeedsPopulating() end

---[CLIENT] Returns the parent DTree_Node. Note that Panel:GetParent will not be the same!
---@return Panel The parent node.
function DTree_Node:GetParentNode() end

---[CLIENT] Returns the path ID (File Search Paths) used in populating the DTree from the filesystem.
--- See DTree_Node:SetPathID and DTree_Node:MakeFolder.
---@return string The Path ID
function DTree_Node:GetPathID() end

---[CLIENT] Returns the root node, the DTree this node is under.
--- See also DTree_Node:GetParentNode.
---@return Panel The root node
function DTree_Node:GetRoot() end

---[CLIENT] Returns whether or not nodes for files should/will be added when populating the node from filesystem.
---@return boolean 
function DTree_Node:GetShowFiles() end

---[CLIENT] Returns the wildcard set by DTree_Node:MakeFolder.
---@return string The search wildcard
function DTree_Node:GetWildCard() end

---[CLIENT] Inserts a sub-node into this node before or after the given node.
---@param node Panel The DTree_Node to insert.
---@param nodeNextTo Panel The node to insert the node above before or after.
---@param before boolean true to insert before, false to insert after.
function DTree_Node:Insert(node, nodeNextTo, before) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Inserts an existing node as a "child" or a sub-node of this node.
--- Used internally by the drag'n'drop functionality.
---@param node Panel Has to be DTree_Node
function DTree_Node:InsertNode(node) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically internally.
--- Makes the target node compatible with this node's drag'n'drop.
---@param node Panel The DTree_Node.
function DTree_Node:InstallDraggable(node) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- See DTree_Node:DoClick
function DTree_Node:InternalDoClick() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- See DTree_Node:DoRightClick.
function DTree_Node:InternalDoRightClick() end

---[CLIENT] Returns true if DTree_Node:GetRoot is the same as DTree_Node:GetParentNode of this node.
---@return boolean If this is a root node.
function DTree_Node:IsRootNode() end

---[CLIENT] Removes given node as a sub-node of this node.
--- It doesn't actually remove or unparent the panel, just removes it from the internal DListView.
---@param pnl Panel The node to remove
function DTree_Node:LeaveTree(pnl) end

---[CLIENT] Makes this node a folder in the filesystem. This will make it automatically populated.
--- See also DTree_Node:AddFolder.
---@param folder string The folder in the filesystem to use, relative to the garrysmod/ folder.
---@param path string The path to search in. See File Search Paths
---@param showFiles boolean Should files be added as nodes (true) or folders only (false)
---@param wildcard string The wildcard to use when searching for files.
---@param dontForceExpandable boolean If set to true, don't show the expand buttons on empty nodes.
function DTree_Node:MakeFolder(folder, path, showFiles, wildcard, dontForceExpandable) end

---[CLIENT] Moves given panel to the top of the children of this node.
--- Despite name of this function, it cannot move the children to any position but the topmost.
---@param node Panel The node to move.
function DTree_Node:MoveChildTo(node) end

---[CLIENT] Moves this node to the top of the level.
function DTree_Node:MoveToTop() end

---[CLIENT] Called when sub-nodes of this DTree_Node were changed, such as being rearranged if that functionality is enabled.
function DTree_Node:OnModified() end

---[CLIENT] Called when a new sub-node is added this node.
---@param newNode DTree_Node The newly added sub node.
function DTree_Node:OnNodeAdded(newNode) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called when this or a sub node is selected. Do not use this, it is not for override.
--- Use DTree:OnNodeSelected or DTree_Node:DoClick instead.
---@param node Panel 
function DTree_Node:OnNodeSelected(node) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically to perform layout on this node if this node DTree_Node:IsRootNode.
function DTree_Node:PerformRootNodeLayout() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically from DTree_Node:PopulateChildrenAndSelf.
function DTree_Node:PopulateChildren() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically from DTree_Node:SetExpanded (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via DTree_Node:MakeFolder.
---@param expand boolean Expand self once population process is finished.
function DTree_Node:PopulateChildrenAndSelf(expand) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Appears to have no effect on the DTree_Node.
---@param dirty boolean 
function DTree_Node:SetDirty(dirty) end

---[CLIENT] Sets whether double clicking the node should expand/collapse it or not.
---@param enable boolean true to enable, false to disable this functionality.
function DTree_Node:SetDoubleClickToOpen(enable) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used to store name for sub elements for a Panel:Droppable call.
---@param name string 
function DTree_Node:SetDraggableName(name) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether or not this node should draw visual lines.
---@param draw boolean 
function DTree_Node:SetDrawLines(draw) end

---[CLIENT] Expands or collapses this node.
---@param expand boolean Whether to expand (true) or collapse (false)
---@param surpressAnimation boolean Whether to play animation (false) or not (true)
function DTree_Node:SetExpanded(expand, surpressAnimation) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the file full filepath to the file attached to this node
---@param filename string 
function DTree_Node:SetFileName(filename) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the folder to search files and folders in.
--- Use DTree_Node:MakeFolder instead.
---@param folder string 
function DTree_Node:SetFolder(folder) end

---[CLIENT] Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not.
---@param forceShow boolean 
function DTree_Node:SetForceShowExpander(forceShow) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether the expand button (little + button) should be shown or hidden.
---@param hide boolean 
function DTree_Node:SetHideExpander(hide) end

---[CLIENT] Sets the material for the icon of the DTree_Node.
---@param path string The path to the material to be used. Do not include "materials/". .pngs are supported.
function DTree_Node:SetIcon(path) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically to set whether this node is the last child on this level or not.
---@param last boolean 
function DTree_Node:SetLastChild(last) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@param newState boolean 
function DTree_Node:SetNeedsChildSearch(newState) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether or not the node needs populating from the filesystem.
---@param needs boolean Whether or not the node needs populating
function DTree_Node:SetNeedsPopulating(needs) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the parent node of this node. Not the same as Panel:SetParent.
--- This is set automatically, you shouldn't use this.
---@param parent Panel The panel to set as a parent node for this node
function DTree_Node:SetParentNode(parent) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the path ID (File Search Paths) for populating the tree from the filesystem.
--- Use DTree_Node:MakeFolder instead.
---@param path string The path ID to set.
function DTree_Node:SetPathID(path) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the root node (the DTree) of this node.
--- This is set automatically, you shouldn't use this.
---@param root Panel The panel to set as root node.
function DTree_Node:SetRoot(root) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called automatically to update the "selected" status of this node.
---@param selected boolean Whether this node is currently selected or not.
function DTree_Node:SetSelected(selected) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether or not nodes for files should be added when populating the node from filesystem.
---@param showFiles boolean 
function DTree_Node:SetShowFiles(showFiles) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Currently does nothing, not implemented.
function DTree_Node:SetupCopy() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the search wildcard.
--- Use DTree_Node:MakeFolder instead
---@param wildcard string The wildcard to set
function DTree_Node:SetWildCard(wildcard) end

---[CLIENT] Returns whether or not the DTree this node is in has icons enabled.
--- See DTree:ShowIcons for more info.
---@return number Whether the icons are shown or not
function DTree_Node:ShowIcons() end

---@class DVScrollBar
local DVScrollBar = {}

---[CLIENT] Adds specified amount of scroll in pixels.
---@param add number How much to scroll downwards. Can be negative for upwards scroll
---@return boolean True if the scroll level was changed (i.e. if we did or did not scroll)
function DVScrollBar:AddScroll(add) end

---[CLIENT] Smoothly scrolls to given level.
---@param scroll number The scroll level to animate to. In pixels from the top ( from 0 )
---@param length number Length of the animation in seconds
---@param delay number Delay of the animation in seconds
---@param ease number See Panel:NewAnimation for explanation.
function DVScrollBar:AnimateTo(scroll, length, delay, ease) end

---[CLIENT] No Description
---@return number 
function DVScrollBar:BarScale() end

---[CLIENT] Returns whether or not the manual up/down scroll buttons are visible or not. Set by DVScrollBar:SetHideButtons.
---@return boolean Whether or not the manual up/down scroll buttons are visible or not.
function DVScrollBar:GetHideButtons() end

---[CLIENT] Returns the negative of DVScrollBar:GetScroll.
---@return number 
function DVScrollBar:GetOffset() end

---[CLIENT] Returns the amount of scroll level from the top in pixels
---@return number The amount of scroll level from the top
function DVScrollBar:GetScroll() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called from within DScrollBarGrip
function DVScrollBar:Grip() end

---[CLIENT] Allows hiding the up and down buttons for better visual stylisation.
---@param hide boolean True to hide
function DVScrollBar:SetHideButtons(hide) end

---[CLIENT] Sets the scroll level in pixels.
---@param scroll number 
function DVScrollBar:SetScroll(scroll) end

---[CLIENT] Sets up the scrollbar for use.
--- The scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call.
---@param barSize number The size of the panel that holds the canvas, basically size of "1 page".
---@param canvasSize number The total size of the canvas, this typically is the bigger number.
function DVScrollBar:SetUp(barSize, canvasSize) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Should return nil in all cases. See DVScrollBar:GetScroll.
---@return any 
function DVScrollBar:Value() end

---@class DVerticalDivider
local DVerticalDivider = {}

---[CLIENT] Returns the bottom content panel of the DVerticalDivider.
---@return Panel The bottom content panel.
function DVerticalDivider:GetBottom() end

---[CLIENT] Returns the minimum height of the bottom content panel.
---@return number The minimum height of the bottom content panel.
function DVerticalDivider:GetBottomMin() end

---[CLIENT] Returns the height of the divider bar between the top and bottom content panels of the DVerticalDivider.
---@return number The height of the divider bar.
function DVerticalDivider:GetDividerHeight() end

---[CLIENT] Returns whether the divider is being dragged or not.
---@return boolean If true, mouse movement will alter the size of the divider.
function DVerticalDivider:GetDragging() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns the local Y position of where the user starts dragging the divider.
---@return number The local Y position where divider dragging has started.
function DVerticalDivider:GetHoldPos() end

---[CLIENT] Returns the middle content panel of the DVerticalDivider.
---@return Panel The middle content panel.
function DVerticalDivider:GetMiddle() end

---[CLIENT] Returns the top content panel of the DVerticalDivider.
---@return Panel The top content panel.
function DVerticalDivider:GetTop() end

---[CLIENT] Returns the current height of the top content panel set by DVerticalDivider:SetTopHeight or by the user.
---@return number The current height of the DVerticalDivider.
function DVerticalDivider:GetTopHeight() end

---[CLIENT] Returns the maximum height of the top content panel. See DVerticalDivider:SetTopMax for more information.
---@return number The maximum height of the top content panel.
function DVerticalDivider:GetTopMax() end

---[CLIENT] Returns the minimum height of the top content panel.
---@return number The minimum height of the top content panel.
function DVerticalDivider:GetTopMin() end

---[CLIENT] Sets the passed panel as the bottom content of the DVerticalDivider.
---@param pnl Panel The panel to set as the bottom content.
function DVerticalDivider:SetBottom(pnl) end

---[CLIENT] Sets the minimum height of the bottom content panel.
---@param height number The minimum height of the bottom content panel. Default is 50.
function DVerticalDivider:SetBottomMin(height) end

---[CLIENT] Sets the height of the divider bar between the top and bottom content panels of the DVerticalDivider.
---@param height number The height of the divider bar.
function DVerticalDivider:SetDividerHeight(height) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets whether the divider is being dragged or not.
---@param isDragging boolean Setting this to true causes cursor movement to alter the position of the divider.
function DVerticalDivider:SetDragging(isDragging) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the local Y position of where the user starts dragging the divider.
---@param y number The local Y position where divider dragging has started.
function DVerticalDivider:SetHoldPos(y) end

---[CLIENT] Places the passed panel in between the top and bottom content panels of the DVerticalDivider.
---@param pnl Panel The panel to set as the middle content.
function DVerticalDivider:SetMiddle(pnl) end

---[CLIENT] Sets the passed panel as the top content of the DVerticalDivider.
---@param pnl Panel The panel to set as the top content.
function DVerticalDivider:SetTop(pnl) end

---[CLIENT] Sets the height of the top content panel.
--- The height of the bottom content panel is automatically calculated by taking the total height of the DVerticalDivider and subtracting it with the height of the top content panel and the divider bar.
---@param height number The height of the top content panel.
function DVerticalDivider:SetTopHeight(height) end

---[CLIENT] Sets the maximum height of the top content panel. This is ignored if the panel would exceed the minimum bottom content panel height set from DVerticalDivider:SetBottomMin.
---@param height number The maximum height of the top content panel. Default is 4096.
function DVerticalDivider:SetTopMax(height) end

---[CLIENT] Sets the minimum height of the top content panel.
---@param height number The minimum height of the top content panel. Default is 50.
function DVerticalDivider:SetTopMin(height) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Causes the user to start dragging the divider.
function DVerticalDivider:StartGrab() end

---@class EFFECT
local EFFECT = {}

---[CLIENT] 
function EFFECT:EndTouch() end

---[CLIENT] Used to get the "real" start position of a trace, for weapon tracer effects.
--- "real" meaning in 3rd person, the 3rd person position will be used, in first person the first person position will be used.
---@param pos Vector Default position if we fail
---@param ent Weapon The weapon to use.
---@param attachment number Attachment ID of on the weapon "muzzle", to use as the start position. Please note that it is expected that the same attachment ID is used on both, the world and the view model.Please note that it is expected that the same attachment ID is used on both, the world and the view model.Please note that it is expected that the same attachment ID is used on both, the world and the view model.
---@return Vector The "real" start position.
function EFFECT:GetTracerShootPos(pos, ent, attachment) end

---[CLIENT] Called when the effect is created.
---@param effectData CEffectData The effect data used to create the effect.
function EFFECT:Init(effectData) end

---[CLIENT] Called when the effect collides with anything.
---@param colData table Information regarding the collision. See Structures/CollisionData
---@param collider PhysObj The physics object of the entity that collided with the effect.
function EFFECT:PhysicsCollide(colData, collider) end

---[CLIENT] Called when the effect should be rendered.
function EFFECT:Render() end

---[CLIENT] 
function EFFECT:StartTouch() end

---[CLIENT] Called when the effect should think, return false to kill the effect.
---@return boolean Return false to remove this effect.
function EFFECT:Think() end

---[CLIENT] 
function EFFECT:Touch() end

---@class ENTITY
local ENTITY = {}

---[SERVER] Called when another entity fires an event to this entity.
---@param inputName string The name of the input that was triggered.
---@param activator Entity The initial cause for the input getting triggered. (EG the player who pushed a button)
---@param caller Entity The entity that directly triggered the input. (EG the button that was pushed)
---@param data string The data passed.
---@return boolean Should we suppress the default action for this input?
function ENTITY:AcceptInput(inputName, activator, caller, data) end

---[SERVER] A helper function for creating Scripted Entities.
--- Similar to ENTITY:AddOutputFromKeyValue, call it from ENTITY:AcceptInput and it'll return true if it successfully added an output from the passed input data.
---@param name string The input name from ENTITY:AcceptInput.
---@param data string The input data from ENTITY:AcceptInput.
---@return boolean Whether any outputs were added or not.
function ENTITY:AddOutputFromAcceptInput(name, data) end

---[SERVER] A helper function for creating Scripted Entities.
--- Call it from ENTITY:KeyValue and it'll return true if it successfully added an output from the passed KV pair.
---@param key string The key-value key.
---@param value string The key-value value.
---@return boolean Whether any outputs were added or not.
function ENTITY:AddOutputFromKeyValue(key, value) end

---[SHARED] Called whenever the entity's position changes. A callback for when an entity's angle changes is available via Entity:AddCallback.
--- Like ENTITY:RenderOverride, this hook works on any entity (scripted or not) it is applied on.
--- If EFL_DIRTY_ABSTRANSFORM is set on the entity, this will be called serverside only; otherwise, this will be called clientside only. This means serverside calls of Entity:SetPos without the EFL_DIRTY_ABSTRANSFORM flag enabled (most cases) will be called clientside only.The give concommand will call this hook serverside only upon entity spawn.
---@param pos Vector The entity's actual position. May differ from Entity:GetPos
---@param ang Angle The entity's actual angles. May differ from Entity:GetAngles
---@return Vector, Angle Vector - New position
---@return Vector, Angle Angle - New angles
function ENTITY:CalcAbsolutePosition(pos, ang) end

---[SHARED] Controls if a property can be used on this entity or not.
--- This hook will only work in Sandbox derived gamemodes that do not have SANDBOX:CanProperty overridden.
--- This hook will work on ALL entities, not just the scripted ones (SENTs)
---@param ply Player Player, that tried to use the property
---@param property string Class of the property that is tried to use, for example - bonemanipulate
---@return boolean Return false to disallow using that property, return true to allow. You must return a value. Not returning anything can cause unexpected results.
function ENTITY:CanProperty(ply, property) end

---[SHARED] Controls if a tool can be used on this entity or not.
--- This hook will only work in Sandbox derived gamemodes that do not have SANDBOX:CanTool overridden.
--- This hook will work on ALL entities, not just the scripted ones (SENTs)
---@param ply Player Player, that tried to use the tool
---@param tr table The trace of the tool. See TraceResult.
---@param toolname string Class of the tool that is tried to use, for example - weld
---@param tool table The tool mode table the player currently has selected.
---@param button number The tool button pressed.
---@return boolean Return false to disallow using that tool on this entity, return true to allow.
function ENTITY:CanTool(ply, tr, toolname, tool, button) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Called just before ENTITY:Initialize for "ai" type entities only.
function ENTITY:CreateSchedulesInternal() end

---[SHARED] Called so the entity can override the bullet impact effects it makes. This is called when the entity itself fires bullets via Entity:FireBullets, not when it gets hit.
--- This hook only works for the "anim" type entities.
---@param tr table A Structures/TraceResult from the bullet's start point to the impact point
---@param damageType number The damage type of bullet. See Enums/DMG
---@return boolean Return true to not do the default thing - which is to call UTIL_ImpactTrace in C++
function ENTITY:DoImpactEffect(tr, damageType) end

---[SERVER] Called whenever an engine schedule is being ran.
--- This hook only exists for ai type SENTs
function ENTITY:DoingEngineSchedule() end

---[SERVER] Runs a Lua schedule. Runs tasks inside the schedule.
---@param sched table The schedule to run.
function ENTITY:DoSchedule(sched) end

---[CLIENT] Called if and when the entity should be drawn opaquely, based on the Entity:GetRenderGroup of the entity.
--- See Structures/ENT and Enums/RENDERGROUP for more information.
--- See also ENTITY:DrawTranslucent.
--- This function is not called by the game whenever the player looks away from the entity due to optimizations. To change that,
--- you must define an empty Entity:Think method client-side!
---@param flags number The bit flags from Enums/STUDIO
function ENTITY:Draw(flags) end

---[CLIENT] Called when the entity should be drawn translucently. If your scripted entity has a translucent model, it will be invisible unless it is drawn here.
---@param flags number The bit flags from Enums/STUDIO
function ENTITY:DrawTranslucent(flags) end

---[SERVER] Called when the entity stops touching another entity.
--- This only works for brush entities and for entities that have Entity:SetTrigger set to true.
---@param entity Entity The entity which was touched.
function ENTITY:EndTouch(entity) end

---[SERVER] Called whenever an engine schedule is finished.
--- This hook only exists for ai type SENTs
function ENTITY:EngineScheduleFinish() end

---[SERVER] Called when an NPC's expression has finished.
--- This hook only exists for ai type SENTs
---@param strExp string The path of the expression.
function ENTITY:ExpressionFinished(strExp) end

---[CLIENT] Called before firing clientside animation events, such as muzzle flashes or shell ejections.
--- See ENTITY:HandleAnimEvent for the serverside version.
--- This hook only works on "anim", "nextbot" and "ai" type entities.
---@param pos Vector Position of the effect
---@param ang Angle Angle of the effect
---@param event number The event ID of happened even. See this page.
---@param name string Name of the event
---@return boolean Return true to disable the effect
function ENTITY:FireAnimationEvent(pos, ang, event, name) end

---[SERVER] Called to determine how good an NPC is at using a particular weapon.
--- "ai" base only
---@param wep Entity The weapon being used by the NPC.
---@param target Entity The target the NPC is attacking
---@return number The number of degrees of inaccuracy in the NPC's attack.
function ENTITY:GetAttackSpread(wep, target) end

---@class Entity
local Entity = {}

---[SERVER] Called to override the preferred carry angles of this object.
--- This callback is only called for anim type entities.
---@param ply Player The player who is holding the object.
---@return Angle Return an angle to override the carry angles.
function Entity:GetPreferredCarryAngles(ply) end

---[SERVER] Called when scripted NPC needs to check how he "feels" against another entity, such as when NPC:Disposition is called.
---@param ent Entity The entity in question
---@return number How our scripter NPC "feels" towards the entity in question. See Enums/D.
function ENTITY:GetRelationship(ent) end

---[CLIENT] Specify a mesh that should be rendered instead of this SENT's model.
---@return table A table containing the following keys:  IMesh Mesh - Required IMaterial Material - Required VMatrix Matrix - Optional
function ENTITY:GetRenderMesh() end

---[CLIENT] Called when the shadow needs to be recomputed. Allows shadow angles to be customized. This only works for anim type entities.
---@param type number Type of the shadow this entity uses. Possible values:  0 - No shadow 1 - Simple 'blob' shadow 2 - Render To Texture shadow (updates only when necessary) 3 - Dynamic RTT - updates always 4 - Render to Depth Texture
---@return Vector The new shadow direction to use.
function ENTITY:GetShadowCastDirection(type) end

---[SERVER] Called every second to poll the sound hint interests of this SNPC. This is used in conjunction with other sound hint functions, such as sound.EmitHint and NPC:GetBestSoundHint.
--- This hook only exists for ai type SENTs
---@return number A bitflag representing which sound types this NPC wants to react to.  See SOUND_ enums.
function ENTITY:GetSoundInterests() end

---[SERVER] Called by GM:GravGunPickupAllowed on ALL entites in Sandbox-derived  gamemodes and acts as an override.
---@param ply Player The player aiming at us
---@return boolean Return true to allow the entity to be picked up
function ENTITY:GravGunPickupAllowed(ply) end

---[SHARED] Called when this entity is about to be punted with the gravity gun (primary fire).
--- Only works in Sandbox derived gamemodes and only if GM:GravGunPunt is not overridden.
---@param ply Player The player pressing left-click with the gravity gun at an entity
---@return boolean Return true or false to enable or disable punting respectively.
function ENTITY:GravGunPunt(ply) end

---[SERVER] Called before firing serverside animation events, such as weapon reload, drawing and holstering for NPCs, scripted sequences, etc.
--- See ENTITY:FireAnimationEvent for the clientside version.
--- This hook only works on "anim", "ai" and "nextbot" type entities.
---@param event number The event ID of happened even. See this page.
---@param eventTime number The absolute time this event occurred using CurTime.
---@param cycle number The frame this event occurred as a number between 0 and 1.
---@param type number Event type. See the Source SDK.
---@param options string Name or options of this event.
function ENTITY:HandleAnimEvent(event, eventTime, cycle, type, options) end

---[CLIENT] Called when a bullet trace hits this entity and allows you to override the default behavior by returning true.
---@param traceResult table The trace that hit this entity as a Structures/TraceResult.
---@param damageType number The damage bits associated with the trace, see Enums/DMG
---@param customImpactName string The effect name to override the impact effect with. Possible arguments are ImpactJeep, AirboatGunImpact, HelicopterImpact, ImpactGunship.
---@return boolean Return true to override the default impact effects.
function ENTITY:ImpactTrace(traceResult, damageType, customImpactName) end

---[SHARED] Called when the entity is created. This is called when you Entity:Spawn the custom entity.
--- This is called after ENTITY:SetupDataTables and GM:OnEntityCreated.
function ENTITY:Initialize() end

---[SERVER] Called when deciding if the Scripted NPC should be able to perform a certain jump or not.
--- This is only called for "ai" type entities
---@param startPos Vector Start of the jump
---@param apex Vector Apex point of the jump
---@param endPos Vector The landing position
---@return boolean Return true if this jump should be allowed to be performed, false otherwise. Not returning anything, or returning a non boolean will perform the default action.
function ENTITY:IsJumpLegal(startPos, apex, endPos) end

---[SERVER] Called when the engine sets a value for this scripted entity.
--- This hook is called before ENTITY:Initialize when the key-values are set by the map.
--- Otherwise this hook will be called whenever Entity:SetKeyValue is called on the entity.
--- See GM:EntityKeyValue for a hook that works for all entities.
--- See WEAPON:KeyValue for a hook that works for scripted weapons.
---@param key string The key that was affected.
---@param value string The new value.
---@return boolean Return true to suppress this KeyValue or return false or nothing to apply this key value.
function ENTITY:KeyValue(key, value) end

---[SERVER] Start the next task in specific schedule.
--- This hook only exists for ai type SENTs
---@param sched table The schedule to start next task in.
function ENTITY:NextTask(sched) end

---[SERVER] Called when the currently active weapon of the SNPC changes.
--- This hook only works on ai type entities.
---@param old Weapon The previous active weapon.
---@param new Weapon The new active weapon.
function ENTITY:OnChangeActiveWeapon(old, new) end

---[SERVER] Called when the NPC has changed its activity.
--- This hook only works for ai type entities.
---@param act number The new activity. See Enums/ACT.
function ENTITY:OnChangeActivity(act) end

---[SERVER] Called each time the NPC updates its condition.
--- This hook only exists for ai type SENTs
---@param conditionID number The ID of condition. See NPC:ConditionName.
function ENTITY:OnCondition(conditionID) end

---[SERVER] Called on any entity after it has been created by the duplicator and before any bone/entity modifiers have been applied.
--- This hook is called after ENTITY:Initialize and before ENTITY:PostEntityPaste.
---@param entTable table Structures/EntityCopyData of the source entity.
function ENTITY:OnDuplicated(entTable) end

---[SERVER] Called after duplicator finishes saving the entity, allowing you to modify the save data.
--- This is called after ENTITY:PostEntityCopy.
---@param data table The save Structures/EntityCopyData that you can modify.
function ENTITY:OnEntityCopyTableFinish(data) end

---[SERVER] Called when the SNPC completes its movement to its destination.
--- This hook only works on ai type entities.
function ENTITY:OnMovementComplete() end

---[SERVER] Called when the SNPC failed to move to its destination.
--- This hook only works on ai type entities.
function ENTITY:OnMovementFailed() end

---[SHARED] Called when the entity is reloaded by the lua auto-refresh system, i.e. when the developer edits the lua file for the entity while the game is running.
function ENTITY:OnReloaded() end

---[SHARED] Called when the entity is about to be removed.
--- See also Entity:CallOnRemove, which can even be used on engine (non-Lua) entities.
--- ExampleCreate an explosion when the entity will be removed. To create an entity, you can read ents.Create.
--- function ENT:OnRemove()
--- 	local explosion = ents.Create( "env_explosion" ) -- The explosion entity
--- 	explosion:SetPos( self:GetPos() ) -- Put the position of the explosion at the position of the entity
--- 	explosion:Spawn() -- Spawn the explosion
--- 	explosion:SetKeyValue( "iMagnitude", "50" ) -- the magnitude of the explosion
--- 	explosion:Fire( "Explode", 0, 0 ) -- explode
--- end
function ENTITY:OnRemove() end

---[SHARED] Called when the entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).
--- For the duplicator callbacks, see ENTITY:OnDuplicated.
function ENTITY:OnRestore() end

---[SERVER] Called when the entity is taking damage.
--- Calling Entity:TakeDamage, Entity:TakeDamageInfo, Entity:DispatchTraceAttack, or Player:TraceHullAttack (if the entity is hit) in this hook on the victim entity can cause infinite loops since the hook will be called again. Make sure to setup recursion safeguards like the example below.This hook is only called for ai, nextbot and anim type entities.
---@param damage CTakeDamageInfo The damage to be applied to the entity.
---@return number How much damage the entity took. Basically > 0 means took damage, 0 means did not take damage.
function ENTITY:OnTakeDamage(damage) end

---[SERVER] Called from the engine when TaskComplete is called.
--- This allows us to move onto the next task - even when TaskComplete was called from an engine side task.
--- This hook only exists for ai type SENTs
function ENTITY:OnTaskComplete() end

---[SERVER] Tests whether the damage passes the entity filter.
--- This will call ENTITY:PassesDamageFilter on scripted entities of the type "filter".
--- This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )
---@param dmg CTakeDamageInfo The damage info to test
---@return boolean Whether the damage info passes the entity filter.
function Entity:PassesDamageFilter(dmg) end

---[SERVER] Tests whether the entity passes the entity filter.
--- This will call ENTITY:PassesFilter on scripted entities of the type "filter".
--- This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )
---@param caller Entity The initiator of the test. For example the trigger this filter entity is used in.
---@param ent Entity The entity to test against the entity filter.
---@return boolean Whether the entity info passes the entity filter.
function Entity:PassesFilter(caller, ent) end

---[SERVER] Polls whenever the entity should trigger the brush.
--- This hook is broken and will not work without code below
---@param ent Entity The entity that is about to trigger.
---@return boolean Should trigger or not.
function ENTITY:PassesTriggerFilters(ent) end

---[SERVER] Called when the entity collides with anything. The move type and solid type must be VPHYSICS for the hook to be called.
--- If you want to use this hook on default/engine/non-Lua entites ( like prop_physics ), use Entity:AddCallback instead! This page describes a hook for Lua entities
---@param colData table Information regarding the collision. See Structures/CollisionData.
---@param collider PhysObj The physics object that collided.
function ENTITY:PhysicsCollide(colData, collider) end

---[SHARED] Called from the Entity's motion controller to simulate physics.
--- This will only be called after using Entity:StartMotionController on a scripted entity of anim type.
--- This hook can work on the CLIENT if you call Entity:StartMotionController and use Entity:AddToMotionController on the physics objects you want to controlDo not use functions such as PhysObj:EnableCollisions or PhysObj:EnableGravity in this hook as they're very likely to crash your game. You may want to use ENTITY:PhysicsUpdate instead.
---@param phys PhysObj The physics object of the entity.
---@param deltaTime number Time since the last call.
---@return Vector, Vector, number Vector - Angular force
---@return Vector, Vector, number Vector - Linear force
---@return Vector, Vector, number number - One of the Enums/SIM.
function ENTITY:PhysicsSimulate(phys, deltaTime) end

---[SHARED] Called whenever the physics of the entity are updated.
--- This hook won't be called if the Entity's PhysObj goes asleep
---@param phys PhysObj The physics object of the entity.
function ENTITY:PhysicsUpdate(phys) end

---[SERVER] Called after the duplicator finished copying the entity.
--- See also ENTITY:PreEntityCopy and ENTITY:PostEntityPaste.
function ENTITY:PostEntityCopy() end

---[SERVER] Called after the duplicator pastes the entity, after the bone/entity modifiers have been applied to the entity.
--- This hook is called after ENTITY:OnDuplicated.
---@param ply Player The player who pasted the entity. This may not be a valid player in some circumstances. For example, when a save is loaded from the main menu, this hook will be called before the player is spawned. This argument will be a NULL entity in that case.This will be nil for invalid players.This may not be a valid player in some circumstances. For example, when a save is loaded from the main menu, this hook will be called before the player is spawned. This argument will be a NULL entity in that case.This may not be a valid player in some circumstances. For example, when a save is loaded from the main menu, this hook will be called before the player is spawned. This argument will be a NULL entity in that case.This will be nil for invalid players.This will be nil for invalid players.
---@param ent Entity The entity itself. Same as 'self'.
---@param createdEntities table All entities that are within the placed dupe. <note>The keys of each value in this table are the original entity indexes when the duplication was created. This can be utilized to restore entity references that don't get saved in duplications.</note>
function ENTITY:PostEntityPaste(ply, ent, createdEntities) end

---[SERVER] Called before the duplicator copies the entity.
--- If you are looking for a way to make the duplicator spawn another entity when duplicated. ( For example, you duplicate a "prop_physics", but you want the duplicator to spawn "prop_physics_my" ), you should add prop_physics.ClassOverride = "prop_physics_my". The duplication table should be also stored on that prop_physics, not on prop_physics_my.
function ENTITY:PreEntityCopy() end

---[CLIENT] Called instead of the engine drawing function of the entity. This hook works on any entity (scripted or not) it is applied on.
--- This does not work on "physgun_beam", use GM:DrawPhysgunBeam instead.
--- As a downside of this implementation, only one RenderOverride may be applied at a time.Drawing a viewmodel in this function will cause GM:PreDrawViewModel, WEAPON:PreDrawViewModel, WEAPON:ViewModelDrawn, GM:PostDrawViewModel, and WEAPON:PostDrawViewModel to be called twice.Issue Tracker: 3292This is called before PrePlayerDraw for players. If this function exists at all on a player, their worldmodel will always be rendered regardless of PrePlayerDraw's return.Issue Tracker: 3299
---@param flags number The STUDIO_ flags for this render operation.
function ENTITY:RenderOverride(flags) end

---[SERVER] Called from the engine every 0.1 seconds. Returning true inside this hook will allow CAI_BaseNPC::MaintainSchedule to also be called.
--- This hook only exists for ai type SENTs
function ENTITY:RunAI() end

---[SERVER] Called when an engine task is ran on the entity.
--- This hook only exists for ai type SENTs
---@param taskID number The task ID, see ai_task.h
---@param taskData number The task data.
---@return boolean true to prevent default action
function ENTITY:RunEngineTask(taskID, taskData) end

---[SERVER] Called every think on running task.
--- The actual task function should tell us when the task is finished.
--- This hook only exists for ai type SENTs
---@param task table The task to run
function ENTITY:RunTask(task) end

---[SERVER] Called whenever a schedule is finished.
--- This hook only exists for ai type SENTs
function ENTITY:ScheduleFinished() end

---[SERVER] Set the schedule we should be playing right now.
--- This hook only exists for ai type SENTs
---@param iNPCState number 
function ENTITY:SelectSchedule(iNPCState) end

---[SHARED] Toggles automatic frame advancing for animated sequences on an entity.
--- This has the same effect as setting the ENT.AutomaticFrameAdvance property. (See Structures/ENT)
---@param enable boolean Whether or not to set automatic frame advancing.
function ENTITY:SetAutomaticFrameAdvance(enable) end

---[SERVER] Sets the NPC max yaw speed. Internally sets the m_fMaxYawSpeed variable which is polled by the engine.
--- This is a helper function only available if your SENT is based on base_ai
---@param maxyaw number The new max yaw value to set
function ENTITY:SetMaxYawSpeed(maxyaw) end

---[SERVER] Sets the NPC classification. Internally sets the m_iClass variable which is polled by the engine.
--- This is a helper function only available if your SENT is based on base_ai
---@param classification number The CLASS Enum
function ENTITY:SetNPCClass(classification) end

---[SERVER] Sets the current task.
--- This hook only exists for ai type SENTs
---@param task table The task to set.
function ENTITY:SetTask(task) end

---[SHARED] Called when the entity should set up its  Data Tables.
--- This is a much better option than using Set/Get Networked Values.
--- This hook is called after GM:OnEntityCreated and GM:NetworkEntityCreated.
function ENTITY:SetupDataTables() end

---[SERVER] This is the spawn function. It's called when a player spawns the entity from the spawnmenu.
--- If you want to make your SENT spawnable you need this function to properly create the entity.
--- Unlike other ENTITY functions, the "self" parameter of this function is not an entity but rather the table used to generate the SENT. This table is equivalent to scripted_ents.GetStored("ent_name").
---@param ply Player The player that is spawning this SENT
---@param tr table A Structures/TraceResult from player eyes to their aim position
---@param ClassName string The classname of your entity
function ENTITY:SpawnFunction(ply, tr, ClassName) end

---[SERVER] Starts an engine schedule.
--- This hook only exists for ai type SENTs
---@param scheduleID number Schedule ID to start. See Enums/SCHED
function ENTITY:StartEngineSchedule(scheduleID) end

---[SERVER] Called when an engine task has been started on the entity.
--- This hook only exists for ai type SENTs
---@param taskID number Task ID to start, see ai_task.h
---@param TaskData number Task data
---@return boolean true to stop default action
function ENTITY:StartEngineTask(taskID, TaskData) end

---[SERVER] Starts a schedule previously created by ai_schedule.New.
--- Not to be confused with ENTITY:StartEngineSchedule or NPC:SetSchedule which start an Engine-based schedule.
--- This hook only exists for ai type SENTs
---@param sched Schedule Schedule to start.
function ENTITY:StartSchedule(sched) end

---[SERVER] Called once on starting task.
--- This hook only exists for ai type SENTs
---@param task Task The task to start, created by ai_task.New.
function ENTITY:StartTask(task) end

---[SERVER] Called when the entity starts touching another entity.
--- This only works for brush entities and for entities that have Entity:SetTrigger set to true.
---@param entity Entity The entity which is being touched.
function ENTITY:StartTouch(entity) end

---[SERVER] Used to store an output so it can be triggered with ENTITY:TriggerOutput.
--- Outputs compiled into a map are passed to entities as key/value pairs through ENTITY:KeyValue.
--- TriggerOutput will do nothing if this function has not been called first.
---@param name string Name of output to store
---@param info string Output info
function ENTITY:StoreOutput(name, info) end

---[SERVER] Returns true if the current running Task is finished.
--- This hook only exists for ai type SENTs
---@return boolean Is the current running Task is finished or not.
function ENTITY:TaskFinished() end

---[SERVER] Returns how many seconds we've been doing this current task
--- This hook only exists for ai type SENTs
---@return number How many seconds we've been doing this current task
function ENTITY:TaskTime() end

---[SHARED] Allows you to override trace result when a trace hits the entitys Bounding Box.
--- Your entity must have Entity:EnableCustomCollisions enabled for this hook to work.This hook is called for anim type only.
---@param startpos Vector Start position of the trace.
---@param delta Vector Offset from startpos to the endpos of the trace.
---@param isbox boolean Is the trace a hull trace?
---@param extents Vector Size of the hull trace?
---@param mask number The Enums/CONTENTS mask.
---@return table Returning a table will allow you to override trace results. Table should contain the following keys, all optional:  Vector HitPos - The new hitpos of the trace. number Fraction - A number from 0 to 1, describing how far the trace went from its origin point, 1 = did not hit. Vector Normal - A unit vector (length=1) describing the direction perpendicular to the hit surface.  Returning true will allow "normal" collisions to happen for SOLID_VPHYSICS and SOLID_BBOX entities. Returning nothing or false allows the trace to ignore the entity completely.
function ENTITY:TestCollision(startpos, delta, isbox, extents, mask) end

---[SHARED] Called every frame on the client.
--- Called about 5-6 times per second on the server.
--- You may need to call Entity:Spawn to get this hook to run server side.
--- You can force it to run at servers tickrate using the example below.
---@return boolean Return true if you used Entity:NextThink to override the next execution time.
function ENTITY:Think() end

---[SERVER] Called every tick for every entity being "touched".
--- See also ENTITY:StartTouch and ENTITY:EndTouch.
--- For physics enabled entities, this hook will not be ran while the entity's physics is asleep. See PhysObj:Wake.
---@param entity Entity The entity that touched it.
function ENTITY:Touch(entity) end

---[SERVER] Triggers all outputs stored using ENTITY:StoreOutput.
---@param output string Name of output to fire
---@param activator Entity Activator entity
---@param data string The data to give to the output.
function ENTITY:TriggerOutput(output, activator, data) end

---[SERVER] Called whenever the transmit state should be updated.
---@return number Transmit state to set, see Enums/TRANSMIT.
function ENTITY:UpdateTransmitState() end

---[SERVER] Called when an entity "uses" this entity, for example a player pressing their +use key (default e) on this entity.
--- To change how often the hook is called, see Entity:SetUseType.
--- This hook only works for nextbot, ai and anim scripted entity types.
---@param activator Entity The entity that caused this input. This will usually be the player who pressed their use key.
---@param caller Entity The entity responsible for the input. This will typically be the same as activator unless some other entity is acting as a proxy
---@param useType number Use type, see Enums/USE.
---@param value number Any passed value.
function ENTITY:Use(activator, caller, useType, value) end

---[SHARED] Activates the entity. This needs to be used on some entities (like constraints) after being spawned.
--- For some entity types when this function is used after Entity:SetModelScale, the physics object will be recreated with the new scale. Source-sdk-2013.
--- Calling this method after Entity:SetModelScale will recreate a new scaled SOLID_VPHYSICS PhysObj on scripted entities. This can be a problem if you made a properly scaled PhysObj of another kind (using Entity:PhysicsInitSphere for instance) or if you edited the PhysObj's properties. This is especially the behavior of the Sandbox spawn menu.
function Entity:Activate() end

---[SHARED] Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.
--- This also allows you to use certain hooks in engine entities (non-scripted entities).
--- This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.
---@param hook string The hook name to hook onto. See Entity Callbacks
---@param func function The function to call
---@return number The callback ID that was just added, which can later be used in Entity:RemoveCallback. Returns nothing if the passed callback function was invalid or when asking for a non-existent hook.
function Entity:AddCallback(hook, func) end

---[SHARED] Applies an engine effect to an entity.
--- See also Entity:IsEffectActive and  Entity:RemoveEffects.
---@param effect number The effect to apply, see Enums/EF.
function Entity:AddEffects(effect) end

---[SHARED] Adds engine flags.
---@param flag number Engine flag to add, see Enums/EFL
function Entity:AddEFlags(flag) end

---[SHARED] Adds flags to the entity.
---@param flag number Flag to add, see Enums/FL
function Entity:AddFlags(flag) end

---[SERVER] Adds a gesture animation to the entity and plays it.
--- See Entity:AddGestureSequence and Entity:AddLayeredSequence for functions that takes sequences instead of Enums/ACT.
--- This function only works on BaseAnimatingOverlay entites!
---@param activity number The activity to play as the gesture. See Enums/ACT.
---@param autokill boolean 
---@return number Layer ID of the started gesture, used to manipulate the played gesture by other functions.
function Entity:AddGesture(activity, autokill) end

---[SERVER] Adds a gesture animation to the entity and plays it.
--- See Entity:AddGesture for a function that takes Enums/ACT.
--- See also Entity:AddLayeredSequence.
--- This function only works on BaseAnimatingOverlay entites!
---@param sequence number The sequence ID to play as the gesture. See Entity:LookupSequence.
---@param autokill boolean 
---@return number Layer ID of the started gesture, used to manipulate the played gesture by other functions.
function Entity:AddGestureSequence(sequence, autokill) end

---[SERVER] Adds a gesture animation to the entity and plays it.
--- See Entity:AddGestureSequence for a function that doesn't take priority.
--- See Entity:AddGesture for a function that takes Enums/ACT.
--- This function only works on BaseAnimatingOverlay entites!
---@param sequence number The sequence ID to play as the gesture. See Entity:LookupSequence.
---@param priority number 
---@return number Layer ID of created layer
function Entity:AddLayeredSequence(sequence, priority) end

---[SHARED] Adds solid flag(s) to the entity.
---@param flags number The flag(s) to apply, see Enums/FSOLID.
function Entity:AddSolidFlags(flags) end

---[SHARED] Adds a PhysObject to the entity's motion controller so that ENTITY:PhysicsSimulate will be called for given PhysObject as well.
--- You must first create a motion controller with Entity:StartMotionController.
--- You can remove added PhysObjects by using Entity:RemoveFromMotionController.
--- Only works on a scripted Entity of anim type
---@param physObj PhysObj The PhysObj to add to the motion controller.
function Entity:AddToMotionController(physObj) end

---[SHARED] Returns an angle based on the ones inputted that you can use to align an object.
--- This function doesn't change the angle of the entity on its own (see example).
---@param from Angle The angle you want to align from
---@param to Angle The angle you want to align to
---@return Angle The resulting aligned angle
function Entity:AlignAngles(from, to) end

---[CLIENT] Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesn't preserve flex values (face posing) as CSRagdolls don't support flex.
--- It does not work on players. Use Player:CreateRagdoll instead.
--- The original entity is not removed, and neither are any ragdolls previously generated with this function.
--- To make the entity re-appear, run Entity:SetNoDraw( false )
---@return Entity The created ragdoll. (class C_ClientRagdoll])
function Entity:BecomeRagdollOnClient() end

---[CLIENT] Returns true if the entity is being looked at by the local player and is within 256 units of distance.
--- This function is only available in entities that are based off of sandbox's base_gmodentity.
---@return boolean Is the entity being looked at by the local player and within 256 units.
function Entity:BeingLookedAtByLocalPlayer() end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Dispatches blocked events to this entity's blocked handler. This function is only useful when interacting with entities like func_movelinear.
---@param entity Entity The entity that is blocking us
function Entity:Blocked(entity) end

---[SERVER] Returns a centered vector of this entity, NPCs use this internally to aim at their targets.
--- This only works on players and NPCs.
---@param origin Vector The vector of where the the attack comes from.
---@param noisy boolean Decides if it should return the centered vector with a random offset to it.
---@return Vector The centered vector.
function Entity:BodyTarget(origin, noisy) end

---[SHARED] Returns whether the entity's bone has the flag or not.
---@param boneID number Bone ID to test flag of.
---@param flag number The flag to test, see Enums/BONE
---@return boolean Whether the bone has that flag or not
function Entity:BoneHasFlag(boneID, flag) end

---[SHARED] Returns the length between given bone's position and the position of given bone's parent.
---@param boneID number The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results
---@return number The length of the bone
function Entity:BoneLength(boneID) end

---[SHARED] Returns the distance between the center of the bounding box and the furthest bounding box corner.
---@return number The radius of the bounding box.
function Entity:BoundingRadius() end

---[SHARED] Calls all NetworkVarNotify functions with the given new value, but doesn't change the real value.
---@param Type string The NetworkVar Type.  String Bool Float Int (32-bit signed integer) Vector Angle Entity
---@param index number The NetworkVar index.
---@param newValue any The new value.
function Entity:CallDTVarProxies(Type, index, newValue) end

---[SHARED] Causes a specified function to be run if the entity is removed by any means. This can later be undone by Entity:RemoveCallOnRemove if you need it to not run.
--- This hook is called during clientside full updates. See ENTITY:OnRemove for more information.Issue Tracker: 4675Using players with this function will provide a gimped entity to the callback.
---@param identifier string Identifier of the function within CallOnRemove
---@param removeFunc function Function to be called on remove
---@param ... ... Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that.
function Entity:CallOnRemove(identifier, removeFunc, ...) end

---[SERVER] Clears all registered events for map i/o outputs of the Entity.
function Entity:ClearAllOutputs() end

---[SHARED] Resets all pose parameters such as aim_yaw, aim_pitch and rotation.
function Entity:ClearPoseParameters() end

---[SHARED] Declares that the collision rules of the entity have changed, and subsequent calls for GM:ShouldCollide with this entity may return a different value than they did previously.
--- This function must not be called inside of GM:ShouldCollide. Instead, it must be called in advance when the condition is known to change.Failure to use this function correctly will result in a crash of the physics engine.
function Entity:CollisionRulesChanged() end

---[SERVER] Creates bone followers based on the current entity model.
--- Bone followers are physics objects that follow the visual mesh. This is what is used by prop_dynamic for things like big combine doors for vehicles with multiple physics objects which follow the visual mesh of the door when it animates.
--- You must call Entity:UpdateBoneFollowers every tick for bone followers to update their positions.
--- This function only works on anim type entities.
function Entity:CreateBoneFollowers() end

---[SERVER] Returns whether the entity was created by map or not.
---@return boolean Is created by map?
function Entity:CreatedByMap() end

---[CLIENT] Creates a clientside particle system attached to the entity. See also CreateParticleSystem
--- The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!
---@param particle string The particle name to create
---@param attachment number Attachment ID to attach the particle to
---@param options table A table of tables ( IDs 1 to 64 ) having the following structure:  number attachtype - The particle attach type. See PATTACH. Default: PATTACH_ABSORIGIN Entity entity - The parent entity? Default: NULL Vector position - The offset position for given control point. Default:  nil  This only affects the control points of the particle effects and will do nothing if the effect doesn't use control points.
---@return CNewParticleEffect The created particle system.
function Entity:CreateParticleEffect(particle, attachment, options) end

---[CLIENT] Draws the shadow of an entity.
function Entity:CreateShadow() end

---[SERVER] Whenever the entity is removed, entityToRemove will be removed also.
---@param entityToRemove Entity The entity to be removed
function Entity:DeleteOnRemove(entityToRemove) end

---[SERVER] Destroys bone followers created by Entity:CreateBoneFollowers.
--- This function only works on anim type entities.
function Entity:DestroyBoneFollowers() end

---[CLIENT] Removes the shadow for the entity.
--- The shadow will be recreated as soon as the entity wakes.
--- Doesn't affect shadows from flashlight/lamps/env_projectedtexture.
function Entity:DestroyShadow() end

---[CLIENT] Disables an active matrix.
---@param matrixType string The name of the matrix type to disable. The only known matrix type is "RenderMultiply".
function Entity:DisableMatrix(matrixType) end

---[SHARED] Performs a trace attack towards the entity this function is called on. Visually identical to Entity:TakeDamageInfo.
--- Calling this function on the victim entity in ENTITY:OnTakeDamage can cause infinite loops.
---@param damageInfo CTakeDamageInfo The damage to apply.
---@param traceRes table Trace result to use to deal damage. See Structures/TraceResult
---@param dir Vector Direction of the attack.
function Entity:DispatchTraceAttack(damageInfo, traceRes, dir) end

---[SERVER] This removes the argument entity from an ent's list of entities to 'delete on remove'
--- Also see Entity:DeleteOnRemove
---@param entityToUnremove Entity The entity to be removed from the list of entities to delete
function Entity:DontDeleteOnRemove(entityToUnremove) end

---[CLIENT] Called if and when the entity should be drawn opaquely, based on the Entity:GetRenderGroup of the entity.
--- See Structures/ENT and Enums/RENDERGROUP for more information.
--- See also ENTITY:DrawTranslucent.
--- This function is not called by the game whenever the player looks away from the entity due to optimizations. To change that,
--- you must define an empty Entity:Think method client-side!
---@param flags number The bit flags from Enums/STUDIO
function ENTITY:Draw(flags) end

---[CLIENT] Draws the entity or model.
--- If called inside ENTITY:Draw or ENTITY:DrawTranslucent, it only draws the entity's model itself.
--- If called outside of those hooks, it will call both of said hooks depending on Entity:GetRenderGroup, drawing the entire entity again.
--- When drawing an entity more than once per frame in different positions, you should call Entity:SetupBones before each draw; Otherwise, the entity will retain its first drawn position.This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.Calling this on entities with EF_BONEMERGE and EF_NODRAW applied causes a crash.Issue Tracker: 1558Using this with a map model (game.GetWorld():GetModel()) crashes the game.Issue Tracker: 2688
---@param flags number The optional STUDIO_ flags, usually taken from ENTITY:Draw and similar hooks.
function Entity:DrawModel(flags) end

---[SHARED] Sets whether an entity's shadow should be drawn.
---@param shouldDraw boolean True to enable, false to disable shadow drawing.
function Entity:DrawShadow(shouldDraw) end

---[SERVER] Move an entity down until it collides with something.
--- The entity needs to already have something below it within 256 units.
function Entity:DropToFloor() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- You should use Entity:NetworkVar instead
--- Sets up a self.dt.NAME alias for a Data Table variable.
---@param Type string The type of the DTVar being set up. It can be one of the following: 'Int', 'Float', 'Vector', 'Angle', 'Bool', 'Entity' or 'String'
---@param ID number The ID of the DTVar. Can be between 0 and 3 for strings, 0 and 31 for everything else.
---@param Name string Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)
function Entity:DTVar(Type, ID, Name) end

---[SHARED] Plays a sound on an entity. If run clientside, the sound will only be heard locally.
--- If used on a player or NPC character with the mouth rigged, the character will "lip-sync". This does not work with all sound files.
--- When using this function with weapons, use the Weapon itself as the entity, not its owner!This does not respond to SuppressHostEvents.Issue Tracker: 2651
---@param soundName string The name of the sound to be played. This should either be a sound script name (sound.Add) or a file path relative to the sound/ folder. (Make note that it's not sounds) The string cannot have whitespace at the start or end. You can remove this with string.Trim.The string cannot have whitespace at the start or end. You can remove this with string.Trim.The string cannot have whitespace at the start or end. You can remove this with string.Trim.
---@param soundLevel number A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level. See Enums/SNDLVL Will not work if a sound script is used.
---@param pitchPercent number The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.
---@param volume number The volume, from 0 to 1.
---@param channel number The sound channel, see Enums/CHAN. Will not work if a sound script is used.
---@param soundFlags number The flags of the sound, see Enums/SND
---@param dsp number The DSP preset for this sound. List of DSP presets
function Entity:EmitSound(soundName, soundLevel, pitchPercent, volume, channel, soundFlags, dsp) end

---[SERVER] Toggles the constraints of this ragdoll entity on and off.
---@param toggleConstraints boolean Set to true to enable the constraints and false to disable them. Disabling constraints will delete the constraint entities.
function Entity:EnableConstraints(toggleConstraints) end

---[SHARED] Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after Entity:PhysicsFromMesh
--- Internally identical to Entity:AddSolidFlags( bit.bor( FSOLID_CUSTOMRAYTEST, FSOLID_CUSTOMBOXTEST ) )
--- Do not confuse this function with Entity:SetCustomCollisionCheck, they are not the same.
---@param useCustom boolean True to flag this entity
function Entity:EnableCustomCollisions(useCustom) end

---[CLIENT] Can be used to apply a custom VMatrix to the entity, mostly used for scaling the model by a Vector.
--- To disable it, use Entity:DisableMatrix.
--- If your old scales are wrong due to a recent update, use Entity:SetLegacyTransform as a quick fix.
--- The matrix can also be modified to apply a custom rotation and offset via the VMatrix:SetAngles and VMatrix:SetTranslation functions.This does not scale procedural bones.Issue Tracker: 3502This disables inverse kinematics of an entity.Issue Tracker: 3502
---@param matrixType string The name of the matrix type.  The only implemented matrix type is "RenderMultiply".
---@param matrix VMatrix The matrix to apply before drawing the entity.
function Entity:EnableMatrix(matrixType, matrix) end

---[SHARED] Gets the unique entity index of an entity.
--- Entity indices are marked as unused after deletion, and can be reused by newly-created entities
---@return number The index of the entity. -1 for clientside-only or serverside-only entities.
function Entity:EntIndex() end

---[SERVER] Extinguishes the entity if it is on fire.
--- Has no effect if called inside GM:EntityTakeDamage (and the attacker is the flame that's hurting the entity)
--- See also Entity:Ignite.
function Entity:Extinguish() end

---[SHARED] Returns the direction a player, npc or ragdoll is looking as a world-oriented angle.
--- This can return an incorrect value in vehicles (like pods, buggy, ...). This bug has been fixed in the past but was causing many addons being broken, so the fix has been removed but applied to Player:GetAimVector only.Issue Tracker: 1150This may return local angles in jeeps when used with Player:EnterVehicle. A workaround is available in the second example.Issue Tracker: 2620
---@return Angle Player's eye angle.
function Entity:EyeAngles() end

---[SHARED] Returns the position of an Player/NPC's view.
---@return Vector View position of the entity.
function Entity:EyePos() end

---[SHARED] Searches for bodygroup with given name.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
---@param name string The bodygroup name to search for.
---@return number Bodygroup ID, -1 if not found
function Entity:FindBodygroupByName(name) end

---[SHARED] Returns a transition from the given start and end sequence.
--- This function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures.
---@param currentSequence number The currently playing sequence
---@param goalSequence number The goal sequence.
---@return number The transition sequence, -1 if not available.
function Entity:FindTransitionSequence(currentSequence, goalSequence) end

---[SERVER] Fires an entity's input, conforming to the map IO event queue system. You can find inputs for most entities on the Valve Developer Wiki
--- See also Entity:Input for a function that bypasses the event queue and GM:AcceptInput.
---@param input string The name of the input to fire
---@param param string The value to give to the input, can also be a number or a boolean.
---@param delay number Delay in seconds before firing
---@param activator Entity The entity that caused this input (i.e. the player who pushed a button)
---@param caller Entity The entity that is triggering this input (i.e. the button that was pushed)
function Entity:Fire(input, param, delay, activator, caller) end

---[SHARED] Fires a bullet.
--- When used in a  hook such as WEAPON:Think or WEAPON:PrimaryAttack, it will use Player:LagCompensation internally.
--- Lag compensation will not work if this function is called in a timer, regardless if the timer was made in a  hook.
--- Due to how FireBullets is set up internally, bullet tracers will always originate from attachment 1.
---@param bulletInfo table The bullet data to be used. See the Structures/Bullet.
---@param suppressHostEvents boolean Has the effect of encasing the FireBullets call in SuppressHostEvents, only works in multiplayer.
function Entity:FireBullets(bulletInfo, suppressHostEvents) end

---[SHARED] Makes an entity follow another entity's bone.
--- Internally this function calls Entity:SetParent( parent, boneid ), Entity:AddEffects( EF_FOLLOWBONE
--- ) and sets an internal flag to always rebuild all bones.
--- If the entity vibrates or stops following the parent, you probably need to run Entity:SetPredictable( true ) clientside.This function will not work if the target bone's parent bone is invalid or if the bone is not used by VERTEX LOD0
---@param parent Entity The entity to follow the bone of. If unset, removes the FollowBone effect.
---@param boneid number The bone to follow
function Entity:FollowBone(parent, boneid) end

---[SHARED] Forces the Entity to be dropped, when it is being held by a player's gravitygun or physgun.
function Entity:ForcePlayerDrop() end

---[SHARED] Advances the cycle of an animated entity.
--- Animations that loop will automatically reset the cycle so you don't have to - ones that do not will stop animating once you reach the end of their sequence.
--- Do not call this function multiple times a frame, as it can cause unexpected results, such as animations playing at increased rate, etc.
--- NextBot:BodyMoveXY calls this internally, so do not call this function before or after NextBot:BodyMoveXY.
function Entity:FrameAdvance() end

---[SHARED] Returns the entity's velocity.
--- Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision.
---@return Vector The velocity of the entity.
function Entity:GetAbsVelocity() end

---[SHARED] Gets the angles of given entity.
--- This returns incorrect results for the local player clientside.Issue Tracker: 2764This will return the local player's EyeAngles in rendering hooks.Issue Tracker: 3106This will return Angle(0,0,0) in rendering hooks while paused in single-player.Issue Tracker: 3107
---@return Angle The angles of the entity.
function Entity:GetAngles() end

---[SHARED] Returns the amount of animations (not to be confused with sequences) the entity's model has. A sequence can consist of multiple animations.
--- See also Entity:GetAnimInfo
---@return number The amount of animations the entity's model has.
function Entity:GetAnimCount() end

---[SHARED] Returns a table containing the number of frames, flags, name, and FPS of an entity's animation ID.
--- Animation ID is not the same as sequence ID. See Entity:GetAnimCount
---@param animIndex number The animation ID to look up
---@return table Information about the animation, or nil if the index is out of bounds
function Entity:GetAnimInfo(animIndex) end

---[CLIENT] Returns the last time the entity had an animation update. Returns 0 if the entity doesn't animate.
---@return number The last time the entity had an animation update.
function Entity:GetAnimTime() end

---[SHARED] Returns the amount of time since last animation.
--- Works only on CBaseAnimating entities.
---@return number The amount of time since last animation.
function Entity:GetAnimTimeInterval() end

---[SHARED] Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.
--- The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for Scripted Entities!This will return improper values for viewmodels if used in GM:CalcView.Issue Tracker: 1255
---@param attachmentId number The internal ID of the attachment.
---@return table The angle and position of the attachment. See the Structures/AngPos. Most notably, the table contains the keys "Ang" and "Pos".
function Entity:GetAttachment(attachmentId) end

---[SHARED] Returns a table containing all attachments of the given entity's model.
--- Returns an empty table or nil in case its model has no attachments.
--- This can have inconsistent results in single-player.Issue Tracker: 3167
---@return table Attachment data. See Structures/AttachmentData.
function Entity:GetAttachments() end

---[SHARED] Returns the entity's base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.
---@return Vector The base velocity of the entity.
function Entity:GetBaseVelocity() end

---[SHARED] Returns the blood color of this entity. This can be set with Entity:SetBloodColor.
---@return number Color from Enums/BLOOD_COLOR
function Entity:GetBloodColor() end

---[SHARED] Gets the exact value for specific bodygroup of given entity.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
---@param id number The id of bodygroup to get value of. Starts from 0.
---@return number Current bodygroup. Starts from 0.
function Entity:GetBodygroup(id) end

---[SHARED] Returns the count of possible values for this bodygroup.
--- This is not the maximum value, since the bodygroups start with 0, not 1.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
---@param bodygroup number The ID of bodygroup to retrieve count of.
---@return number Count of values of passed bodygroup.
function Entity:GetBodygroupCount(bodygroup) end

---[SHARED] Gets the name of specific bodygroup for given entity.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
---@param id number The id of bodygroup to get the name of.
---@return string The name of the bodygroup
function Entity:GetBodygroupName(id) end

---[SHARED] Returns a list of all body groups of the entity.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model will return body groups form view model.
---@return table Bodygroups as a table of Structures/BodyGroupDatas if the entity can have bodygroups.
function Entity:GetBodyGroups() end

---[SHARED] Returns the contents of the specified bone.
---@param bone number The bone id, starting at index 0. See Entity:LookupBone.
---@return number The contents as a Enums/CONTENTS or 0 on failure.
function Entity:GetBoneContents(bone) end

---[SHARED] Returns the value of the bone controller with the specified ID.
--- This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.
---@param boneID number ID of the bone controller. Goes from 0 to 3.
---@return number The value set on the bone controller.
function Entity:GetBoneController(boneID) end

---[SHARED] Returns the amount of bones in the entity.
--- Will return -1 for ClientsideModel or undrawn entities until Entity:SetupBones is called on the entity.
---@return number The amount of bones in given entity; -1 on failure.
function Entity:GetBoneCount() end

---[SHARED] Returns the transformation matrix of a given bone on the entity's model. The matrix contains the transformation used to position the bone in the world. It is not relative to the parent bone.
--- This is equivalent to constructing a VMatrix using Entity:GetBonePosition.
--- This can return the server's matrix during server lag.Issue Tracker: 884This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models.Issue Tracker: 3285
---@param boneID number The bone ID to retrieve matrix of, starting at index 0.  Bones clientside and serverside will differ
---@return VMatrix The matrix  Some entities don't update animation every frame such as prop_physics and won't have accurate bone matrix.
function Entity:GetBoneMatrix(boneID) end

---[SHARED] Returns name of given bone id.
---@param index number ID of bone to lookup name of, starting at index 0.
---@return string The name of given bone.  nil in case we failed or entity doesn't have a model. __INVALIDBONE__ in case the name cannot be read or the index is out of range.
function Entity:GetBoneName(index) end

---[SHARED] Returns parent bone of given bone.
--- Will return -1 for ClientsideModel until Entity:SetupBones is called on the entity.
---@param bone number The bode ID of the bone to get parent of, starting at index 0.
---@return number Parent bone ID or -1 if we failed for some reason.
function Entity:GetBoneParent(bone) end

---[SHARED] Returns the position and angle of the given attachment, relative to the world.
--- This function can return entity's GetPos() instead if the entity doesn't have it's bone cache set up.
--- To ensure the bone position is correct use this:
--- local pos = ent:GetBonePosition(0)
--- if pos == ent:GetPos() then
--- 	pos = ent:GetBoneMatrix(0):GetTranslation()
--- endThis function returns the bone position from the last tick, so if your framerate is higher than the server's tickrate it may appear to lag behind if used on a fast moving entity. You can fix this by using the bone's matrix instead:
--- local matrix = entity:GetBoneMatrix(0)
--- local pos = matrix:GetTranslation()
--- local ang = matrix:GetAngles()This can return the server's position during server lag.Issue Tracker: 884This can return garbage serverside or Vector(0,0,0) for v49 models.Issue Tracker: 3285This can return garbage if a trace passed through the target bone during bone matrix access.Issue Tracker: 3739
---@param boneIndex number The bone index of the bone to get the position of, starting at index 0. See Entity:LookupBone.
---@return Vector, Angle Vector - The bone's position relative to the world. It can return nothing if the requested bone is out of bounds, or the entity has no model.
---@return Vector, Angle Angle - The bone's angle relative to the world.
function Entity:GetBonePosition(boneIndex) end

---[SHARED] Returns the surface property of the specified bone.
---@param bone number The bone id, starting at index 0. See Entity:LookupBone.
---@return string The surface property of the bone to be used with util.GetSurfaceIndex or an empty string on failure.
function Entity:GetBoneSurfaceProp(bone) end

---[SHARED] Returns info about given plane of non-nodraw brush model surfaces of the entity's model. Works on worldspawn as well.
--- This only works on entities with brush models.
---@param id number The index of the plane to get info of. Starts from 0.
---@return Vector, Vector, number Vector - The origin of the plane. This will be either the first vertex's position (if available) or the plane's normal multiplied by the plane's distance.
---@return Vector, Vector, number Vector - The normal of the plane.
---@return Vector, Vector, number number - The "distance" of the plane. The distance is the dot product of the plane's normal and the point it was initialized with.
function Entity:GetBrushPlane(id) end

---[SHARED] Returns the amount of planes of non-nodraw brush model surfaces of the entity's model.
---@return number The amount of brush model planes of the entity's model. This will be 0 for any non-brush model.
function Entity:GetBrushPlaneCount() end

---[SHARED] Returns a table of brushes surfaces for brush model entities.
---@return table Table of SurfaceInfos if the entity has a brush model, or no value otherwise.
function Entity:GetBrushSurfaces() end

---[SHARED] Returns the specified hook callbacks for this entity added with Entity:AddCallback
--- The callbacks can then be removed with Entity:RemoveCallback.
---@param hook string The hook to retrieve the callbacks from, see Entity Callbacks for the possible hooks.
---@return table A table containing the callbackid and function of all the callbacks for the specified hook
function Entity:GetCallbacks(hook) end

---[SHARED] Returns ids of child bones of given bone.
---@param boneid number Bone id to lookup children of
---@return table A table of bone ids
function Entity:GetChildBones(boneid) end

---[SHARED] Gets the children of the entity - that is, every entity whose move parent is this entity.
--- This function returns Entity:SetMoveParent children, NOT Entity:SetParent!
--- Entity:SetParent however also calls Entity:SetMoveParent.
--- This means that some entities in the returned list might have a NULL Entity:GetParent.
--- This also means that using this function on players will return their weapons on the client but not the server.
---@return table A list of movement children entities
function Entity:GetChildren() end

---[SHARED] Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity
---@return string The entity's classname
function Entity:GetClass() end

---[SHARED] Returns an entity's collision bounding box. In most cases, this will return the same bounding box as Entity:GetModelBounds unless the entity does not have a physics mesh or it has a PhysObj different from the default.
--- This can be out-of-sync between the client and server for weapons.Issue Tracker: 223
---@return Vector, Vector Vector - The minimum vector of the collision bounds
---@return Vector, Vector Vector - The maximum vector of the collision bounds
function Entity:GetCollisionBounds() end

---[SHARED] Returns the entity's collision group
---@return number The collision group. See Enums/COLLISION_GROUP
function Entity:GetCollisionGroup() end

---[SHARED] Returns the color the entity is set to.
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@return table The color of the entity as a Color.
function Entity:GetColor() end

---[SHARED] Returns the color the entity is set to.
--- This functions will return Colors set with Entity:GetColor
---@return number, number, number, number number - 
---@return number, number, number, number number - 
---@return number, number, number, number number - 
---@return number, number, number, number number - 
function Entity:GetColor4Part() end

---[SERVER] Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.
---@return Entity, Entity Entity - ent1
---@return Entity, Entity Entity - ent2
function Entity:GetConstrainedEntities() end

---[SERVER] Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint.
---@return PhysObj, PhysObj PhysObj - phys1
---@return PhysObj, PhysObj PhysObj - phys2
function Entity:GetConstrainedPhysObjects() end

---[SERVER] Returns entity's creation ID. Unlike Entity:EntIndex or  Entity:MapCreationID, it will always increase and old values won't be reused.
---@return number The creation ID
function Entity:GetCreationID() end

---[SHARED] Returns the time the entity was created on, relative to CurTime.
---@return number The time the entity was created on.
function Entity:GetCreationTime() end

---[SERVER] Gets the creator of the SENT.
---@return Player The creator, NULL for no creator.
function Entity:GetCreator() end

---[SHARED] Returns whether this entity uses custom collision check set by Entity:SetCustomCollisionCheck.
---@return boolean Whether this entity uses custom collision check or not
function Entity:GetCustomCollisionCheck() end

---[SHARED] Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.
---@return number The frame of the currently played sequence
function Entity:GetCycle() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Get an angle stored in the datatable of the entity.
---@param key number Goes from 0 to 31. Specifies what key to grab from datatable.
---@return Angle Requested angle.
function Entity:GetDTAngle(key) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Get a boolean stored in the datatable of the entity.
---@param key number Goes from 0 to 31. Specifies what key to grab from datatable.
---@return boolean Requested boolean.
function Entity:GetDTBool(key) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Returns an entity stored in the datatable of the entity.
---@param key number Goes from 0 to 31. Specifies what key to grab from datatable.
---@return Entity Requested entity.
function Entity:GetDTEntity(key) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Get a float stored in the datatable of the entity.
---@param key number Goes from 0 to 31. Specifies what key to grab from datatable.
---@return number Requested float.
function Entity:GetDTFloat(key) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Get an integer stored in the datatable of the entity.
---@param key number Goes from 0 to 31. Specifies what key to grab from datatable.
---@return number 32-bit signed integer
function Entity:GetDTInt(key) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Get a string stored in the datatable of the entity.
---@param key number Goes from 0 to 3. Specifies what key to grab from datatable.
---@return string Requested string.
function Entity:GetDTString(key) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Get a vector stored in the datatable of the entity.
---@param key number Goes from 0 to 31. Specifies what key to grab from datatable.
---@return Vector Requested vector.
function Entity:GetDTVector(key) end

---[SHARED] Returns internal data about editable Entity:NetworkVars.
--- This is used internally by DEntityProperties and Editable Entities system.
--- This function will only work on entities which had Entity:InstallDataTable called on them, which is done automatically for players and all Scripted Entities
---@return table The internal data
function Entity:GetEditingData() end

---[SHARED] Returns a bit flag of all engine effect flags of the entity.
---@return number Engine effect flags, see Enums/EF
function Entity:GetEffects() end

---[SHARED] Returns a bit flag of all engine flags of the entity.
---@return number Engine flags, see Enums/EFL
function Entity:GetEFlags() end

---[SHARED] Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.
---@return number elasticity
function Entity:GetElasticity() end

---[SHARED] Returns all flags of given entity.
---@return number Flags of given entity as a bitflag, see Enums/FL
function Entity:GetFlags() end

---[SHARED] Returns acceptable value range for the flex.
---@param flex number The ID of the flex to look up bounds of
---@return number, number number - The minimum value for this flex
---@return number, number number - The maximum value for this flex
function Entity:GetFlexBounds(flex) end

---[SHARED] Returns the ID of the flex based on the beginning or the entire name.
---@param name string The name of the flex to get the ID of. Case sensitive.
---@return number The ID of flex  nil if no flex with given name was found
function Entity:GetFlexIDByName(name) end

---[SHARED] Returns flex name.
---@param id number The flex id to look up name of
---@return string The flex name
function Entity:GetFlexName(id) end

---[SHARED] Returns the number of flexes this entity has.
---@return number The number of flexes.
function Entity:GetFlexNum() end

---[SHARED] Returns the flex scale of the entity.
---@return number The flex scale
function Entity:GetFlexScale() end

---[SHARED] Returns current weight ( value ) of the flex.
---@param flex number The ID of the flex to get weight of
---@return number The current weight of the flex
function Entity:GetFlexWeight(flex) end

---[SHARED] Returns the forward vector of the entity, as a normalized direction vector
---@return Vector forwardDir
function Entity:GetForward() end

---[SERVER] Returns how much friction an entity has. Entities default to 1 (100%) and can be higher or even negative.
---@return number friction
function Entity:GetFriction() end

---[SHARED] Gets the gravity multiplier of the entity.
---@return number gravityMultiplier
function Entity:GetGravity() end

---[SHARED] Returns the object the entity is standing on.
---@return Entity The ground entity.
function Entity:GetGroundEntity() end

---[SERVER] Returns the entity's ground speed velocity, which is based on the entity's walk/run speed and/or the ground speed of their sequence ( Entity:GetSequenceGroundSpeed ). Will return an empty Vector if the entity isn't moving on the ground.
---@return Vector The ground speed velocity.
function Entity:GetGroundSpeedVelocity() end

---[SHARED] Gets the bone the hit box is attached to.
---@param hitbox number The number of the hit box.
---@param hboxset number The number of the hit box set. This should be 0 in most cases. Numbering for these sets start from 0. The total amount of sets can be found with Entity:GetHitBoxSetCount.
---@return number The number of the bone. Will be nil if the hit box index was out of range.
function Entity:GetHitBoxBone(hitbox, hboxset) end

---[SHARED] Gets the bounds (min and max corners) of a hit box.
---@param hitbox number The number of the hit box.
---@param set number The hitbox set of the hit box. This should be 0 in most cases.
---@return Vector, Vector Vector - Hit box mins. Will be nil if the hit box index was out of range.
---@return Vector, Vector Vector - Hit box maxs. Will be nil if the hit box index was out of range.
function Entity:GetHitBoxBounds(hitbox, set) end

---[SHARED] Gets how many hit boxes are in a given hit box group.
---@param group number The number of the hit box group.
---@return number The number of hit boxes.
function Entity:GetHitBoxCount(group) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetHitboxSetCount instead.
--- Returns the number of hit box sets that an entity has. Functionally identical to Entity:GetHitboxSetCount
---@return number number of hit box sets
function Entity:GetHitBoxGroupCount() end

---[SHARED] Gets the hit group of a given hitbox in a given hitbox set.
---@param hitbox number The number of the hit box.
---@param hitboxset number The number of the hit box set. This should be 0 in most cases. Numbering for these sets start from 0. The total group count can be found with Entity:GetHitBoxSetCount.
---@return number The hitbox group of given hitbox. See Enums/HITGROUP
function Entity:GetHitBoxHitGroup(hitbox, hitboxset) end

---[SHARED] Returns entity's current hit box set
---@return number, string number - The current hit box set id, or no value if the entity doesn't have hit boxes
---@return number, string string - The current hit box set name, or no value if the entity doesn't have hit boxes
function Entity:GetHitboxSet() end

---[SHARED] Returns the amount of hitbox sets in the entity.
---@return number The amount of hitbox sets in the entity.
function Entity:GetHitboxSetCount() end

---[SHARED] An interface for accessing internal key values on entities.
--- See Entity:GetSaveTable for a more detailed explanation. See Entity:SetSaveValue for the opposite of this function.
---@param variableName string Name of variable corresponding to an entity save value.
---@return any The internal variable value.
function Entity:GetInternalVariable(variableName) end

---[SERVER] Returns a table containing all key values the entity has.
--- Single key values can usually be retrieved with Entity:GetInternalVariable.
--- This only includes engine defined key values. For custom key values, use GM:EntityKeyValue or ENTITY:KeyValue to capture and store them.
--- Here's a list of keyvalues that will not appear in this list, as they are not stored/defined as actual keyvalues internally:
--- 
--- rendercolor - Entity:GetColor (Only RGB)
--- rendercolor32 - Entity:GetColor (RGBA)
--- renderamt - Entity:GetColor (Alpha)
--- disableshadows - EF_NOSHADOW
--- mins - Entity:GetCollisionBounds
--- maxs - Entity:GetCollisionBounds
--- disablereceiveshadows - EF_NORECEIVESHADOW
--- nodamageforces - EFL_NO_DAMAGE_FORCES
--- angle - Entity:GetAngles
--- angles - Entity:GetAngles
--- origin - Entity:GetPos
--- targetname - Entity:GetName
---@return table A table of key values.
function Entity:GetKeyValues() end

---[SHARED] Returns the animation cycle/frame for given layer.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@return number The animation cycle/frame for given layer.
function Entity:GetLayerCycle(layerID) end

---[SHARED] Returns the duration of given layer.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@return number The duration of the layer
function Entity:GetLayerDuration(layerID) end

---[SHARED] Returns the layer playback rate. See also Entity:GetLayerDuration.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@return number The current playback rate.
function Entity:GetLayerPlaybackRate(layerID) end

---[SHARED] Returns the sequence id of given layer.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID.
---@return number The sequenceID of the layer.
function Entity:GetLayerSequence(layerID) end

---[SHARED] Returns the current weight of the layer. See Entity:SetLayerWeight for more information.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@return number The current weight of the layer
function Entity:GetLayerWeight(layerID) end

---[SERVER] Returns the entity that is being used as the light origin position for this entity.
---@return Entity The lighting entity. This will usually be NULL.
function Entity:GetLightingOriginEntity() end

---[SHARED] Returns the rotation of the entity relative to its parent entity.
---@return Angle Relative angle
function Entity:GetLocalAngles() end

---[SHARED] Returns the non-VPhysics angular velocity of the entity relative to its parent entity.
---@return Angle The velocity
function Entity:GetLocalAngularVelocity() end

---[SHARED] Returns entity's position relative to it's parent.
---@return Vector Relative position
function Entity:GetLocalPos() end

---[SHARED] Gets the entity's angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.
---@param boneID number The bone's ID
---@return Angle The entity's angle manipulation of the given bone.
function Entity:GetManipulateBoneAngles(boneID) end

---[SHARED] Returns the jiggle amount of the entity's bone.
--- See Entity:ManipulateBoneJiggle for more info.
---@param boneID number The bone ID
---@return number Returns a value ranging from 0 to 255 depending on the value set with Entity:ManipulateBoneJiggle.
function Entity:GetManipulateBoneJiggle(boneID) end

---[SHARED] Gets the entity's position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.
---@param boneId number The bone's ID
---@return Vector The entity's position manipulation of the given bone.
function Entity:GetManipulateBonePosition(boneId) end

---[SHARED] Gets the entity's scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 )
---@param boneID number The bone's ID
---@return Vector The entity's scale manipulation of the given bone
function Entity:GetManipulateBoneScale(boneID) end

---[SHARED] Returns the material override for this entity.
--- Returns an empty string if no material override exists. Use Entity:GetMaterials to list it's default materials.
--- The server's value takes priority on the client.Issue Tracker: 3362
---@return string material
function Entity:GetMaterial() end

---[SHARED] Returns all materials of the entity's model.
--- This function is unaffected by Entity:SetSubMaterial as it returns the original materials.
--- The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with Entity:SetSubMaterial and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect.
---@return table A table containing full paths to the materials of the model. For models, it's limited to 128 materials.
function Entity:GetMaterials() end

---[SERVER] Returns the surface material of this entity.
---@return number Surface material. See Enums/MAT
function Entity:GetMaterialType() end

---[SHARED] Returns the max health that the entity was given. It can be set via Entity:SetMaxHealth.
---@return number Max health.
function Entity:GetMaxHealth() end

---[SHARED] Gets the model of given entity.
--- This does not necessarily return the model's path, as is the case for brush and virtual models. This is intentional behaviour, however, there is currently no way to retrieve the actual file path.Issue Tracker: 2246
---@return string The entity's model. Will be a filesystem path for most models. This will be nil for entities which cannot have models, such as point entities.
function Entity:GetModel() end

---[SHARED] Returns the entity's model bounds, not scaled by Entity:SetModelScale.
--- These bounds are affected by all the animations the model has at compile time, if they go outside of the models' render bounds at any point.
--- See Entity:GetModelRenderBounds for just the render bounds of the model.
--- This is different than the collision bounds/hull, which are set via Entity:SetCollisionBounds.
---@return Vector, Vector Vector - The minimum vector of the bounds
---@return Vector, Vector Vector - The maximum vector of the bounds
function Entity:GetModelBounds() end

---[SHARED] Returns the contents of the entity's current model.
---@return number The contents of the entity's model. See Enums/CONTENTS.
function Entity:GetModelContents() end

---[CLIENT] Gets the physics bone count of the entity's model. This is only applicable to anim type Scripted Entities with ragdoll models.
---@return number How many physics bones exist on the model.
function Entity:GetModelPhysBoneCount() end

---[SHARED] Gets the models radius.
---@return number The radius of the model. This can return nil instead of a number in some cases.This can return nil instead of a number in some cases.This can return nil instead of a number in some cases.
function Entity:GetModelRadius() end

---[SHARED] Returns the entity's model render bounds. Unlike Entity:GetModelBounds, bounds returning by this function will not be affected by animations (at compile time).
---@return Vector, Vector Vector - The minimum vector of the bounds
---@return Vector, Vector Vector - The maximum vector of the bounds
function Entity:GetModelRenderBounds() end

---[SHARED] Gets the selected entity's model scale.
---@return number Scale of that entity's model.
function Entity:GetModelScale() end

---[SERVER] Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.
--- This only works on momentary_rot_button entities.
---@param turnAngle Angle The angle of rotation to compare - usually should be Entity:GetAngles.
---@return number The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button.
function Entity:GetMomentaryRotButtonPos(turnAngle) end

---[SHARED] Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?
---@return number The move collide type, see Enums/MOVECOLLIDE
function Entity:GetMoveCollide() end

---[SHARED] Returns the movement parent of this entity.
--- See Entity:SetMoveParent for more info.
---@return Entity The movement parent of this entity.
function Entity:GetMoveParent() end

---[SHARED] Returns the entity's movetype
---@return number Move type. See Enums/MOVETYPE
function Entity:GetMoveType() end

---[SERVER] Returns the map/hammer targetname of this entity.
---@return string The name of the Entity
function Entity:GetName() end

---[CLIENT] Gets networked angles for entity.
---@return Angle angle
function Entity:GetNetworkAngles() end

---[SHARED] Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNetworked2Angle.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2Angle instead.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworked2Angle(key, fallback) end

---[SHARED] Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNetworked2Bool.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2Bool instead.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworked2Bool(key, fallback) end

---[SHARED] Retrieves a networked entity value at specified index on the entity that is set by Entity:SetNetworked2Entity.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2Entity instead.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworked2Entity(key, fallback) end

---[SHARED] Retrieves a networked float value at specified index on the entity that is set by Entity:SetNetworked2Float.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2Float instead.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworked2Float(key, fallback) end

---[SHARED] Retrieves a networked integer (whole number) value that was previously set by Entity:SetNetworked2Int.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2Int instead.The integer has a 32 bit limit. Use Entity:SetNWInt and Entity:GetNWInt instead
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value (If it isn't set).
---@return any The value associated with the key
function Entity:GetNetworked2Int(key, fallback) end

---[SHARED] Retrieves a networked string value at specified index on the entity that is set by Entity:SetNetworked2String.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2String instead.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworked2String(key, fallback) end

---[SHARED] Retrieves a networked value at specified index on the entity that is set by Entity:SetNetworked2Var.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2Var instead.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworked2Var(key, fallback) end

---[SHARED] Returns callback function for given NWVar of this entity.
---@param key any The key of the NWVar to get callback of.
---@return function The callback of given NWVar, or nil if not found.
function Entity:GetNetworked2VarProxy(key) end

---[SHARED] Returns all the networked2 variables in an entity.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2VarTable instead.
---@return table Key-Value table of all networked2 variables.
function Entity:GetNetworked2VarTable() end

---[SHARED] Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNetworked2Vector.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNW2Vector instead.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworked2Vector(key, fallback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetNWAngle instead.
--- Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNetworkedAngle.
---@param key string The key that is associated with the value
---@param fallback Angle The value to return if we failed to retrieve the value. ( If it isn't set )
---@return Angle The retrieved value
function Entity:GetNetworkedAngle(key, fallback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetNWBool instead.
--- Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNetworkedBool.
---@param key string The key that is associated with the value
---@param fallback boolean The value to return if we failed to retrieve the value. ( If it isn't set )
---@return boolean The retrieved value
function Entity:GetNetworkedBool(key, fallback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetNWEntity instead.
--- Retrieves a networked float value at specified index on the entity that is set by Entity:SetNetworkedEntity.
---@param key string The key that is associated with the value
---@param fallback Entity The value to return if we failed to retrieve the value. ( If it isn't set )
---@return Entity The retrieved value
function Entity:GetNetworkedEntity(key, fallback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetNWFloat instead.
--- Retrieves a networked float value at specified index on the entity that is set by Entity:SetNetworkedFloat.
--- Seems to be the same as Entity:GetNetworkedInt.
---@param key string The key that is associated with the value
---@param fallback number The value to return if we failed to retrieve the value. ( If it isn't set )
---@return number The retrieved value
function Entity:GetNetworkedFloat(key, fallback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetNWInt instead.
--- Retrieves a networked integer value at specified index on the entity that is set by Entity:SetNetworkedInt.
---@param key string The key that is associated with the value
---@param fallback number The value to return if we failed to retrieve the value. ( If it isn't set )
---@return number The retrieved value
function Entity:GetNetworkedInt(key, fallback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetNWString instead.
--- Retrieves a networked string value at specified index on the entity that is set by Entity:SetNetworkedString.
---@param key string The key that is associated with the value
---@param fallback string The value to return if we failed to retrieve the value. ( If it isn't set )
---@return string The retrieved value
function Entity:GetNetworkedString(key, fallback) end

---[SHARED] Retrieves a networked value at specified index on the entity that is set by Entity:SetNetworkedVar.
--- We advise against using this. It may be changed or removed in a future update.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNetworkedVar(key, fallback) end

---[SHARED] This function was superseded by Entity:GetNetworked2VarProxy. This page still exists an archive in case anybody ever stumbles across old code and needs to know what it is
--- Returns callback function for given NWVar of this entity.
---@param name string The name of the NWVar to get callback of.
---@return function The callback of given NWVar, if any.
function Entity:GetNetworkedVarProxy(name) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:GetNWVarTable instead.
--- Returns all the networked variables in an entity.
---@return table Key-Value table of all networked variables.
function Entity:GetNetworkedVarTable() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:GetNWVector instead.
--- Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNetworkedVector.
---@param key string The key that is associated with the value
---@param fallback Vector The value to return if we failed to retrieve the value. ( If it isn't set )
---@return Vector The retrieved value
function Entity:GetNetworkedVector(key, fallback) end

---[SHARED] Gets networked origin for entity.
---@return Vector origin
function Entity:GetNetworkOrigin() end

---[SHARED] Returns all network vars created by Entity:NetworkVar and Entity:NetworkVarElement and their current values.
--- This is used internally by the duplicator.
--- For NWVars see Entity:GetNWVarTable.
--- This function will only work on entities which had Entity:InstallDataTable called on them, which is done automatically for players and all Scripted Entities
---@return table The Key-Value formatted table of network var names and their current values
function Entity:GetNetworkVars() end

---[SHARED] Returns if the entity's rendering and transmitting has been disabled.
--- This is equivalent to calling Entity:IsEffectActive( EF_NODRAW )
---@return boolean Whether the entity's rendering and transmitting has been disabled.
function Entity:GetNoDraw() end

---[SHARED] Returns the body group count of the entity.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model will return value form view model.
---@return number Amount of bodygroups the entitys model has
function Entity:GetNumBodyGroups() end

---[SHARED] Returns the number of pose parameters this entity has.
---@return number Amount of pose parameters the entity has
function Entity:GetNumPoseParameters() end

---[SHARED] Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNW2Angle.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNW2Angle(key, fallback) end

---[SHARED] Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNW2Bool.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNW2Bool(key, fallback) end

---[SHARED] Retrieves a networked entity value at specified index on the entity that is set by Entity:SetNW2Entity.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNW2Entity(key, fallback) end

---[SHARED] Retrieves a networked float value at specified index on the entity that is set by Entity:SetNW2Float.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNW2Float(key, fallback) end

---[SHARED] Retrieves a networked integer (whole number) value that was previously set by Entity:SetNW2Int.
--- The integer has a 32 bit limit. Use Entity:SetNWInt and Entity:GetNWInt instead
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value (If it isn't set).
---@return any The value associated with the key
function Entity:GetNW2Int(key, fallback) end

---[SHARED] Retrieves a networked string value at specified index on the entity that is set by Entity:SetNW2String.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNW2String(key, fallback) end

---[SHARED] Retrieves a networked value at specified index on the entity that is set by Entity:SetNW2Var.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNW2Var(key, fallback) end

---[SHARED] Returns callback function for given NWVar of this entity.
--- Alias of Entity:GetNetworked2VarProxy
---@param key any The key of the NWVar to get callback of.
---@return function The callback of given NWVar, or nil if not found.
function Entity:GetNW2VarProxy(key) end

---[SHARED] Returns all the NW2 variables in an entity.
--- This function will return keys with empty tables if the NW2Var is nil.Issue Tracker: 5396
---@return table Key-Value table of all NW2 variables.
function Entity:GetNW2VarTable() end

---[SHARED] Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNW2Vector.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNW2Vector(key, fallback) end

---[SHARED] Retrieves a networked angle value at specified index on the entity that is set by Entity:SetNWAngle.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNWAngle(key, fallback) end

---[SHARED] Retrieves a networked boolean value at specified index on the entity that is set by Entity:SetNWBool.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNWBool(key, fallback) end

---[SHARED] Retrieves a networked entity value at specified index on the entity that is set by Entity:SetNWEntity.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNWEntity(key, fallback) end

---[SHARED] Retrieves a networked float value at specified index on the entity that is set by Entity:SetNWFloat.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNWFloat(key, fallback) end

---[SHARED] Retrieves a networked integer (whole number) value that was previously set by Entity:SetNWInt.
--- This function will not round decimal values as it actually networks a float internally.Issue Tracker: 3374
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value (If it isn't set).
---@return any The value associated with the key
function Entity:GetNWInt(key, fallback) end

---[SHARED] Retrieves a networked string value at specified index on the entity that is set by Entity:SetNWString.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNWString(key, fallback) end

---[SHARED] Returns callback function for given NWVar of this entity.
--- This function was superseded by Entity:GetNW2VarProxy. This page still exists an archive in case anybody ever stumbles across old code and needs to know what it is
---@param key any The key of the NWVar to get callback of.
---@return function The callback of given NWVar, or nil if not found.
function Entity:GetNWVarProxy(key) end

---[SHARED] Returns all the networked variables in an entity.
---@return table Key-Value table of all networked variables.
function Entity:GetNWVarTable() end

---[SHARED] Retrieves a networked vector value at specified index on the entity that is set by Entity:SetNWVector.
---@param key string The key that is associated with the value
---@param fallback any The value to return if we failed to retrieve the value. (If it isn't set)
---@return any The value associated with the key
function Entity:GetNWVector(key, fallback) end

---[SHARED] Returns the owner entity of this entity. See Entity:SetOwner for more info.
--- This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not.
---@return Entity The owner entity of this entity.
function Entity:GetOwner() end

---[SHARED] Returns the parent entity of this entity.
---@return Entity parentEntity
function Entity:GetParent() end

---[SHARED] Returns the attachment index of the entity's parent. Returns 0 if the entity is not parented to a specific attachment or if it isn't parented at all.
--- This is set by second argument of Entity:SetParent or the SetParentAttachment input.
---@return number The parented attachment index
function Entity:GetParentAttachment() end

---[SHARED] If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent.
---@return number The physics object id, or nil if the entity has no parent
function Entity:GetParentPhysNum() end

---[SHARED] Returns the position and angle of the entity's move parent as a 3x4 matrix (VMatrix is 4x4 so the fourth row goes unused). The first three columns store the angle as a rotation matrix, and the fourth column stores the position vector.
---@return VMatrix The position and angle matrix. If the entity has no move parent, an identity matrix will be returned. If the entity is parented to attachment 0 or the parent isn't a BaseAnimating entity, the equivalent of Entity:GetMoveParent():GetWorldTransformMatrix() will be returned.
function Entity:GetParentWorldTransformMatrix() end

---[SHARED] Returns whether the entity is persistent or not.
--- See Entity:SetPersistent for more information on persistence.
---@return boolean True if the entity is set to be persistent.
function Entity:GetPersistent() end

---[SERVER] Returns player who is claiming kills of physics damage the entity deals.
---@param timeLimit number The time to check if the entity was still a proper physics attacker. Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.
---@return Player The player. If entity that was set is not a player, it will return NULL entity.
function Entity:GetPhysicsAttacker(timeLimit) end

---[SHARED] Returns the entity's physics object, if the entity has physics.
--- Entities don't have clientside physics objects by default, so this will return [NULL PHYSOBJ] on the client in most cases.
---@return PhysObj The entity's physics object.
function Entity:GetPhysicsObject() end

---[SHARED] Returns the number of physics objects an entity has (usually 1 for non-ragdolls)
---@return number numObjects
function Entity:GetPhysicsObjectCount() end

---[SHARED] Returns a specific physics object from an entity with multiple PhysObjects (like ragdolls)
--- See also Entity:TranslateBoneToPhysBone.
---@param physNum number The number corresponding to the PhysObj to grab. Starts at 0.
---@return PhysObj The physics object
function Entity:GetPhysicsObjectNum(physNum) end

---[SHARED] Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed.
---@return number The playback rate.
function Entity:GetPlaybackRate() end

---[SHARED] Gets the position of entity in world.
---@return Vector The position of the entity.
function Entity:GetPos() end

---[SHARED] Returns the pose parameter value
---@param name string Pose parameter name to look up
---@return number Value of given pose parameter. This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You'll have to remap this value clientside to Entity:GetPoseParameterRange's returns if you want get the actual pose parameter value. See Entity:SetPoseParameter's example.This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You'll have to remap this value clientside to Entity:GetPoseParameterRange's returns if you want get the actual pose parameter value. See Entity:SetPoseParameter's example.This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You'll have to remap this value clientside to Entity:GetPoseParameterRange's returns if you want get the actual pose parameter value. See Entity:SetPoseParameter's example.
function Entity:GetPoseParameter(name) end

---[SHARED] Returns name of given pose parameter
---@param id number Id of the pose paremeter
---@return string Name of given pose parameter
function Entity:GetPoseParameterName(id) end

---[SHARED] Returns pose parameter range
---@param id number Pose parameter ID to look up
---@return number, number number - The minimum value
---@return number, number number - The maximum value
function Entity:GetPoseParameterRange(id) end

---[CLIENT] Returns whether this entity is predictable or not.
--- See Entity:SetPredictable for more information
---@return boolean Whether this entity is predictable or not.
function Entity:GetPredictable() end

---[SHARED] Returns the entity which the ragdoll came from. The opposite of Player:GetRagdollEntity.
---@return Entity The entity who owns the ragdoll.
function Entity:GetRagdollOwner() end

---[CLIENT] Returns the entity's render angles, set by Entity:SetRenderAngles in a drawing hook.
---@return Angle The entitys render angles
function Entity:GetRenderAngles() end

---[CLIENT] Returns render bounds of the entity as local vectors. Can be overridden by Entity:SetRenderBounds.
--- If the render bounds are not inside players view, the entity will not be drawn!
---@return Vector, Vector Vector - The minimum vector of the bounds
---@return Vector, Vector Vector - The maximum vector of the bounds.
function Entity:GetRenderBounds() end

---[SHARED] Returns current render FX of the entity.
---@return number The current render FX of the entity. See Enums/kRenderFx
function Entity:GetRenderFX() end

---[CLIENT] Returns the render group of the entity.
---@return number The render group. See Enums/RENDERGROUP
function Entity:GetRenderGroup() end

---[SHARED] Returns the render mode of the entity.
---@return number The render Mode. See Enums/RENDERMODE
function Entity:GetRenderMode() end

---[CLIENT] Returns the entity's render origin, set by Entity:SetRenderOrigin in a drawing hook.
---@return Vector The entitys render origin
function Entity:GetRenderOrigin() end

---[SHARED] Returns the rightward vector of the entity, as a normalized direction vector
---@return Vector rightDir
function Entity:GetRight() end

---[SHARED] Returns axis-aligned bounding box (AABB) of a orientated bounding box (OBB) based on entity's rotation.
---@param min Vector Minimum extent of an OBB in local coordinates.
---@param max Vector Maximum extent of an OBB in local coordinates.
---@return Vector, Vector Vector - Minimum extent of the AABB relative to entity's position.
---@return Vector, Vector Vector - Maximum extent of the AABB relative to entity's position.
function Entity:GetRotatedAABB(min, max) end

---[SHARED] Returns a table of save values for an entity.
--- These tables are not the same between the client and the server, and different entities may have different fields.
--- You can get the list different fields an entity has by looking at it's source code (the 2013 SDK can be found online). Accessible fields are defined by each DEFINE_FIELD and DEFINE_KEYFIELD inside the DATADESC block.
--- Take the headcrab, for example:
--- BEGIN_DATADESC( CBaseHeadcrab )
--- 	// m_nGibCount - don't save
--- 	DEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),
--- 	DEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),
--- 	DEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),
--- 	DEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),
--- 	DEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),
--- 	DEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),
--- 	
--- 	DEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, "startburrowed" ),
--- 	DEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),
--- 	DEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),
--- 	DEFINE_FIELD( m_nContext, FIELD_INTEGER ),
--- 	DEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),
--- 	DEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),
--- 	DEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),
--- 	DEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),
--- 	DEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),
--- 		
--- 	DEFINE_INPUTFUNC( FIELD_VOID, "Burrow", InputBurrow ),
--- 	DEFINE_INPUTFUNC( FIELD_VOID, "BurrowImmediate", InputBurrowImmediate ),
--- 	DEFINE_INPUTFUNC( FIELD_VOID, "Unburrow", InputUnburrow ),
--- 	DEFINE_INPUTFUNC( FIELD_VOID, "StartHangingFromCeiling", InputStartHangingFromCeiling ),
--- 	DEFINE_INPUTFUNC( FIELD_VOID, "DropFromCeiling", InputDropFromCeiling ),
--- 	
--- 	// Function Pointers
--- 	DEFINE_THINKFUNC( EliminateRollAndPitch ),
--- 	DEFINE_THINKFUNC( ThrowThink ),
--- 	DEFINE_ENTITYFUNC( LeapTouch ),
--- END_DATADESC()
--- 
--- For each DEFINE_FIELD, the save table will have a key with name of first argument.
--- For each DEFINE_KEYFIELD, the save table will have a key with name of the third argument.
--- 
--- See Entity:GetInternalVariable for only retrieving one key of the save table.
---@param showAll boolean If set, shows all variables, not just the ones for save.
---@return table A table containing all save values in key/value format. The value may be a sequential table (starting to 1) if the field in question is an array in engine.
function Entity:GetSaveTable(showAll) end

---[SHARED] Return the index of the model sequence that is currently active for the entity.
---@return number The index of the model sequence.
function Entity:GetSequence() end

---[SHARED] Return activity id out of sequence id. Opposite of Entity:SelectWeightedSequence.
---@param seq number The sequence ID
---@return number The activity ID, ie Enums/ACT
function Entity:GetSequenceActivity(seq) end

---[SHARED] Returns the activity name for the given sequence id.
---@param sequenceId number The sequence id.
---@return string The Enums/ACT as a string, returns "Not Found!" with an invalid sequence and "No model!" when no model is set.
function Entity:GetSequenceActivityName(sequenceId) end

---[SHARED] Returns the amount of sequences ( animations ) the entity's model has.
---@return number The amount of sequences ( animations ) the entity's model has.
function Entity:GetSequenceCount() end

---[SHARED] Returns the ground speed of the entity's sequence.
---@param sequenceId number The sequence ID.
---@return number The ground speed of this sequence.
function Entity:GetSequenceGroundSpeed(sequenceId) end

---[SHARED] Returns a table of information about an entity's sequence.
---@param sequenceId number The sequence id of the entity.
---@return table Table of information about the entity's sequence, or nil is ID is out of range. See Structures/SequenceInfo.
function Entity:GetSequenceInfo(sequenceId) end

---[SHARED] Returns a list of all sequences ( animations ) the model has.
---@return table The list of all sequences ( animations ) the model has. The indices start with 0!
function Entity:GetSequenceList() end

---[SHARED] Returns an entity's sequence move distance (the change in position over the course of the entire sequence).
--- See Entity:GetSequenceMovement for a similar function with more options.
---@param sequenceId number The sequence index.
---@return number The move distance of the sequence.
function Entity:GetSequenceMoveDist(sequenceId) end

---[SHARED] Returns the delta movement and angles of a sequence of the entity's model.
---@param sequenceId number The sequence index. See Entity:LookupSequence.
---@param startCycle number The sequence start cycle. 0 is the start of the animation, 1 is the end.
---@param endCyclnde number The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed.
---@return boolean, Vector, Angle boolean - Whether the operation was successful
---@return boolean, Vector, Angle Vector - The delta vector of the animation, how much the model's origin point moved.
---@return boolean, Vector, Angle Angle - The delta angle of the animation.
function Entity:GetSequenceMovement(sequenceId, startCycle, endCyclnde) end

---[SERVER] Returns the change in heading direction in between the start and the end of the sequence.
---@param seq number The sequence index. See Entity:LookupSequence.
---@return number The yaw delta. Returns 99999 for no movement.
function Entity:GetSequenceMoveYaw(seq) end

---[SHARED] Return the name of the sequence for the index provided.
--- Refer to Entity:GetSequence to find the current active sequence on this entity.
--- See Entity:LookupSequence for a function that does the opposite.
---@param index number The index of the sequence to look up.
---@return string Name of the sequence.
function Entity:GetSequenceName(index) end

---[SHARED] Returns an entity's sequence velocity at given animation frame.
---@param sequenceId number The sequence index.
---@param cycle number The point in animation, from 0 to 1.
---@return Vector Velocity of the sequence at given point in the animation.
function Entity:GetSequenceVelocity(sequenceId, cycle) end

---[SHARED] Checks if the entity plays a sound when picked up by a player.
--- This will return nil if Entity:SetShouldPlayPickupSound has not been called.
---@return boolean True if it plays the pickup sound, false otherwise.
function Entity:GetShouldPlayPickupSound() end

---[SHARED] Returns if entity should create a server ragdoll on death or a client one.
---@return boolean Returns true if ragdoll will be created on server, false if on client
function Entity:GetShouldServerRagdoll() end

---[SHARED] Returns the skin index of the current skin.
---@return number skinIndex
function Entity:GetSkin() end

---[SHARED] Returns solid type of an entity.
---@return number The solid type. See the Enums/SOLID.
function Entity:GetSolid() end

---[SHARED] Returns solid flag(s) of an entity.
---@return number The flag(s) of the entity, see Enums/FSOLID.
function Entity:GetSolidFlags() end

---[SHARED] Returns if we should show a spawn effect on spawn on this entity.
---@return boolean The flag to allow or disallow the spawn effect.
function Entity:GetSpawnEffect() end

---[SHARED] Returns the bitwise spawn flags used by the entity.
---@return number The spawn flags of the entity, see SF_Enums.
function Entity:GetSpawnFlags() end

---[SHARED] Returns the material override for the given index.
--- Returns "" if no material override exists. Use Entity:GetMaterials to list it's default materials.
--- The server's value takes priority on the client.Issue Tracker: 3362
---@param index number The index of the sub material. Acceptable values are from 0 to 31.
---@return string The material that overrides this index, if any.
function Entity:GetSubMaterial(index) end

---[SHARED] Returns a list of models included into the entity's model in the .qc file.
---@return table The list of models included into the entity's model in the .qc file.
function Entity:GetSubModels() end

---[SHARED] Returns two vectors representing the minimum and maximum extent of the entity's axis-aligned bounding box for hitbox detection. In most cases, this will return the same bounding box as Entity:WorldSpaceAABB unless it was changed by Entity:SetSurroundingBounds or Entity:SetSurroundingBoundsType.
---@return Vector, Vector Vector - The minimum vector for the entity's bounding box in world space.
---@return Vector, Vector Vector - The maximum vector for the entity's bounding box in world space.
function Entity:GetSurroundingBounds() end

---[SHARED] Returns the table that contains all values saved within the entity.
---@return table entTable
function Entity:GetTable() end

---[SHARED] Returns the last trace used in the collision callbacks such as ENTITY:StartTouch, ENTITY:Touch and ENTITY:EndTouch.
--- This returns the last collision trace used, regardless of the entity that caused it. As such, it's only reliable when used in the hooks mentioned above
---@return table The Structures/TraceResult
function Entity:GetTouchTrace() end

---[SHARED] Returns true if the TransmitWithParent flag is set or not.
---@return boolean Is the TransmitWithParent flag is set or not
function Entity:GetTransmitWithParent() end

---[SERVER] Returns if the entity is unfreezable, meaning it can't be frozen with the physgun. By default props are freezable, so this function will typically return false.
--- This will return nil if Entity:SetUnFreezable has not been called.
---@return boolean True if the entity is unfreezable, false otherwise.
function Entity:GetUnFreezable() end

---[SHARED] Returns the upward vector of the entity, as a normalized direction vector
---@return Vector upDir
function Entity:GetUp() end

---[SHARED] Retrieves a value from entity's Entity:GetTable. Set by Entity:SetVar.
---@param key any Key of the value to retrieve
---@param default any A default value to fallback to if we couldn't retrieve the value from entity
---@return any Retrieved value
function Entity:GetVar(key, default) end

---[SHARED] Returns the entity's velocity.
--- Actually binds to CBaseEntity::GetAbsVelocity() on the server and C_BaseEntity::EstimateAbsVelocity() on the client. This returns the total velocity of the entity and is equal to local velocity + base velocity.This can become out-of-sync on the client if the server has been up for a long time.Issue Tracker: 774
---@return Vector The velocity of the entity.
function Entity:GetVelocity() end

---[SERVER] We advise against using this. It may be changed or removed in a future update.
--- Returns ID of workshop addon that the entity is from.
--- The function currently does nothing and always returns nil
---@return number The workshop ID
function Entity:GetWorkshopID() end

---[SHARED] Returns the position and angle of the entity as a 3x4 matrix (VMatrix is 4x4 so the fourth row goes unused). The first three columns store the angle as a rotation matrix, and the fourth column stores the position vector.
--- This returns incorrect results for the angular component (columns 1-3) for the local player clientside.Issue Tracker: 2764This will use the local player's EyeAngles in rendering hooks.Issue Tracker: 3106Columns 1-3 will be all 0 (angular component) in rendering hooks while paused in single-player.Issue Tracker: 3107
---@return VMatrix The position and angle matrix.
function Entity:GetWorldTransformMatrix() end

---[SHARED] Causes the entity to break into its current models gibs, if it has any.
--- You must call Entity:PrecacheGibs on the entity before using this function, or it will not create any gibs.
--- If called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.
--- this function will not remove or hide the entity it is called on.
--- For more expensive version of this function see Entity:GibBreakServer.
---@param force Vector The force to apply to the created gibs.
---@param clr table If set, this will be color of the broken gibs instead of the entity's color.
function Entity:GibBreakClient(force, clr) end

---[SHARED] Causes the entity to break into its current models gibs, if it has any.
--- You must call Entity:PrecacheGibs on the entity before using this function, or it will not create any gibs.
--- The gibs will be spawned on the server and be synchronized with all clients.
--- Note, that this function will not remove or hide the entity it is called on.
--- This function is affected by props_break_max_pieces_perframe and props_break_max_pieces console variables.
--- Large numbers of serverside gibs will cause lag.
--- You can avoid this cost by spawning the gibs on the client using Entity:GibBreakClientDespite existing on client, it doesn't actually do anything on client.
---@param force Vector The force to apply to the created gibs
function Entity:GibBreakServer(force) end

---[SHARED] Returns whether or not the bone manipulation functions have ever been called on given  entity.
--- Related functions are Entity:ManipulateBonePosition, Entity:ManipulateBoneAngles, Entity:ManipulateBoneJiggle, and Entity:ManipulateBoneScale.
--- This will return true if the entity's bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function.Issue Tracker: 3131
---@return boolean True if the entity has been bone manipulated, false otherwise.
function Entity:HasBoneManipulations() end

---[SHARED] Returns whether or not the the entity has had flex manipulations performed with Entity:SetFlexWeight or Entity:SetFlexScale.
---@return boolean True if the entity has flex manipulations, false otherwise.
function Entity:HasFlexManipulatior() end

---[SHARED] Returns whether this entity has the specified spawnflags bits set.
---@param spawnFlags number The spawnflag bits to check, see Enums/SF.
---@return boolean Whether the entity has that spawnflag set or not.
function Entity:HasSpawnFlags(spawnFlags) end

---[SERVER] Returns the position of the head of this entity, NPCs use this internally to aim at their targets.
--- This only works on players and NPCs.
---@param origin Vector The vector of where the attack comes from.
---@return Vector The head position.
function Entity:HeadTarget(origin) end

---[SHARED] Returns the health of the entity.
---@return number health
function Entity:Health() end

---[SERVER] Sets the entity on fire.
--- See also Entity:Extinguish.
---@param length number How long to keep the entity ignited, in seconds.
---@param radius number The radius of the ignition, will ignite everything around the entity that is in this radius.
function Entity:Ignite(length, radius) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- Initializes this entity as being clientside only.
--- Only works on entities fully created clientside, and as such it has currently no use due this being automatically called by ents.CreateClientProp, ents.CreateClientside, ClientsideModel and ClientsideScene.
--- Calling this on a clientside entity will crash the game.Issue Tracker: 3368
function Entity:InitializeAsClientEntity() end

---[SERVER] Fires input to the entity with the ability to make another entity responsible, bypassing the event queue system.
--- You should only use this function over Entity:Fire if you know what you are doing.
--- See also Entity:Fire for a function that conforms to the internal map IO event queue and GM:AcceptInput for a hook that can intercept inputs.
---@param input string The name of the input to fire
---@param activator Entity The entity that caused this input (i.e. the player who pushed a button)
---@param caller Entity The entity that is triggering this input (i.e. the button that was pushed)
---@param param any The value to give to the input. Can be either a string, a number or a boolean.
function Entity:Input(input, activator, caller, param) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Sets up Data Tables from entity to use with Entity:NetworkVar.
function Entity:InstallDataTable() end

---[CLIENT] Resets the entity's bone cache values in order to prepare for a model change.
--- This should be called after calling Entity:SetPoseParameter.
function Entity:InvalidateBoneCache() end

---[SHARED] Returns true if the entity has constraints attached to it
--- This will only update clientside if the server calls it first. This only checks constraints added through the constraint so this will not react to map constraints.Issue Tracker: 3837
---@return boolean Whether the entity is constrained or not.
function Entity:IsConstrained() end

---[SERVER] Returns if entity is constraint or not
---@return boolean Is the entity a constraint or not
function Entity:IsConstraint() end

---[SHARED] Returns whether the entity is dormant or not. Client/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant. This mainly applies to PVS.
---@return boolean Whether the entity is dormant or not.
function Entity:IsDormant() end

---[SHARED] Returns whether an entity has engine effect applied or not.
---@param effect number The effect to check for, see Enums/EF.
---@return boolean Whether the entity has the engine effect applied or not.
function Entity:IsEffectActive(effect) end

---[SHARED] Checks if given flag is set or not.
---@param flag number The engine flag to test, see Enums/EFL
---@return boolean Is set or not
function Entity:IsEFlagSet(flag) end

---[SHARED] Checks if given flag(s) is set or not.
---@param flag number The engine flag(s) to test, see Enums/FL
---@return boolean Is set or not
function Entity:IsFlagSet(flag) end

---[SERVER] Returns whether the entity is inside a wall or outside of the map.
--- Internally this function uses util.IsInWorld, that means that this function only checks Entity:GetPos of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output.
---@return boolean Is the entity in world
function Entity:IsInWorld() end

---[SERVER] Returns whether the entity is lag compensated or not.
---@return boolean Whether the entity is lag compensated or not.
function Entity:IsLagCompensated() end

---[SHARED] Returns true if the target is in line of sight.
--- This will only work when called on CBaseCombatCharacter entities. This includes players, NPCs, grenades, RPG rockets, crossbow bolts, and physics cannisters.
---@param target Vector The target to test. You can also supply an Entity instead of a Vector
---@return boolean Returns true if the line of sight is clear
function Entity:IsLineOfSightClear(target) end

---[SHARED] Returns if the entity is going to be deleted in the next frame.
---@return boolean If the entity is going to be deleted.
function Entity:IsMarkedForDeletion() end

---[SHARED] Checks if the entity is a NextBot or not.
---@return boolean Whether the entity is an NextBot entity or not.
function Entity:IsNextBot() end

---[SHARED] Checks if the entity is an NPC or not.
--- This will return false for NextBots, see Entity:IsNextBot for that.
---@return boolean Whether the entity is an NPC.
function Entity:IsNPC() end

---[SHARED] Returns whether the entity is on fire.
---@return boolean Whether the entity is on fire or not.
function Entity:IsOnFire() end

---[SHARED] Returns whether the entity is on ground or not.
--- Internally, this checks if FL_ONGROUND is set on the entity.
--- This function is an alias of Entity:OnGround.
---@return boolean Whether the entity is on ground or not.
function Entity:IsOnGround() end

---[SHARED] Checks if the entity is a player or not.
---@return boolean Whether the entity is a player.
function Entity:IsPlayer() end

---[SERVER] Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).
--- If multiple players are holding an object and one drops it, this will return false despite the object still being held.Issue Tracker: 2046
---@return boolean IsBeingHeld
function Entity:IsPlayerHolding() end

---[SERVER] Returns whether there's a gesture with the given activity being played.
--- This function only works on BaseAnimatingOverlay entites!
---@param activity number The activity to test. See Enums/ACT.
---@return boolean Whether there's a gesture is given activity being played.
function Entity:IsPlayingGesture(activity) end

---[SHARED] Checks if the entity is a ragdoll.
---@return boolean Is ragdoll or not
function Entity:IsRagdoll() end

---[SHARED] Checks if the entity is a SENT or a built-in entity.
---@return boolean Returns true if entity is scripted ( SENT ), false if not ( A built-in engine entity )
function Entity:IsScripted() end

---[SHARED] Returns whether the entity's current sequence is finished or not.
---@return boolean Whether the entity's sequence is finished or not.
function Entity:IsSequenceFinished() end

---[SHARED] Returns if the entity is solid or not.
--- Very useful for determining if the entity is a trigger or not.
---@return boolean Whether the entity is solid or not.
function Entity:IsSolid() end

---[SHARED] Returns whether the entity is a valid entity or not.
--- An entity is valid if:
--- 
--- It is not a NULL entity
--- It is not the worldspawn entity (game.GetWorld)
--- 
--- Instead of calling this method directly, it's a good idea to call the global IsValid instead, however if you're sure the variable you're using is always an entity object it's better to use this method
--- It will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples.
--- NULL entities can still be assigned with key/value pairs, but they will be instantly negated. See example 3
--- This might be a cause for a lot of headache. Usually happening during networking etc., when completely valid entities suddenly become invalid on the client, but are never filtered with IsValid(). See GM:InitPostEntity for more details.
---@return boolean true if the entity is valid, false otherwise
function Entity:IsValid() end

---[SHARED] Returns whether the given layer ID is valid and exists on this entity.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@return boolean Whether the given layer ID is valid and exists on this entity.
function Entity:IsValidLayer(layerID) end

---[SHARED] Checks if the entity is a vehicle or not.
---@return boolean Whether the entity is a vehicle.
function Entity:IsVehicle() end

---[SHARED] Checks if the entity is a weapon or not.
---@return boolean Whether the entity is a weapon
function Entity:IsWeapon() end

---[SHARED] Returns whether the entity is a widget or not.
--- This is used by the "Edit Bones" context menu property.
---@return boolean Whether the entity is a widget or not.
function Entity:IsWidget() end

---[SHARED] Returns if the entity is the map's Entity[0] worldspawn
---@return boolean isWorld
function Entity:IsWorld() end

---[SHARED] Converts a vector local to an entity into a worldspace vector
---@param lpos Vector The local vector
---@return Vector The translated to world coordinates vector
function Entity:LocalToWorld(lpos) end

---[SHARED] Converts a local angle (local to the entity) to a world angle.
---@param ang Angle The local angle
---@return Angle The world angle
function Entity:LocalToWorldAngles(ang) end

---[SHARED] Returns the attachment index of the given attachment name.
---@param attachmentName string The name of the attachment.
---@return number The attachment index, or 0 if the attachment does not exist and -1 if the model is invalid.
function Entity:LookupAttachment(attachmentName) end

---[SHARED] Gets the bone index of the given bone name, returns nothing if the bone does not exist.
---@param boneName string The name of the bone. Common generic bones ( for player models and some HL2 models ):  ValveBiped.Bip01_Head1 ValveBiped.Bip01_Spine ValveBiped.Anim_Attachment_RH  Common hand bones (left hand equivalents also available, replace R with L)  ValveBiped.Bip01_R_Hand ValveBiped.Bip01_R_Forearm ValveBiped.Bip01_R_Foot ValveBiped.Bip01_R_Thigh ValveBiped.Bip01_R_Calf ValveBiped.Bip01_R_Shoulder ValveBiped.Bip01_R_Elbow
---@return number Index of the given bone name
function Entity:LookupBone(boneName) end

---[SHARED] Returns pose parameter ID from its name.
---@param name string Pose parameter name
---@return number The ID of the given pose parameter name, if it exists, -1 otherwise
function Entity:LookupPoseParameter(name) end

---[SHARED] Returns sequence ID from its name. See Entity:GetSequenceName for a function that does the opposite.
---@param name string Sequence name
---@return number, number number - Sequence ID for that name. This will differ for models with same sequence names. Will be -1 whether the sequence is invalid.
---@return number, number number - The sequence duration  0 if the sequence is invalid
function Entity:LookupSequence(name) end

---[SHARED] Turns the Entity:GetPhysicsObject into a physics shadow.
--- It's used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.
--- A physics shadow can be used to have static entities that never move by setting both arguments to false.
--- Unlike Entity:PhysicsInitShadow, this function doesn't remove the current physics object.
---@param allowPhysicsMovement boolean Whether to allow the physics shadow to move under stress.
---@param allowPhysicsRotation boolean Whether to allow the physics shadow to rotate under stress.
function Entity:MakePhysicsObjectAShadow(allowPhysicsMovement, allowPhysicsRotation) end

---[SHARED] Sets custom bone angles.
--- When used repeatedly serverside, this method is strongly discouraged due to the huge network traffic produced.Issue Tracker: 5148
---@param boneID number Index of the bone you want to manipulate
---@param ang Angle Angle to apply. The angle is relative to the original bone angle, not relative to the world or the entity.
---@param networking boolean boolean to network these changes (if called from server)
function Entity:ManipulateBoneAngles(boneID, ang, networking) end

---[SHARED] Manipulates the bone's jiggle status. This allows non jiggly bones to become jiggly.
---@param boneID number Index of the bone you want to manipulate.
---@param enabled number 0 = No Jiggle 1 = Jiggle
function Entity:ManipulateBoneJiggle(boneID, enabled) end

---[SHARED] Sets custom bone offsets.
---@param boneID number Index of the bone you want to manipulate.
---@param pos Vector Position vector to apply. Note that the position is relative to the original bone position, not relative to the world or the entity.
---@param networking boolean boolean to network these changes (if called from server)
function Entity:ManipulateBonePosition(boneID, pos, networking) end

---[SHARED] Sets custom bone scale.
--- When used repeatedly serverside, this method is strongly discouraged due to the huge network traffic produced.Issue Tracker: 5148This does not scale procedural bones.Issue Tracker: 3502
---@param boneID number Index of the bone you want to manipulate
---@param scale Vector Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity. The vector will be normalised if its longer than 32 units.Issue Tracker: 1249The vector will be normalised if its longer than 32 units.Issue Tracker: 1249The vector will be normalised if its longer than 32 units.Issue Tracker: 1249
function Entity:ManipulateBoneScale(boneID, scale) end

---[SERVER] Returns entity's map creation ID. Unlike Entity:EntIndex or Entity:GetCreationID, it will always be the same on same map, no matter how much you clean up or restart it.
--- To be used in conjunction with ents.GetMapCreatedEntity.
---@return number The map creation ID or -1 if the entity is not compiled into the map.
function Entity:MapCreationID() end

---[CLIENT] Refreshes the shadow of the entity.
function Entity:MarkShadowAsDirty() end

---[SHARED] Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside Weapon:SendWeaponAnim
function Entity:MuzzleFlash() end

---[SHARED] Performs a Ray-Orientated Bounding Box intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox.
--- This relies on the entity having a collision mesh (not a physics object) and will be affected by SOLID_NONE
---@param position Vector The vector to start the intersection from.
---@return Vector The nearest hit point of the entity's bounding box in world coordinates.
function Entity:NearestPoint(position) end

---[SHARED] Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in ENTITY:SetupDataTables.
--- See Entity:NetworkVarNotify for a function to hook NetworkVar changes.
--- Entity NetworkVars are influenced by the return value of ENTITY:UpdateTransmitState.
--- So if you use the PVS(default), then the NetworkVars can be different for each client.Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.
---@param type string Supported choices:  String (up to 511 characters) Bool Float Int (32-bit signed integer) Vector Angle Entity
---@param slot number Each network variable has to have a unique slot. The slot is per type - so you can have an int in slot 0, a bool in slot 0 and a float in slot 0 etc. You can't have two ints in slot 0, instead you would do a int in slot 0 and another int in slot 1. The max slots right now are 32 - so you should pick a number between 0 and 31. An exception to this is strings which has a max slots of 4.
---@param name string The name will affect how you access it. If you call it Foo you would add two new functions on your entity - SetFoo() and GetFoo(). So be careful that what you call it won't collide with any existing functions (don't call it Pos for example).
---@param extended table A table of extended information. KeyName  Allows the NetworkVar to be set using Entity:SetKeyValue. This is useful if you're making an entity that you want to be loaded in a map. The sky entity uses this.  Edit  The edit key lets you mark this variable as editable. See Editable Entities for more information.
function Entity:NetworkVar(type, slot, name, extended) end

---[SHARED] Similarly to Entity:NetworkVar, creates a network variable on the entity and adds Set/Get functions for it. This method stores it's value as a member value of a vector or an angle. This allows to go beyond the normal variable limit of Entity:NetworkVar for Int and Float types, at the expense of Vector and Angle limit.
--- This function should only be called in ENTITY:SetupDataTables.
--- Make sure to not call the SetDT* and your custom set methods on the client realm unless you know exactly what you are doing.
---@param type string Supported choices:  Vector Angle
---@param slot number The slot for this Vector or Angle, from 0 to 31. See Entity:NetworkVar for more detailed explanation.
---@param element string Which element of a Vector or an Angle to store the value on. This can be p, y, r for Angles, and x, y, z for Vectors
---@param name string The name will affect how you access it. If you call it Foo you would add two new functions on your entity - SetFoo() and GetFoo(). So be careful that what you call it won't collide with any existing functions (don't call it "Pos" for example).
---@param extended table A table of extra information. See Entity:NetworkVar for details.
function Entity:NetworkVarElement(type, slot, element, name, extended) end

---[SHARED] Creates a callback that will execute when the given network variable changes - that is, when the Set<name>() function is run.
--- The callback is executed before the value is changed, and is called even if the new and old values are the same.
--- This function does not exist on entities in which Entity:InstallDataTable has not been called. By default, this means this function only exists on SENTs (both serverside and clientside) and on players with a Player Class (serverside and clientside LocalPlayer only). It's therefore safest to only use this in ENTITY:SetupDataTables.The callback will not be called clientside if the var is changed right after entity spawn.
---@param name string Name of variable to track changes of.
---@param callback function The function to call when the variable changes. It is passed 4 arguments:  Entity entity - Entity whos variable changed. string name - Name of changed variable. any old - Old/current variable value. any new - New variable value that it was set to.
function Entity:NetworkVarNotify(name, callback) end

---[SHARED] In the case of a scripted entity, this will cause the next ENTITY:Think event to be run at the given time.
--- Does not work clientside! Use Entity:SetNextClientThink instead.
--- This does not work with SWEPs or Nextbots.Issue Tracker: 3269
---@param timestamp number The relative to CurTime timestamp, at which the next think should occur.
function Entity:NextThink(timestamp) end

---[SHARED] Returns the center of an entity's bounding box as a local vector.
---@return Vector OBBCenter
function Entity:OBBCenter() end

---[SHARED] Returns the highest corner of an entity's bounding box as a local vector.
---@return Vector The local position of the highest corner of the entity's oriented bounding box.
function Entity:OBBMaxs() end

---[SHARED] Returns the lowest corner of an entity's bounding box as a local vector.
---@return Vector The local position of the lowest corner of the entity's oriented bounding box.
function Entity:OBBMins() end

---[SHARED] Returns the entity's capabilities as a bitfield.
--- In the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.
--- Even though the function is defined shared, it is not guaranteed to return the same value across states.
--- The enums for this are not currently implemented in Lua, however you can access the defines here.
---@return number The bitfield, a combination of the FCAP_ flags.
function Entity:ObjectCaps() end

---[SHARED] Returns true if the entity is on the ground, and false if it isn't.
--- Internally, this checks if FL_ONGROUND is set on the entity. This is only updated for players and NPCs, and thus won't inherently work for other entities.
---@return boolean Whether the entity is on the ground or not.
function Entity:OnGround() end

---[SHARED] Called when the entity is about to be removed.
--- See also Entity:CallOnRemove, which can even be used on engine (non-Lua) entities.
--- ExampleCreate an explosion when the entity will be removed. To create an entity, you can read ents.Create.
--- function ENT:OnRemove()
--- 	local explosion = ents.Create( "env_explosion" ) -- The explosion entity
--- 	explosion:SetPos( self:GetPos() ) -- Put the position of the explosion at the position of the entity
--- 	explosion:Spawn() -- Spawn the explosion
--- 	explosion:SetKeyValue( "iMagnitude", "50" ) -- the magnitude of the explosion
--- 	explosion:Fire( "Explode", 0, 0 ) -- explode
--- end
function ENTITY:OnRemove() end

---[SERVER] Tests whether the damage passes the entity filter.
--- This will call ENTITY:PassesDamageFilter on scripted entities of the type "filter".
--- This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )
---@param dmg CTakeDamageInfo The damage info to test
---@return boolean Whether the damage info passes the entity filter.
function Entity:PassesDamageFilter(dmg) end

---[SERVER] Tests whether the entity passes the entity filter.
--- This will call ENTITY:PassesFilter on scripted entities of the type "filter".
--- This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites )
---@param caller Entity The initiator of the test. For example the trigger this filter entity is used in.
---@param ent Entity The entity to test against the entity filter.
---@return boolean Whether the entity info passes the entity filter.
function Entity:PassesFilter(caller, ent) end

---[SHARED] Destroys the current physics object of an entity.
--- Cannot be used on a ragdoll or the world entity.
function Entity:PhysicsDestroy() end

---[SHARED] Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.
--- While this is very useful for static geometry such as terrain displacements, it is advised to use Entity:PhysicsInitConvex or Entity:PhysicsInitMultiConvex for moving solid objects instead.
--- Entity:EnableCustomCollisions needs to be called if you want players to collide with the entity correctly.
---@param vertices table A table consisting of Structures/MeshVertex (only the pos element is taken into account). Every 3 vertices define a triangle in the physics mesh.
---@param surfaceprop string Physical material from surfaceproperties.txt or added with physenv.AddSurfaceData.
---@return boolean Returns true on success, nil otherwise.
function Entity:PhysicsFromMesh(vertices, surfaceprop) end

---[SHARED] Initializes the physics object of the entity using its current model. Deletes the previous physics object if it existed and the new object creation was successful.
--- If the entity's current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.
--- When called clientside, this will not create a valid PhysObj if the model hasn't been precached serverside.
--- If successful, this function will automatically call Entity:SetSolid( solidType ) and Entity:SetSolidFlags( 0 ).Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
--- A workaround is available on the Entity:PhysicsInitConvex page.Issue Tracker: 5060
---@param solidType number The solid type of the physics object to create, see Enums/SOLID. Should be SOLID_VPHYSICS in most cases. Using SOLID_NONE will only delete the current physics object - it does not create a new one.Using SOLID_NONE will only delete the current physics object - it does not create a new one.Using SOLID_NONE will only delete the current physics object - it does not create a new one.
---@return boolean Returns true on success, false otherwise.
function Entity:PhysicsInit(solidType) end

---[SHARED] Makes the physics object of the entity a AABB.
--- This function will automatically destroy any previous physics objects and do the following:
--- 
--- Entity:SetSolid( SOLID_BBOX )
--- Entity:SetMoveType( MOVETYPE_VPHYSICS )
--- Entity:SetCollisionBounds( mins, maxs )
--- 
--- If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to Vector( -1, -1, -1 ) and Vector( 1, 1, 1 ), respectively.Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
--- A workaround is available on the Entity:PhysicsInitConvex page.Issue Tracker: 5060
---@param mins Vector The minimum position of the box. This is automatically ordered with the maxs.
---@param maxs Vector The maximum position of the box. This is automatically ordered with the mins.
---@param surfaceprop string Physical material from surfaceproperties.txt or added with physenv.AddSurfaceData.
---@return boolean Returns true on success, nil otherwise. This fails when the game cannot create any more PhysCollides.
function Entity:PhysicsInitBox(mins, maxs, surfaceprop) end

---[SHARED] Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the  of all the input points. If successful, the previous physics object will be removed.
--- This is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see Entity:PhysicsInitMultiConvex.
--- This will crash if given all Vector(0,0,0)s.Issue Tracker: 3301Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
--- You can use the following workaround for movement, though clientside collisions will still be broken.
--- function ENT:Think()
--- 	if ( CLIENT ) then
--- 		local physobj = self:GetPhysicsObject()
--- 
--- 		if ( IsValid( physobj ) ) then
--- 			physobj:SetPos( self:GetPos() )
--- 			physobj:SetAngles( self:GetAngles() )
--- 		end
--- 	end
--- endIssue Tracker: 5060
---@param points table A table of eight Vectors, in local coordinates, to be used in the computation of the convex mesh. Order does not matter.
---@param surfaceprop string Physical material from surfaceproperties.txt or added with physenv.AddSurfaceData.
---@return boolean Returns true on success, false otherwise.
function Entity:PhysicsInitConvex(points, surfaceprop) end

---[SHARED] An advanced version of Entity:PhysicsInitConvex which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.
--- If successful, the previous physics object will be removed.
--- Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
--- A workaround is available on the Entity:PhysicsInitConvex page.Issue Tracker: 5060
---@param vertices table A table consisting of tables of Vectors. Each sub-table defines a set of points to be used in the computation of one convex mesh.
---@param surfaceprop string Physical material from surfaceproperties.txt or added with physenv.AddSurfaceData.
---@return boolean Returns true on success, nil otherwise.
function Entity:PhysicsInitMultiConvex(vertices, surfaceprop) end

---[SHARED] Initializes the entity's physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.
--- A physics shadow can be used to have static entities that never move by setting both arguments to false.
--- Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
--- A workaround is available on the Entity:PhysicsInitConvex page.Issue Tracker: 5060
---@param allowPhysicsMovement boolean Whether to allow the physics shadow to move under stress.
---@param allowPhysicsRotation boolean Whether to allow the physics shadow to rotate under stress.
---@return boolean Return true on success, nil otherwise.
function Entity:PhysicsInitShadow(allowPhysicsMovement, allowPhysicsRotation) end

---[SHARED] Makes the physics object of the entity a sphere.
--- This function will automatically destroy any previous physics objects and do the following:
--- 
--- Entity:SetSolid( SOLID_BBOX )
--- Entity:SetMoveType( MOVETYPE_VPHYSICS )
--- 
--- Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
--- A workaround is available on the Entity:PhysicsInitConvex page.Issue Tracker: 5060
---@param radius number The radius of the sphere.
---@param physmat string Physical material from surfaceproperties.txt or added with physenv.AddSurfaceData.
---@return boolean Returns true on success, false otherwise
function Entity:PhysicsInitSphere(radius, physmat) end

---[SHARED] Initializes a static physics object of the entity using its current model. If successful, the previous physics object is removed.
--- This is what used by entities such as func_breakable, prop_dynamic, item_suitcharger, prop_thumper and npc_rollermine while it is in its "buried" state in the Half-Life 2 Campaign.
--- If the entity's current model has no physics mesh associated to it, no physics object will be created.
--- This function will automatically call Entity:SetSolid( solidType ).Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.
--- A workaround is available on the Entity:PhysicsInitConvex page.Issue Tracker: 5060
---@param solidType number The solid type of the physics object to create, see Enums/SOLID. Should be SOLID_VPHYSICS in most cases.
---@return boolean Returns true on success, false otherwise. This will fail if the entity's current model has no associated physics mesh.
function Entity:PhysicsInitStatic(solidType) end

---[SHARED] Wakes up the entity's physics object
function Entity:PhysWake() end

---[SERVER] Makes the entity play a .vcd scene. All scenes from Half-Life 2.
---@param scene string Filepath to scene.
---@param delay number Delay in seconds until the scene starts playing.
---@return number, Entity number - Estimated length of the scene.
---@return number, Entity Entity - The scene entity, removing which will stop the scene from continuing to play.
function Entity:PlayScene(scene, delay) end

---[SERVER] Changes an entities angles so that it faces the target entity.
---@param target Entity The entity to face.
function Entity:PointAtEntity(target) end

---[SERVER] Precaches gibs for the entity's model.
--- Normally this function should be ran when the entity is spawned, for example the ENTITY:Initialize, after Entity:SetModel is called.
--- This is required for Entity:GibBreakServer and Entity:GibBreakClient to work.
---@return number The amount of gibs the prop has
function Entity:PrecacheGibs() end

---[SERVER] Normalizes the ragdoll. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.
function Entity:RagdollSolve() end

---[SERVER] Sets the function to build the ragdoll. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.
function Entity:RagdollStopControlling() end

---[SERVER] Makes the physics objects follow the set bone positions. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.
function Entity:RagdollUpdatePhysics() end

---[SHARED] Removes the entity it is used on. The entity will be removed at the start of next tick.
function Entity:Remove() end

---[SHARED] Removes all decals from the entities surface.
function Entity:RemoveAllDecals() end

---[SERVER] Removes and stops all gestures.
--- This function only works on BaseAnimatingOverlay entites!
function Entity:RemoveAllGestures() end

---[SHARED] Removes a callback previously added with Entity:AddCallback
---@param hook string The hook name to remove. See Entity Callbacks
---@param callbackid number The callback id previously retrieved with the return of Entity:AddCallback or Entity:GetCallbacks
function Entity:RemoveCallback(hook, callbackid) end

---[SHARED] Removes a function previously added via Entity:CallOnRemove.
---@param identifier string Identifier of the function within CallOnRemove
function Entity:RemoveCallOnRemove(identifier) end

---[SHARED] Removes an engine effect applied to an entity.
---@param effect number The effect to remove, see Enums/EF.
function Entity:RemoveEffects(effect) end

---[SHARED] Removes specified engine flag
---@param flag number The flag to remove, see Enums/EFL
function Entity:RemoveEFlags(flag) end

---[SHARED] Removes specified flag(s) from the entity
---@param flag number The flag(s) to remove, see Enums/FL
function Entity:RemoveFlags(flag) end

---[SHARED] Removes a PhysObject from the entity's motion controller so that ENTITY:PhysicsSimulate will no longer be called for given PhysObject.
--- You must first create a motion controller with Entity:StartMotionController.
--- Only works on a scripted Entity of anim type
---@param physObj PhysObj The PhysObj to remove from the motion controller.
function Entity:RemoveFromMotionController(physObj) end

---[SERVER] Removes and stops the gesture with given activity.
--- This function only works on BaseAnimatingOverlay entites!
---@param activity number The activity remove. See Enums/ACT.
function Entity:RemoveGesture(activity) end

---[SHARED] Breaks internal Ragdoll constrains, so you can for example separate an arm from the body of a ragdoll and preserve all physics.
--- The visual mesh will still stretch as if it was properly connected unless the ragdoll model is specifically designed to avoid that.
---@param num number Which constraint to break, values below 0 mean break them all
function Entity:RemoveInternalConstraint(num) end

---[SHARED] Removes solid flag(s) from the entity.
---@param flags number The flag(s) to remove, see Enums/FSOLID.
function Entity:RemoveSolidFlags(flags) end

---[SHARED] Plays an animation on the entity. This may not always work on engine entities.
--- This will not reset the animation on viewmodels, use Entity:SendViewModelMatchingSequence instead.This will not work properly if called directly after calling Entity:SetModel. Consider waiting until the next Tick.
--- Will not work on players due to the animations being reset every frame by the base gamemode animation system. See GM:CalcMainActivity.
--- For custom scripted entities you will want to apply example from ENTITY:Think to make animations work.
---@param sequence number The sequence to play. Also accepts strings. If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.
function Entity:ResetSequence(sequence) end

---[SHARED] Reset entity sequence info such as playback rate, ground speed, last event check, etc.
function Entity:ResetSequenceInfo() end

---[SERVER] Makes the entity/weapon respawn.
--- Only usable on HL2/HL:S pickups and any weapons. Seems to be buggy with weapons.
--- Very unreliable.
function Entity:Respawn() end

---[SERVER] Restarts the entity's animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.
--- This function only works on BaseAnimatingOverlay entites.
---@param activity number The activity number to send to the entity. See Enums/ACT and Entity:GetSequenceActivity
---@param addIfMissing boolean Add/start the gesture to if it has not been yet started.
---@param autokill boolean 
function Entity:RestartGesture(activity, addIfMissing, autokill) end

---[SHARED] Returns sequence ID corresponding to given activity ID.
--- Opposite of Entity:GetSequenceActivity.
--- Similar to Entity:LookupSequence.
--- See also Entity:SelectWeightedSequenceSeeded.
---@param act number The activity ID, see Enums/ACT.
---@return number The sequence ID
function Entity:SelectWeightedSequence(act) end

---[SHARED] Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.
--- See Entity:SelectWeightedSequence for a provided-seed version of this function.
---@param act number The activity ID, see Enums/ACT.
---@param seed number The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. Entity:SelectWeightedSequence uses the same seed as util.SharedRandom internally for this.
---@return number The sequence ID
function Entity:SelectWeightedSequenceSeeded(act, seed) end

---[SHARED] Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of Entity:ResetSequence.
--- This function is only usable on view models.
--- Sequences 0-6 will not be looped regardless if they're marked as a looped animation or not.Issue Tracker: 3229
---@param seq number The sequence ID returned by Entity:LookupSequence or  Entity:SelectWeightedSequence.
function Entity:SendViewModelMatchingSequence(seq) end

---[SHARED] Returns length of currently played sequence.
--- This will return incorrect results for weapons and viewmodels clientside in thirdperson.Issue Tracker: 2783
---@param seqid number A sequence ID to return the length specific sequence of instead of the entity's main/currently playing sequence.
---@return number The length of the sequence
function Entity:SequenceDuration(seqid) end

---[SHARED] Sets the entity's velocity.
--- Actually binds to CBaseEntity::SetLocalVelocity() which sets the entity's velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.
---@param velocity Vector The new velocity to set.
function Entity:SetAbsVelocity(velocity) end

---[SHARED] Sets the angles of the entity.
--- To set a player's angles, use Player:SetEyeAngles instead.
---@param angles Angle The new angles.
function Entity:SetAngles(angles) end

---[SHARED] Sets a player's third-person animation. Mainly used by Weapons to start the player's weapon attack and reload animations.
---@param playerAnim number Player animation, see Enums/PLAYER.
function Entity:SetAnimation(playerAnim) end

---[CLIENT] Sets the start time (relative to CurTime) of the current animation, which is used to determine Entity:GetCycle. Should be less than CurTime to play an animation from the middle.
---@param time number The time the animation was supposed to begin.
function Entity:SetAnimTime(time) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetParent instead.
--- Parents the sprite to an attachment on another model.
--- Works only on env_sprite.
--- Despite existing on client, it doesn't actually do anything on client.
---@param ent Entity The entity to attach/parent to
---@param attachment number The attachment ID to parent to
function Entity:SetAttachment(ent, attachment) end

---[SERVER] Sets the blood color this entity uses.
---@param bloodColor number An integer corresponding to Enums/BLOOD_COLOR.
function Entity:SetBloodColor(bloodColor) end

---[SHARED] Sets an entities' bodygroup.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model, check will occur by view model.
---@param bodygroup number The id of the bodygroup you're setting. Starts from 0.
---@param value number The value you're setting the bodygroup to. Starts from 0.
function Entity:SetBodygroup(bodygroup, value) end

---[SHARED] Sets the bodygroups from a string. A convenience function for Entity:SetBodygroup.
--- If called for Weapon (after Initialize hook) with different body groups on world model and view model, check will occur by view model.
---@param bodygroups string Body groups to set. Each character in the string represents a separate bodygroup. (0 to 9, a to z being (10 to 35))
function Entity:SetBodyGroups(bodygroups) end

---[SHARED] Sets the specified value on the bone controller with the given ID of this entity, it's used in HL1 to change the head rotation of NPCs, turret aiming and so on.
--- This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.
---@param boneControllerID number The ID of the bone controller to set the value to. Goes from 0 to 3.
---@param value number The value to set on the specified bone controller.
function Entity:SetBoneController(boneControllerID, value) end

---[SHARED] Sets the bone matrix of given bone to given matrix. See also Entity:GetBoneMatrix.
--- Despite existing serverside, it does nothing.
---@param boneid number The ID of the bone
---@param matrix VMatrix The matrix to set.
function Entity:SetBoneMatrix(boneid, matrix) end

---[CLIENT] Sets the bone position and angles.
---@param bone number The bone ID to manipulate
---@param pos Vector The position to set
---@param ang Angle The angles to set
function Entity:SetBonePosition(bone, pos, ang) end

---[SHARED] Sets the collision bounds for the entity, which are used for triggers (Entity:SetTrigger, ENTITY:Touch), and collision (If Entity:SetSolid set as SOLID_BBOX).
--- Input bounds are relative to Entity:GetPos!
--- See also Entity:SetCollisionBoundsWS.
--- Player collision bounds are reset every frame to player's Player:SetHull values.
---@param mins Vector The minimum vector of the bounds.
---@param maxs Vector The maximum vector of the bounds.
function Entity:SetCollisionBounds(mins, maxs) end

---[SHARED] A convenience function that sets the collision bounds for the entity in world space coordinates by transforming given vectors to entity's local space and passing them to Entity:SetCollisionBounds
---@param vec1 Vector The first vector of the bounds.
---@param vec2 Vector The second vector of the bounds.
function Entity:SetCollisionBoundsWS(vec1, vec2) end

---[SHARED] Sets the entity's collision group.
---@param group number Collision group of the entity, see Enums/COLLISION_GROUP
function Entity:SetCollisionGroup(group) end

---[SHARED] Sets the color of an entity.
--- Some entities may need a custom render mode set for transparency to work. See example 2.
--- Entities also must have a proper render group set for transparency to work.
---@param color table The color to set. Uses the Color.
function Entity:SetColor(color) end

---[SHARED] Sets the color of an entity.
--- This function overrides Colors set with Entity:SetColor
---@param r number 
---@param g number 
---@param b number 
---@param a number 
function Entity:SetColor4Part(r, g, b, a) end

---[SERVER] Sets the creator of the Entity. This is set automatically in Sandbox gamemode when spawning SENTs, but is never used/read by default.
---@param ply Player The creator
function Entity:SetCreator(ply) end

---[SHARED] Marks the entity to call GM:ShouldCollide. Not to be confused with Entity:EnableCustomCollisions.
---@param enable boolean Enable or disable the custom collision check
function Entity:SetCustomCollisionCheck(enable) end

---[SHARED] Sets the progress of the current animation to a specific value between 0 and 1.
--- This does not work with viewmodels.Issue Tracker: 3038
---@param value number The desired cycle value
function Entity:SetCycle(value) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Sets the specified angle on the entity's datatable.
---@param key number Goes from 0 to 31.
---@param ang Angle The angle to write on the entity's datatable.
function Entity:SetDTAngle(key, ang) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Sets the specified bool on the entity's datatable.
---@param key number Goes from 0 to 31.
---@param bool boolean The boolean to write on the entity's metatable.
function Entity:SetDTBool(key, bool) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Sets the specified entity on this entity's datatable.
---@param key number Goes from 0 to 31.
---@param ent Entity The entity to write on this entity's datatable.
function Entity:SetDTEntity(key, ent) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Sets the specified float on the entity's datatable.
---@param key number Goes from 0 to 31.
---@param float number The float to write on the entity's datatable.
function Entity:SetDTFloat(key, float) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Sets the specified integer on the entity's datatable.
---@param key number Goes from 0 to 31.
---@param integer number The integer to write on the entity's datatable. This will be cast to a 32-bit signed integer internally.
function Entity:SetDTInt(key, integer) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Sets the specified string on the entity's datatable.
--- The length of these strings are capped at 512 characters.
---@param key number Goes from 0 to 3.
---@param str string The string to write on the entity's datatable, can't be more than 512 characters per string.
function Entity:SetDTString(key, str) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This is called internally by the Entity:NetworkVar system, you can use this in cases where using NetworkVar is not possible.
--- Sets the specified vector on the entity's datatable.
---@param key number Goes from 0 to 31.
---@param vec Vector The vector to write on the entity's datatable.
function Entity:SetDTVector(key, vec) end

---[SHARED] Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.
---@param elasticity number The elasticity to set.
function Entity:SetElasticity(elasticity) end

---[SHARED] Allows you to set the Start or End entity attachment for the rope.
---@param name string The name of the variable to modify. Accepted names are StartEntity and EndEntity.
---@param entity Entity The entity to apply to the specific attachment.
function Entity:SetEntity(name, entity) end

---[SHARED] Sets the position an entity's eyes look toward. This works as an override for default behavior. Set to 0,0,0 to disable the override.
---@param pos Vector If NPC, the world position for the entity to look towards, for Ragdolls, a local position in front of their eyes attachment.
function Entity:SetEyeTarget(pos) end

---[SHARED] Sets the flex scale of the entity.
--- This does not work on ClientsideModels or ClientsideRagdolls.Issue Tracker: 1779
---@param scale number The new flex scale to set to
function Entity:SetFlexScale(scale) end

---[SHARED] Sets the flex weight.
---@param flex number The ID of the flex to modify weight of
---@param weight number The new weight to set
function Entity:SetFlexWeight(flex, weight) end

---[SERVER] Sets how much friction an entity has when sliding against a surface. Entities default to 1 (100%) and can be higher or even negative.
--- This only multiplies the friction of the entity, to change the value itself use PhysObj:SetMaterial.Works only for MOVETYPE_STEP entities.This has no effect on players.Issue Tracker: 1395
---@param friction number Friction multiplier
function Entity:SetFriction(friction) end

---[SHARED] Sets the gravity multiplier of the entity.
--- This function is not predicted.Issue Tracker: 3648
---@param gravityMultiplier number Value which specifies the gravity multiplier.
function Entity:SetGravity(gravityMultiplier) end

---[SHARED] Sets the ground the entity is standing on.
---@param ground Entity The ground entity.
function Entity:SetGroundEntity(ground) end

---[SHARED] Sets the health of the entity.
--- You may want to take Entity:GetMaxHealth into account when calculating what to set health to, in case a gamemode has a different max health than 100.In some cases, setting health only on server side can cause hitches in movement, for example if something is modifying the player speed based on health. To solve this issue, it is better to set it shared in a predicted hook.Issue Tracker: 3572
---@param newHealth number New health value.
function Entity:SetHealth(newHealth) end

---[SHARED] Sets the current Hitbox set for the entity.
---@param id number The new hitbox set to set. Can be a name as a string, or the ID as a number. If the operation failed, the function will silently fail.
function Entity:SetHitboxSet(id) end

---[CLIENT] Enables or disable the inverse kinematic usage of this entity.
---@param useIK boolean The state of the IK.
function Entity:SetIK(useIK) end

---[SHARED] Sets Hammer key values on an entity.
--- You can look up which entities have what key values on the Valve Developer Community on entity pages.
--- A  list of basic entities can be found here.
--- Alternatively you can look at the .fgd files shipped with Garry's Mod in the bin/ folder with a text editor to see the key values as they appear in Hammer.
---@param key string The internal key name
---@param value string The value to set
function Entity:SetKeyValue(key, value) end

---[SERVER] This allows the entity to be lag compensated during Player:LagCompensation.
--- Players are lag compensated by default and there's no need to call this function for them.
--- It's best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).
--- Parented entities move back with the parent if it's lag compensated, so if you are making some kind of armor piece you shouldn't do anything.
--- As a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bone's hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all.
---@param enable boolean Whether the entity should be lag compensated or not.
function Entity:SetLagCompensated(enable) end

---[SHARED] This function only works on BaseAnimatingOverlay entites!
---@param layerID number The Layer ID
---@param blendIn number 
function Entity:SetLayerBlendIn(layerID, blendIn) end

---[SHARED] This function only works on BaseAnimatingOverlay entites!
---@param layerID number The Layer ID
---@param blendOut number 
function Entity:SetLayerBlendOut(layerID, blendOut) end

---[SHARED] Sets the animation cycle/frame of given layer.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@param cycle number The new animation cycle/frame for given layer.
function Entity:SetLayerCycle(layerID, cycle) end

---[SHARED] Sets the duration of given layer. This internally overrides the Entity:SetLayerPlaybackRate.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@param duration number The new duration of the layer in seconds.
function Entity:SetLayerDuration(layerID, duration) end

---[SERVER] Sets whether the layer should loop or not.
--- This function only works on BaseAnimatingOverlay entites!
---@param layerID number The Layer ID
---@param loop boolean Whether the layer should loop or not.
function Entity:SetLayerLooping(layerID, loop) end

---[SHARED] Sets the layer playback rate. See also Entity:SetLayerDuration.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@param rate number The new playback rate.
function Entity:SetLayerPlaybackRate(layerID, rate) end

---[SERVER] Sets the priority of given layer.
--- This function only works on BaseAnimatingOverlay entites!
---@param layerID number The Layer ID
---@param priority number The new priority of the layer.
function Entity:SetLayerPriority(layerID, priority) end

---[SHARED] Sets the sequence of given layer.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID.
---@param seq number The sequenceID to set. See Entity:LookupSequence.
function Entity:SetLayerSequence(layerID, seq) end

---[SHARED] Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.
--- This function only works on BaseAnimatingOverlay entities.
---@param layerID number The Layer ID
---@param weight number The new layer weight.
function Entity:SetLayerWeight(layerID, weight) end

---[CLIENT] This forces an entity to use the bone transformation behaviour from versions prior to 8 July 2014.
--- This behaviour affects Entity:EnableMatrix and Entity:SetModelScale and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.
---@param enabled boolean Whether the entity should use the old bone transformation behaviour or not.
function Entity:SetLegacyTransform(enabled) end

---[SERVER] Sets the entity to be used as the light origin position for this entity.
---@param lightOrigin Entity The lighting entity.
function Entity:SetLightingOriginEntity(lightOrigin) end

---[SHARED] Sets angles relative to angles of Entity:GetParent
---@param ang Angle The local angle
function Entity:SetLocalAngles(ang) end

---[SHARED] Sets the entity's angular velocity (rotation speed).
---@param angVel Angle The angular velocity to set.
function Entity:SetLocalAngularVelocity(angVel) end

---[SHARED] Sets local position relative to the parented position. This is for use with Entity:SetParent to offset position.
---@param pos Vector The local position
function Entity:SetLocalPos(pos) end

---[SHARED] Sets the entity's local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.
--- Same as Entity:SetAbsVelocity, but clamps the given velocity, and is not recommended to be used because of that.
---@param velocity Vector The new velocity to set.
function Entity:SetLocalVelocity(velocity) end

---[CLIENT] Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn't include any LOD sub models.
--- This function works exactly like the clientside r_lod convar and takes priority over it.
---@param lod number The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail. The Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest.
function Entity:SetLOD(lod) end

---[SHARED] Sets the rendering material override of the entity.
--- To set a Lua material created with CreateMaterial, just prepend a "!" to the material name.
--- If you wish to override a single material on the model, use Entity:SetSubMaterial instead.
--- To apply materials to models, that material must have VertexLitGeneric shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - LightmappedGeneric, which can be used on brush entities.The server's value takes priority on the client.Issue Tracker: 3362
---@param materialName string New material name. Use an empty string ("") to reset to the default materials.
function Entity:SetMaterial(materialName) end

---[SERVER] Sets the maximum health for entity. Note, that you can still set entity's health above this amount with Entity:SetHealth.
---@param maxhealth number What the max health should be
function Entity:SetMaxHealth(maxhealth) end

---[SHARED] Sets the model of the entity.
--- This does not update the physics of the entity - see Entity:PhysicsInit.
--- This silently fails when given an empty string.
---@param modelName string New model value.
function Entity:SetModel(modelName) end

---[SHARED] Alter the model name returned by Entity:GetModel. Does not affect the entity's actual model.
---@param modelname string The new model name.
function Entity:SetModelName(modelname) end

---[SHARED] Scales the model of the entity, if the entity is a Player or an NPC the hitboxes will be scaled as well.
--- For some entities, calling Entity:Activate after this will scale the collision bounds and PhysObj as well; be wary as there's no optimization being done internally and highly complex collision models might crash the server.
--- This is the same system used in TF2 for the Mann Vs Machine robots.
--- To resize the entity along any axis, use Entity:EnableMatrix instead.
--- Client-side trace detection seems to mess up if deltaTime is set to anything but zero. A very small decimal can be used instead of zero to solve this issue.
--- If your old scales are wrong, use Entity:SetLegacyTransform as a quick fix.
--- If you do not want the physics to be affected by Entity:Activate, you can use Entity:ManipulateBoneScale( 0, Vector( scale, scale, scale ) ) instead.This does not scale procedural bones and disables IK.Issue Tracker: 3502
---@param scale number A float to scale the model by. 0 will not draw anything. A number less than 0 will draw the model inverted.
---@param deltaTime number Transition time of the scale change, set to 0 to modify the scale right away. To avoid issues with client-side trace detection this must be set, and can be an extremely low number to mimic a value of 0 such as .000001.
function Entity:SetModelScale(scale, deltaTime) end

---[SHARED] Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?
---@param moveCollideType number The move collide type, see Enums/MOVECOLLIDE
function Entity:SetMoveCollide(moveCollideType) end

---[SHARED] Sets the Movement Parent of an entity to another entity.
--- Similar to Entity:SetParent, except the object's coordinates are not translated automatically before parenting.
--- Does nothing on client.
---@param Parent Entity The entity to change this entity's Movement Parent to.
function Entity:SetMoveParent(Parent) end

---[SHARED] Sets the entity's move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as Entity:PhysicsInitBox.
--- Despite existing on client, it doesn't actually do anything on client.
---@param movetype number The new movetype, see Enums/MOVETYPE
function Entity:SetMoveType(movetype) end

---[SERVER] Sets the mapping name of the entity.
---@param mappingName string The name to set for the entity.
function Entity:SetName(mappingName) end

---[CLIENT] Alters the entity's perceived serverside angle on the client.
---@param angle Angle Networked angle.
function Entity:SetNetworkAngles(angle) end

---[SHARED] Sets a networked angle value on the entity.
--- The value can then be accessed with Entity:GetNetworked2Angle both from client and server.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNW2Angle instead.The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWAngle insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value Angle The value to set
function Entity:SetNetworked2Angle(key, value) end

---[SHARED] Sets a networked boolean value on the entity.
--- The value can then be accessed with Entity:GetNetworked2Bool both from client and server.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNW2Bool instead.The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWBool insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value boolean The value to set
function Entity:SetNetworked2Bool(key, value) end

---[SHARED] Sets a networked entity value on the entity.
--- The value can then be accessed with Entity:GetNetworked2Entity both from client and server.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNW2Entity instead.The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWEntity insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value Entity The value to set
function Entity:SetNetworked2Entity(key, value) end

---[SHARED] Sets a networked float (number) value on the entity.
--- The value can then be accessed with Entity:GetNetworked2Float both from client and server.
--- Unlike Entity:SetNetworked2Int, floats don't have to be whole numbers.
--- The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWFloat insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNetworked2Float(key, value) end

---[SHARED] Sets a networked integer (whole number) value on the entity.
--- The value can then be accessed with Entity:GetNetworked2Int both from client and server.
--- See Entity:SetNW2Float for numbers that aren't integers.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNW2Int instead.The value will only be updated clientside if the entity is or enters the clients PVS.
--- The integer has a 32 bit limit. Use Entity:SetNWInt insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNetworked2Int(key, value) end

---[SHARED] Sets a networked string value on the entity.
--- The value can then be accessed with Entity:GetNetworked2String both from client and server.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNW2String instead.The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWString insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value string The value to set, up to 511 characters.
function Entity:SetNetworked2String(key, value) end

---[SHARED] Sets a networked value on the entity.
--- The value can then be accessed with Entity:GetNetworked2Var both from client and server.
--- 
--- 
--- 
--- Allowed Types
--- 
--- 
--- 
--- 
--- Angle
--- 
--- 
--- Boolean
--- 
--- 
--- Entity
--- 
--- 
--- Float
--- 
--- 
--- Int
--- 
--- 
--- String
--- 
--- 
--- Vector
--- 
--- 
--- 
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNW2Var instead.Trying to network a type that is not listed above leads to the value not being networked!Running this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only ne networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value any The value to set
function Entity:SetNetworked2Var(key, value) end

---[SHARED] Sets a function to be called when the NW2Var changes. Internally uses GM:EntityNetworkedVarChanged to call the function.
--- Only one NW2VarProxy can be set per-var
--- Running this function clientside will only set it for the client it is called on.
---@param name string The name of the NW2Var to add callback for.
---@param callback function The function to be called when the NW2Var changes. It has 4 arguments:  Entity ent - The entity string name - Name of the NW2Var that has changed any oldval - The old value any newval - The new value
function Entity:SetNetworked2VarProxy(name, callback) end

---[SHARED] Sets a networked vector value on the entity.
--- The value can then be accessed with Entity:GetNetworked2Vector both from client and server.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNW2Vector instead.The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWVector insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value Vector The value to set
function Entity:SetNetworked2Vector(key, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:SetNWAngle instead.
--- Sets a networked angle value at specified index on the entity.
--- The value then can be accessed with Entity:GetNetworkedAngle both from client and server.
--- Running this function clientside will only set it clientside for the client it is called on.
---@param key string The key to associate the value with
---@param value Angle The value to set
function Entity:SetNetworkedAngle(key, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:SetNWBool instead.
--- Sets a networked boolean value at specified index on the entity.
--- The value then can be accessed with Entity:GetNetworkedBool both from client and server.
--- Running this function clientside will only set it clientside for the client it is called on.
---@param key string The key to associate the value with
---@param value boolean The value to set
function Entity:SetNetworkedBool(key, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:SetNWEntity instead.
--- Sets a networked entity value at specified index on the entity.
--- The value then can be accessed with Entity:GetNetworkedEntity both from client and server.
--- Running this function clientside will only set it clientside for the client it is called on.
---@param key string The key to associate the value with
---@param value Entity The value to set
function Entity:SetNetworkedEntity(key, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:SetNWFloat instead.
--- Sets a networked float value at specified index on the entity.
--- The value then can be accessed with Entity:GetNetworkedFloat both from client and server.
--- Seems to be the same as Entity:GetNetworkedInt.
--- Running this function clientside will only set it clientside for the client it is called on.
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNetworkedFloat(key, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:SetNWInt instead.
--- Sets a networked integer value at specified index on the entity.
--- The value then can be accessed with Entity:GetNetworkedInt both from client and server.
--- Running this function clientside will only set it clientside for the client it is called on.
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNetworkedInt(key, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNWFloat instead.
--- Sets a networked number at the specified index on the entity.
---@param index any The index that the value is stored in.
---@param number number The value to network.
function Entity:SetNetworkedNumber(index, number) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:SetNWString instead.
--- Sets a networked string value at specified index on the entity.
--- The value then can be accessed with Entity:GetNetworkedString both from client and server.
--- Running this function clientside will only set it clientside for the client it is called on.
---@param key string The key to associate the value with
---@param value string The value to set
function Entity:SetNetworkedString(key, value) end

---[SHARED] Sets a networked value on the entity.
--- The value can then be accessed with Entity:GetNetworkedVar both from client and server.
--- 
--- 
--- 
--- Allowed Types
--- 
--- 
--- 
--- 
--- Angle
--- 
--- 
--- Boolean
--- 
--- 
--- Entity
--- 
--- 
--- Float
--- 
--- 
--- Int
--- 
--- 
--- String
--- 
--- 
--- Vector
--- 
--- 
--- 
--- We advise against using this. It may be changed or removed in a future update.Trying to network a type that is not listed above leads to the value not being networked!
--- the value will only be updated clientside if the entity is or enters the clients PVS.Running this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value any The value to set
function Entity:SetNetworkedVar(key, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using Entity:SetNWVarProxy instead.
--- Sets callback function to be called when given NWVar changes.
---@param name string The name of the NWVar to add callback for.
---@param callback function The function to be called when the NWVar changes.
function Entity:SetNetworkedVarProxy(name, callback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Entity:SetNWVector instead.
--- Sets a networked vector value at specified index on the entity.
--- The value then can be accessed with Entity:GetNetworkedVector both from client and server.
--- Running this function clientside will only set it clientside for the client it is called on.
---@param key string The key to associate the value with
---@param value Vector The value to set
function Entity:SetNetworkedVector(key, value) end

---[SHARED] Virtually changes entity position for clients. Does the same thing as Entity:SetPos when used serverside.
---@param origin Vector The position to make clients think this entity is at.
function Entity:SetNetworkOrigin(origin) end

---[CLIENT] Sets the next time the clientside ENTITY:Think is called.
---@param nextthink number The next time, relative to CurTime, to execute the ENTITY:Think clientside.
function Entity:SetNextClientThink(nextthink) end

---[SHARED] Sets if the entity's model should render at all.
--- If set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside.
---@param shouldNotDraw boolean true disables drawing
function Entity:SetNoDraw(shouldNotDraw) end

---[SHARED] Sets whether the entity is solid or not.
---@param IsNotSolid boolean True will make the entity not solid, false will make it solid.
function Entity:SetNotSolid(IsNotSolid) end

---[SHARED] Sets a networked angle value on the entity.
--- The value can then be accessed with Entity:GetNW2Angle both from client and server.
--- The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWAngle insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value Angle The value to set
function Entity:SetNW2Angle(key, value) end

---[SHARED] Sets a networked boolean value on the entity.
--- The value can then be accessed with Entity:GetNW2Bool both from client and server.
--- The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWBool insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value boolean The value to set
function Entity:SetNW2Bool(key, value) end

---[SHARED] Sets a networked entity value on the entity.
--- The value can then be accessed with Entity:GetNW2Entity both from client and server.
--- The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWEntity insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value Entity The value to set
function Entity:SetNW2Entity(key, value) end

---[SHARED] Sets a networked float (number) value on the entity.
--- The value can then be accessed with Entity:GetNW2Float both from client and server.
--- Unlike Entity:SetNW2Int, floats don't have to be whole numbers.
--- The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWFloat insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNW2Float(key, value) end

---[SHARED] Sets a networked integer (whole number) value on the entity.
--- The value can then be accessed with Entity:GetNW2Int both from client and server.
--- See Entity:SetNW2Float for numbers that aren't integers.
--- The value will only be updated clientside if the entity is or enters the clients PVS.
--- The integer has a 32 bit limit. Use Entity:SetNWInt insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNW2Int(key, value) end

---[SHARED] Sets a networked string value on the entity.
--- The value can then be accessed with Entity:GetNW2String both from client and server.
--- The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWString insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value string The value to set, up to 511 characters.
function Entity:SetNW2String(key, value) end

---[SHARED] Sets a networked value on the entity.
--- The value can then be accessed with Entity:GetNW2Var both from client and server.
--- 
--- 
--- 
--- Allowed Types
--- 
--- 
--- 
--- 
--- Angle
--- 
--- 
--- Boolean
--- 
--- 
--- Entity
--- 
--- 
--- Float
--- 
--- 
--- Int
--- 
--- 
--- String
--- 
--- 
--- Vector
--- 
--- 
--- 
--- Trying to network a type that is not listed above leads to the value not being networked!
--- the value will only be updated clientside if the entity is or enters the clients PVS.Running this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value any The value to set
function Entity:SetNW2Var(key, value) end

---[SHARED] Sets a function to be called when the NW2Var changes. Internally uses GM:EntityNetworkedVarChanged to call the function.
--- Alias of Entity:SetNetworked2VarProxy
--- Only one NW2VarProxy can be set per-var
--- Running this function will only set it for the realm it is called on.
---@param key any The key of the NW2Var to add callback for.
---@param callback function The function to be called when the NW2Var changes. It has 4 arguments:  Entity ent - The entity string name - Name of the NW2Var that has changed any oldval - The old value any newval - The new value
function Entity:SetNW2VarProxy(key, callback) end

---[SHARED] Sets a networked vector value on the entity.
--- The value can then be accessed with Entity:GetNW2Vector both from client and server.
--- The value will only be updated clientside if the entity is or enters the clients PVS. use Entity:SetNWVector insteadRunning this function clientside will only set it for the client it is called on.
--- The value will only be networked if it isn't the same as the current value and unlike SetNW*
--- the value will only be networked once and not every 10 seconds.
---@param key string The key to associate the value with
---@param value Vector The value to set
function Entity:SetNW2Vector(key, value) end

---[SHARED] Sets a networked angle value on the entity.
--- The value can then be accessed with Entity:GetNWAngle both from client and server.
--- There's a 4095 slots Network limit. If you need more, consider using the net library or Entity:SetNW2Angle. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it for the client it is called on.
---@param key string The key to associate the value with
---@param value Angle The value to set
function Entity:SetNWAngle(key, value) end

---[SHARED] Sets a networked boolean value on the entity.
--- The value can then be accessed with Entity:GetNWBool both from client and server.
--- There's a 4096 slots Network limit. If you need more, consider using the net library or Entity:SetNW2Bool. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it for the client it is called on.
---@param key string The key to associate the value with
---@param value boolean The value to set
function Entity:SetNWBool(key, value) end

---[SHARED] Sets a networked entity value on the entity.
--- The value can then be accessed with Entity:GetNWEntity both from client and server.
--- There's a 4096 slots Network limit. If you need more, consider using the net library or Entity:SetNW2Entity. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it for the client it is called on.
---@param key string The key to associate the value with
---@param value Entity The value to set
function Entity:SetNWEntity(key, value) end

---[SHARED] Sets a networked float (number) value on the entity.
--- The value can then be accessed with Entity:GetNWFloat both from client and server.
--- Unlike Entity:SetNWInt, floats don't have to be whole numbers.
--- There's a 4095 slots Network limit. If you need more, consider using the net library or Entity:SetNW2Float. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it for the client it is called on.
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNWFloat(key, value) end

---[SHARED] Sets a networked integer (whole number) value on the entity.
--- The value can then be accessed with Entity:GetNWInt both from client and server.
--- See Entity:SetNWFloat for numbers that aren't integers.
--- There's a 4095 slots Network limit. If you need more, consider using the net library or Entity:SetNW2Int. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it for the client it is called on.This function will not round decimal values as it actually networks a float internally.Issue Tracker: 3374
---@param key string The key to associate the value with
---@param value number The value to set
function Entity:SetNWInt(key, value) end

---[SHARED] Sets a networked string value on the entity.
--- The value can then be accessed with Entity:GetNWString both from client and server.
--- There's a 4095 slots Network limit. If you need more, consider using the net library or Entity:SetNW2String. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it for the client it is called on.
---@param key string The key to associate the value with
---@param value string The value to set, up to 199 characters.
function Entity:SetNWString(key, value) end

---[SHARED] Only one NWVarProxy can be set per-var
--- Running this function will only set it for the realm it is called on.
--- Sets a function to be called when the NWVar changes.
---@param key any The key of the NWVar to add callback for.
---@param callback function The function to be called when the NWVar changes. It has 4 arguments:  Entity ent - The entity string name - Name of the NWVar that has changed any oldval - The old value any newval - The new value
function Entity:SetNWVarProxy(key, callback) end

---[SHARED] Sets a networked vector value on the entity.
--- The value can then be accessed with Entity:GetNWVector both from client and server.
--- There's a 4095 slots Network limit. If you need more, consider using the net library or Entity:SetNW2Vector. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it for the client it is called on.
---@param key string The key to associate the value with
---@param value Vector The value to set
function Entity:SetNWVector(key, value) end

---[SHARED] Sets the owner of this entity, disabling all physics interaction with it.
--- This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it, the Physics gun however will not.
---@param owner Entity The entity to be set as owner.
function Entity:SetOwner(owner) end

---[SHARED] Sets the parent of this entity, making it move with its parent. This will make the child entity non solid, nothing can interact with them, including traces.
--- This does not work on the world.This can cause undefined physics behaviour when used on entities that don't support parenting. See the Valve developer wiki for more information.
---@param parent Entity The entity to parent to. Setting this to nil will clear the parent.
---@param attachmentId number The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously. You must call Entity:SetMoveType( MOVETYPE_NONE ) on the child for this argument to have any effect!You must call Entity:SetMoveType( MOVETYPE_NONE ) on the child for this argument to have any effect!You must call Entity:SetMoveType( MOVETYPE_NONE ) on the child for this argument to have any effect!
function Entity:SetParent(parent, attachmentId) end

---[SHARED] Sets the parent of an entity to another entity with the given physics bone number. Similar to Entity:SetParent, except it is parented to a physbone. This function is useful mainly for ragdolls.
--- Despite this function being available server side, it doesn't actually do anything server side.
---@param bone number Physics bone number to attach to. Use 0 for objects with only one physics bone. (See Entity:GetPhysicsObjectNum)
function Entity:SetParentPhysNum(bone) end

---[SHARED] Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.
--- In sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing "Make Persistent".
--- Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature.
---@param persist boolean Whether or not the entity should be persistent.
function Entity:SetPersistent(persist) end

---[SERVER] When called on a constraint entity, sets the two physics objects to be constrained.
--- Usage is not recommended as the Constraint library provides easier ways to deal with constraints.
---@param Phys1 PhysObj The first physics object to be constrained.
---@param Phys2 PhysObj The second physics object to be constrained.
function Entity:SetPhysConstraintObjects(Phys1, Phys2) end

---[SERVER] Sets the player who gets credit if this entity kills something with physics damage within the time limit.
--- This can only be called on props, "anim" type SENTs and vehicles.
---@param ent Player Player who gets the kills. Setting this to a non-player entity will not work.
---@param timeLimit number Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.
function Entity:SetPhysicsAttacker(ent, timeLimit) end

---[SHARED] Allows you to set how fast an entity's animation will play, with 1.0 being the default speed.
---@param fSpeed number How fast the animation will play.
function Entity:SetPlaybackRate(fSpeed) end

---[SHARED] Moves the entity to the specified position.
--- If the new position doesn't take effect right away, you can use Entity:SetupBones to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.Entities with Entity:GetSolid of SOLID_BBOX will have their angles reset!This will fail inside of predicted functions called during player movement processing. This includes WEAPON:PrimaryAttack and WEAPON:Think.Issue Tracker: 2447Some entities, such as ragdolls, will appear unaffected by this function in the next frame. Consider PhysObj:SetPos if necessary.
---@param position Vector The position to move the entity to.
function Entity:SetPos(position) end

---[SHARED] Sets the specified pose parameter to the specified value.
--- You should call Entity:InvalidateBoneCache after calling this function.
--- Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts.
---@param poseName string Name of the pose parameter. Entity:GetPoseParameterName might come in handy here.
---@param poseValue number The value to set the pose to.
function Entity:SetPoseParameter(poseName, poseValue) end

---[CLIENT] Sets whether an entity should be predictable or not.
--- When an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.
--- Any datatable value that mismatches from the server will be overridden and a prediction error will be spewed.
--- Weapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.
--- Visit  for a list of all predicted hooks, and the Prediction page.
--- For further technical information on the subject, visit valve's wiki.
--- This function resets the datatable variables everytime it's called, it should ideally be called when a player starts using the entity and when he stopsEntities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit GM:NotifyShouldTransmit
---@param setPredictable boolean whether to make this entity predictable or not.
function Entity:SetPredictable(setPredictable) end

---[SERVER] Prevents the server from sending any further information about the entity to a player.
--- You must also call this function on a player's children if you would like to prevent transmission for players. See Entity:GetChildren.This does not work for nextbots unless you recursively loop their children and update them too.Issue Tracker: 1736When using this function, Entity:SetFlexScale will conflict with this function. Instead, consider using Entity:SetFlexScale on the client.
---@param player Player The player to stop networking the entity to.
---@param stopTransmitting boolean true to stop the entity from networking, false to make it network again.
function Entity:SetPreventTransmit(player, stopTransmitting) end

---[SERVER] Sets the bone angles. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.
---@param boneid number Bone ID
---@param pos Angle Angle to set
function Entity:SetRagdollAng(boneid, pos) end

---[SERVER] Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity.
---@param func function The build function. This function has one argument:  Entity ragdoll - The ragdoll to build
function Entity:SetRagdollBuildFunction(func) end

---[SERVER] Sets the bone position. This is used alongside Kinect in Entity:SetRagdollBuildFunction, for more info see ragdoll_motion entity.
---@param boneid number Bone ID
---@param pos Vector Position to set
function Entity:SetRagdollPos(boneid, pos) end

---[CLIENT] Sets the render angles of the Entity.
---@param newAngles Angle The new render angles to be set to.
function Entity:SetRenderAngles(newAngles) end

---[CLIENT] Sets the render bounds for the entity. For world space coordinates see Entity:SetRenderBoundsWS.
---@param mins Vector The minimum corner of the bounds, relative to origin of the entity.
---@param maxs Vector The maximum corner of the bounds, relative to origin of the entity.
---@param add Vector If defined, adds this vector to maxs and subtracts this vector from mins.
function Entity:SetRenderBounds(mins, maxs, add) end

---[CLIENT] Sets the render bounds for the entity in world space coordinates. For relative coordinates see Entity:SetRenderBounds.
---@param mins Vector The minimum corner of the bounds, relative to origin of the world/map.
---@param maxs Vector The maximum corner of the bounds, relative to origin of the world/map.
---@param add Vector If defined, adds this vector to maxs and subtracts this vector from mins.
function Entity:SetRenderBoundsWS(mins, maxs, add) end

---[CLIENT] Used to specify a plane, past which an object will be visually clipped.
---@param planeNormal Vector The normal of the plane. Anything behind the normal will be clipped.
---@param planePosition number The position of the plane.
function Entity:SetRenderClipPlane(planeNormal, planePosition) end

---[CLIENT] Enables the use of clipping planes to "cut" objects.
---@param enabled boolean Enable or disable clipping planes
function Entity:SetRenderClipPlaneEnabled(enabled) end

---[SHARED] Sets entity's render FX.
---@param renderFX number The new render FX to set, see Enums/kRenderFx
function Entity:SetRenderFX(renderFX) end

---[SHARED] Sets the render mode of the entity.
---@param renderMode number New render mode to set, see Enums/RENDERMODE.
function Entity:SetRenderMode(renderMode) end

---[CLIENT] Set the origin in which the Entity will be drawn from.
---@param newOrigin Vector The new origin in world coordinates where the Entity's model will now be rendered from.
function Entity:SetRenderOrigin(newOrigin) end

---[SHARED] Sets a save value for an entity. You can see a full list of an entity's save values by creating it and printing Entity:GetSaveTable().
--- See Entity:GetInternalVariable for the opposite of this function.
--- This does not type-check entity keys. Setting an entity key to a non-entity value will treat it as NULL.Issue Tracker: 4065
---@param name string Name of the save value to set
---@param value any Value to set
---@return boolean Key successfully set
function Entity:SetSaveValue(name, value) end

---[SHARED] Sets the entity's model sequence.
--- If the specified sequence is already active, the animation will not be restarted. See Entity:ResetSequence for a function that restarts the animation even if it is already playing.
--- In some cases you want to run Entity:ResetSequenceInfo to make this function run.
--- This will not work properly if called directly after calling Entity:SetModel. Consider waiting until the next Tick.
--- Will not work on players due to the animations being reset every frame by the base gamemode animation system. See GM:CalcMainActivity.
--- For custom scripted entities you will want to apply example from ENTITY:Think to make animations work.
---@param sequenceId number The sequence to play. Also accepts strings. If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.If set to a string, the function will automatically call Entity:LookupSequence to retrieve the sequence ID as a number.
function Entity:SetSequence(sequenceId) end

---[SHARED] Sets whether or not the entity should make a physics contact sound when it's been picked up by a player.
---@param playsound boolean True to play the pickup sound, false otherwise.
function Entity:SetShouldPlayPickupSound(playsound) end

---[SHARED] Sets if entity should create a server ragdoll on death or a client one.
--- Player ragdolls created with this enabled will have an owner set, see Entity:SetOwner for more information on what effects this has.
--- This is reset for players when they respawn (Entity:Spawn).
---@param serverragdoll boolean Set true if ragdoll should be created on server, false if on client.
function Entity:SetShouldServerRagdoll(serverragdoll) end

---[SHARED] Sets the skin of the entity.
---@param skinIndex number 0-based index of the skin to use.
function Entity:SetSkin(skinIndex) end

---[SHARED] Sets the solidity of an entity.
---@param solid_type number The solid type. See the Enums/SOLID.
function Entity:SetSolid(solid_type) end

---[SHARED] Sets solid flag(s) for the entity.
--- This overrides any other flags the entity might have had. See Entity:AddSolidFlags for adding flags.
---@param flags number The flag(s) to set, see Enums/FSOLID.
function Entity:SetSolidFlags(flags) end

---[SHARED] Sets whether the entity should use a spawn effect when it is created on the client.
--- See Entity:GetSpawnEffect for more information on how the effect is applied.
--- This function will only have an effect when the entity spawns. After that it will do nothing even is set to true.
---@param spawnEffect boolean Sets if we should show a spawn effect.
function Entity:SetSpawnEffect(spawnEffect) end

---[SHARED] Overrides a single material on the model of this entity.
--- To set a Lua material created with CreateMaterial, just prepend a "!" to the material name.
--- The server's value takes priority on the client.Issue Tracker: 3362
---@param index number Index of the material to override, acceptable values are from 0 to 31. Indexes are by Entity:GetMaterials, but you have to subtract 1 from them. If called with no arguments, all sub materials will be reset.
---@param material string The material to override the default one with. Set to nil to revert to default material.
function Entity:SetSubMaterial(index, material) end

---[SHARED] Sets the axis-aligned bounding box (AABB) for an entity's hitbox detection.
--- See also Entity:SetSurroundingBoundsType (mutually exclusive).
---@param min Vector Minimum extent of the AABB relative to entity's position.
---@param max Vector Maximum extent of the AABB relative to entity's position.
function Entity:SetSurroundingBounds(min, max) end

---[SHARED] Automatically sets the axis-aligned bounding box (AABB) for an entity's hitbox detection.
--- See also Entity:SetSurroundingBounds (mutually exclusive).
---@param bounds number Bounds type of the entity, see Enums/BOUNDS
function Entity:SetSurroundingBoundsType(bounds) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default.
---@param tab table Table for the entity to use
function Entity:SetTable(tab) end

---[SHARED] When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).
--- In the case of scripted entities, this will override ENTITY:UpdateTransmitState
---@param onoff boolean Will set the TransmitWithParent flag on or off
function Entity:SetTransmitWithParent(onoff) end

---[SERVER] Marks the entity as a trigger, so it will generate ENTITY:StartTouch, ENTITY:Touch and ENTITY:EndTouch callbacks.
--- Internally this is stored as FSOLID_TRIGGER flag.
---@param maketrigger boolean Make the entity trigger or not
function Entity:SetTrigger(maketrigger) end

---[SERVER] Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.
---@param freezable boolean True to make the entity unfreezable, false otherwise.
function Entity:SetUnFreezable(freezable) end

---[CLIENT] Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales or when manually drawing the entity multiple times at different positions.
--- This calls the BuildBonePositions callback added via Entity:AddCallback, so avoid calling this function inside it to prevent an infinite loop.
function Entity:SetupBones() end

---[CLIENT] Initializes the class names of an entity's phoneme mappings (mouth movement data). This is called by default with argument "phonemes" when a flex-based entity (such as an NPC) is created.
--- TF2 phonemes can be accessed by using a path such as "player/scout/phonemes/phonemes" , check TF2's "tf2_misc_dir.vpk" with GCFScape for other paths, however it seems that TF2 sounds don't contain phoneme definitions anymore after being converted to mp3 and only rely on VCD animations, this needs to be further investigated
---@param fileRoot string The file prefix of the phoneme mappings (relative to "garrysmod/expressions/").
function Entity:SetupPhonemeMappings(fileRoot) end

---[SERVER] Sets the use type of an entity, affecting how often ENTITY:Use will be called for Lua entities.
---@param useType number The use type to apply to the entity. Uses Enums/_USE.
function Entity:SetUseType(useType) end

---[SHARED] Allows to quickly set variable to entity's Entity:GetTable.
--- This will not network the variable to client(s). You want Entity:SetNWString and similar functions for that
---@param key any Key of the value to set
---@param value any Value to set the variable to
function Entity:SetVar(key, value) end

---[SHARED] Sets the entity's velocity. For entities with physics, consider using PhysObj:SetVelocity on the PhysObj of the entity.
--- Actually binds to CBaseEntity::SetBaseVelocity() which sets the entity's velocity due to forces applied by other entities.If applied to a player, this will actually ADD velocity, not set it.
---@param velocity Vector The new velocity to set.
function Entity:SetVelocity(velocity) end

---[SHARED] Sets the model and associated weapon to this viewmodel entity.
--- This is used internally when the player switches weapon.
--- View models are not drawn without a weapons associated to them.This will silently fail if the entity is not a viewmodel.
---@param viewModel string The model string to give to this viewmodel. Example: "models/weapons/c_smg1.mdl"
---@param weapon Weapon The weapon entity to associate this viewmodel to.
function Entity:SetWeaponModel(viewModel, weapon) end

---[SHARED] Returns the amount of skins the entity has.
---@return number The amount of skins the entity's model has.
function Entity:SkinCount() end

---[CLIENT] Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.
--- Both entities must have the same model.
---@param srcEntity Entity Entity to move the model instance from.
---@return boolean Whether the operation was successful or not
function Entity:SnatchModelInstance(srcEntity) end

---[SHARED] Initializes the entity and starts its networking. If called on a player, it will respawn them.
--- This calls ENTITY:Initialize on Lua-defined entities.
function Entity:Spawn() end

---[SHARED] Starts a "looping" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.
--- This function is almost identical to CreateSound, with the exception of the sound being created in the STATIC channel and with normal attenuation.
--- See also Entity:StopLoopingSound
---@param sound string Sound to play. Can be either a sound script or a filepath.
---@return number The ID number of started sound starting with 0, or -1 if we failed for some reason.
function Entity:StartLoopingSound(sound) end

---[SHARED] Starts a motion controller in the physics engine tied to this entity's PhysObj, which enables the use of ENTITY:PhysicsSimulate.
--- The motion controller can later be destroyed via Entity:StopMotionController.
--- Motion controllers are used internally to control other Entities' PhysObjects, such as the Gravity Gun, +use pickup and the Physics Gun.
--- This function should be called every time you recreate the Entity's PhysObj. Or alternatively you should call Entity:AddToMotionController on the new PhysObj.
--- Also see Entity:AddToMotionController and Entity:RemoveFromMotionController.
--- Only works on a scripted Entity of anim type.
function Entity:StartMotionController() end

---[CLIENT] Stops all particle effects parented to the entity and immediately destroys them.
function Entity:StopAndDestroyParticles() end

---[SHARED] Stops a sound created by Entity:StartLoopingSound.
---@param id number The sound ID returned by Entity:StartLoopingSound
function Entity:StopLoopingSound(id) end

---[SHARED] Stops the motion controller created with Entity:StartMotionController.
function Entity:StopMotionController() end

---[CLIENT] Stops all particle effects parented to the entity.
--- This is ran automatically on every client by Entity:StopParticles if called on the server.
function Entity:StopParticleEmission() end

---[SHARED] Stops any attached to the entity .pcf particles using ParticleEffectAttach or ParticleEffect.
--- On client, this is the same as Entity:StopParticleEmission. ( and you should use StopParticleEmission instead )
--- On server, this is the same as running Entity:StopParticleEmission on every client.
function Entity:StopParticles() end

---[CLIENT] Stops all particle effects parented to the entity with given name.
---@param name string The name of the particle to stop.
function Entity:StopParticlesNamed(name) end

---[CLIENT] Stops all particle effects parented to the entity with given name on given attachment.
---@param name string The name of the particle to stop.
---@param attachment number The attachment of the entity to stop particles on.
function Entity:StopParticlesWithNameAndAttachment(name, attachment) end

---[SHARED] Stops emitting the given sound from the entity, especially useful for looping sounds.
---@param sound string The name of the sound script or the filepath to stop playback of.
function Entity:StopSound(sound) end

---[SERVER] Applies the specified amount of damage to the entity with DMG_GENERIC flag.
--- Calling this function on the victim entity in ENTITY:OnTakeDamage can cause infinite loops.This function does not seem to do any damage if you apply it to a player who is into a vehicle.
---@param damageAmount number The amount of damage to be applied.
---@param attacker Entity The entity that initiated the attack that caused the damage.
---@param inflictor Entity The entity that applied the damage, eg. a weapon.
function Entity:TakeDamage(damageAmount, attacker, inflictor) end

---[SERVER] Applies the damage specified by the damage info to the entity.
--- This function will not deal damage to a player inside a vehicle. You need to call it on the vehicle instead.Calling this function on the victim entity in ENTITY:OnTakeDamage can cause infinite loops.
---@param damageInfo CTakeDamageInfo The damage to apply.
function Entity:TakeDamageInfo(damageInfo) end

---[SERVER] Applies forces to our physics object in response to damage.
---@param dmginfo CTakeDamageInfo The damageinfo to apply. Only CTakeDamageInfo:GetDamageForce and CTakeDamageInfo:GetDamagePosition are used.
function Entity:TakePhysicsDamage(dmginfo) end

---[SERVER] Check if the given position or entity is within this entity's PVS.
--- See also Entity:IsDormant.
--- The function won't take in to account AddOriginToPVS and the like.
---@param testPoint any Entity or Vector to test against. If an entity is given, this function will test using its bounding box.
---@return boolean True if the testPoint is within our PVS.
function Entity:TestPVS(testPoint) end

---[SHARED] Called every frame on the client.
--- Called about 5-6 times per second on the server.
--- You may need to call Entity:Spawn to get this hook to run server side.
--- You can force it to run at servers tickrate using the example below.
---@return boolean Return true if you used Entity:NextThink to override the next execution time.
function ENTITY:Think() end

---[SHARED] Returns the ID of a PhysObj attached to the given bone. To be used with Entity:GetPhysicsObjectNum.
--- See Entity:TranslatePhysBoneToBone for reverse function.
---@param boneID number The ID of a bone to look up the "physics root" bone of.
---@return number The PhysObj ID of the given bone.  -1 if we somehow cannot translate
function Entity:TranslateBoneToPhysBone(boneID) end

---[SHARED] Returns the boneID of the bone the given PhysObj is attached to.
--- See Entity:TranslateBoneToPhysBone for reverse function.
---@param physNum number The PhysObj number on the entity
---@return number The boneID of the bone the PhysObj is attached to.
function Entity:TranslatePhysBoneToBone(physNum) end

---[SERVER] Updates positions of bone followers created by Entity:CreateBoneFollowers.
--- This should be called every tick.
--- This function only works on anim type entities.
function Entity:UpdateBoneFollowers() end

---[SERVER] Simulates a +use action on an entity.
---@param activator Entity The entity that caused this input. This will usually be the player who pressed their use key
---@param caller Entity The entity responsible for the input. This will typically be the same as activator unless some other entity is acting as a proxy
---@param useType number Use type, see Enums/USE.
---@param value number Any value.
function Entity:Use(activator, caller, useType, value) end

---[SHARED] Does nothing on server.
--- Animations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures.
function Entity:UseClientSideAnimation() end

---[SHARED] Enables or disables trigger bounds.
--- This will give the entity a "trigger box" that extends around its bounding box by boundSize units in X/Y and (boundSize / 2) in +Z (-Z remains the same).
--- The trigger box is world aligned and will work regardless of the object's solidity and collision group.
--- Valve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure.
--- The trigger boxes can be made visible as a light blue box by using the ent_bbox console command while looking at the entity. Alternatively a classname or entity index can be used as the first argument.
--- This requires developer to be set to 1.
---@param enable boolean Enable or disable the bounds.
---@param boundSize number The distance/size of the trigger bounds.
function Entity:UseTriggerBounds(enable, boundSize) end

---[SHARED] Returns the index of this view model, it can be used to identify which one of the player's view models this entity is.
---@return number View model index, ranges from 0 to 2, nil if the entity is not a view model
function Entity:ViewModelIndex() end

---[SERVER] Returns whether the target/given entity is visible from the this entity.
--- This is meant to be used only with NPCs.
--- Differences from a simple trace include:
--- 
--- If target has FL_NOTARGET, returns false
--- If ai_ignoreplayers is turned on and target is a player, returns false
--- Reacts to ai_LOS_mode:
--- 
--- 
--- If 1, does a simple trace with COLLISION_GROUP_NONE and MASK_BLOCKLOS
--- 
--- 
--- 
--- 
--- If not, does a trace with MASK_BLOCKLOS_AND_NPCS ( - CONTENTS_BLOCKLOS is target is player ) and a custom LOS filter ( CTraceFilterLOS )
--- 
--- 
--- Returns true if hits a vehicle the target is driving
---@param target Entity Entity to check for visibility to.
---@return boolean If the entities can see each other.
function Entity:Visible(target) end

---[SERVER] Returns true if supplied vector is visible from the entity's line of sight.
--- This is achieved similarly to a trace.
---@param pos Vector The position to check for visibility
---@return boolean Within line of sight
function Entity:VisibleVec(pos) end

---[SHARED] Returns an integer that represents how deep in water the entity is.
--- This function will currently work on players only due to the way it is implemented in the engine. If you need to check interaction with water for regular entities you better use util.PointContents.
--- 
--- 0 - The entity isn't in water.
--- 
--- 1 - Slightly submerged (at least to the feet).
--- 
--- 2 - The majority of the entity is submerged (at least to the waist).
--- 
--- 3 - Completely submerged.
---@return number The water level.
function Entity:WaterLevel() end

---[SHARED] Sets the activity of the entity's active weapon.
--- This does nothing on the client.Only works for CBaseCombatCharacter entities, which includes players and NPCs.
---@param act number Activity number. See Enums/ACT.
---@param duration number How long the animation should take in seconds.
function Entity:Weapon_SetActivity(act, duration) end

---[SHARED] Calls and returns WEAPON:TranslateActivity on the weapon the entity ( player or NPC ) carries.
--- Despite existing on client, it doesn't actually do anything on client.
---@param act number The activity to translate
---@return number The translated activity
function Entity:Weapon_TranslateActivity(act) end

---[SHARED] Returns two vectors representing the minimum and maximum extent of the entity's axis-aligned bounding box (which is calculated from entity's collision bounds.
---@return Vector, Vector Vector - The minimum vector for the entity's bounding box in world space.
---@return Vector, Vector Vector - The maximum vector for the entity's bounding box in world space.
function Entity:WorldSpaceAABB() end

---[SHARED] Returns the center of the entity according to its collision model.
---@return Vector The center of the entity
function Entity:WorldSpaceCenter() end

---[SHARED] Converts a worldspace vector into a vector local to an entity
---@param wpos Vector The world vector
---@return Vector The local vector
function Entity:WorldToLocal(wpos) end

---[SHARED] Converts world angles to local angles ( local to the entity )
---@param ang Angle The world angles
---@return Angle The local angles
function Entity:WorldToLocalAngles(ang) end

---@class File
local File = {}

---[SHARED] Dumps the file changes to disk and closes the file handle which makes the handle useless.
function File:Close() end

---[SHARED] Returns whether the File object has reached the end of file or not.
---@return boolean Whether the file has reached end or not.
function File:EndOfFile() end

---[SHARED] Dumps the file changes to disk and saves the file.
function File:Flush() end

---[SHARED] Reads the specified amount of chars and returns them as a binary string.
---@param length number Reads the specified amount of chars. If not set, will read the entire file.
---@return string 
function File:Read(length) end

---[SHARED] Reads one byte of the file and returns whether that byte was not 0.
---@return boolean val
function File:ReadBool() end

---[SHARED] Reads one unsigned 8-bit integer from the file.
---@return number The unsigned 8-bit integer from the file.
function File:ReadByte() end

---[SHARED] Reads an 8-byte little-endian IEEE-754 floating point double from the file.
---@return number The double-precision floating point value read from the file.
function File:ReadDouble() end

---[SHARED] Reads an IEEE 754 little-endian 4-byte float from the file.
---@return number The read value
function File:ReadFloat() end

---[SHARED] Returns the contents of the file from the current position up until the end of the current line.
--- This function will look specifically for Line Feed characters \n and will completely ignore Carriage Return characters \r.This function will not return more than 8192 characters. The return value will include the \n character.
---@return string The string of data from the read line.
function File:ReadLine() end

---[SHARED] Reads a signed little-endian 32-bit integer from the file.
---@return number A signed 32-bit integer
function File:ReadLong() end

---[SHARED] Reads a signed little-endian 16-bit integer from the file.
---@return number int16
function File:ReadShort() end

---[SHARED] Reads an unsigned little-endian 32-bit integer from the file.
---@return number An unsigned 32-bit integer
function File:ReadULong() end

---[SHARED] Reads an unsigned little-endian 16-bit integer from the file.
---@return number The 16-bit integer
function File:ReadUShort() end

---[SHARED] Sets the file pointer to the specified position.
---@param pos number Pointer position, in bytes.
function File:Seek(pos) end

---[SHARED] Returns the size of the file in bytes.
---@return number 
function File:Size() end

---[SHARED] Moves the file pointer by the specified amount of chars.
---@param amount number The amount of chars to skip, can be negative to skip backwards.
---@return number amount
function File:Skip(amount) end

---[SHARED] Returns the current position of the file pointer.
---@return number pos
function File:Tell() end

---[SHARED] Writes the given string into the file.
---@param data string Binary data to write to the file.
function File:Write(data) end

---[SHARED] Writes a boolean value to the file as one byte.
---@param bool boolean The bool to be written to the file.
function File:WriteBool(bool) end

---[SHARED] Write an 8-bit unsigned integer to the file.
---@param uint8 number The 8-bit unsigned integer to be written to the file.
function File:WriteByte(uint8) end

---[SHARED] Writes an 8-byte little-endian IEEE-754 floating point double to the file.
---@param double number The double to be written to the file.
function File:WriteDouble(double) end

---[SHARED] Writes an IEEE 754 little-endian 4-byte float to the file.
---@param float number The float to be written to the file.
function File:WriteFloat(float) end

---[SHARED] Writes a signed little-endian 32-bit integer to the file.
---@param int32 number The 32-bit signed integer to be written to the file.
function File:WriteLong(int32) end

---[SHARED] Writes a signed little-endian 16-bit integer to the file.
---@param int16 number The 16-bit signed integer to be written to the file.
function File:WriteShort(int16) end

---[SHARED] Writes an unsigned little-endian 32-bit integer to the file.
---@param uint32 number The unsigned 32-bit integer to be written to the file.
function File:WriteULong(uint32) end

---[SHARED] Writes an unsigned little-endian 16-bit integer to the file.
---@param uint16 number The unsigned 16-bit integer to the file.
function File:WriteUShort(uint16) end

---@class GM
local GM = {}

---[SERVER] Called when a map I/O event occurs.
--- See also Entity:Fire and Entity:Input for functions to fire Inputs on entities.
---@param ent Entity Entity that receives the input
---@param input string The input name. Is not guaranteed to be a valid input on the entity.
---@param activator Entity Activator of the input
---@param caller Entity Caller of the input
---@param value any Data provided with the input. Will be either a string, a number, a boolean or a nil.
---@return boolean Return true to prevent this input from being processed. Do not return otherwise.
function GM:AcceptInput(ent, input, activator, caller, value) end

---[CLIENT] Adds a death notice entry.
--- You cannot use hook.Add on this hook yet.Issue Tracker: 2611
---@param attacker string The name of the attacker
---@param attackerTeam number The team of the attacker
---@param inflictor string Class name of the entity inflicting the damage
---@param victim string Name of the victim
---@param victimTeam number Team of the victim
function GM:AddDeathNotice(attacker, attackerTeam, inflictor, victim, victimTeam) end

---[CLIENT] Allows you to adjust the mouse sensitivity.
---@param defaultSensitivity number The old sensitivity In general it will be 0, which is equivalent to a sensitivity of 1.
---@return number A fraction of the normal sensitivity (0.5 would be half as sensitive). Return -1 to not override and prevent subsequent hooks and WEAPON:AdjustMouseSensitivity from running. Return nil to not override and allow subsequent hooks and WEAPON:AdjustMouseSensitivity to run.
function GM:AdjustMouseSensitivity(defaultSensitivity) end

---[SERVER] Called when a player tries to pick up something using the "use" key, return to override.
--- This hook will not be called if sv_playerpickupallowed is set to 0.
--- See GM:GravGunPickupAllowed for the Gravity Gun pickup variant.
--- See GM:PhysgunPickup for the Physics Gun pickup variant.
---@param ply Player The player trying to pick up something.
---@param ent Entity The Entity the player attempted to pick up.
---@return boolean Allow the player to pick up the entity or not.
function GM:AllowPlayerPickup(ply, ent) end

---[SHARED] This hook is used to calculate animations for a player.
--- This hook must return the same values at the same time on both, client and server. On client for players to see the animations, on server for hit detection to work properly.
---@param ply Player The player to apply the animation.
---@param vel Vector The velocity of the player.
---@return number, number number - Enums/ACT for the activity the player should use. A nil return will be treated as ACT_INVALID.
---@return number, number number - Sequence for the player to use. This takes precedence over the activity (the activity is still used for layering). Return -1 or nil to let the activity determine the sequence.
function GM:CalcMainActivity(ply, vel) end

---[CLIENT] Called from GM:CalcView when player is in driving a vehicle.
--- This hook may not be called in gamemodes that override GM:CalcView.
---@param veh Vehicle The vehicle the player is driving
---@param ply Player The vehicle driver
---@param view table The view data containing players FOV, view position and angles, see Structures/CamData
---@return table The modified view table containing new values, see Structures/CamData
function GM:CalcVehicleView(veh, ply, view) end

---[CLIENT] Allows override of the default view.
---@param ply Player The local player.
---@param origin Vector The player's view position.
---@param angles Angle The player's view angles.
---@param fov number Field of view.
---@param znear number Distance to near clipping plane.
---@param zfar number Distance to far clipping plane.
---@return table View data table. See Structures/CamData
function GM:CalcView(ply, origin, angles, fov, znear, zfar) end

---[CLIENT] Allows overriding the position and angle of the viewmodel.
---@param wep Weapon The weapon entity
---@param vm Entity The viewmodel entity
---@param oldPos Vector Original position (before viewmodel bobbing and swaying)
---@param oldAng Angle Original angle (before viewmodel bobbing and swaying)
---@param pos Vector Current position
---@param ang Angle Current angle
---@return Vector, Angle Vector - New position
---@return Vector, Angle Angle - New angle
function GM:CalcViewModelView(wep, vm, oldPos, oldAng, pos, ang) end

---[SERVER] Called when a variable is edited on an Entity (called by Edit Properties... menu), to determine if the edit should be permitted.
--- See Editable entities for more details about the system.
---@param ent Entity The entity being edited.
---@param ply Player The player doing the editing.
---@param key string The name of the variable.
---@param val string The new value, as a string which will later be converted to its appropriate type.
---@param editor table The edit table defined in Entity:NetworkVar.
---@return boolean Return true to allow editing.
function GM:CanEditVariable(ent, ply, key, val, editor) end

---[SERVER] Determines if the player can exit the vehicle.
---@param veh Vehicle The vehicle entity
---@param ply Player The player
---@return boolean True if the player can exit the vehicle.
function GM:CanExitVehicle(veh, ply) end

---[SERVER] Determines whether or not the player can enter the vehicle.
--- Called just before GM:PlayerEnteredVehicle.
---@param player Player The player.
---@param vehicle Vehicle The vehicle.
---@param role number The seat number.
---@return boolean false if the player is not allowed to enter the vehicle.
function GM:CanPlayerEnterVehicle(player, vehicle, role) end

---[SERVER] Determines if the player can kill themselves using the concommands kill or explode.
---@param player Player The player
---@return boolean True if they can suicide.
function GM:CanPlayerSuicide(player) end

---[SERVER] Determines if the player can unfreeze the entity.
---@param player Player The player
---@param entity Entity The entity
---@param phys PhysObj The physics object of the entity
---@return boolean True if they can unfreeze.
function GM:CanPlayerUnfreeze(player, entity, phys) end

---[SERVER] Called whenever a players tries to undo.
---@param ply Player The player who tried to undo something.
---@param undo table The undo table as a Structures/Undo.
---@return boolean Return false to disallow the undo.
function GM:CanUndo(ply, undo) end

---[MENU] Called each frame to record demos to video using IVideoWriter.
--- This hook is called every frame regardless of whether or not a demo is being recorded
function GM:CaptureVideo() end

---[CLIENT] Called when a message is printed to the chat box. Note, that this isn't working with player messages even though there are arguments for it.
--- For player messages see GM:PlayerSay and GM:OnPlayerChat
---@param index number The index of the player.
---@param name string The name of the player.
---@param text string The text that is being sent.
---@param type string Chat filter type. Possible values are:  joinleave - Player join and leave messages namechange - Player name change messages servermsg - Server messages such as convar changes teamchange - Team changes? chat - (Obsolete?) Player chat? Seems to trigger when server console uses the say command none - A fallback value
---@return boolean Return true to suppress the chat message.
function GM:ChatText(index, name, text, type) end

---[CLIENT] Called whenever the content of the user's chat input box is changed.
---@param text string The new contents of the input box
function GM:ChatTextChanged(text) end

---[SERVER] Called when a non local player connects to allow the Lua system to check the password.
--- The default behaviour in the base gamemodes emulates what would normally happen. If sv_password is set and its value matches the password passed in by the client - then they are allowed to join. If it isn't set it lets them in too.
---@param steamID64 string The 64bit Steam ID of the joining player, use util.SteamIDFrom64 to convert it to a STEAM_0: one.
---@param ipAddress string The IP of the connecting client
---@param svPassword string The current value of sv_password (the password set by the server)
---@param clPassword string The password provided by the client
---@param name string The name of the joining player
---@return boolean, string boolean - If the hook returns false then the player is disconnected
---@return boolean, string string - If returning false in the first argument, then this should be the disconnect message. This will default to #GameUI_ServerRejectBadPassword, which is Bad Password. translated to the client's language.
function GM:CheckPassword(steamID64, ipAddress, svPassword, clPassword, name) end

---[SHARED] Called when a player's sign on state changes.
--- You cannot get a valid player object from the userID at any point during this hook.Issue Tracker: 4899
---@param userID number The userID of the player whose sign on state has changed.
---@param oldState number The previous sign on state. See SIGNONSTATE enums.
---@param newState number The new/current sign on state. See SIGNONSTATE enums.
function GM:ClientSignOnStateChanged(userID, oldState, newState) end

---[CLIENT] Called when derma menus are closed with CloseDermaMenus.
function GM:CloseDermaMenus() end

---[CLIENT] Called whenever an entity becomes a clientside ragdoll.
--- See GM:CreateEntityRagdoll for serverside ragdolls.
---@param entity Entity The Entity that created the ragdoll
---@param ragdoll Entity The ragdoll being created.
function GM:CreateClientsideRagdoll(entity, ragdoll) end

---[SERVER] Called when a serverside ragdoll of an entity has been created.
--- See GM:CreateClientsideRagdoll for clientside ragdolls.
---@param owner Entity Entity that owns the ragdoll
---@param ragdoll Entity The ragdoll entity
function GM:CreateEntityRagdoll(owner, ragdoll) end

---[CLIENT] Allows you to change the players movements before they're sent to the server.
--- See Game Movement for an explanation on the move system.
--- Due to this hook being clientside only, it could be overridden by the user allowing them to completely skip your logic, it is recommended to use GM:StartCommand in a shared file instead.
---@param cmd CUserCmd The User Command data
---@return boolean Return true to:  Disable Sandbox C menu "screen clicking" Disable Teammate nocollide (verification required) Prevent calling of C_BaseHLPlayer::CreateMove & subsequently C_BasePlayer::CreateMove
function GM:CreateMove(cmd) end

---[SHARED] Teams are created within this hook using team.SetUp.
--- This hook is called before GM:PreGamemodeLoaded.
function GM:CreateTeams() end

---[SHARED] Called upon an animation event, this is the ideal place to call player animation functions such as Player:AddVCDSequenceToGestureSlot, Player:AnimRestartGesture and so on.
---@param ply Player Player who is being animated
---@param event number Animation event. See Enums/PLAYERANIMEVENT
---@param data number The data for the event. This is interpreted as an Enums/ACT by PLAYERANIMEVENT_CUSTOM and PLAYERANIMEVENT_CUSTOM_GESTURE, or a sequence by PLAYERANIMEVENT_CUSTOM_SEQUENCE.
---@return number The translated activity to send to the weapon. See Enums/ACT. Return ACT_INVALID if you don't want to send an activity.
function GM:DoAnimationEvent(ply, event, data) end

---[SERVER] Handles the player's death.
--- This hook is not called if the player is killed by Player:KillSilent. See GM:PlayerSilentDeath for that.
--- 
--- GM:PlayerDeath is called after this hook
--- GM:PostPlayerDeath is called after that
---@param ply Player The player
---@param attacker Entity The entity that killed the player
---@param dmg CTakeDamageInfo Damage info
function GM:DoPlayerDeath(ply, attacker, dmg) end

---[CLIENT] This hook is called every frame to draw all of the current death notices.
---@param x number X position to draw death notices as a ratio
---@param y number Y position to draw death notices as a ratio
function GM:DrawDeathNotice(x, y) end

---[CLIENT] Called every frame before drawing the in-game monitors ( Breencast, in-game TVs, etc ), but doesn't seem to be doing anything, trying to render 2D or 3D elements fail.
function GM:DrawMonitors() end

---[CLIENT] Called after all other 2D draw hooks are called. Draws over all VGUI Panels and HUDs.
--- Unlike GM:HUDPaint, this hook is called with the game paused and while the Camera SWEP is equipped.
--- Only gets called when r_drawvgui is enabled.This is a rendering hook which provides a 2d rendering context.
function GM:DrawOverlay() end

---[CLIENT] Allows you to override physgun beam drawing.
--- This is still called when physgun_drawbeams is disabled.Issue Tracker: 3294
---@param ply Player Physgun owner
---@param physgun Weapon The physgun
---@param enabled boolean Is the beam enabled
---@param target Entity Entity we are grabbing. This will be NULL if nothing is being held
---@param physBone number ID of the physics bone (PhysObj) we are grabbing at. Use Entity:TranslatePhysBoneToBone to translate to an actual bone.
---@param hitPos Vector Beam hit position relative to the physics bone (PhysObj) we are grabbing.
---@return boolean Return false to hide default beam
function GM:DrawPhysgunBeam(ply, physgun, enabled, target, physBone, hitPos) end

---[SHARED] Called right before an entity stops driving. Overriding this hook will cause it to not call drive.End and the player will not stop driving.
---@param ent Entity The entity being driven
---@param ply Player The player driving the entity
function GM:EndEntityDriving(ent, ply) end

---[SHARED] Called whenever a sound has been played. This will not be called clientside if the server played the sound without the client also calling Entity:EmitSound.
--- This is not called for scripted sequences.Issue Tracker: 1021
---@param data table Information about the played sound. Changes done to this table can be applied by returning true from this hook. See Structures/EmitSoundInfo.
---@return boolean Return true to apply all changes done to the data table. Return false to prevent the sound from playing. Return nil or nothing to play the sound without altering it.
function GM:EntityEmitSound(data) end

---[SHARED] Called every time a bullet is fired from an entity.
--- This hook is called directly from Entity:FireBullets. Due to this, you cannot call Entity:FireBullets inside this hook or an infinite loop will occur crashing the game.
---@param entity Entity The entity that fired the bullet
---@param data table The bullet data. See Structures/Bullet.
---@return boolean Return true to apply all changes done to the bullet table. Return false to suppress the bullet.
function GM:EntityFireBullets(entity, data) end

---[SHARED] Called when a key-value pair is set on an entity, either by the engine (for example when map spawns) or Entity:SetKeyValue.
--- See ENTITY:KeyValue for a hook that works for scripted entities.
--- See WEAPON:KeyValue for a hook that works for scripted weapons.
---@param ent Entity Entity that the keyvalue is being set on
---@param key string Key of the key/value pair
---@param value string Value of the key/value pair
---@return string If set, the value of the key-value pair will be overridden by this string.
function GM:EntityKeyValue(ent, key, value) end

---[SHARED] Called when an NW2Var is changed.
--- This hook is fired before the client value is actually changed. Calling the GetNW2 function for the specified variable name within this hook will return the old value, not the current/updated one.
---@param ent Entity The owner entity of changed NW2Var
---@param name string The name if changed NW2Var
---@param oldval any The old value of the NW2Var
---@param newval any The new value of the NW2Var
function GM:EntityNetworkedVarChanged(ent, name, oldval, newval) end

---[SHARED] Called right before the removal of an entity.
--- This hook is called during clientside full updates. See ENTITY:OnRemove for more information.Issue Tracker: 4675
---@param ent Entity Entity being removed
function GM:EntityRemoved(ent) end

---[SERVER] Called when an entity takes damage. You can modify all parts of the damage info in this hook.
--- Applying damage from this hook to the entity taking damage will lead to infinite loop/crash.
---@param target Entity The entity taking damage
---@param dmg CTakeDamageInfo Damage info
---@return boolean Return true to completely block the damage event
function GM:EntityTakeDamage(target, dmg) end

---[SHARED] This hook polls the entity the player use action should be applied to.
--- The default behavior of this hook is in CBasePlayer::FindUseEntity. Despite CBasePlayer::FindUseEntity being defined shared, it is only called serverside in practice, so this hook will be only called serverside, as well. It is possible for modules to call it clientside, so the Lua code should still be treated as shared.
---@param ply Player The player who initiated the use action.
---@param defaultEnt Entity The entity that was chosen by the engine.
---@return Entity The entity to use instead of default entity
function GM:FindUseEntity(ply, defaultEnt) end

---[CLIENT] Runs when user cancels/finishes typing.
function GM:FinishChat() end

---[SHARED] Called after GM:Move, applies all the changes from the CMoveData to the player.
--- See Game Movement for an explanation on the move system.
---@param ply Player Player
---@param mv CMoveData Movement data
---@return boolean Return true to suppress default engine behavior, i.e. declare that you have already moved the player according to the move data in a custom way.
function GM:FinishMove(ply, mv) end

---[CLIENT] Called to allow override of the default Derma skin for all panels.
--- This hook is only called on Lua start up, changing its value (or adding new hooks) after it has been already called will not have any effect.
---@return string A case sensitive Derma skin name to be used as default, registered previously via derma.DefineSkin. Returning nothing, nil or invalid name will make it fallback to the "Default" skin.
function GM:ForceDermaSkin() end

---[SHARED] Called when game content has been changed, for example an addon or a mountable game was (un)mounted.
function GM:GameContentChanged() end

---[SERVER] Called when a player takes damage from falling, allows to override the damage.
---@param ply Player The player
---@param speed number The fall speed
---@return number New fall damage
function GM:GetFallDamage(ply, speed) end

---[SHARED] Called when the game(server) needs to update the text shown in the server browser as the gamemode.
--- This hook (and the sv_gamename_override command) may not work on some popular gamemodes like DarkRP or Trouble Terrorist Town. This is not a bug, it's just how it works. See here for more information.
--- Also, it only works on dedicated servers and is called at regular intervals (about one second) even if the server has no players and the hibernation function is enabled.
---@return string The text to be shown in the server browser as the gamemode.
function GM:GetGameDescription() end

---[CLIENT] Allows you to modify the Source Engine's motion blur shaders.
---@param horizontal number The amount of horizontal blur.
---@param vertical number The amount of vertical  blur.
---@param forward number The amount of forward/radial blur.
---@param rotational number The amount of rotational blur.
---@return number, number, number, number number - New amount of horizontal blur.
---@return number, number, number, number number - New amount of vertical blur.
---@return number, number, number, number number - New amount of forward/radial blur.
---@return number, number, number, number number - New amount of rotational blur.
function GM:GetMotionBlurValues(horizontal, vertical, forward, rotational) end

---[SERVER] Called to determine preferred carry angles for the entity. It works for both, +use pickup and gravity gun pickup.
--- Due to nature of the gravity gun coding in multiplayer, this hook MAY seem to not work ( but rest assured it does ), due to clientside prediction not knowing the carry angles. The +use pickup doesn't present this issue as it doesn't predict the player carrying the object clientside ( as you may notice by the prop lagging behind in multiplayer )This hook can not override preferred carry angles of props such as the sawblade and the harpoon.
---@param ent Entity The entity to generate carry angles for
---@param ply Player The player who is holding the object
---@return Angle The preferred carry angles for the entity.
function GM:GetPreferredCarryAngles(ent, ply) end

---[CLIENT] Returns the color for the given entity's team. This is used in chat and deathnotice text.
---@param ent Entity Entity
---@return table Team Color
function GM:GetTeamColor(ent) end

---[CLIENT] Returns the team color for the given team index.
---@param team number Team index
---@return table Team Color
function GM:GetTeamNumColor(team) end

---[SHARED] Override this hook to disable/change ear-grabbing in your gamemode.
---@param ply Player Player
function GM:GrabEarAnimation(ply) end

---[SERVER] Called when an entity is released by a gravity gun.
--- See GM:PhysgunDrop for the Physics Gun drop variant.
---@param ply Player Player who is wielding the gravity gun
---@param ent Entity The entity that has been dropped
function GM:GravGunOnDropped(ply, ent) end

---[SERVER] Called when an entity is picked up by a gravity gun.
--- See GM:OnPlayerPhysicsPickup for the player +use pickup variant.
--- See GM:OnPhysgunPickup for the Physics Gun pickup variant.
---@param ply Player The player wielding the gravity gun
---@param ent Entity The entity that has been picked up by the gravity gun
function GM:GravGunOnPickedUp(ply, ent) end

---[SERVER] Called every tick to poll whether a player is allowed to pick up an entity with the gravity gun or not.
--- See GM:AllowPlayerPickup for the +USE pickup variant.
--- See GM:PhysgunPickup for the Physics Gun pickup variant.
--- Calls ENTITY:GravGunPickupAllowed on the entity being hovered every frame in Sandbox-derived gamemodes.
---@param ply Player The player wielding the gravity gun
---@param ent Entity The entity the player is attempting to pick up
---@return boolean Return true to allow entity pick up
function GM:GravGunPickupAllowed(ply, ent) end

---[SHARED] Called when an entity is about to be punted with the gravity gun (primary fire).
--- By default this function makes ENTITY:GravGunPunt work in Sandbox derived gamemodes.
---@param ply Player The player wielding the gravity gun
---@param ent Entity The entity the player is attempting to punt
---@return boolean Return true to allow and false to disallow.
function GM:GravGunPunt(ply, ent) end

---[CLIENT] Called when the mouse has been double clicked on any panel derived from CGModBase, such as the panel used by gui.EnableScreenClicker and the panel used by Panel:ParentToHUD.
--- By default this hook calls GM:GUIMousePressed.
---@param mouseCode number The code of the mouse button pressed, see Enums/MOUSE
---@param aimVector Vector A normalized vector pointing in the direction the client has clicked
function GM:GUIMouseDoublePressed(mouseCode, aimVector) end

---[CLIENT] Called whenever a players presses a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by gui.EnableScreenClicker and the panel used by Panel:ParentToHUD.
--- See GM:VGUIMousePressed for a hook that is called on all VGUI elements.
---@param mouseCode number The key that the player pressed using Enums/MOUSE.
---@param aimVector Vector A normalized direction vector local to the camera. Internally, this is  gui.ScreenToVector( gui.MousePos() ).
function GM:GUIMousePressed(mouseCode, aimVector) end

---[CLIENT] Called whenever a players releases a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by gui.EnableScreenClicker and the panel used by Panel:ParentToHUD.
---@param mouseCode number The key the player released, see Enums/MOUSE
---@param aimVector Vector A normalized direction vector local to the camera. Internally this is  gui.ScreenToVector( gui.MousePos() ).
function GM:GUIMouseReleased(mouseCode, aimVector) end

---[SHARED] Allows to override player driving animations.
---@param ply Player Player to process
---@return boolean Return true if we've changed/set the animation, false otherwise
function GM:HandlePlayerDriving(ply) end

---[SHARED] Allows to override player crouch animations.
---@param ply Player The player
---@param velocity number Players velocity
---@return boolean Return true if we've changed/set the animation, false otherwise
function GM:HandlePlayerDucking(ply, velocity) end

---[SHARED] Called every frame by the player model animation system. Allows to override player jumping animations.
---@param ply Player The player
---@param velocity number Players velocity
---@return boolean Return true if we've changed/set the animation, false otherwise
function GM:HandlePlayerJumping(ply, velocity) end

---[SHARED] Allows to override player landing animations.
---@param ply Player The player
---@param velocity number Players velocity
---@param onGround boolean Was the player on ground?
---@return boolean Return true if we've changed/set the animation, false otherwise
function GM:HandlePlayerLanding(ply, velocity, onGround) end

---[SHARED] Allows to override player noclip animations.
---@param ply Player The player
---@param velocity number Players velocity
---@return boolean Return true if we've changed/set the animation, false otherwise
function GM:HandlePlayerNoClipping(ply, velocity) end

---[SHARED] Allows to override player swimming animations.
---@param ply Player The player
---@param velocity number Players velocity
---@return boolean Return true if we've changed/set the animation, false otherwise
function GM:HandlePlayerSwimming(ply, velocity) end

---[SHARED] Allows to override player flying ( in mid-air, not noclipping ) animations.
---@param ply Player The player
---@param velocity number Players velocity
---@return boolean Return true if we've changed/set the animation, false otherwise
function GM:HandlePlayerVaulting(ply, velocity) end

---[CLIENT] Hides the team selection panel.
function GM:HideTeam() end

---[CLIENT] Called when the client has picked up ammo. Override to disable default HUD notification.
---@param itemName string Name of the item (ammo) picked up
---@param amount number Amount of the item (ammo) picked up
function GM:HUDAmmoPickedUp(itemName, amount) end

---[CLIENT] Renders the HUD pick-up history. Override to hide default or draw your own HUD.
function GM:HUDDrawPickupHistory() end

---[CLIENT] Called every frame to render the scoreboard.
--- It is recommended to use Derma and VGUI for this job instead of this hook. Called right after GM:HUDPaint.
--- This is a rendering hook which provides a 2d rendering context.
function GM:HUDDrawScoreBoard() end

---[CLIENT] Called from GM:HUDPaint to draw player info when you hover over a player with your crosshair or mouse.
---@return boolean Should the player info be drawn.
function GM:HUDDrawTargetID() end

---[CLIENT] Called when an item has been picked up. Override to disable the default HUD notification.
---@param itemName string Name of the picked up item
function GM:HUDItemPickedUp(itemName) end

---[CLIENT] Called whenever the HUD should be drawn.
--- Called right before GM:HUDDrawScoreBoard and after GM:HUDPaintBackground.
--- Not called when the Camera SWEP is equipped, or when the main menu is visible. GM:PostDrawHUD does not have this behavior.
--- See also GM:DrawOverlay.
--- Gets called only when r_drawvgui and CHudGMod are enabled and the game is not pausedThis is a rendering hook which provides a 2d rendering context.
function GM:HUDPaint() end

---[CLIENT] Called before GM:HUDPaint when the HUD background is being drawn.
--- Just like GM:HUDPaint, this hook will not be called when the main menu is visible. GM:PostDrawHUD does not have this behavior.
--- Things rendered in this hook will always appear behind things rendered in GM:HUDPaint.
--- This is a rendering hook which provides a 2d rendering context.
function GM:HUDPaintBackground() end

---[CLIENT] Called when the Gamemode is about to draw a given element on the client's HUD (heads-up display).
--- This hook is called HUNDREDS of times per second (more than 5 times per frame on average). You shouldn't be performing any computationally intensive operations.
---@param name string The name of the HUD element. You can find a full list of HUD elements for this hook here.
---@return boolean Return false to prevent the given element from being drawn on the client's screen.
function GM:HUDShouldDraw(name) end

---[CLIENT] Called when a weapon has been picked up. Override to disable the default HUD notification.
---@param weapon Weapon The picked up weapon
function GM:HUDWeaponPickedUp(weapon) end

---[SHARED] Called after the gamemode loads and starts.
function GM:Initialize() end

---[SHARED] Called after all the entities are initialized. Starting from this hook LocalPlayer will return valid object.
--- At this point the client only knows about the entities that are within the spawnpoints' PVS. For instance, if the server sends an entity that is not within this PVS, the client will receive it as NULL entity.
function GM:InitPostEntity() end

---[CLIENT] Allows you to modify the supplied User Command with mouse input. This could be used to make moving the mouse do funky things to view angles.
---@param cmd CUserCmd User command.
---@param x number The amount of mouse movement across the X axis this frame.
---@param y number The amount of mouse movement across the Y axis this frame.
---@param ang Angle The current view angle.
---@return boolean Return true if we modified something.
function GM:InputMouseApply(cmd, x, y, ang) end

---[SERVER] Check if a player can spawn at a certain spawnpoint.
---@param ply Player The player who is spawned
---@param spawnpoint Entity The spawnpoint entity (on the map).
---@param makeSuitable boolean If this is true, it'll kill any players blocking the spawnpoint.
---@return boolean Return true to indicate that the spawnpoint is suitable (Allow for the player to spawn here), false to prevent spawning.
function GM:IsSpawnpointSuitable(ply, spawnpoint, makeSuitable) end

---[SHARED] Called whenever a player pressed a key included within the IN keys.
--- For a more general purpose function that handles all kinds of input, see GM:PlayerButtonDown.
--- Due to this being a predicted hook, ParticleEffects created only serverside from this hook will not be networked to the client, so make sure to do that on both realms.
---@param ply Player The player pressing the key. If running client-side, this will always be LocalPlayer.
---@param key number The key that the player pressed using Enums/IN.
function GM:KeyPress(ply, key) end

---[SHARED] Runs when a IN key was released by a player.
--- For a more general purpose function that handles all kinds of input, see GM:PlayerButtonUp.
---@param ply Player The player releasing the key. If running client-side, this will always be LocalPlayer.
---@param key number The key that the player released using Enums/IN.
function GM:KeyRelease(ply, key) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Called from gm_load when the game should load a map.
---@param data string Compressed save data
---@param map string The name of the map the save was created on
---@param timestamp number The time the save was created on. Will always be 0.
function GM:LoadGModSave(data, map, timestamp) end

---[MENU] Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel.
---@return string, string string - Failure Reason.
---@return string, string string - the workshop ID of the missing map (if found). Can be an empty string
function GM:LoadGModSaveFailed() end

---[MENU] Called when menu.lua has finished loading.
function GM:MenuStart() end

---[SHARED] Override this gamemode function to disable mouth movement when talking on voice chat.
---@param ply Player Player in question
function GM:MouthMoveAnimation(ply) end

---[SHARED] The Move hook is called for you to manipulate the player's MoveData.
--- You shouldn't adjust the player's position in any way in the move hook. This is because due to prediction errors, the netcode might run the move hook multiple times as packets arrive late. Therefore you should only adjust the movedata construct in this hook.
--- Generally you shouldn't have to use this hook - if you want to make a custom move type you should look at the drive system.
--- This hook is called after GM:PlayerTick.
--- See Game Movement for an explanation on the move system.
---@param ply Player Player
---@param mv CMoveData Movement information
---@return boolean Return true to suppress default engine action.
function GM:Move(ply, mv) end

---[CLIENT] Returning true in this hook will cause it to render depth buffers defined with render.GetResolvedFullFrameDepth.
---@return boolean Render depth buffer
function GM:NeedsDepthPass() end

---[CLIENT] Called when an entity has been created over the network.
---@param ent Entity Created entity
function GM:NetworkEntityCreated(ent) end

---[SERVER] Called when a player's SteamID has been validated by Steam.
--- See also GM:PlayerAuthed.
--- This hook doesn't work intentionally in singleplayer because the SteamID is not validated.
---@param name string Player name
---@param steamID string Player SteamID
function GM:NetworkIDValidated(name, steamID) end

---[CLIENT] Called whenever this entity changes its transmission state for this LocalPlayer, such as exiting or re entering the PVS.
--- This is the best place to handle the reset of Entity:SetPredictable, as this would be usually called when the player lags and requests a full packet update.
--- When the entity stops transmitting, Entity:IsDormant will only return true after this hook.
---@param entity Entity The entity that changed its transmission state.
---@param shouldtransmit boolean True if we started transmitting to this client and false if we stopped.
function GM:NotifyShouldTransmit(entity, shouldtransmit) end

---[CLIENT] Called when a player has achieved an achievement. You can get the name and other information from an achievement ID with the achievements library.
---@param ply Player The player that earned the achievement
---@param achievement number The index of the achievement
function GM:OnAchievementAchieved(ply, achievement) end

---[CLIENT] Called when the local player presses TAB while having their chatbox opened.
---@param text string The currently typed into chatbox text
---@return string What should be placed into the chatbox instead of what currently is when player presses tab
function GM:OnChatTab(text) end

---[CLIENT] Called when the player cleans up something.
---@param name string The name of the cleanup type
---@return boolean Return false to suppress the cleanup notification.
function GM:OnCleanup(name) end

---[CLIENT] Called when the context menu keybind (+menu_context) is released, which by default is C.
--- This hook will not run if input.IsKeyTrapping returns true.
--- See also GM:OnContextMenuOpen.
function GM:OnContextMenuClose() end

---[CLIENT] Called when the context menu keybind (+menu_context) is pressed, which by default is c.
--- See also GM:OnContextMenuClose.
function GM:OnContextMenuOpen() end

---[SHARED] Called when the crazy physics detection detects an entity with Crazy Physics.
---@param ent Entity The entity that was detected as crazy
---@param physobj PhysObj The physics object that is going crazy
function GM:OnCrazyPhysics(ent, physobj) end

---[SERVER] Called when a player has been hurt by an explosion. Override to disable default sound effect.
---@param ply Player Player who has been hurt
---@param dmginfo CTakeDamageInfo Damage info from explsion
function GM:OnDamagedByExplosion(ply, dmginfo) end

---[SHARED] Called as soon as the entity is created. Very little of the entity's properties will be initialized at this stage. (keyvalues, classname, flags, anything), especially on the serverside.
--- Some entities on initial map spawn are passed through this hook, and then removed in the same frame. This is used by the engine to precache things like models and sounds, so always check their validity with IsValid.Removing the created entity during this event can lead to unexpected problems. Use timer.Simple( 0, .... ) to safely remove the entity.
---@param entity Entity The entity
function GM:OnEntityCreated(entity) end

---[SERVER] Called when the Entity:WaterLevel of an entity is changed.
--- This hook can be considered a physics callback, so changing collision rules (Entity:SetSolidFlags) in it may lead to a crash!
---@param entity Entity The entity.
---@param old number Previous water level.
---@param new number The new water level.
function GM:OnEntityWaterLevelChanged(entity, old, new) end

---[SHARED] Called when the gamemode is loaded.
--- LocalPlayer() returns NULL at the time this is run.
function GM:OnGamemodeLoaded() end

---[MENU] Called when a Lua error occurs, only works in the Menu realm.
--- Modify menu state Lua code at your own risk!
---@param error string The error that occurred.
---@param realm number Where the Lua error took place
---@param stack table The Lua error stack trace
---@param name string Title of the addon that is creating the Lua errors.
---@param id number Steam Workshop ID of the addon creating Lua errors, if it is an addon.
function GM:OnLuaError(error, realm, stack, name, id) end

---[MENU] Called when a Addon Conflict occurs, only works in the Menu realm.
---@param addon1 string The first Addon
---@param addon2 string The second Addon
---@param fileName string The File the Conflict occurred in.
function GM:OnNotifyAddonConflict(addon1, addon2, fileName) end

---[SERVER] Called whenever an NPC is killed.
---@param npc NPC The killed NPC
---@param attacker Entity The NPCs attacker, the entity that gets the kill credit, for example a player or an NPC.
---@param inflictor Entity Death inflictor. The entity that did the killing. Not necessarily a weapon.
function GM:OnNPCKilled(npc, attacker, inflictor) end

---[MENU] Called when a permission gets Granted or Revoked.
function GM:OnPermissionsChanged() end

---[SERVER] Called when a player freezes an entity with the physgun.
--- This is not called for players or NPCs being held with the physgun.Issue Tracker: 723
---@param weapon Entity The weapon that was used to freeze the entity.
---@param physobj PhysObj Physics object of the entity.
---@param ent Entity The target entity.
---@param ply Player The player who tried to freeze the entity.
---@return boolean Allows you to override whether the player can freeze the entity
function GM:OnPhysgunFreeze(weapon, physobj, ent, ply) end

---[SERVER] Called to when a player has successfully picked up an entity with their Physics Gun.
--- Not to be confused with GM:PhysgunPickup which is called multiple times to ask if the player should be able to pick up an entity.
--- See GM:GravGunOnPickedUp for the Gravity Gun pickup variant.
--- See GM:OnPlayerPhysicsPickup for the player +use pickup variant.
---@param ply Player The player that has picked up something using the physics gun.
---@param ent Entity The entity that was picked up.
function GM:OnPhysgunPickup(ply, ent) end

---[SERVER] Called when a player reloads with the physgun. Override this to disable default unfreezing behavior.
---@param physgun Weapon The physgun in question
---@param ply Player The player wielding the physgun
---@return boolean Whether the player can reload with the physgun or not
function GM:OnPhysgunReload(physgun, ply) end

---[SERVER] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use GM:PlayerChangedTeam instead, which works for every Player:SetTeam call.
--- Called when a player has changed team using GM:PlayerJoinTeam.
--- This hook will not work with hook.Add and it is only called manually from GM:PlayerJoinTeam by the base gamemode
---@param ply Player Player who has changed team
---@param oldTeam number Index of the team the player was originally in
---@param newTeam number Index of the team the player has changed to
function GM:OnPlayerChangedTeam(ply, oldTeam, newTeam) end

---[CLIENT] Called whenever a player sends a chat message. For the serverside equivalent, see GM:PlayerSay.
--- The text input of this hook depends on GM:PlayerSay. If it is suppressed on the server, it will be suppressed on the client. This also means, that a message surpressed with this hook will be still visible to other clients.
---@param ply Player The player
---@param text string The message's text
---@param teamChat boolean Is the player typing in team chat?
---@param isDead boolean Is the player dead?
---@return boolean Should the message be suppressed?
function GM:OnPlayerChat(ply, text, teamChat, isDead) end

---[SHARED] Called when a player makes contact with the ground after a jump or a fall.
---@param player Entity Player
---@param inWater boolean Did the player land in water?
---@param onFloater boolean Did the player land on an object floating in the water?
---@param speed number The speed at which the player hit the ground
---@return boolean Return true to suppress default action
function GM:OnPlayerHitGround(player, inWater, onFloater, speed) end

---[SERVER] Called when a player +use drops an entity.
---@param ply Player The player that dropped the object
---@param ent Entity The object that was dropped.
---@param thrown boolean Whether the object was throw or simply let go of.
function GM:OnPlayerPhysicsDrop(ply, ent, thrown) end

---[SERVER] Called when a player +use pickups up an entity. This will be called after the entity passes though GM:AllowPlayerPickup.
--- See GM:GravGunOnPickedUp for the Gravity Gun pickup variant.
--- See GM:OnPhysgunPickup for the Physics Gun pickup variant.
---@param ply Player The player that picked up the object
---@param ent Entity The object that was picked up.
function GM:OnPlayerPhysicsPickup(ply, ent) end

---[SHARED] Called when gamemode has been reloaded by auto refresh.
--- It seems that this event can be triggered more than once for a single refresh event.
function GM:OnReloaded() end

---[CLIENT] Called when the player's screen resolution of the game changes.
--- ScrW and ScrH will return the new values when this hook is called.
---@param oldWidth number The previous width of the game's window.
---@param oldHeight number The previous height of the game's window.
function GM:OnScreenSizeChanged(oldWidth, oldHeight) end

---[CLIENT] Called when a player releases the +menu bind on their keyboard, which is bound to Q by default.
function GM:OnSpawnMenuClose() end

---[CLIENT] Called when a player presses the +menu bind on their keyboard, which is bound to Q by default.
function GM:OnSpawnMenuOpen() end

---[CLIENT] Called when a DTextEntry gets focus.
--- This hook is run from DTextEntry:OnGetFocus and PANEL:OnMousePressed of DTextEntry.
---@param panel Panel The panel that got focus
function GM:OnTextEntryGetFocus(panel) end

---[CLIENT] Called when DTextEntry loses focus.
---@param panel Panel The panel that lost focus
function GM:OnTextEntryLoseFocus(panel) end

---[CLIENT] Called when the player undoes something.
---@param name string The name of the undo action
---@param customText string The custom text for the undo, set by undo.SetCustomUndoText
---@return boolean Return false to suppress the undo notification.
function GM:OnUndo(name, customText) end

---[SHARED] Called when the player changes their weapon to another one - and their viewmodel model changes.
--- This is not always called clientside.Issue Tracker: 2473
---@param viewmodel Entity The viewmodel that is changing
---@param oldModel string The old model
---@param newModel string The new model
function GM:OnViewModelChanged(viewmodel, oldModel, newModel) end

---[SHARED] Called when a player drops an entity with the Physgun.
--- See GM:GravGunOnDropped for the Gravity Gun drop variant.
---@param ply Player The player who dropped an entitiy
---@param ent Entity The dropped entity
function GM:PhysgunDrop(ply, ent) end

---[SHARED] Called to determine if a player should be able to pick up an entity with the Physics Gun.
--- See GM:OnPhysgunPickup for a hook which is called when a player has successfully picked up an entity.
--- See GM:GravGunPickupAllowed for the Gravity Gun pickup variant.
--- See GM:AllowPlayerPickup for the +USE pickup variant.
---@param player Player The player that is picking up using the Physics Gun.
---@param entity Entity The entity that is being picked up.
---@return boolean Returns whether the player can pick up the entity or not.
function GM:PhysgunPickup(player, entity) end

---[SHARED] Called after player's reserve ammo count changes.
---@param ply Player The player whose ammo is being affected.
---@param ammoID number The ammo type ID.
---@param oldCount number The old ammo count.
---@param newCount number The new ammo count.
function GM:PlayerAmmoChanged(ply, ammoID, oldCount, newCount) end

---[SERVER] Called after the player is authenticated by Steam. This hook will also be called in singleplayer. See also GM:NetworkIDValidated
--- CurTime returns 0 in this hook.Issue Tracker: 3026
---@param ply Player The player
---@param steamid string The player's SteamID
---@param uniqueid string The player's UniqueID
function GM:PlayerAuthed(ply, steamid, uniqueid) end

---[CLIENT] Runs when a bind has been pressed. Allows to block commands.
--- By using the "alias" console command, this hook can be effectively circumvented. To prevent this use input.TranslateAlias.
--- To stop the user from using +attack, +left and any other movement commands of the sort, please look into using GM:StartCommand instead.The third argument will always be true.Issue Tracker: 1176This does not run for function keys binds (F1-F12).Issue Tracker: 2888
---@param ply Player The player who used the command; this will always be equal to LocalPlayer.
---@param bind string The bind command.
---@param pressed boolean If the bind was activated or deactivated.
---@param code number The button code. See BUTTON_CODE Enums.
---@return boolean Return true to prevent the bind.
function GM:PlayerBindPress(ply, bind, pressed, code) end

---[SHARED] Called when a player presses a button.
--- This will not be called if player has a panel opened with keyboard input enabled, use PANEL:OnKeyCodePressed instead.
---@param ply Player Player who pressed the button
---@param button number The button, see Enums/BUTTON_CODE
function GM:PlayerButtonDown(ply, button) end

---[SHARED] Called when a player releases a button.
--- This will not be called if player has a panel opened with keyboard input enabled, use PANEL:OnKeyCodeReleased instead.
---@param ply Player Player who released the button
---@param button number The button, see Enums/BUTTON_CODE
function GM:PlayerButtonUp(ply, button) end

---[SERVER] Decides whether a player can hear another player using voice chat.
--- This hook is called several times a tick, so ensure your code is efficient.
---@param listener Player The listening player.
---@param talker Player The talking player.
---@return boolean, boolean boolean - Return true if the listener should hear the talker, false if they shouldn't.
---@return boolean, boolean boolean - 3D sound. If set to true, will fade out the sound the further away listener is from the  talker, the voice will also be in stereo, and not mono.
function GM:PlayerCanHearPlayersVoice(listener, talker) end

---[SERVER] Returns whether or not a player is allowed to join a team
---@param ply Player Player attempting to switch teams
---@param team number Index of the team
---@return boolean Allowed to switch
function GM:PlayerCanJoinTeam(ply, team) end

---[SERVER] Returns whether or not a player is allowed to pick an item up. (ammo, health, armor)
---@param ply Player Player attempting to pick up
---@param item Entity The item the player is attempting to pick up
---@return boolean Allow pick up
function GM:PlayerCanPickupItem(ply, item) end

---[SERVER] Returns whether or not a player is allowed to pick up a weapon.
---@param ply Player The player attempting to pick up the weapon.
---@param weapon Weapon The weapon entity in question.
---@return boolean Allowed pick up or not.
function GM:PlayerCanPickupWeapon(ply, weapon) end

---[SERVER] Returns whether or not the player can see the other player's chat.
--- The speaker parameter does not have to be a valid Player object which happens when console messages are displayed for example.
---@param text string The chat text
---@param teamOnly boolean If the message is team-only
---@param listener Player The player receiving the message
---@param speaker Player The player sending the message.
---@return boolean Can see other player's chat
function GM:PlayerCanSeePlayersChat(text, teamOnly, listener, speaker) end

---[SERVER] Called when a player has changed team using Player:SetTeam.
--- Avoid calling Player:SetTeam in this hook as it may cause an infinite loop!
---@param ply Player Player whose team has changed.
---@param oldTeam number Index of the team the player was originally in. See team.GetName and the team library.
---@param newTeam number Index of the team the player has changed to.
function GM:PlayerChangedTeam(ply, oldTeam, newTeam) end

---[SHARED] Called whenever a player is about to spawn something to see if they hit a limit for whatever they are spawning.
--- This hook will not be called in singleplayer, as singleplayer does not have limits.
---@param ply Player The player who is trying to spawn something.
---@param limitName string The limit's name.
---@param current number The amount of whatever player is trying to spawn that the player already has spawned.
---@param defaultMax number The default maximum count, as dictated by the sbox_max<limitName> convar on the server. This is the amount that will be used if nothing is returned from this hook.
---@return boolean Return false to indicate the limit was hit, or nothing otherwise
function GM:PlayerCheckLimit(ply, limitName, current, defaultMax) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called whenever a player's class is changed on the server-side with player_manager.SetPlayerClass.
---@param ply Player The player whose class has been changed.
---@param newID number The network ID of the player class's name string, or 0 if we are clearing a player class from the player. Pass this into util.NetworkIDToString to retrieve the proper name of the player class.
function GM:PlayerClassChanged(ply, newID) end

---[SHARED] Executes when a player connects to the server. Called before the player has been assigned a UserID and entity. See the player_connect gameevent for a version of this hook called after the player entity has been created.
--- This is only called clientside for listen server hosts.This is not called clientside for the local player.
---@param name string The player's name.
---@param ip string The player's IP address. Will be "none" for bots. This argument will only be passed serverside.This argument will only be passed serverside.This argument will only be passed serverside.
function GM:PlayerConnect(name, ip) end

---[SERVER] Called when a player is killed by Player:Kill or any other normal means.
--- This hook is not called if the player is killed by Player:KillSilent. See GM:PlayerSilentDeath for that.
--- 
--- GM:DoPlayerDeath is called before this hook.
--- GM:PostPlayerDeath is called after this hook.
--- 
--- See Player:LastHitGroup if you need to get the last hit hitgroup of the player.
--- Player:Alive will return true in this hook.
---@param victim Player The player who died
---@param inflictor Entity Item used to kill the victim
---@param attacker Entity Player or entity that killed the victim
function GM:PlayerDeath(victim, inflictor, attacker) end

---[SERVER] Returns whether or not the default death sound should be muted.
---@param ply Player The player
---@return boolean Mute death sound
function GM:PlayerDeathSound(ply) end

---[SERVER] Called every think while the player is dead. The return value will determine if the player respawns.
--- Overwriting this function will prevent players from respawning by pressing space or clicking.
--- This hook is not called for players with the FL_FROZEN flag applied.Issue Tracker: 1577
---@param ply Player The player affected in the hook.
---@return boolean Allow spawn
function GM:PlayerDeathThink(ply) end

---[SERVER] Called when a player leaves the server. See the player_disconnect gameevent for a shared version of this hook.
--- Player:SteamID, Player:SteamID64, and the like can return nil here.This is not called in single-player or listen servers for the host.Issue Tracker: 3523
---@param ply Player the player
function GM:PlayerDisconnected(ply) end

---[SHARED] Called to update the player's animation during a drive.
---@param ply Player The driving player
function GM:PlayerDriveAnimate(ply) end

---[SERVER] Called when a weapon is dropped by a player via Player:DropWeapon.
--- Also called when a weapon is removed from a player via Player:StripWeapon.
--- See also GM:WeaponEquip for a hook when a player picks up a weapon.
--- The weapon's Entity:GetOwner will be NULL at the time this hook is called.
--- WEAPON:OnDrop will be called before this hook is.
---@param owner Player The player who owned this weapon before it was dropped
---@param wep Weapon The weapon that was dropped
function GM:PlayerDroppedWeapon(owner, wep) end

---[CLIENT] Called when player stops using voice chat.
---@param ply Player Player who stopped talking
function GM:PlayerEndVoice(ply) end

---[SERVER] Called when a player enters a vehicle.
--- Called just after GM:CanPlayerEnterVehicle.
--- See also GM:PlayerLeaveVehicle.
---@param ply Player Player who entered vehicle.
---@param veh Vehicle Vehicle the player entered.
---@param role number The seat number.
function GM:PlayerEnteredVehicle(ply, veh, role) end

---[CLIENT] Called before firing clientside animation events on a player model.
--- See GM:PlayerHandleAnimEvent for the serverside version.
---@param ply Player The player who has triggered the event.
---@param pos Vector Position of the effect
---@param ang Angle Angle of the effect
---@param event number The event ID of happened even. See this page.
---@param name string Name of the event
---@return boolean Return true to disable the effect
function GM:PlayerFireAnimationEvent(ply, pos, ang, event, name) end

---[SHARED] Called whenever a player steps. Return true to mute the normal sound.
--- This hook is called on all clients.
---@param ply Player The stepping player
---@param pos Vector The position of the step
---@param foot number Foot that is stepped. 0 for left, 1 for right
---@param sound string Sound that is going to play
---@param volume number Volume of the footstep
---@param filter CRecipientFilter The Recipient filter of players who can hear the footstep
---@return boolean Prevent default step sound
function GM:PlayerFootstep(ply, pos, foot, sound, volume, filter) end

---[SERVER] Called when a player freezes an object.
---@param ply Player Player who has frozen an object
---@param ent Entity The frozen object
---@param physobj PhysObj The frozen physics object of the frozen entity ( For ragdolls )
function GM:PlayerFrozeObject(ply, ent, physobj) end

---[SERVER] Called before firing serverside animation events on the player models.
--- See GM:PlayerFireAnimationEvent for the clientside version.
---@param ply Player The player who has triggered the event.
---@param event number The event ID of happened even. See this page.
---@param eventTime number The absolute time this event occurred using CurTime.
---@param cycle number The frame this event occurred as a number between 0 and 1.
---@param type number Event type. See the Source SDK.
---@param options string Name or options of this event.
function GM:PlayerHandleAnimEvent(ply, event, eventTime, cycle, type, options) end

---[SERVER] Called when a player gets hurt.
---@param victim Player Victim
---@param attacker Entity Attacker Entity
---@param healthRemaining number Remaining Health
---@param damageTaken number Damage Taken
function GM:PlayerHurt(victim, attacker, healthRemaining, damageTaken) end

---[SERVER] Called when the player spawns for the first time.
--- See GM:PlayerSpawn for a hook called every player spawn.
--- This hook is called before the player has fully loaded, when the player is still in seeing the Starting Lua screen. For example, trying to use the Entity:GetModel function will return the default model (models/player.mdl).You can send net messages starting from the player_activate event (see Game_Events).Due to the above note, sending net messages to the spawned player in this hook are highly unreliable, and they most likely won't be received (more information here: https://github.com/Facepunch/garrysmod-requests/issues/718).
--- Workaround without networking:
--- local load_queue = {}
--- 
--- hook.Add("PlayerInitialSpawn", "myAddonName/Load", function(ply)
--- 	load_queue[ply] = true
--- end)
--- 
--- hook.Add("SetupMove", "myAddonName/Load", function(ply, _, cmd)
--- 	if load_queue[ply] and not cmd:IsForced() then
--- 		load_queue[ply] = nil
--- 
--- 		myAddon:OnPlayerNetReady(ply) -- Send what you need here!
--- 	end
--- end)
--- With networking:
--- -- CLIENT
--- hook.Add( "InitPostEntity", "Ready", function()
--- 	net.Start( "cool_addon_client_ready" )
--- 	net.SendToServer()
--- end )-- SERVER
--- util.AddNetworkString( "cool_addon_client_ready" )
--- 
--- net.Receive( "cool_addon_client_ready", function( len, ply )
--- 	-- Send what you need here!
--- end )
---@param player Player The player who spawned.
---@param transition boolean If true, the player just spawned from a map transition.
function GM:PlayerInitialSpawn(player, transition) end

---[SERVER] Makes the player join a specified team. This is a convenience function that calls Player:SetTeam and runs the GM:OnPlayerChangedTeam hook.
---@param ply Player Player to force
---@param team number The team to put player into
function GM:PlayerJoinTeam(ply, team) end

---[SERVER] Called when a player leaves a vehicle.
--- For vehicles with exit animations, this will be called at the end of the animation, not at the start!
---@param ply Player Player who left a vehicle.
---@param veh Vehicle Vehicle the player left.
function GM:PlayerLeaveVehicle(ply, veh) end

---[SERVER] Called to give players the default set of weapons.
--- This function may not work in your custom gamemode if you have overridden your GM:PlayerSpawn and you do not use self.BaseClass.PlayerSpawn or hook.Call.
---@param ply Player Player to give weapons to.
function GM:PlayerLoadout(ply) end

---[SHARED] Called when a player tries to switch noclip mode.
---@param ply Player The person who entered/exited noclip
---@param desiredState boolean Represents the noclip state (on/off) the user will enter if this hook allows them to.
---@return boolean Return false to disallow the switch.
function GM:PlayerNoClip(ply, desiredState) end

---[SHARED] Called after the player's think.
---@param ply Player The player
function GM:PlayerPostThink(ply) end

---[SERVER] Request a player to join the team. This function will check if the team is available to join or not.
--- This hook is called when the player runs "changeteam" in the console.
--- To prevent the player from changing teams, see GM:PlayerCanJoinTeam
---@param ply Player The player to try to put into a team
---@param team number Team to put the player into if the checks succeeded
function GM:PlayerRequestTeam(ply, team) end

---[SERVER] Called when a player dispatched a chat message. For the clientside equivalent, see GM:OnPlayerChat.
---@param sender Player The player which sent the message.
---@param text string The message's content.
---@param teamChat boolean Return false when the message is for everyone, true when the message is for the sender's team.
---@return string What to show instead of original text. Set to "" to stop the message from displaying.
function GM:PlayerSay(sender, text, teamChat) end

---[SERVER] Called to determine a spawn point for a player to spawn at.
--- The spawn point entity will also impact the player's eye angle. For example, if the entity is upside down, the player's view will be as well.
---@param ply Player The player who needs a spawn point
---@param transition boolean If true, the player just spawned from a map transition (trigger_changelevel). You probably want to not return an entity for that case to not override player's position.
---@return Entity The spawn point entity to spawn the player at
function GM:PlayerSelectSpawn(ply, transition) end

---[SERVER] Find a team spawn point entity for this player.
---@param team number Players team
---@param ply Player The player
---@return Entity The entity to use as a spawn point.
function GM:PlayerSelectTeamSpawn(team, ply) end

---[SERVER] Called whenever view model hands needs setting a model. By default this calls PLAYER:GetHandsModel and if that fails, sets the hands model according to his player model.
---@param ply Player The player whose hands needs a model set
---@param ent Entity The hands to set model of
function GM:PlayerSetHandsModel(ply, ent) end

---[SERVER] Called whenever a player spawns and must choose a model. A good place to assign a model to a player.
--- This function may not work in your custom gamemode if you have overridden your GM:PlayerSpawn and you do not use self.BaseClass.PlayerSpawn or hook.Call.
---@param ply Player The player being chosen
function GM:PlayerSetModel(ply) end

---[SERVER] Returns true if the player should take damage from the given attacker.
--- Applying damage from this hook to the player taking damage will lead to infinite loop/crash.
---@param ply Player The player
---@param attacker Entity The attacker
---@return boolean Allow damage
function GM:PlayerShouldTakeDamage(ply, attacker) end

---[SERVER] Allows to suppress player taunts.
---@param ply Player Player who tried to taunt
---@param act number Act ID of the taunt player tries to do, see Enums/ACT
---@return boolean Return false to disallow player taunting
function GM:PlayerShouldTaunt(ply, act) end

---[SERVER] Called when the player is killed by Player:KillSilent.
--- The player is already considered dead when this hook is called.
--- 
--- See GM:PlayerDeath for a hook which handles all other death causes.
--- GM:PostPlayerDeath is called after this hook.
--- 
--- Player:Alive will return true in this hook.
---@param ply Player The player who was killed
function GM:PlayerSilentDeath(ply) end

---[SERVER] Called whenever a player spawns, including respawns.
--- See GM:PlayerInitialSpawn for a hook called only the first time a player spawns.
--- See the player_spawn gameevent for a shared version of this hook.
--- By default, in "base" derived gamemodes, this hook will also call GM:PlayerLoadout and GM:PlayerSetModel, which may override your Entity:SetModel and Player:Give calls. Consider using the other hooks or a 0-second timer.
---@param player Player The player who spawned.
---@param transition boolean If true, the player just spawned from a map transition. You probably want to not touch player's weapons if this is set to true from this hook.
function GM:PlayerSpawn(player, transition) end

---[SERVER] Called to spawn the player as a spectator.
---@param ply Player The player to spawn as a spectator
function GM:PlayerSpawnAsSpectator(ply) end

---[SERVER] Determines if the player can spray using the impulse 201 console command.
---@param sprayer Player The player.
---@return boolean Return false to allow spraying, return true to prevent spraying.
function GM:PlayerSpray(sprayer) end

---[SERVER] Called when player starts taunting.
---@param ply Player The player who is taunting
---@param act number The sequence ID of the taunt
---@param length number Length of the taunt
function GM:PlayerStartTaunt(ply, act, length) end

---[CLIENT] Called when a player starts using voice chat.
---@param ply Player Player who started using voice chat.
---@return boolean Set true to hide player's CHudVoiceStatus.
function GM:PlayerStartVoice(ply) end

---[SHARED] Allows you to override the time between footsteps.
--- This hook is called on all clients.
---@param ply Player Player who is walking
---@param type number The type of footsteps, see Enums/STEPSOUNDTIME
---@param walking boolean Is the player walking or not ( +walk? )
---@return number Time between footsteps, in ms
function GM:PlayerStepSoundTime(ply, type, walking) end

---[SERVER] Called whenever a player attempts to either turn on or off their flashlight, returning false will deny the change.
--- Also gets called when using Player:Flashlight.
---@param ply Player The player who attempts to change their flashlight state.
---@param enabled boolean The new state the player requested, true for on, false for off.
---@return boolean Can toggle the flashlight or not
function GM:PlayerSwitchFlashlight(ply, enabled) end

---[SHARED] Called when a player attempts to switch their weapon.
--- Primary usage of this hook is to prevent/allow weapon switching, not to detect weapon switching. It will not be called for Player:SetActiveWeapon.
---@param player Player The player switching weapons.
---@param oldWeapon Weapon The previous weapon. Will be NULL if the previous weapon was removed or the player is switching from nothing.
---@param newWeapon Weapon The weapon the player switched to. Will be NULL if the player is switching to nothing. This can be NULL on the client if the weapon hasn't been created over the network yet.Issue Tracker: 2922This can be NULL on the client if the weapon hasn't been created over the network yet.Issue Tracker: 2922This can be NULL on the client if the weapon hasn't been created over the network yet.Issue Tracker: 2922
---@return boolean Return true to prevent weapon switch.
function GM:PlayerSwitchWeapon(player, oldWeapon, newWeapon) end

---[SHARED] The Move hook is called for you to manipulate the player's CMoveData. This hook is called moments before GM:Move and GM:PlayerNoClip.
--- This hook will not run when inside a vehicle. GM:VehicleMove will be called instead.
---@param player Player The player
---@param mv CMoveData The current movedata for the player.
function GM:PlayerTick(player, mv) end

---[SHARED] Called when a player has been hit by a trace and damaged (such as from a bullet). Returning true overrides the damage handling and prevents GM:ScalePlayerDamage from being called.
---@param ply Player The player that has been hit
---@param dmginfo CTakeDamageInfo The damage info of the bullet
---@param dir Vector Normalized vector direction of the bullet's path
---@param trace table The trace of the bullet's path, see Structures/TraceResult
---@return boolean Override engine handling
function GM:PlayerTraceAttack(ply, dmginfo, dir, trace) end

---[SERVER] Called when a player unfreezes an object.
---@param ply Player Player who has unfrozen an object
---@param ent Entity The unfrozen object
---@param physobj PhysObj The frozen physics object of the unfrozen entity ( For ragdolls )
function GM:PlayerUnfrozeObject(ply, ent, physobj) end

---[SERVER] Triggered when the player presses use on an object. Continuously runs until USE is released but will not activate other Entities until the USE key is released; dependent on activation type of the Entity.
---@param ply Player The player pressing the "use" key.
---@param ent Entity The entity which the player is looking at / activating USE on.
---@return boolean Return false if the player is not allowed to USE the entity. Do not return true if using a hook, otherwise other mods may not get a chance to block a player's use.
function GM:PlayerUse(ply, ent) end

---[CLIENT] Called when it's time to populate the context menu menu bar at the top.
---@param menubar Panel The DMenuBar itself.
function GM:PopulateMenuBar(menubar) end

---[SHARED] Called right after the map has cleaned up (usually because game.CleanUpMap was called)
--- See also GM:PreCleanupMap.
function GM:PostCleanupMap() end

---[CLIENT] Called right after the 2D skybox has been drawn - allowing you to draw over it.
--- This is a rendering hook which provides a 3d rendering context.
function GM:PostDraw2DSkyBox() end

---[CLIENT] Called after rendering effects. This is where halos are drawn. Called just before GM:PreDrawHUD.
--- This is a rendering hook which provides a 2d rendering context.
function GM:PostDrawEffects() end

---[CLIENT] Called after GM:PreDrawHUD,  GM:HUDPaintBackground and GM:HUDPaint but before  GM:DrawOverlay.
--- Unlike GM:HUDPaint(Background) hooks, this will still be called when the main menu is visible. And so will be GM:PreDrawHUD
--- This is a rendering hook which provides a 2d rendering context.
function GM:PostDrawHUD() end

---[CLIENT] Called after drawing opaque entities.
--- See also GM:PostDrawTranslucentRenderables and GM:PreDrawOpaqueRenderables.
--- This is a rendering hook which provides a 3d rendering context.
---@param bDrawingDepth boolean Whether the current draw is writing depth.
---@param bDrawingSkybox boolean Whether the current draw is drawing the 3D or 2D skybox. In case of 2D skyboxes it is possible for this hook to always be called with this parameter set to true.
---@param isDraw3DSkybox boolean Whether the current draw is drawing the 3D.
function GM:PostDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox) end

---[CLIENT] Called after the player hands are drawn.
---@param hands Entity This is the gmod_hands entity.
---@param vm Entity This is the view model entity.
---@param ply Player The the owner of the view model.
---@param weapon Weapon This is the weapon that is from the view model.
function GM:PostDrawPlayerHands(hands, vm, ply, weapon) end

---[CLIENT] Called after drawing the 3D skybox. This will not be called if skybox rendering was prevented via the GM:PreDrawSkyBox hook.
--- See also GM:PostDraw2DSkyBox.
--- This is a rendering hook which provides a 3d rendering context.
function GM:PostDrawSkyBox() end

---[CLIENT] Called after all translucent entities are drawn.
--- See also GM:PostDrawOpaqueRenderables and  GM:PreDrawTranslucentRenderables.
--- This is a rendering hook which provides a 3d rendering context.This is still called when r_drawentities or r_drawopaquerenderables is disabled.Issue Tracker: 3295This is not called when r_drawtranslucentworld is disabled.Issue Tracker: 3296
---@param bDrawingDepth boolean Whether the current call is writing depth.
---@param bDrawingSkybox boolean Whether the current draw is drawing the 3D or 2D skybox. In case of 2D skyboxes it is possible for this hook to always be called with this parameter set to true.
---@param isDraw3DSkybox boolean Whether the current draw is drawing the 3D.
function GM:PostDrawTranslucentRenderables(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox) end

---[CLIENT] Called after view model is drawn.
--- This is a rendering hook which provides a 3d rendering context.The 3D rendering context in this event is different from the main view. Every render operation will only be accurate with the view model entity.
---@param viewmodel Entity Players view model
---@param player Player The owner of the weapon/view model
---@param weapon Weapon The weapon the player is currently holding
function GM:PostDrawViewModel(viewmodel, player, weapon) end

---[SERVER] Called when an entity receives a damage event, after passing damage filters, etc.
--- Applying damage from this hook to the entity taking damage will lead to infinite loop/crash.
---@param ent Entity The entity that took the damage.
---@param dmg CTakeDamageInfo 
---@param took boolean Whether the entity actually took the damage. (For example, shooting a Strider will generate this event, but it won't take bullet damage).
function GM:PostEntityTakeDamage(ent, dmg, took) end

---[SHARED] Called after the gamemode has loaded.
function GM:PostGamemodeLoaded() end

---[SERVER] Called right after GM:DoPlayerDeath, GM:PlayerDeath and GM:PlayerSilentDeath.
--- This hook will be called for all deaths, including Player:KillSilent
--- The player is considered dead when this is hook is called, Player:Alive will return false.
---@param ply Player The player
function GM:PostPlayerDeath(ply) end

---[CLIENT] Called after a player in your PVS (Potential Visibility Set) was drawn.
--- This is a rendering hook which provides a 3d rendering context.
---@param ply Player The player that was drawn.
---@param flags number The STUDIO_ flags for this render operation.
function GM:PostPlayerDraw(ply, flags) end

---[CLIENT] Allows you to suppress post processing effect drawing.
---@param ppeffect string The classname of Post Processing effect
---@return boolean Return true/false depending on whether this post process should be allowed
function GM:PostProcessPermitted(ppeffect) end

---[CLIENT] Called after the frame has been rendered.
function GM:PostRender() end

---[CLIENT] Called after the VGUI has been drawn.
--- This is a rendering hook which provides a 2d rendering context.
function GM:PostRenderVGUI() end

---[SERVER] Called just after performing an undo.
---@param undo table The undo table. See Undo struct.
---@param count number The amount of props/actions undone. This will be 0 for undos that are skipped in cases where for example the entity that is meant to be undone is already deleted.
function GM:PostUndo(undo, count) end

---[SHARED] Called right before the map cleans up (usually because game.CleanUpMap was called)
--- See also GM:PostCleanupMap.
function GM:PreCleanupMap() end

---[CLIENT] Called just after GM:PreDrawViewModel and can technically be considered "PostDrawAllViewModels".
--- This is a rendering hook which provides a 3d rendering context.
function GM:PreDrawEffects() end

---[CLIENT] Called before rendering the halos. This is the place to call halo.Add. This hook is actually running inside of GM:PostDrawEffects.
--- This is a rendering hook which provides a 3d rendering context.
function GM:PreDrawHalos() end

---[CLIENT] Called just after GM:PostDrawEffects. Drawing anything in it seems to work incorrectly.
function GM:PreDrawHUD() end

---[CLIENT] Called before all opaque entities are drawn.
--- See also GM:PreDrawTranslucentRenderables and  GM:PostDrawOpaqueRenderables.
--- This is a rendering hook which provides a 3d rendering context.
---@param isDrawingDepth boolean Whether the current draw is writing depth.
---@param isDrawSkybox boolean Whether the current draw is drawing the 3D or 2D skybox. In case of 2D skyboxes it is possible for this hook to always be called with this parameter set to true.
---@param isDraw3DSkybox boolean Whether the current draw is drawing the 3D.
---@return boolean Return true to prevent opaque renderables from drawing.
function GM:PreDrawOpaqueRenderables(isDrawingDepth, isDrawSkybox, isDraw3DSkybox) end

---[CLIENT] Called before the player hands are drawn.
---@param hands Entity This is the gmod_hands entity before it is drawn.
---@param vm Entity This is the view model entity before it is drawn.
---@param ply Player The the owner of the view model.
---@param weapon Weapon This is the weapon that is from the view model.
---@return boolean Return true to prevent the viewmodel hands from rendering
function GM:PreDrawPlayerHands(hands, vm, ply, weapon) end

---[CLIENT] Called before the 3D sky box is drawn. This will not be called for maps with no 3D skybox, or when the 3d skybox is disabled. (r_3dsky 0)
--- See also GM:PostDrawSkyBox
--- This is a rendering hook which provides a 3d rendering context.
---@return boolean Return true to disable skybox drawing (both 2D and 3D skybox)
function GM:PreDrawSkyBox() end

---[CLIENT] Called before all the translucent entities are drawn.
--- See also GM:PreDrawOpaqueRenderables and  GM:PostDrawTranslucentRenderables.
--- This is a rendering hook which provides a 3d rendering context.This is still called when r_drawentities or r_drawopaquerenderables is disabled.Issue Tracker: 3295This is not called when r_drawtranslucentworld is disabled.Issue Tracker: 3296
---@param isDrawingDepth boolean Whether the current draw is writing depth.
---@param isDrawSkybox boolean Whether the current draw is drawing the 3D or 2D skybox. In case of 2D skyboxes it is possible for this hook to always be called with this parameter set to true.
---@param isDraw3DSkybox boolean Whether the current draw is drawing the 3D.
---@return boolean Return true to prevent translucent renderables from drawing.
function GM:PreDrawTranslucentRenderables(isDrawingDepth, isDrawSkybox, isDraw3DSkybox) end

---[CLIENT] Called before the view model has been drawn. This hook by default also calls this on weapons, so you can use WEAPON:PreDrawViewModel.
--- You can use GM:PreDrawEffects as a "PostDrawViewModel" hook as it is called just after the view model(s) are drawn.
--- This is a rendering hook which provides a 3d rendering context.
---@param vm Entity This is the view model entity before it is drawn. On server-side, this entity is the predicted view model.
---@param ply Player The owner of the view model.
---@param weapon Weapon This is the weapon that is from the view model.
---@return boolean Return true to prevent the default view model rendering. This also affects GM:PostDrawViewModel.
function GM:PreDrawViewModel(vm, ply, weapon) end

---[CLIENT] Called before view models and entities with RENDERGROUP_VIEWMODEL are drawn.
--- You can use GM:PreDrawEffects as a PostDrawViewModel hook as it is called just after the view model(s) are drawn.
--- This is a rendering hook which provides a 3d rendering context.
function GM:PreDrawViewModels() end

---[SHARED] Called before the gamemode is loaded.
function GM:PreGamemodeLoaded() end

---[CLIENT] Called before the player is drawn.
---@param player Player The player that is about to be drawn.
---@param flags number The STUDIO_ flags for this render operation.
---@return boolean Prevent default player rendering. Return true to hide the player.
function GM:PrePlayerDraw(player, flags) end

---[SHARED] Called by scripted_ents.Register.
---@param ent table The entity table to be registered.
---@param class string The class name to be assigned.
---@return boolean Return false to prevent the entity from being registered. Returning any other value has no effect.
function GM:PreRegisterSENT(ent, class) end

---[SHARED] Called when a Scripted Weapon (SWEP) is about to be registered, allowing addons to alter the weapon's SWEP table with custom data for later usage. Called internally from weapons.Register.
---@param swep table The SWEP table to be registered.
---@param class string The class name to be assigned.
---@return boolean Return false to prevent the weapon from being registered. Returning any other value has no effect.
function GM:PreRegisterSWEP(swep, class) end

---[CLIENT] Called before the renderer is about to start rendering the next frame.
---@return boolean Return true to prevent all rendering. This can make the whole game stop rendering anything.
function GM:PreRender() end

---[SERVER] Called just before performing an undo.
---@param undo table The undo table. See Undo struct.
function GM:PreUndo(undo) end

---[CLIENT] This will prevent in_attack from sending to server when player tries to shoot from C menu.
---@return boolean Return true to prevent screen clicks.
function GM:PreventScreenClicks() end

---[SHARED] Called when a prop has been destroyed.
---@param attacker Player The person who broke the prop.
---@param prop Entity The entity that has been broken by the attacker.
function GM:PropBreak(attacker, prop) end

---[CLIENT] Render the scene. Used by the Stereoscopy post-processing effect.
--- Materials rendered in this hook require $ignorez parameter to draw properly.
---@param origin Vector View origin
---@param angles Angle View angles
---@param fov number View FOV
---@return boolean Return true to override drawing the scene.
function GM:RenderScene(origin, angles, fov) end

---[CLIENT] Used to render post processing effects.
--- This is a rendering hook which provides a 2d rendering context.
function GM:RenderScreenspaceEffects() end

---[SHARED] Called when the game is reloaded from a Source Engine save system ( not the Sandbox saves or dupes ).
--- See GM:Saved for a hook that is called when such a save file is created.
function GM:Restored() end

---[SHARED] Called when the game is saved using the Source Engine save system (not the Sandbox saves or dupes).
--- See GM:Restored for a hook that is called when such a save file is loaded.
--- See also the saverestore for relevant functions.
function GM:Saved() end

---[SERVER] Called when an NPC takes damage.
--- This hook is called only when a specific hit group of the NPC is hit. In cases where the hitgroup doesn't matter, you should use GM:EntityTakeDamage instead!
---@param npc NPC The NPC that takes damage
---@param hitgroup number The hitgroup (hitbox) enum where the NPC took damage. See Enums/HITGROUP
---@param dmginfo CTakeDamageInfo Damage info
function GM:ScaleNPCDamage(npc, hitgroup, dmginfo) end

---[SHARED] This hook allows you to change how much damage a player receives when one takes damage to a specific body part.
--- This is called only for bullet damage a player receives, you should use GM:EntityTakeDamage instead if you need to detect ALL damage.
---@param ply Player The player taking damage.
---@param hitgroup number The hitgroup where the player took damage. See Enums/HITGROUP
---@param dmginfo CTakeDamageInfo The damage info.
---@return boolean Return true to prevent damage that this hook is called for, stop blood particle effects and blood decals. It is possible to return true only on client ( This will work only in multiplayer ) to stop the effects but still take damage.
function GM:ScalePlayerDamage(ply, hitgroup, dmginfo) end

---[CLIENT] Called when player released the scoreboard button (tab by default).
function GM:ScoreboardHide() end

---[CLIENT] Called when player presses the scoreboard button (tab by default).
---@return boolean Return true to prevent default scoreboard from showing.
function GM:ScoreboardShow() end

---[SHARED] Sets player run and sprint speeds.
--- This is not a hook. Treat this as a utility function to set the player's speed.
---@param ply Player The player to set the speed of.
---@param walkSpeed number The walk speed.
---@param runSpeed number The run speed.
function GM:SetPlayerSpeed(ply, walkSpeed, runSpeed) end

---[SHARED] SetupMove is called before the engine process movements. This allows us to override the players movement.
--- See Game Movement for an explanation on the move system.
---@param ply Player The player whose movement we are about to process
---@param mv CMoveData The move data to override/use
---@param cmd CUserCmd The command data
function GM:SetupMove(ply, mv, cmd) end

---[SERVER] Allows you to add extra positions to the player's PVS. This is the place to call AddOriginToPVS.
---@param ply Player The player
---@param viewEntity Entity Players Player:GetViewEntity
function GM:SetupPlayerVisibility(ply, viewEntity) end

---[CLIENT] Allows you to use render.Fog* functions to manipulate skybox fog.
--- This will not be called for maps with no 3D skybox, or when the 3d skybox is disabled. (r_3dsky 0)
---@param scale number The scale of 3D skybox
---@return boolean Return true to tell the engine that fog is set up
function GM:SetupSkyboxFog(scale) end

---[CLIENT] Allows you to use render.Fog* functions to manipulate world fog.
---@return boolean Return true to tell the engine that fog is set up
function GM:SetupWorldFog() end

---[SHARED] Called to decide whether a pair of entities should collide with each other. This is only called if Entity:SetCustomCollisionCheck was used on one or both entities.
--- Where applicable, consider using constraint.NoCollide or a logic_collision_pair entity instead - they are considerably easier to use and may be more appropriate in some situations.
--- This hook must return the same value consistently for the same pair of entities. If an entity changed in such a way that its collision rules change, you must call Entity:CollisionRulesChanged on that entity immediately - not in this hook.This hook can cause all physics to break under certain conditions.Issue Tracker: 642
---@param ent1 Entity The first entity in the collision poll.
---@param ent2 Entity The second entity in the collision poll.
---@return boolean Whether the entities should collide.
function GM:ShouldCollide(ent1, ent2) end

---[CLIENT] Called to determine if the LocalPlayer should be drawn.
--- If you're using this hook to draw a player for a GM:CalcView hook, then you may want to consider using the drawviewer variable you can use in your Structures/CamData table instead.
--- This hook has an internal cache that is reset at the start of every frame. This will prevent this hook from running in certain cases. This cache is reset in cam.Start and in a future update in render.RenderView when rendering extra views.
---@param ply Player The player.
---@return boolean true to draw the player, false to hide.
function GM:ShouldDrawLocalPlayer(ply) end

---[SERVER] Called when a player executes gm_showhelp console command. ( Default bind is f1 )
---@param ply Player Player who executed the command
function GM:ShowHelp(ply) end

---[SHARED] Called when a player executes gm_showspare1 console command ( Default bind is f3 ).
---@param ply Player Player who executed the command (or nil client-side).
function GM:ShowSpare1(ply) end

---[SHARED] Called when a player executes gm_showspare2 console command ( Default bind is f4 ).
---@param ply Player Player who executed the command (or nil client-side).
function GM:ShowSpare2(ply) end

---[SERVER] Called when a player executes gm_showteam console command. ( Default bind is f2 )
---@param ply Player Player who executed the command
function GM:ShowTeam(ply) end

---[SHARED] Called whenever the Lua environment is about to be shut down, for example on map change, or when the server is going to shut down.
--- Player:SteamID, Player:SteamID64, and the like will return nil for the listen host here but work fine for other players.
function GM:ShutDown() end

---[CLIENT] Called when spawn icon is generated.
---@param lastmodel string File path of previously generated model.
---@param imagename string File path of the generated icon.
---@param modelsleft number Amount of models left to generate.
function GM:SpawniconGenerated(lastmodel, imagename, modelsleft) end

---[CLIENT] Called when the Spawnmenu is Created.
function GM:SpawnMenuCreated() end

---[CLIENT] Runs when the user tries to open the chat box.
--- Returning true won't stop the chatbox from taking VGUI focus.Issue Tracker: 855
---@param isTeamChat boolean Whether the message was sent through team chat.
---@return boolean Return true to hide the default chat box.
function GM:StartChat(isTeamChat) end

---[SHARED] Allows you to change the players inputs before they are processed by the server.
--- This is basically a shared version of GM:CreateMove.
--- This function is also called for bots, making it the best solution to control them so farThis hook is predicted, but not by usual means, this hook is called when a CUserCmd is generated on the client, and on the server when it is received, so it is necessary for this hook to be called clientside even on singleplayer
---@param ply Player The player
---@param ucmd CUserCmd The usercommand
function GM:StartCommand(ply, ucmd) end

---[SHARED] Called right before an entity starts driving. Overriding this hook will cause it to not call drive.Start and the player will not begin driving the entity.
---@param ent Entity The entity that is going to be driven
---@param ply Player The player that is going to drive the entity
function GM:StartEntityDriving(ent, ply) end

---[MENU] Called when you start a new game via the menu.
function GM:StartGame() end

---[SHARED] Called every frame on client and server. This will be the same as GM:Tick on the server when there is no lag, but will only be called once every processed server frame during lag.
--- See GM:Tick for a hook that runs every tick on both the client and server.
--- This hook WILL NOT run if the server is empty, unless you set the ConVar sv_hibernate_think to 1
function GM:Think() end

---[SHARED] Called every server tick. Serverside, this is similar to GM:Think.
--- This hook WILL NOT run if the server is empty, unless you set the ConVar sv_hibernate_think to 1
function GM:Tick() end

---[SHARED] Allows you to translate player activities.
---@param ply Player The player
---@param act number The activity. See Enums/ACT
---@return number The new, translated activity
function GM:TranslateActivity(ply, act) end

---[SHARED] Animation updates (pose params etc) should be done here.
---@param ply Player The player to update the animation info for.
---@param velocity Vector The player's velocity.
---@param maxSeqGroundSpeed number Speed of the animation - used for playback rate scaling.
function GM:UpdateAnimation(ply, velocity, maxSeqGroundSpeed) end

---[SERVER] Called when a variable is edited on an Entity (called by Edit Properties... menu). See Editable Entities for more information.
---@param ent Entity The entity being edited
---@param ply Player The player doing the editing
---@param key string The name of the variable
---@param val string The new value, as a string which will later be converted to its appropriate type
---@param editor table The edit table defined in Entity:NetworkVar
function GM:VariableEdited(ent, ply, key, val, editor) end

---[SHARED] Called when you are driving a vehicle. This hook works just like GM:Move.
--- This hook is called before GM:Move and will be called when GM:PlayerTick is not.
---@param ply Player Player who is driving the vehicle
---@param veh Vehicle The vehicle being driven
---@param mv CMoveData Move data
function GM:VehicleMove(ply, veh, mv) end

---[CLIENT] Called when user clicks on a VGUI panel.
---@param button number The button that was pressed, see Enums/MOUSE
---@return boolean Return true if the mouse click should be ignored or not.
function GM:VGUIMousePressAllowed(button) end

---[CLIENT] Called when a mouse button is pressed on a VGUI element or menu.
---@param pnl Panel Panel that currently has focus.
---@param mouseCode number The key that the player pressed using Enums/MOUSE.
function GM:VGUIMousePressed(pnl, mouseCode) end

---[SERVER] Called as a weapon entity is picked up by a player.
--- See also GM:PlayerDroppedWeapon.
--- At the time when this hook is called Entity:GetOwner will return NULL. The owner is set on the next frame.This will not be called when picking up a weapon you already have as the weapon will be removed and WEAPON:EquipAmmo will be called instead.
---@param weapon Weapon The equipped weapon.
---@param owner Player The player that is picking up the weapon.
function GM:WeaponEquip(weapon, owner) end

---[MENU] Called when an addon from the Steam workshop finishes downloading. Used by default to update details on the workshop downloading panel.
---@param id number Workshop ID of addon.
---@param title string Name of addon.
function GM:WorkshopDownloadedFile(id, title) end

---[MENU] Called when an addon from the Steam workshop begins downloading. Used by default to place details on the workshop downloading panel.
---@param id number Workshop ID of addon.
---@param imageID number ID of addon's preview image. For example, for Extended Spawnmenu addon, the image URL is http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/ So, the value of this argument would be 702859018846106764.http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/
---@param title string Name of addon.
---@param size number File size of addon in bytes.
function GM:WorkshopDownloadFile(id, imageID, title, size) end

---[MENU] Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel.
---@param id number Workshop ID of addon.
---@param imageID number ID of addon's preview image. For example, for Extended Spawnmenu addon, the image URL is http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/ So, the value of this argument would be 702859018846106764.http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/
---@param title string Name of addon.
---@param downloaded number Current bytes of addon downloaded.
---@param expected number Expected file size of addon in bytes.
function GM:WorkshopDownloadProgress(id, imageID, title, downloaded, expected) end

---[MENU] Called after GM:WorkshopStart.
---@param remain number Remaining addons to download
---@param total number Total addons needing to be downloaded
function GM:WorkshopDownloadTotals(remain, total) end

---[MENU] Called when downloading content from Steam workshop ends. Used by default to hide fancy workshop downloading panel.
function GM:WorkshopEnd() end

---[MENU] Called while an addon from the Steam workshop is extracting. Used by default to update details on the fancy workshop download panel.
---@param id number Workshop ID of addon.
---@param ImageID number ID of addon's preview image. For example, for Extended Spawnmenu addon, the image URL is http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/ So, the value of this argument would be 702859018846106764.http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/
---@param title string Name of addon.
---@param percent number Current bytes of addon extracted.
function GM:WorkshopExtractProgress(id, ImageID, title, percent) end

---[MENU] Called when downloading content from Steam workshop begins. Used by default to show fancy workshop downloading panel.
--- The order of Workshop hooks is this:
--- 
--- WorkshopStart
--- WorkshopDownloadTotals
--- 
--- 
--- These are called for each new item:
--- 
--- 
--- WorkshopDownloadFile
--- WorkshopDownloadProgress - This is called until the file is finished
--- WorkshopDownloadedFile
--- WorkshopEnd (this ones called once)
function GM:WorkshopStart() end

---[MENU] Called when UGC subscription status changes.
function GM:WorkshopSubscriptionsChanged() end

---[MENU] Called when a Workshop Message is received?. Currently, it seems like the message will be #ugc.mounting every time.
--- When does this exactly get called?. If an addon is subscribed, unsubscribed, error occurs or on any event?
---@param message string The Message from the Workshop. Will be a phrase that needs to be translated.
function GM:WorkshopSubscriptionsMessage(message) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the engine when the game initially fetches subscriptions to be displayed on the bottom of the main menu screen.
---@param num number Amount of subscribed addons that have info retrieved.
---@param max number Total amount of subscribed addons that need their info retrieved.
function GM:WorkshopSubscriptionsProgress(num, max) end

GWEN = {}

---[CLIENT] Used in derma skins to create a bordered rectangle drawing function from an image. The texture is taken either from last argument or from SKIN.GwenTexture when material source it's not supplied
---@param x number The X coordinate on the texture
---@param y number The Y coordinate on the texture
---@param w number Width of the area on texture
---@param h number Height of the area on texture
---@param left number Left width of border
---@param top number Top width of border
---@param right number Right width of border
---@param bottom number Bottom width of border
---@param source IMaterial Texture of source image to create a bordered rectangle from. Uses SKIN.GwenTexture if not set.
---@return function The drawing function. Arguments are:  number x - X coordinate for the box number y - Y coordinate for the box number w - Width of the box number h - Height of the box table clr - Optional color, default is white. Uses the Color
function GWEN.CreateTextureBorder(x, y, w, h, left, top, right, bottom, source) end

---[CLIENT] Used in derma skins to create a rectangle drawing function from an image. The rectangle will not be scaled, but instead it will be drawn in the center of the box. The texture is taken from SKIN.GwenTexture when mat_override it's not defined
---@param x number The X coordinate on the texture
---@param y number The Y coordinate on the texture
---@param w number Width of the area on texture
---@param h number Height of the area on texture
---@param matOverride IMaterial Optional. Sets the material this function will use
---@return function The drawing function. Arguments are: number x - X coordinate for the box number y - Y coordinate for the box number w - Width of the box number h - Height of the box table clr - Optional color, default is white. Uses the Color
function GWEN.CreateTextureCentered(x, y, w, h, matOverride) end

---[CLIENT] Used in derma skins to create a rectangle drawing function from an image. The texture of the rectangle will be scaled. The texture is taken from SKIN.GwenTexture when mat_override it's not supplied
---@param x number The X coordinate on the texture
---@param y number The Y coordinate on the texture
---@param w number Width of the area on texture
---@param h number Height of the area on texture
---@param matOverride IMaterial Optional. Sets the material this function will use
---@return function The drawing function. Arguments are:  number x - X coordinate for the box number y - Y coordinate for the box number w - Width of the box number h - Height of the box table clr - Optional color, default is white. Uses the Color
function GWEN.CreateTextureNormal(x, y, w, h, matOverride) end

---[CLIENT] When used in a material skin, it returns a color value from a point in the skin image.
---@param x number X position of the pixel to get the color from.
---@param y number Y position of the pixel to get the color from.
---@return table The color of the point on the skin as a Color.
function GWEN.TextureColor(x, y) end

---[SHARED] Adds simple Get/Set accessor functions on the specified table.
--- Can also force the value to be set to a number, bool or string.
---@param tab table The table to add the accessor functions to.
---@param key any The key of the table to be get/set.
---@param name string The name of the functions (will be prefixed with Get and Set).
---@param force number The type the setter should force to (uses Enums/FORCE).
function AccessorFunc(tab, key, name, force) end

---[SHARED] Defines a global entity class variable with an automatic value in order to prevent collisions with other Enums/CLASS. You should prefix your variable with CLASS_ for consistency.
---@param name string The name of the new enum/global variable.
function Add_NPC_Class(name) end

---[MENU] Adds the specified image path to the main menu background pool. Image can be png or jpeg.
---@param path string Path to the image.
function AddBackgroundImage(path) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Use concommand.Add instead.
--- Tells the engine to register a console command. If the command was ran, the engine calls concommand.Run.
---@param name string The name of the console command to add.
---@param helpText string The help text.
---@param flags number Concommand flags using Enums/FCVAR
function AddConsoleCommand(name, helpText, flags) end

---[SHARED] Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.
--- If the file trying to be added is empty, an error will occur, and the file will not be sent to the client
--- The string cannot have whitespace.This function is not needed for scripts located in lua/autorun/ and lua/autorun/client/: they are automatically sent to clients.
--- You can add up to 8192 files. Each file can be up to 64KB compressed (LZMA)
---@param file string The name/path to the Lua file that should be sent, relative to the garrysmod/lua folder. If no parameter is specified, it sends the current file. The file path can be relative to the script it's ran from. For example, if your script is in lua/myfolder/stuff.lua, calling AddCSLuaFile("otherstuff.lua") and AddCSLuaFile("myfolder/otherstuff.lua") is the same thing. Please make sure your file names are unique, the filesystem is shared across all addons, so a file named lua/config.lua in your addon may be overwritten by the same file in another addon.Please make sure your file names are unique, the filesystem is shared across all addons, so a file named lua/config.lua in your addon may be overwritten by the same file in another addon.Please make sure your file names are unique, the filesystem is shared across all addons, so a file named lua/config.lua in your addon may be overwritten by the same file in another addon.
function AddCSLuaFile(file) end

---[CLIENT] Loads the specified image from the /cache folder, used in combination steamworks.Download. Most addons will provide a 512x512 png image.
---@param name string The name of the file.
---@return IMaterial The material, returns nil if the cached file is not an image.
function AddonMaterial(name) end

---[SERVER] Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.
---@param position Vector The origin to add.
function AddOriginToPVS(position) end

---[CLIENT] This function creates a Custom Category in the Spawnlist. Use GenerateSpawnlistFromPath if you want to create a category with the contents of a folder.
--- Using this function before SANDBOX:PopulateContent has been called will result in an error
---@param pnlContent panel The SMContentPanel of the Node
---@param node panel The Node
---@param parentid number The ParentID to use
---@param customProps table The Table with the Contents of the new Category
function AddPropsOfParent(pnlContent, node, parentid, customProps) end

---[CLIENT] This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.
--- This function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.
--- Contrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.
--- See SANDBOX:PaintWorldTips for more information.
--- This function is only available in Sandbox and its derivatives
---@param entindex number This argument is no longer used; it has no effect on anything. You can use nil in this argument.
---@param text string The text for the world tip to display.
---@param dieTime number This argument is no longer used; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.
---@param pos Vector Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.
---@param ent Entity Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in pos with the Entity's position.
function AddWorldTip(entindex, text, dieTime, pos, ent) end

---[SHARED] Creates an Angle object.
--- This function is very expensive when used in often running hooks or in operations requiring very frequent calls (like loops for example). It is better to store the angle in a variable or to use the default angle available.
---@param pitch number The pitch value of the angle. If this is an Angle, this function will return a copy of the given angle. If this is a string, this function will try to parse the string as a angle. If it fails, it returns a 0 angle. (See examples)
---@param yaw number The yaw value of the angle.
---@param roll number The roll value of the angle.
---@return Angle Created angle
function Angle(pitch, yaw, roll) end

---[SHARED] Returns an angle with a randomized pitch, yaw, and roll between min(inclusive), max(exclusive).
---@param min number Min bound inclusive.
---@param max number Max bound exclusive.
---@return Angle The randomly generated angle.
function AngleRand(min, max) end

---[SHARED] If the result of the first argument is false or nil, an error is thrown with the second argument as the message.
---@param expression any The expression to assert.
---@param errorMessage string The error message to throw when assertion fails. This is only type-checked if the assertion fails.
---@param ... ... Any arguments past the error message will be returned by a successful assert.
---@return any, any, ... any - If successful, returns the first argument.
---@return any, any, ... any - If successful, returns the error message. This will be nil if the second argument wasn't specified. Since the second argument is only type-checked if the assertion fails, this doesn't have to be a string.
---@return any, any, ... ... - Returns any arguments past the error message.
function assert(expression, errorMessage, ...) end

---[SHARED] Sends the specified Lua code to all connected clients and executes it.
--- If you need to use this function more than once, consider using net library.
--- Send net message and make the entire code you want to execute in net.Receive on client.
--- If executed clientside it won't do anything.
---@param code string The code to be executed. Capped at length of 254 characters.
function BroadcastLua(code) end

---[SHARED] Dumps the networked variables of all entities into one table and returns it.
---@return table Format:  key = Entity for NWVars or number (always 0) for global vars value = table formatted as:  key = string var name value = any type var value
function BuildNetworkedVarsTable() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.
---@return boolean Can add to favorites
function CanAddServerToFavorites() end

---[MENU] Aborts joining of the server you are currently joining.
function CancelLoading() end

---[MENU] Sets the active main menu background image to a random entry from the background images pool. Images are added with AddBackgroundImage.
---@param currentgm string Apparently does nothing.
function ChangeBackground(currentgm) end

---[CLIENT] Automatically called by the engine when a panel is hovered over with the mouse
---@param panel Panel Panel that has been hovered over
function ChangeTooltip(panel) end

---[MENU] Empties the pool of main menu background images.
function ClearBackgroundImages() end

---[MENU] Clears all Lua Errors with the given group id.
---@param group_id string group_id to remove. Will be "[addon-name]-0" or "Other-"
function ClearLuaErrorGroup(group_id) end

---[MENU] Removes the given Problem from the Problems table and refreshes the Problems panel.
---@param id string The Problem ID to remove
function ClearProblem(id) end

---[CLIENT] Creates a non physical entity that only exists on the client. See also ents.CreateClientProp.
--- Parented clientside models will become detached if the parent entity leaves the PVS. A workaround is available on its github page.Issue Tracker: 861Clientside entities are not garbage-collected, thus you must store a reference to the object and call CSEnt:Remove manually. To workaround this bug, you need to hold a reference (in a variable) to the entity and remove it when necessary.Issue Tracker: 1387Clientside models will occasionally delete themselves during high server lag.Issue Tracker: 3184
---@param model string The file path to the model. Model must be precached with util.PrecacheModel on the server before usage.Model must be precached with util.PrecacheModel on the server before usage.Model must be precached with util.PrecacheModel on the server before usage.
---@param renderGroup number The render group of the entity for the clientside leaf system, see Enums/RENDERGROUP.
---@return CSEnt Created client-side model (C_BaseFlex).
function ClientsideModel(model, renderGroup) end

---[CLIENT] Creates a fully clientside ragdoll.
--- The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.
--- There's no need to call Entity:Spawn on this entity.
--- The physics won't initialize at all if the model hasn't been precached serverside first.Clientside entities are not garbage-collected, thus you must store a reference to the object and call CSEnt:Remove manually.Issue Tracker: 1387
---@param model string The file path to the model. Model must be precached with util.PrecacheModel on the server before usage.Model must be precached with util.PrecacheModel on the server before usage.Model must be precached with util.PrecacheModel on the server before usage.
---@param renderGroup number The Enums/RENDERGROUP to assign.
---@return CSEnt The newly created client-side ragdoll. ( C_ClientRagdoll )
function ClientsideRagdoll(model, renderGroup) end

---[CLIENT] Creates a scene entity based on the scene name and the entity.
---@param name string The name of the scene.
---@param targetEnt Entity The entity to play the scene on.
---@return CSEnt C_SceneEntity
function ClientsideScene(name, targetEnt) end

---[CLIENT] Closes all Derma menus that have been passed to RegisterDermaMenuForClose and calls GM:CloseDermaMenus
function CloseDermaMenus() end

---[SHARED] Executes the specified action on the garbage collector.
---@param action string The action to run. Valid actions are collect, stop, restart, count, step, setpause, setstepmul and isrunning. isrunning is only available on the x86-64 versions, because of the difference in the LuaJIT version. See hereisrunning is only available on the x86-64 versions, because of the difference in the LuaJIT version. See hereisrunning is only available on the x86-64 versions, because of the difference in the LuaJIT version. See here
---@param arg number The argument of the specified action, only applicable for step, setpause and setstepmul.
---@return any If the action is count this is the number of kilobytes of memory used by Lua. If the action is step this is true if a garbage collection cycle was finished. If the action is setpause this is the previous value for the GC's pause. If the action is setstepmul this is the previous value for the GC's step.
function collectgarbage(action, arg) end

---[SHARED] Creates a Color.
--- This function is very expensive when used in rendering hooks or in operations requiring very frequent calls (like loops for example). It is better to store the color in a variable or to use the default colors available.
---@param r number An integer from 0-255 describing the red value of the color.
---@param g number An integer from 0-255 describing the green value of the color.
---@param b number An integer from 0-255 describing the blue value of the color.
---@param a number An integer from 0-255 describing the alpha (transparency) of the color.
---@return table The created Color.
function Color(r, g, b, a) end

---[SHARED] Returns a new Color with the RGB components of the given Color and the alpha value specified.
---@param color table The Color from which to take RGB values. This color will not be modified.
---@param alpha number The new alpha value, a number between 0 and 255. Values above 255 will be clamped.
---@return table The new Color with the modified alpha value
function ColorAlpha(color, alpha) end

---[SHARED] Creates a Color with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.
---@param a boolean Should alpha be randomized.
---@return table The created Color.
function ColorRand(a) end

---[SHARED] Converts a Color into HSL color space.
---@param color table The Color.
---@return number, number, number number - The hue in degrees [0, 360].
---@return number, number, number number - The saturation in the range [0, 1].
---@return number, number, number number - The lightness in the range [0, 1].
function ColorToHSL(color) end

---[SHARED] Converts a Color into HSV color space.
---@param color table The Color.
---@return number, number, number number - The hue in degrees [0, 360].
---@return number, number, number number - The saturation in the range [0, 1].
---@return number, number, number number - The value in the range [0, 1].
function ColorToHSV(color) end

---[SHARED] Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.
---@param path string Path to the file, relative to the garrysmod/lua/ directory.
---@return function The function which executes the script.
function CompileFile(path) end

---[SHARED] This function will compile the code argument as lua code and return a function that will execute that code.
--- Please note that this function will not automatically execute the given code after compiling it.
---@param code string The code to compile.
---@param identifier string An identifier in case an error is thrown. (The same identifier can be used multiple times)
---@param HandleError boolean If false this function will return an error string instead of throwing an error.
---@return function A function that, when called, will execute the given code. Returns the error string if there was a Lua error and third argument is false.
function CompileString(code, identifier, HandleError) end

---[MENU] Returns a table of console command names beginning with the given text.
---@param text string Text that the console commands must begin with.
---@return table Table of console command names.
function ConsoleAutoComplete(text) end

---[SHARED] Returns whether a ConVar with the given name exists or not
---@param name string Name of the ConVar.
---@return boolean True if the ConVar exists, false otherwise.
function ConVarExists(name) end

---[SHARED] Makes a clientside-only console variable
--- This function is a wrapper of CreateConVar, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when shouldsave and userinfo are true, respectively.
--- Although this function is shared, it should only be used clientside.
---@param name string Name of the ConVar to be created and able to be accessed. This cannot be a name of existing console command or console variable. It will silently fail if it is.
---@param default string Default value of the ConVar.
---@param shouldsave boolean Should the ConVar be saved across sessions in the cfg/client.vdf file.
---@param userinfo boolean Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using Player:GetInfoNum and similar functions.
---@param helptext string Help text to display in the console.
---@param min number If set, the convar cannot be changed to a number lower than this value.
---@param max number If set, the convar cannot be changed to a number higher than this value.
---@return ConVar Created convar.
function CreateClientConVar(name, default, shouldsave, userinfo, helptext, min, max) end

---[CLIENT] Creates a ContextMenu.
--- This is used internally - although you're able to use it you probably shouldn't.
function CreateContextMenu() end

---[SHARED] Creates a console variable (ConVar), in general these are for things like gamemode/server settings.
--- Do not use the FCVAR_NEVER_AS_STRING and FCVAR_REPLICATED flags together, as this can cause the console variable to have strange values on the client.
---@param name string Name of the ConVar. This cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object.
---@param value string Default value of the convar. Can also be a number.
---@param flags number Flags of the convar, see Enums/FCVAR, either as bitflag or as table.
---@param helptext string The help text to show in the console.
---@param min number If set, the ConVar cannot be changed to a number lower than this value.
---@param max number If set, the ConVar cannot be changed to a number higher than this value.
---@return ConVar The convar created.
function CreateConVar(name, value, flags, helptext, min, max) end

---[CLIENT] Creates a new material with the specified name and shader.
--- Materials created with this function can be used in Entity:SetMaterial and Entity:SetSubMaterial by prepending a "!" to their material name argument.This does not work with patch materials..pngs must be loaded with Material before being used with this function.Issue Tracker: 1531This will not create a new material if another material object with the same name already exists.Issue Tracker: 3103
---@param name string The material name. Must be unique.
---@param shaderName string The shader name. See Shaders.
---@param materialData table Key-value table that contains shader parameters and proxies.  See: List of Shader Parameters on Valve Developers Wiki and each shader's page from .  Unlike IMaterial:SetTexture, this table will not accept ITexture values. Instead, use the texture's name (see ITexture:GetName).Unlike IMaterial:SetTexture, this table will not accept ITexture values. Instead, use the texture's name (see ITexture:GetName).Unlike IMaterial:SetTexture, this table will not accept ITexture values. Instead, use the texture's name (see ITexture:GetName).
---@return IMaterial Created material
function CreateMaterial(name, shaderName, materialData) end

---[MENU] Creates a new Preset from the given JSON string.
---@param data string A JSON string containing all necessary informations. JSON structue should be Structures/Preset
function CreateNewAddonPreset(data) end

---[CLIENT] Creates a new particle system.
--- The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!
---@param ent Entity The entity to attach the control point to.
---@param effect string The name of the effect to create. It must be precached.
---@param partAttachment number See Enums/PATTACH.
---@param entAttachment number The attachment ID on the entity to attach the particle system to
---@param offset Vector The offset from the Entity:GetPos of the entity we are attaching this CP to.
---@return CNewParticleEffect The created particle system.
function CreateParticleSystem(ent, effect, partAttachment, entAttachment, offset) end

---[SHARED] Creates a new PhysCollide from the given bounds.
--- This fails to create planes or points - no components of the mins or maxs can be the same.Issue Tracker: 3568
---@param mins Vector Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See OrderVectors.
---@param maxs Vector Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.
---@return PhysCollide The new PhysCollide. This will be a NULL PhysCollide (PhysCollide:IsValid returns false) if given bad vectors or no more PhysCollides can be created in the physics engine.
function CreatePhysCollideBox(mins, maxs) end

---[SHARED] Creates PhysCollide objects for every physics object the model has. The model must be precached with util.PrecacheModel before being used with this function.
---@param modelName string Model path to get the collision objects of.
---@return table Table of PhysCollide objects. The number of entries will match the model's physics object count. See also Entity:GetPhysicsObjectCount. Returns no value if the model doesn't exist, or has not been precached.
function CreatePhysCollidesFromModel(modelName) end

---[SHARED] Returns a sound parented to the specified entity.
--- You can only create one CSoundPatch per audio file, per entity at the same time.
---@param targetEnt Entity The target entity.
---@param soundName string The sound to play.
---@param filter CRecipientFilter A CRecipientFilter of the players that will have this sound networked to them. If not set, the default is a CPASAttenuationFilter. This argument only works serverside.This argument only works serverside.This argument only works serverside.
---@return CSoundPatch The sound object
function CreateSound(targetEnt, soundName, filter) end

---[CLIENT] Creates and returns a new DSprite element with the supplied material.
---@param material IMaterial Material the sprite should draw.
---@return Panel The new DSprite element.
function CreateSprite(material) end

---[SHARED] Returns the uptime of the server in seconds (to at least 4 decimal places)
--- This is a synchronised value and affected by various factors such as host_timescale (or game.GetTimeScale) and the server being paused - either by sv_pausable or all players disconnecting.
--- You should use this function for timing in-game events but not for real-world events.
--- See also: RealTime, SysTime
--- This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).
--- This is NOT easy as it sounds to fix in the engine, so please refrain from posting issues about thisThis returns 0 in GM:PlayerAuthed.Issue Tracker: 3026
---@return number Time synced with the game server.
function CurTime() end

---[SHARED] Returns an CTakeDamageInfo object.
--- This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.Issue Tracker: 2771
---@return CTakeDamageInfo The CTakeDamageInfo object.
function DamageInfo() end

---[SHARED] Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.
---@param slot number The location on the right hand screen to write the debug info to. Starts at 0, no upper limit
---@param info string The debugging information to be written to the screen
function DebugInfo(slot, info) end

---[SHARED] This is not a function. This is a preprocessor keyword that translates to:
--- local BaseClass = baseclass.Get( "my_weapon" )
--- If you type DEFINE_BASECLASS( "my_weapon" ) in your script.
--- See baseclass.Get for more information.
--- The preprocessor is not smart enough to know when substitution doesn't make sense, such as: table keys and strings.
--- Running print("DEFINE_BASECLASS") will result in local BaseClass = baseclass.Get
---@param value string Baseclass name
function DEFINE_BASECLASS(value) end

---[MENU] Deletes the given Preset.
---@param name string The name of the Preset to delete.
function DeleteAddonPreset(name) end

---[SHARED] Loads and registers the specified gamemode, setting the GM table's DerivedFrom field to the value provided, if the table exists. The DerivedFrom field is used post-gamemode-load as the "derived" parameter for gamemode.Register.
---@param base string Gamemode name to derive from.
function DeriveGamemode(base) end

---[CLIENT] Creates a new derma animation.
---@param name string Name of the animation to create
---@param panel Panel Panel to run the animation on
---@param func function Function to call to process the animation Arguments:  Panel pnl - the panel passed to Derma_Anim table anim - the anim table number delta - the fraction of the progress through the animation any data - optional data passed to the run metatable method
---@return table A lua metatable containing four methods:  Run() - Should be called each frame you want the animation to be ran. Active() - Returns if the animation is currently active (has not finished and stop has not been called) Stop() - Halts the animation at its current progress. Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function.
function Derma_Anim(name, panel, func) end

---[CLIENT] Draws background blur around the given panel.
---@param panel Panel Panel to draw the background blur around
---@param startTime number Time that the blur began being painted
function Derma_DrawBackgroundBlur(panel, startTime) end

---[CLIENT] Creates panel method that calls the supplied Derma skin hook via derma.SkinHook
---@param panel Panel Panel to add the hook to
---@param functionName string Name of panel function to create
---@param hookName string Name of Derma skin hook to call within the function
---@param typeName string Type of element to call Derma skin hook for
function Derma_Hook(panel, functionName, hookName, typeName) end

---[CLIENT] Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:
--- 
--- Panel:SetConVar
--- Panel:ConVarChanged
--- Panel:ConVarStringThink
--- Panel:ConVarNumberThink
--- 
--- The console variable value is saved in the m_strConVar property of the panel.
--- The panel should call
--- Panel:ConVarStringThink or
--- Panel:ConVarNumberThink
--- in its PANEL:Think hook and should call Panel:ConVarChanged when the panel's value has changed.
---@param target Panel The panel the functions should be added to.
function Derma_Install_Convar_Functions(target) end

---[CLIENT] Creates a derma window to display information
---@param Text string The text within the created panel.
---@param Title string The title of the created panel.
---@param Button string The text of the button to close the panel.
---@return Panel The created DFrame
function Derma_Message(Text, Title, Button) end

---[CLIENT] Shows a message box in the middle of the screen, with up to 4 buttons they can press.
---@param text string The message to display.
---@param title string The title to give the message box.
---@param btn1text string The text to display on the first button.
---@param btn1func function The function to run if the user clicks the first button.
---@param btn2text string The text to display on the second button.
---@param btn2func function The function to run if the user clicks the second button.
---@param btn3text string The text to display on the third button
---@param btn3func function The function to run if the user clicks the third button.
---@param btn4text string The text to display on the fourth button
---@param btn4func function The function to run if the user clicks the fourth button.
---@return Panel The Panel object of the created window.
function Derma_Query(text, title, btn1text, btn1func, btn2text, btn2func, btn3text, btn3func, btn4text, btn4func) end

---[CLIENT] Creates a derma window asking players to input a string.
---@param title string The title of the created panel.
---@param subtitle string The text above the input box
---@param default string The default text for the input box.
---@param confirm function The function to be called once the user has confirmed their input.
---@param cancel function The function to be called once the user has cancelled their input
---@param confirmText string Allows you to override text of the "OK" button
---@param cancelText string Allows you to override text of the "Cancel" button
---@return Panel The created DFrame
function Derma_StringRequest(title, subtitle, default, confirm, cancel, confirmText, cancelText) end

---[CLIENT] Creates a DMenu and closes any current menus.
---@param keepOpen boolean If we should keep other DMenus open (true) or not (false).
---@param parent Panel The panel to parent the created menu to.
---@return Panel The created DMenu.
function DermaMenu(keepOpen, parent) end

---[CLIENT] Sets whether rendering should be limited to being inside a panel or not.
--- See also Panel:NoClipping.
---@param disable boolean Whether or not clipping should be disabled
---@return boolean Whether the clipping was enabled or not before this function call
function DisableClipping(disable) end

---[CLIENT] Cancels current DOF post-process effect started with DOF_Start
function DOF_Kill() end

---[CLIENT] Cancels any existing DOF post-process effects.
--- Begins the DOF post-process effect.
function DOF_Start() end

---[CLIENT] A hacky method used to fix some bugs regarding DoF. What this basically does it force all C_BaseAnimating entities to have the translucent rendergroup, even if they use opaque or two-pass models.
--- This is used internally - although you're able to use it you probably shouldn't.
---@param enable boolean Enables or disables depth-of-field mode
function DOFModeHack(enable) end

---[MENU] Stops searching for new servers in the given category
---@param category string The category to stop searching in. Working Values: internet, favorite, history, lan
function DoStopServers(category) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Draws the currently active main menu background image and handles transitioning between background images.
--- This is called by default in the menu panel's Paint hook.
function DrawBackground() end

---[CLIENT] Draws the bloom shader, which creates a glowing effect from bright objects.
---@param Darken number Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of 1 will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.
---@param Multiply number Will affect how bright the glowing spots are. A value of 0 will make the bloom effect unnoticeable.
---@param SizeX number The size of the bloom effect along the horizontal axis.
---@param SizeY number The size of the bloom effect along the vertical axis.
---@param Passes number Determines how much to exaggerate the effect.
---@param ColorMultiply number Will multiply the colors of the glowing spots, making them more vivid.
---@param Red number How much red to multiply with the glowing color. Should be between 0 and 1.
---@param Green number How much green to multiply with the glowing color. Should be between 0 and 1.
---@param Blue number How much blue to multiply with the glowing color. Should be between 0 and 1.
function DrawBloom(Darken, Multiply, SizeX, SizeY, Passes, ColorMultiply, Red, Green, Blue) end

---[CLIENT] Draws the Bokeh Depth Of Field effect .
---@param intensity number Intensity of the effect.
---@param distance number Not worldspace distance. Value range is from 0 to 1.
---@param focus number Focus. Recommended values are from 0 to 12.
function DrawBokehDOF(intensity, distance, focus) end

---[CLIENT] Draws the Color Modify shader, which can be used to adjust colors on screen.
---@param modifyParameters table Color modification parameters. See Shaders/g_colourmodify and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.
function DrawColorModify(modifyParameters) end

---[CLIENT] Draws a material overlay on the screen.
---@param Material string This will be the material that is drawn onto the screen.
---@param RefractAmount number This will adjust how much the material will refract your screen.
function DrawMaterialOverlay(Material, RefractAmount) end

---[CLIENT] Creates a motion blur effect by drawing your screen multiple times.
---@param AddAlpha number How much alpha to change per frame.
---@param DrawAlpha number How much alpha the frames will have. A value of 0 will not render the motion blur effect.
---@param Delay number Determines the amount of time between frames to capture.
function DrawMotionBlur(AddAlpha, DrawAlpha, Delay) end

---[CLIENT] Draws the sharpen shader, which creates more contrast.
---@param Contrast number How much contrast to create.
---@param Distance number How large the contrast effect will be.
function DrawSharpen(Contrast, Distance) end

---[CLIENT] Draws the sobel shader, which detects edges and draws a black border.
---@param Threshold number Determines the threshold of edges. A value of 0 will make your screen completely black.
function DrawSobel(Threshold) end

---[CLIENT] Renders the post-processing effect of beams of light originating from the map's sun. Utilises the pp/sunbeams material.
---@param darken number $darken property for sunbeams material.
---@param multiplier number $multiply property for sunbeams material.
---@param sunSize number $sunsize property for sunbeams material.
---@param sunX number $sunx property for sunbeams material.
---@param sunY number $suny property for sunbeams material.
function DrawSunbeams(darken, multiplier, sunSize, sunX, sunY) end

---[CLIENT] Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See g_texturize for information on making the texture.
---@param Scale number Scale of the texture. A smaller number creates a larger texture.
---@param BaseTexture number This will be the texture to use in the effect. Make sure you use Material to get the texture number.
function DrawTexturize(Scale, BaseTexture) end

---[CLIENT] Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.
---@param Passes number An integer determining how many times to draw the effect. A higher number creates more blur.
---@param Height number The amount of screen which should be blurred on the top and bottom.
function DrawToyTown(Passes, Height) end

---[SHARED] Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.
---@param ent Entity The entity to drop.
function DropEntityIfHeld(ent) end

---[SHARED] Calls all NetworkVarNotify functions of the given entity with the given new value, but doesn't change the real value.
--- internally uses Entity:CallDTVarProxies
---@param entity Entity The Entity to run the NetworkVarNotify functions from.
---@param Type string The NetworkVar Type.  String Bool Float Int (32-bit signed integer) Vector Angle Entity
---@param index number The NetworkVar index.
---@param newValue any The new value.
function DTVar_ReceiveProxyGL(entity, Type, index, newValue) end

---[CLIENT] Creates or replaces a dynamic light with the given id.
--- Only 32 dlights and 64 elights can be active at once.It is not safe to hold a reference to this object after creation since its data can be replaced by another dlight at any time.The minlight parameter affects the world and entities differently.Issue Tracker: 3798
---@param index number An unsigned Integer. Usually an entity index is used here.
---@param elight boolean Allocates an elight instead of a dlight. Elights have a higher light limit and do not light the world (making the "noworld" parameter have no effect).
---@return table A DynamicLight structured table. See Structures/DynamicLight
function DynamicLight(index, elight) end

---[MENU] Creates a dynamic Material from the given materialPath
--- This function should never be used in a Rendering Hook because it creates a new dynamic material every time and can fill up your vram.
---@param materialPath string The material with path. The path is relative to the materials/ folder.
---@param flags string Some bind of bits / byte. What does this argument do / use. Currently working value: "0100010" --nocull smoothWhat does this argument do / use.What does this argument do / use.
---@return IMaterial Generated material.
function DynamicMaterial(materialPath, flags) end

---[SHARED] Returns a CEffectData object to be used with util.Effect.
--- This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.Issue Tracker: 2771
---@return CEffectData The CEffectData object.
function EffectData() end

---[SHARED] An eagerly evaluated ternary operator, or, in layman's terms, a compact "if then else" statement.
--- In most cases, you should just use Lua's "pseudo" ternary operator, like this:
--- local myCondition = true
--- local consequent = "myCondition is true"
--- local alternative = "myCondition is false"
--- 
--- print(myCondition and consequent or alternative)
--- In the above example, due to short-circuit evaluation, consequent would be "skipped" and ignored (not evaluated) by Lua due to myCondition being true, and only alternative would be evaluated. However, when using Either, both consequent and alternative would be evaluated. A practical example of this can be found at the bottom of the page.
--- Falsey values
--- If consequent is "falsey" (Lua considers both false and nil as false), this will not work. For example:
--- local X = true
--- local Y = false
--- local Z = "myCondition is false"
--- 
--- print(X and Y or Z)
--- This will actually print the value of Z.
--- In the above case, and other very rare cases, you may find Either useful.
---@param condition any The condition to check if true or false.
---@param truevar any If the condition isn't nil/false, returns this value.
---@param falsevar any If the condition is nil/false, returns this value.
---@return any The result.
function Either(condition, truevar, falsevar) end

---[SHARED] Plays a sentence from scripts/sentences.txt
---@param soundName string The sound to play
---@param position Vector The position to play at
---@param entity number The entity to emit the sound from. Must be Entity:EntIndex
---@param channel number The sound channel, see Enums/CHAN.
---@param volume number The volume of the sound, from 0 to 1
---@param soundLevel number The sound level of the sound, see Enums/SNDLVL
---@param soundFlags number The flags of the sound, see Enums/SND
---@param pitch number The pitch of the sound, 0-255
function EmitSentence(soundName, position, entity, channel, volume, soundLevel, soundFlags, pitch) end

---[SHARED] Emits the specified sound at the specified position.
--- Sounds must be precached serverside manually before they can be played. util.PrecacheSound does not work for this purpose, Entity:EmitSound does the trick
---@param soundName string The sound to play This should either be a sound script name (sound.Add) or a file path relative to the sound/ folder. (Make note that it's not sounds)
---@param position Vector The position where the sound is meant to play, used only for a network  filter (CPASAttenuationFilter) to decide which players will hear the sound.
---@param entity number The entity to emit the sound from. Can be an Entity:EntIndex or one of the following:  0 - Plays sound on the world (position set to 0,0,0) -1 - Plays sound on the local player (on server acts as 0) -2 - Plays UI sound (position set to 0,0,0, no spatial sound, on server acts as 0)
---@param channel number The sound channel, see Enums/CHAN.
---@param volume number The volume of the sound, from 0 to 1
---@param soundLevel number The sound level of the sound, see Enums/SNDLVL
---@param soundFlags number The flags of the sound, see Enums/SND
---@param pitch number The pitch of the sound, 0-255
---@param dsp number The DSP preset for this sound. List of DSP presets
function EmitSound(soundName, position, entity, channel, volume, soundLevel, soundFlags, pitch, dsp) end

---[CLIENT] Removes the currently active tool tip from the screen.
---@param panel Panel This is the panel that has a tool tip.
function EndTooltip(panel) end

---[SHARED] Returns the entity with the matching Entity:EntIndex.
--- Indices 1 through game.MaxPlayers() are always reserved for players.
--- In examples on this wiki, Entity( 1 ) is used when a player entity is needed (see ). In singleplayer and listen servers, Entity( 1 ) will always be the first player. In dedicated servers, however, Entity( 1 ) won't always be a valid player if there is no one currently on the server.
---@param entityIndex number The entity index.
---@return Entity The entity if it exists, or NULL if it doesn't.
function Entity(entityIndex) end

---[SHARED] Throws an error. This is currently an alias of ErrorNoHalt despite it once throwing a halting error like error without the stack trace appended.
--- This function throws a non-halting error instead of a halting error.Issue Tracker: 2113
---@param ... ... Converts all arguments to strings and prints them with no spacing or line breaks.
function Error(...) end

---[SHARED] Throws a Lua error and breaks out of the current call stack.
---@param message string The error message to throw
---@param errorLevel number The level to throw the error at.
function error(message, errorLevel) end

---[SHARED] Throws a Lua error but does not break out of the current call stack.
--- This function will not print a stack trace like a normal error would.
--- Essentially similar if not equivalent to Msg.
---@param ... ... Converts all arguments to strings and prints them with no spacing.
function ErrorNoHalt(...) end

---[SHARED] Throws a Lua error but does not break out of the current call stack.
--- This function will print a stack trace like a normal error would.
---@param ... ... Converts all arguments to strings and prints them with no spacing.
function ErrorNoHaltWithStack(...) end

---[CLIENT] Returns the angles of the current render context as calculated by GM:CalcView.
--- This function is only reliable inside rendering hooks.Issue Tracker: 2516
---@return Angle The angle of the currently rendered scene.
function EyeAngles() end

---[CLIENT] Returns the origin of the current render context as calculated by GM:CalcView.
--- This function is only reliable inside rendering hooks.Issue Tracker: 2516
---@return Vector Camera position.
function EyePos() end

---[CLIENT] Returns the normal vector of the current render context as calculated by GM:CalcView, similar to EyeAngles.
--- This function is only reliable inside rendering hooks.Issue Tracker: 2516
---@return Vector View direction of the currently rendered scene.
function EyeVector() end

---[SHARED] Returns the meta table for the class with the matching name.
--- Internally returns debug.getregistry()[metaName]
--- You can learn more about meta tables on the Meta Tables page.
--- You can find a list of meta tables that can be retrieved with this function on Enums/TYPE. The name in the description is the string to use with this function.
---@param metaName string The object type to retrieve the meta table of.
---@return table The corresponding meta table.
function FindMetaTable(metaName) end

---[CLIENT] Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself
---@param panel Panel Panel to find tool-tip of
---@return string, Panel, Panel string - tool-tip text
---@return string, Panel, Panel Panel - tool-tip panel
---@return string, Panel, Panel Panel - panel that the function was called with
function FindTooltip(panel) end

---[MENU] Refreshes all Addon Conflicts and Fires a Problem. Internally uses FireProblem
function FireAddonConflicts() end

---[MENU] Fires a Problem with the given Data.
---@param prob table The Problem table. See Structures/Problem
function FireProblem(prob) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Internally uses FireProblem to create / fire the Problem.
--- This function is called from the engine to notify the player about a problem in a more user friendly way compared to a console message.
---@param id string The Problem ID.
---@param severity number The Problem severity.
---@param params string Additional Parameters.
function FireProblemFromEngine(id, severity, params) end

---[SHARED] Formats the specified values into the string given. Same as string.format.
---@param format string The string to be formatted. Follows this format: http://www.cplusplus.com/reference/cstdio/printf/
---@param ... ... Values to be formatted into the string.
---@return string The formatted string
function Format(format, ...) end

---[CLIENT] Returns the number of frames rendered since the game was launched.
function FrameNumber() end

---[SHARED] Returns the CurTime-based time in seconds it took to render the last frame.
--- This should be used for frame/tick based timing, such as movement prediction or animations.
--- For real-time-based frame time that isn't affected by host_timescale, use RealFrameTime. RealFrameTime is more suited for things like GUIs or HUDs.
---@return number time (in seconds)
function FrameTime() end

---[MENU] Callback function for when the client has joined a server. This function shows the server's loading URL by default.
---@param servername string Server's name.
---@param serverurl string Server's loading screen URL, or "" if the URL is not set.
---@param mapname string Server's current map's name.
---@param maxplayers number Max player count of server.
---@param steamid string The local player's Player:SteamID64.
---@param gamemode string Server's current gamemode's folder name.
function GameDetails(servername, serverurl, mapname, maxplayers, steamid, gamemode) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use collectgarbage( "count" ) instead.
--- Returns the current floored dynamic memory usage of Lua in kilobytes.
---@return number The current floored dynamic memory usage of Lua, in kilobytes.
function gcinfo() end

---[CLIENT] This function adds all models from a specified folder to a custom Spawnlist category. Internally uses AddPropsOfParent
--- Using this function before SANDBOX:PopulateContent has been called will result in an error
---@param folder string the folder to search for models
---@param path string The path to look for the files and directories in. See this list for a list of valid paths.
---@param name string The Spawnmenu Category name
---@param icon string The Spawnmenu Category Icon to use
---@param appid number The AppID which is needed for the Content
function GenerateSpawnlistFromPath(folder, path, name, icon, appid) end

---[MENU] Returns if the game was started with either -noaddons or -noworkshop
---@return boolean, boolean boolean - true if the game was started with -noaddons. (see Command_Line_Parameters)
---@return boolean, boolean boolean - true if the game was started with -noworkshop. (see Command_Line_Parameters)
function GetAddonStatus() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.All dates are in WDDX format
--- Gets miscellaneous information from Facepunches API.
---@param callback function Callback to be called when the API request is done. Callback is called with one argument, a JSON which when converted into a table using util.JSONToTable contains the following: { 	"ManifestVersion": 	number - Version of the manifest  	"Date": 			string - Date in WDDX format  	// Contains all the blog posts, the things in the top right of the menu 	"News": { 		"Blogs": [  			// Structure of blog posts 			{  				"Date": 		string - Date in WDDX format of the post 				"ShortName": 	string - Short name of the post, identifier of it on the blog website 				"Title": 		string - Title of the post 				"HeaderImage": 	string - Main image of the post, showed in the top right 				"SummaryHtml": 	string - Summary of the blogpost, text thats shown 				"Url": 			string - URL to the post on the blog 				"Tags": 		string - String of the posts tag 			} 		] 	} 	 	// Array of Facepunches Mods, Admins and Devs 	"Administrators": [ 		{ 			"UserId": 		string - SteamID64 of the person 			"Level": 		string - Level of the user (Administrator, Developer or Moderator) 		} 	]  	// Unused and contains nothing useful 	"Heroes": {}  	"SentryUrl": 		string - Nothing 	"DatabaseUrl" 		string - URL to the Facepunch API (/database/{action}/) 	"FeedbackUrl" 		string - URL to the Facepunch API (/feedback/add/) 	"ReportUrl" 		string - URL to the Facepunch API (/feedback/report/) 	"LeaderboardUrl" 	string - URL to the Facepunch API (/leaderboard/{action}/) 	"BenchmarkUrl" 		string - URL to the Facepunch API (/benchmark/add/) 	"AccountUrl" 		string - URL to the Facepunch API (/account/{action}/)  	"Servers": { 		"Official": [] // Nothing 		 		// List of blacklisted servers 		"Banned": [ 			string 	- IP of the blacklisted server 		] 	} }{ 	"ManifestVersion": 	number - Version of the manifest  	"Date": 			string - Date in WDDX format  	// Contains all the blog posts, the things in the top right of the menu 	"News": { 		"Blogs": [  			// Structure of blog posts 			{  				"Date": 		string - Date in WDDX format of the post 				"ShortName": 	string - Short name of the post, identifier of it on the blog website 				"Title": 		string - Title of the post 				"HeaderImage": 	string - Main image of the post, showed in the top right 				"SummaryHtml": 	string - Summary of the blogpost, text thats shown 				"Url": 			string - URL to the post on the blog 				"Tags": 		string - String of the posts tag 			} 		] 	} 	 	// Array of Facepunches Mods, Admins and Devs 	"Administrators": [ 		{ 			"UserId": 		string - SteamID64 of the person 			"Level": 		string - Level of the user (Administrator, Developer or Moderator) 		} 	]  	// Unused and contains nothing useful 	"Heroes": {}  	"SentryUrl": 		string - Nothing 	"DatabaseUrl" 		string - URL to the Facepunch API (/database/{action}/) 	"FeedbackUrl" 		string - URL to the Facepunch API (/feedback/add/) 	"ReportUrl" 		string - URL to the Facepunch API (/feedback/report/) 	"LeaderboardUrl" 	string - URL to the Facepunch API (/leaderboard/{action}/) 	"BenchmarkUrl" 		string - URL to the Facepunch API (/benchmark/add/) 	"AccountUrl" 		string - URL to the Facepunch API (/account/{action}/)  	"Servers": { 		"Official": [] // Nothing 		 		// List of blacklisted servers 		"Banned": [ 			string 	- IP of the blacklisted server 		] 	} }
function GetAPIManifest(callback) end

---[SHARED] Gets the ConVar with the specified name.
--- This function uses GetConVar_Internal internally, but caches the result in Lua for quicker lookups.Due to this function using GetConVar_Internal internally it tends to be relatively slow. Please attempt to 'cache' the return of what you used to make it instead of using this function.
--- Example:
--- local exampleConvar = CreateClientConVar("exampleConvar", "hi")
--- 
--- print(exampleConvar:GetString())
---@param name string Name of the ConVar to get
---@return ConVar The ConVar object, or nil if no such ConVar was found.
function GetConVar(name) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.This function is very slow and not recommended. See GetConVar for an example on how to properly store the return of what your using so you can avoid using this function as much as possible.
--- Gets the ConVar with the specified name. This function doesn't cache the convar.
---@param name string Name of the ConVar to get
---@return ConVar The ConVar object
function GetConVar_Internal(name) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Store the ConVar object retrieved with GetConVar and call ConVar:GetInt or ConVar:GetFloat on it.
--- Gets the numeric value ConVar with the specified name.
---@param name string Name of the ConVar to get.
---@return number The ConVar's value.
function GetConVarNumber(name) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Store the ConVar object retrieved with GetConVar and call ConVar:GetString on it.
--- Gets the string value ConVar with the specified name.
---@param name string Name of the ConVar to get.
---@return string The ConVar's value.
function GetConVarString(name) end

---[MENU] Returns the default loading screen URL (asset://garrysmod/html/loading.html)
---@return string Default loading url (asset://garrysmod/html/loading.html)
function GetDefaultLoadingHTML() end

---[MENU] Retrieves data about the demo with the specified filename. Similar to GetSaveFileDetails.
---@param filename string The file name of the demo.
---@return table Demo data.
function GetDemoFileDetails(filename) end

---[MENU] Returns a table with the names of files needed from the server you are currently joining.
---@return table table of file names
function GetDownloadables() end

---[SHARED] Returns the environment table of either the stack level or the function specified.
---@param location function The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv.
---@return table The environment.
function getfenv(location) end

---[SHARED] Returns an angle that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default Angle The value to return if the global value is not set.
---@return Angle The global value, or default if the global is not set.
function GetGlobal2Angle(index, default) end

---[SHARED] Returns a boolean that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default boolean The value to return if the global value is not set.
---@return boolean The global value, or the default if the global value is not set.
function GetGlobal2Bool(index, default) end

---[SHARED] Returns an entity that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default Entity The value to return if the global value is not set.
---@return Entity The global value, or the default if the global value is not set.
function GetGlobal2Entity(index, default) end

---[SHARED] Returns a float that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default number The value to return if the global value is not set.
---@return number The global value, or the default if the global value is not set.
function GetGlobal2Float(index, default) end

---[SHARED] Returns an integer that is shared between the server and all clients.
--- The integer has a 32 bit limit. Use GetGlobalInt for a higher limit
---@param index string The unique index to identify the global value with.
---@param default number The value to return if the global value is not set.
---@return number The global value, or the default if the global value is not set.
function GetGlobal2Int(index, default) end

---[SHARED] Returns a string that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default string The value to return if the global value is not set.
---@return string The global value, or the default if the global value is not set.
function GetGlobal2String(index, default) end

---[SHARED] Returns a value that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default any The value to return if the global value is not set.
---@return any The global value, or the default if the global value is not set.
function GetGlobal2Var(index, default) end

---[SHARED] Returns a vector that is shared between the server and all clients.
---@param Index string The unique index to identify the global value with.
---@param Default Vector The value to return if the global value is not set.
---@return Vector The global value, or the default if the global value is not set.
function GetGlobal2Vector(Index, Default) end

---[SHARED] Returns an angle that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default Angle The value to return if the global value is not set.
---@return Angle The global value, or default if the global is not set.
function GetGlobalAngle(index, default) end

---[SHARED] Returns a boolean that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default boolean The value to return if the global value is not set.
---@return boolean The global value, or the default if the global value is not set.
function GetGlobalBool(index, default) end

---[SHARED] Returns an entity that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default Entity The value to return if the global value is not set.
---@return Entity The global value, or the default if the global value is not set.
function GetGlobalEntity(index, default) end

---[SHARED] Returns a float that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default number The value to return if the global value is not set.
---@return number The global value, or the default if the global value is not set.
function GetGlobalFloat(index, default) end

---[SHARED] Returns an integer that is shared between the server and all clients.
--- This function will not round decimal values as it actually networks a float internally.Issue Tracker: 3374
---@param index string The unique index to identify the global value with.
---@param default number The value to return if the global value is not set.
---@return number The global value, or the default if the global value is not set.
function GetGlobalInt(index, default) end

---[SHARED] Returns a string that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default string The value to return if the global value is not set.
---@return string The global value, or the default if the global value is not set.
function GetGlobalString(index, default) end

---[SHARED] Returns a value that is shared between the server and all clients.
---@param index string The unique index to identify the global value with.
---@param default any The value to return if the global value is not set.
---@return any The global value, or the default if the global value is not set.
function GetGlobalVar(index, default) end

---[SHARED] Returns a vector that is shared between the server and all clients.
---@param Index string The unique index to identify the global value with.
---@param Default Vector The value to return if the global value is not set.
---@return Vector The global value, or the default if the global value is not set.
function GetGlobalVector(Index, Default) end

---[SHARED] Returns the name of the current server.
---@return string The name of the server.
function GetHostName() end

---[CLIENT] Returns the panel that is used as a wrapper for the HUD. If you want your panel to be hidden when the main menu is opened, parent it to this. Child panels will also have their controls disabled.
--- See also vgui.GetWorldPanel
---@return Panel The HUD panel
function GetHUDPanel() end

---[MENU] Returns the loading screen panel and creates it if it doesn't exist.
---@return Panel The loading screen panel
function GetLoadPanel() end

---[MENU] Returns the current status of the server join progress.
---@return string The current status
function GetLoadStatus() end

---[MENU] Returns a table with the names of all maps and categories that you have on your client.
---@return table Table of map names and categories.
function GetMapList() end

---[SHARED] Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.
--- Use debug.getmetatable if you want the true metatable of the object.
--- If you want to modify the metatable, check out FindMetaTable
---@param object any The value to return the metatable of.
---@return any The metatable of the value. This is not always a table.
function getmetatable(object) end

---[MENU] Returns the menu overlay panel, a container for panels like the error panel created in GM:OnLuaError.
---@return Panel The overlay panel
function GetOverlayPanel() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the PlayerList for the Currently Viewed Server. Internally uses serverlist.PlayerList to retrieve the PlayerList.
---@param serverip string The ServerIP to retrieve the PlayerList from.
function GetPlayerList(serverip) end

---[SHARED] Returns the player whose movement commands are currently being processed. The player this returns can safely have Player:GetCurrentCommand() called on them. See Prediction.
---@return Player The player currently being predicted, or NULL if no command processing is currently being done.
function GetPredictionPlayer() end

---[CLIENT] Creates or gets the rendertarget with the given name.
--- See GetRenderTargetEx for an advanced version of this function with more options.
--- This crashes when used on a cubemap texture.Issue Tracker: 2885Calling this function is equivalent to
--- GetRenderTargetEx(name,
--- 	width, height,
--- 	RT_SIZE_NO_CHANGE,
--- 	MATERIAL_RT_DEPTH_SEPARATE,
--- 	bit.bor(2, 256),
--- 	0,
--- 	IMAGE_FORMAT_BGRA8888
--- )
---@param name string The internal name of the render target.
---@param width number The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.
---@param height number The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.
---@return ITexture The render target
function GetRenderTarget(name, width, height) end

---[CLIENT] Gets (or creates if it does not exist) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than GetRenderTarget.
--- See also render.PushRenderTarget and render.SetRenderTarget.
---@param name string The internal name of the render target. The name is treated like a path and gets its extension discarded."name.1" and "name.2" are considered the same name and will result in the same render target being reused.The name is treated like a path and gets its extension discarded."name.1" and "name.2" are considered the same name and will result in the same render target being reused.The name is treated like a path and gets its extension discarded."name.1" and "name.2" are considered the same name and will result in the same render target being reused.
---@param width number The width of the render target, must be power of 2.
---@param height number The height of the render target, must be power of 2.
---@param sizeMode number Bitflag that influences the sizing of the render target, see Enums/RT_SIZE.
---@param depthMode number Bitflag that determines the depth buffer usage of the render target Enums/MATERIAL_RT_DEPTH.
---@param textureFlags number Bitflag that configurates the texture, see Enums/TEXTUREFLAGS. List of flags can also be found on the Valve's Developer Wiki: https://developer.valvesoftware.com/wiki/Valve_Texture_Format
---@param rtFlags number Flags that controll the HDR behaviour of the render target, see Enums/CREATERENDERTARGETFLAGS.
---@param imageFormat number Image format, see Enums/IMAGE_FORMAT. Some additional image formats are accepted, but don't have enums. See VTF Enumerations.Some additional image formats are accepted, but don't have enums. See VTF Enumerations.Some additional image formats are accepted, but don't have enums. See VTF Enumerations.
---@return ITexture The new render target.
function GetRenderTargetEx(name, width, height, sizeMode, depthMode, textureFlags, rtFlags, imageFormat) end

---[MENU] Retrieves data about the save with the specified filename. Similar to GetDemoFileDetails.
---@param filename string The file name of the save.
---@return table Save data.
function GetSaveFileDetails(filename) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Starts Searching for Servers in the given Category. Can be stopped with DoStopServers.
--- Internally uses serverlist.Query to search for Servers.
---@param category string The Category to start searching the Servers in. Working Values: internet, favorite, history, lan
---@param id number Some ID. can be a random number?
function GetServers(category, id) end

---[CLIENT] Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).
---@return Entity The view entity.
function GetViewEntity() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Opens the given URL in a HTML panel.
---@param url string The url to open.
function GMOD_OpenURLNoOverlay(url) end

---[SHARED] Converts a color from HSL color space into RGB color space and returns a Color.
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@param hue number The hue in degrees from 0-360.
---@param saturation number The saturation from 0-1.
---@param value number The lightness from 0-1.
---@return table The Color created from the HSL color space.
function HSLToColor(hue, saturation, value) end

---[SHARED] Converts a color from HSV color space into RGB color space and returns a Color.
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@param hue number The hue in degrees from 0-360.
---@param saturation number The saturation from 0-1.
---@param value number The value from 0-1.
---@return table The Color created from the HSV color space.
function HSVToColor(hue, saturation, value) end

---[SHARED] Launches an asynchronous http request with the given parameters.
--- This cannot send or receive multiple headers with the same name.Issue Tracker: 2232This function fails with an invalid url error if the substring "10." appears anywhere in the URL, when -allowlocalhttp is not active. Where possible, this can be worked around by encoding the . character as %2E.Issue Tracker: 4133HTTP-requests that respond with a large body may return an unsuccessful error. Try using the Range header to download the file in chunks.HTTP-requests to destinations on private networks (such as 192.168.0.1) won't work.
--- 
--- To enable HTTP-requests to destinations on private networks use Command Line Parameters -allowlocalhttp.
---@param parameters table The request parameters. See Structures/HTTPRequest.
---@return boolean true if we made a request, nil if we failed.
function HTTP(parameters) end

---[SHARED] Executes a Lua script.
--- Addon files (.gma files) do not support relative parent folders (.. notation).
--- This function will try to load local client file if sv_allowcslua is 1.The file you are attempting to include MUST NOT be empty or the include will fail. Files over a certain size may fail as well.
--- If the file you are including is clientside or shared, it must be AddCSLuaFile'd or this function will error saying the file doesn't exist.
---@param fileName string The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the lua/ folder). Please make sure your file names are unique, the filesystem is shared across all addons, so a file named lua/config.lua in your addon may be overwritten by the same file in another addon.Please make sure your file names are unique, the filesystem is shared across all addons, so a file named lua/config.lua in your addon may be overwritten by the same file in another addon.Please make sure your file names are unique, the filesystem is shared across all addons, so a file named lua/config.lua in your addon may be overwritten by the same file in another addon.
---@return ... Anything that the executed Lua script returns.
function include(fileName) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- To send the target file to the client simply call AddCSLuaFile() in the target file itself.
--- This function works exactly the same as include both clientside and serverside.
--- The only difference is that on the serverside it also calls AddCSLuaFile on the filename, so that it gets sent to the client.
---@param filename string The filename of the Lua file you want to include.
function IncludeCS(filename) end

---[SHARED] Returns an iterator function for a for loop, to return ordered key-value pairs from a table.
--- This will only iterate though numerical keys, and these must also be sequential; starting at 1 with no gaps.
--- For unordered pairs, see pairs.
--- For pairs sorted by key in alphabetical order, see SortedPairs.
---@param tab table The table to iterate over.
---@return function, table, number function - The iterator function.
---@return function, table, number table - The table being iterated over.
---@return function, table, number number - The origin index =0.
function ipairs(tab) end

---[SHARED] Returns if the passed object is an Angle.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is an Angle.
function isangle(variable) end

---[SHARED] Returns if the passed object is a boolean.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a boolean.
function isbool(variable) end

---[SHARED] Returns whether the given object does or doesn't have a metatable of a color.
--- Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.Issue Tracker: 2407
---@param Object any The object to be tested
---@return boolean Whether the given object is a color or not
function IsColor(Object) end

---[SHARED] Determines whether or not the provided console command will be blocked if it's ran through Lua functions, such as RunConsoleCommand or Player:ConCommand.
--- For more info on blocked console commands, check out Blocked ConCommands.
--- This is used internally - although you're able to use it you probably shouldn't.
---@param name string The console command to test.
---@return boolean Whether the command will be blocked.
function IsConCommandBlocked(name) end

---[SHARED] Returns if the given NPC class name is an enemy.
--- Returns true if the entity name is one of the following:
--- 
--- "npc_antlion"
--- "npc_antlionguard"
--- "npc_antlionguardian"
--- "npc_barnacle"
--- "npc_breen"
--- "npc_clawscanner"
--- "npc_combine_s"
--- "npc_cscanner"
--- "npc_fastzombie"
--- "npc_fastzombie_torso"
--- "npc_headcrab"
--- "npc_headcrab_fast"
--- "npc_headcrab_poison"
--- "npc_hunter"
--- "npc_metropolice"
--- "npc_manhack"
--- "npc_poisonzombie"
--- "npc_strider"
--- "npc_stalker"
--- "npc_zombie"
--- "npc_zombie_torso"
--- "npc_zombine"
---@param className string Class name of the entity to check
---@return boolean Is an enemy
function IsEnemyEntityName(className) end

---[SHARED] Returns if the passed object is an Entity. Alias of isentity.
---@param variable any The variable to check.
---@return boolean True if the variable is an Entity.
function IsEntity(variable) end

---[SHARED] Returns if this is the first time this hook was predicted.
--- This is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other  (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.
--- Visit Prediction for more information about this behavior.
--- This is already used internally for Entity:EmitSound, Weapon:SendWeaponAnim and Entity:FireBullets, but NOT in  util.Effect.
---@return boolean Whether or not this is the first time being predicted.
function IsFirstTimePredicted() end

---[SHARED] Returns if the given NPC class name is a friend.
--- Returns true if the entity name is one of the following:
--- 
--- "npc_alyx"
--- "npc_barney"
--- "npc_citizen"
--- "npc_dog"
--- "npc_eli"
--- "npc_fisherman"
--- "npc_gman"
--- "npc_kleiner"
--- "npc_magnusson"
--- "npc_monk"
--- "npc_mossman"
--- "npc_odessa"
--- "npc_vortigaunt"
---@param className string Class name of the entity to check
---@return boolean Is a friend
function IsFriendEntityName(className) end

---[SHARED] Returns if the passed object is a function.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a function.
function isfunction(variable) end

---[MENU] Returns true if the client is currently playing either a singleplayer or multiplayer game.
---@return boolean True if we are in a game.
function IsInGame() end

---[MENU] Returns true when the loading panel is active.
---@return boolean True if loading panel is active.
function IsInLoading() end

---[SHARED] Returns whether the passed object is a VMatrix.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a VMatrix.
function ismatrix(variable) end

---[SHARED] Checks whether or not a game is currently mounted. Uses data given by engine.GetGames.
---@param game string The game string/app ID to check.
---@return boolean True if the game is mounted.
function IsMounted(game) end

---[SHARED] Returns if the passed object is a number.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a number.
function isnumber(variable) end

---[SHARED] Returns if the passed object is a Panel.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a Panel.
function ispanel(variable) end

---[MENU] Checks if the given server data is blacklisted or not.
---@param address string Server ip. can end with *
---@param hostname string Server name
---@param description string description to check
---@param gm string Gamemode name
---@param map string Map name
---@return string Returns the reason why the server is blacklisted or nil if the server is not blacklisted.
function IsServerBlacklisted(address, hostname, description, gm, map) end

---[SHARED] Returns if the passed object is a string.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a string.
function isstring(variable) end

---[SHARED] Returns if the passed object is a table.
--- Will return TRUE for variables of type Color
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a table.
function istable(variable) end

---[SHARED] Returns whether or not every element within a table is a valid entity
---@param table table Table containing entities to check
---@return boolean All entities valid
function IsTableOfEntitiesValid(table) end

---[SHARED] Returns whether or not a model is useless by checking that the file path is that of a proper model.
--- If the string ".mdl" is not found in the model name, the function will return true.
--- The function will also return true if any of the following strings are found in the given model name:
--- 
--- "_gesture"
--- "_anim"
--- "_gst"
--- "_pst"
--- "_shd"
--- "_ss"
--- "_posture"
--- "_anm"
--- "ghostanim"
--- "_paths"
--- "_shared"
--- "anim_"
--- "gestures_"
--- "shared_ragdoll_"
---@param modelName string The model name to be checked
---@return boolean Whether or not the model is useless
function IsUselessModel(modelName) end

---[SHARED] Returns whether an object is valid or not. (Such as Entitys, Panels, custom table objects and more).
--- Checks that an object is not nil, has an IsValid method and if this method returns true.
--- Due to vehicles being technically valid the moment they're spawned, also use Vehicle:IsValidVehicle to make sure they're fully initialized
---@param toBeValidated any The table or object to be validated.
---@return boolean True if the object is valid.
function IsValid(toBeValidated) end

---[SHARED] Returns if the passed object is a Vector.
---@param variable any The variable to perform the type check for.
---@return boolean True if the variable is a Vector.
function isvector(variable) end

---[MENU] Joins the server with the specified IP.
---@param IP string The IP of the server to join
function JoinServer(IP) end

---[CLIENT] Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's language.GetPhrase function.
---@param htmlPanel Panel Panel to add javascript function 'language.Update' to.
function JS_Language(htmlPanel) end

---[CLIENT] Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's motionsensor.IsAvailable function.
---@param htmlPanel Panel Panel to add javascript function 'util.MotionSensorAvailable' to.
function JS_Utility(htmlPanel) end

---[CLIENT] Adds workshop related javascript functions to an HTML panel, used by the "Dupes" and "Saves" tabs in the spawnmenu.
---@param htmlPanel Panel Panel to add javascript functions to.
function JS_Workshop(htmlPanel) end

---[CLIENT] Convenience function that creates a DLabel, sets the text, and returns it
---@param text string The string to set the label's text to
---@param parent Panel Optional. The panel to parent the DLabel to
---@return Panel The created DLabel
function Label(text, parent) end

---[MENU] Callback function for when the client's language changes. Called by the engine.
---@param lang string The new language code.
function LanguageChanged(lang) end

---[SHARED] Performs a linear interpolation from the start number to the end number.
--- This function provides a very efficient and easy way to smooth out movements.
--- This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time. See example for proper usage of Lerp for animations.
---@param t number The fraction for finding the result. This number is clamped between 0 and 1. Shouldn't be a constant.
---@param from number The starting number. The result will be equal to this if delta is 0.
---@param to number The ending number. The result will be equal to this if delta is 1.
---@return number The result of the linear interpolation, from + (to - from) * t.
function Lerp(t, from, to) end

---[SHARED] Returns point between first and second angle using given fraction and linear interpolation
--- This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time
---@param ratio number Ratio of progress through values
---@param angleStart Angle Angle to begin from
---@param angleEnd Angle Angle to end at
---@return Angle angle
function LerpAngle(ratio, angleStart, angleEnd) end

---[SHARED] Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors
--- This function is not meant to be used with constant value in the first argument, if you're dealing with animation! Use a value that changes over time
---@param fraction number Fraction ranging from 0 to 1
---@param from Vector The initial Vector
---@param to Vector The desired Vector
---@return Vector The lerped vector.
function LerpVector(fraction, from, to) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Loads all Addon Presets and updates the Preset list.
function ListAddonPresets() end

---[MENU] Returns the contents of addonpresets.txt located in the garrysmod/settings folder. By default, this file stores your addon presets as JSON.
--- You can use SaveAddonPresets to modify this file.
---@return string The contents of the file.
function LoadAddonPresets() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- This function is used to get the last map and category to which the map belongs from the cookie saved with SaveLastMap.
function LoadLastMap() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the News List
function LoadNewsList() end

---[CLIENT] Loads all preset settings for the presets and returns them in a table
---@return table Preset data
function LoadPresets() end

---[CLIENT] Returns a localisation for the given token, if none is found it will return the default (second) parameter.
---@param localisationToken string The token to find a translation for.
---@param default string The default value to be returned if no translation was found.
function Localize(localisationToken, default) end

---[CLIENT] Returns the player object of the current client.
--- LocalPlayer() will return NULL until all entities have been initialized. See GM:InitPostEntity.
---@return Player The player object representing the client.
function LocalPlayer() end

---[SHARED] Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.
--- If you're working with an entity's local vectors, use Entity:LocalToWorld and/or Entity:LocalToWorldAngles instead.
--- See also: WorldToLocal, the reverse of this function.
---@param localPos Vector The position vector in the source coordinate system, that should be translated to world coordinates
---@param localAng Angle The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. Angle()).
---@param originPos Vector The origin point of the source coordinate system, in world coordinates
---@param originAngle Angle The angles of the source coordinate system, as a world angle
---@return Vector, Angle Vector - The world position of the supplied local position.
---@return Vector, Angle Angle - The world angles of the supplied local angle.
function LocalToWorld(localPos, localAng, originPos, originAngle) end

---[SHARED] Either returns the material with the given name, or loads the material interpreting the first argument as the path.
--- When using .png or .jpg textures, try to make their sizes Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). While images are no longer scaled to Power of 2 sizes since February 2019, it is a good practice for things like icons, etc.This function is very expensive when used in rendering hooks or in operations requiring very frequent calls. It is better to store the Material in a variable (like in the examples).
---@param materialName string The material name or path. The path is relative to the materials/ folder. You do not need to add materials/ to your path. To retrieve a Lua material created with CreateMaterial, just prepend a ! to the material name. Since paths are relative to the materials folder, resource paths like ../data/MyImage.jpg will work since .. translates to moving up a parent directory in the file tree. .Since paths are relative to the materials folder, resource paths like ../data/MyImage.jpg will work since .. translates to moving up a parent directory in the file tree.Since paths are relative to the materials folder, resource paths like ../data/MyImage.jpg will work since .. translates to moving up a parent directory in the file tree.
---@param pngParameters string A string containing space separated keywords which will be used to add material parameters. See Material Parameters for more information. This feature only works when importing .png or .jpeg image files.This feature only works when importing .png or .jpeg image files.This feature only works when importing .png or .jpeg image files.
---@return IMaterial, number IMaterial - Generated material.
---@return IMaterial, number number - How long it took for the function to run.
function Material(materialName, pngParameters) end

---[SHARED] Returns a VMatrix object, a 4x4 matrix.
---@param data table Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage. Can be a VMatrix to copy its data.
---@return VMatrix New matrix.
function Matrix(data) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Internally uses steamworks.FileInfo to fetch the data.
--- This function retrieves the Addon data and passes it onto JS(JavaScript)
---@param workshopItemID string The ID of Steam Workshop item.
function MenuGetAddonData(workshopItemID) end

---[CLIENT] Returns a new mesh object.
---@param mat IMaterial The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use.
---@return IMesh The created object.
function Mesh(mat) end

---[SHARED] Runs util.PrecacheModel and returns the string.
---@param model string The model to precache.
---@return string The same string entered as an argument.
function Model(model) end

---[SHARED] Creates a table with the specified module name and sets the function environment for said table.
--- Any passed loaders are called with the table as an argument. An example of this is package.seeall.
---@param name string The name of the module. This will be used to access the module table in the runtime environment.
---@param ... ... Calls each function passed with the new table as an argument.
function module(name, ...) end

---[SHARED] Writes every given argument to the console.
--- Automatically attempts to convert each argument to a string. (See tostring)
--- Unlike print, arguments are not separated by anything. They are simply concatenated.
--- Additionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See MsgN for a version that does add a newline.
--- The text is blue on the server, orange on the client, and green on the menu:
---@param ... ... List of values to print.
function Msg(...) end

---[SHARED] Works exactly like Msg except that, if called on the server, will print to all players consoles plus the server console.
---@param ... ... List of values to print.
function MsgAll(...) end

---[SHARED] Just like Msg, except it can also print colored text, just like chat.AddText.
---@param ... ... Values to print. If you put in a color, all text after that color will be printed in that color.
function MsgC(...) end

---[SHARED] Same as print, except it concatinates the arguments without inserting any whitespace in between them.
--- See also Msg, which doesn't add a newline ("\n") at the end.
---@param ... ... List of values to print. They can be of any type and will be converted to strings with tostring.
function MsgN(...) end

---[CLIENT] Returns named color defined in resource/ClientScheme.res.
---@param name string Name of color
---@return table A Color or nil
function NamedColor(name) end

---[SHARED] Returns a new userdata object.
---@param addMetatable boolean If true, the userdata will get its own metatable automatically. If another newproxy is passed, it will create new one and copy its metatable.
---@return userdata The newly created userdata.
function newproxy(addMetatable) end

---[SHARED] Returns the next key and value pair in a table.
--- Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use ipairs.
---@param tab table The table
---@param prevKey any The previous key in the table.
---@return any, any any - The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil.
---@return any, any any - The value associated with that key. If the previous key was the last key in the table, this will be nil.
function next(tab, prevKey) end

---[MENU] Returns the number of files needed from the server you are currently joining.
---@return number The number of downloadables
function NumDownloadables() end

---[CLIENT] Returns the amount of skins the specified model has.
--- See also Entity:SkinCount if you have an entity.
---@param modelName string Model to return amount of skins of
---@return number Amount of skins
function NumModelSkins(modelName) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the engine when a model has been loaded. Caches model information with the sql.
---@param modelName string Name of the model.
---@param numPostParams number Number of pose parameters the model has.
---@param numSeq number Number of sequences the model has.
---@param numAttachments number Number of attachments the model has.
---@param numBoneControllers number Number of bone controllers the model has.
---@param numSkins number Number of skins that the model has.
---@param size number Size of the model.
function OnModelLoaded(modelName, numPostParams, numSeq, numAttachments, numBoneControllers, numSkins, size) end

---[MENU] Opens a folder with the given name in the garrysmod folder using the operating system's file browser.
--- This does not work on OSX or Linux.Issue Tracker: 1532
---@param folder string The subdirectory to open in the garrysmod folder.
function OpenFolder(folder) end

---[MENU] Opens the Problems Panel.
function OpenProblemsPanel() end

---[SHARED] Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.
--- This function will irreversibly modify the given vectors
---@param vector1 Vector Bounding box min resultant
---@param vector2 Vector Bounding box max resultant
function OrderVectors(vector1, vector2) end

---[SHARED] Returns an iterator function(next) for a for loop that will return the values of the specified table in an arbitrary order.
--- 
--- For alphabetical key order use SortedPairs.
--- For alphabetical value order use SortedPairsByValue.
---@param tab table The table to iterate over.
---@return function, table, any function - The iterator (next).
---@return function, table, any table - The table being iterated over.
---@return function, table, any any - nil (for the constructor).
function pairs(tab) end

---[SHARED] Calls game.AddParticles and returns given string.
---@param file string The particle file.
---@return string The particle file.
function Particle(file) end

---[SHARED] Creates a particle effect.
--- The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!
---@param particleName string The name of the particle effect.
---@param position Vector The start position of the effect.
---@param angles Angle The orientation of the effect.
---@param parent Entity If set, the particle will be parented to the entity.
function ParticleEffect(particleName, position, angles, parent) end

---[SHARED] Creates a particle effect with specialized parameters.
--- The particle effect must be precached with PrecacheParticleSystem and the file its from must be added via game.AddParticles before it can be used!
---@param particleName string The name of the particle effect.
---@param attachType number Attachment type using Enums/PATTACH.
---@param entity Entity The entity to be used in the way specified by the attachType.
---@param attachmentID number The id of the attachment to be used in the way specified by the attachType.
function ParticleEffectAttach(particleName, attachType, entity, attachmentID) end

---[CLIENT] Creates a new CLuaEmitter.
--- Do not forget to delete the emitter with CLuaEmitter:Finish once you are done with it
---@param position Vector The start position of the emitter. This is only used to determine particle drawing order for translucent particles.
---@param use3D boolean Whenever to render the particles in 2D or 3D mode.
---@return CLuaEmitter The new particle emitter.
function ParticleEmitter(position, use3D) end

---[SERVER] Creates a path for the bot to follow
---@param type string The name of the path to create. This is going to be "Follow" or "Chase" right now.
---@return PathFollower The path
function Path(type) end

---[SHARED] Calls a function and catches an error that can be thrown while the execution of the call.
--- This cannot stop errors from hooks called from the engine.Issue Tracker: 2036This does not stop Error and ErrorNoHalt from sending error messages to the server (if called clientside) or calling the GM:OnLuaError hook. The success boolean returned will always return true and thus you will not get the error message returned. error does not exhibit these behaviours.Issue Tracker: 2498This does not stop errors incurred by include.Issue Tracker: 3112
---@param func function Function to be executed and of which the errors should be caught of
---@param ... ... Arguments to call the function with.
---@return boolean, ... boolean - If the function had no errors occur within it.
---@return boolean, ... ... - If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in.
function pcall(func, ...) end

---[SHARED] Returns the player with the matching Player:UserID.
--- For a function that returns a player based on their Entity:EntIndex, see Entity.
--- For a function that returns a player based on their connection ID, see player.GetByID.
---@param playerIndex number The player index.
---@return Player The retrieved player.
function Player(playerIndex) end

---[CLIENT] Moves the given model to the given position and calculates appropriate camera parameters for rendering the model to an icon.
--- The output table interacts nicely with Panel:RebuildSpawnIconEx with a few key renames.
---@param model Entity Model that is being rendered to the spawn icon
---@param position Vector Position that the model is being rendered at
---@param noAngles boolean If true the function won't reset the angles to 0 for the model.
---@return table Table of information of the view which can be used for rendering
function PositionSpawnIcon(model, position, noAngles) end

---[SHARED] Precaches the particle with the specified name.
---@param particleSystemName string The name of the particle system.
function PrecacheParticleSystem(particleSystemName) end

---[SERVER] Precaches a scene file.
---@param scene string Path to the scene file to precache.
function PrecacheScene(scene) end

---[SHARED] Load and precache a custom sentence file.
---@param filename string The path to the custom sentences.txt.
function PrecacheSentenceFile(filename) end

---[SERVER] Precache a sentence group in a sentences.txt definition file.
---@param group string The group to precache.
function PrecacheSentenceGroup(group) end

---[SHARED] Writes every given argument to the console.
--- Automatically attempts to convert each argument to a string. (See tostring)
--- Seperates lines with a line break ("\n")
--- Separates arguments with a tab character ("\t").
---@param ... ... List of values to print.
function print(...) end

---[SERVER] Displays a message in the chat, console, or center of screen of every player.
--- This uses the archaic user message system (umsg) and hence is limited to 255 characters.
---@param type number Which type of message should be sent to the players (see Enums/HUD)
---@param message string Message to be sent to the players
function PrintMessage(type, message) end

---[SHARED] Recursively prints the contents of a table to the console.
---@param tableToPrint table The table to be printed
---@param indent number Number of tabs to start indenting at. Increases by 2 when entering another table.
---@param done table Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop.
function PrintTable(tableToPrint, indent, done) end

---[CLIENT] Creates a new ProjectedTexture.
---@return ProjectedTexture Newly created projected texture.
function ProjectedTexture() end

---[SHARED] Runs a function without stopping the whole script on error.
--- This function is similar to pcall and xpcall except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and GM:OnLuaError called).
---@param func function Function to run
---@return boolean Whether the function executed successfully or not
function ProtectedCall(func) end

---[SHARED] Returns an iterator function that can be used to loop through a table in random order
---@param table table Table to create iterator for
---@param descending boolean Whether the iterator should iterate descending or not
---@return function Iterator function
function RandomPairs(table, descending) end

---[SHARED] Compares the two values without calling their __eq operator.
---@param value1 any The first value to compare.
---@param value2 any The second value to compare.
---@return boolean Whether or not the two values are equal.
function rawequal(value1, value2) end

---[SHARED] Gets the value with the specified key from the table without calling the __index method.
---@param table table Table to get the value from.
---@param index any The index to get the value from.
---@return any The value.
function rawget(table, index) end

---[SHARED] Sets the value with the specified key from the table without calling the __newindex method.
---@param table table Table to get the value from.
---@param index any The index to get the value from.
---@param value any The value to set for the specified key.
function rawset(table, index, value) end

---[CLIENT] Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)
--- The returned number is clamped between 0 and 0.1.
---@return number Real frame time
function RealFrameTime() end

---[SHARED] Returns the uptime of the game/server in seconds (to at least 4 decimal places). This value updates itself once every time the realm thinks. For servers, this is the server tickrate. For clients, its their current FPS.
--- This is not synchronised or affected by the game.
--- This will be affected by precision loss if the uptime is more than 30+(?) days, and effectively cease to be functional after 50+(?) days.
--- Changing the map will not fix it like it does with CurTime. A server restart is necessary.
--- You should use this function (or SysTime) for timing real-world events such as user interaction, but not for timing game events such as animations.
--- See also: CurTime, SysTime
---@return number Uptime of the game/server.
function RealTime() end

---[SERVER] Creates a new CRecipientFilter.
---@param unreliable boolean If set to true, makes the filter unreliable. This means, when sending over the network in cases like CreateSound (and its subsequent updates), the message is not guaranteed to reach all clients.
---@return CRecipientFilter The new created recipient filter.
function RecipientFilter(unreliable) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Adds a frame to the currently recording demo.
function RecordDemoFrame() end

---[MENU] Refreshes all Addon Conflicts after 1 Second. Internally uses FireAddonConflicts
function RefreshAddonConflicts() end

---[CLIENT] Registers a Derma element to be closed the next time CloseDermaMenus is called
---@param menu Panel Menu to be registered for closure
function RegisterDermaMenuForClose(menu) end

---[CLIENT] Saves position of your cursor on screen. You can restore it by using
--- RestoreCursorPosition.
function RememberCursorPosition() end

---[CLIENT] Does the removing of the tooltip panel. Called by EndTooltip.
function RemoveTooltip() end

---[CLIENT] Returns the angle that the clients view is being rendered at
---@return Angle Render Angles
function RenderAngles() end

---[CLIENT] Renders a Depth of Field effect
---@param origin Vector Origin to render the effect at
---@param angle Angle Angle to render the effect at
---@param usableFocusPoint Vector Point to focus the effect at
---@param angleSize number Angle size of the effect
---@param radialSteps number Amount of radial steps to render the effect with
---@param passes number Amount of render passes
---@param spin boolean Whether to cycle the frame or not
---@param inView table Table of view data
---@param fov number FOV to render the effect with
function RenderDoF(origin, angle, usableFocusPoint, angleSize, radialSteps, passes, spin, inView, fov) end

---[CLIENT] Renders the stereoscopic post-process effect
---@param viewOrigin Vector Origin to render the effect at
---@param viewAngles Angle Angles to render the effect at
function RenderStereoscopy(viewOrigin, viewAngles) end

---[CLIENT] Renders the Super Depth of Field post-process effect
---@param viewOrigin Vector Origin to render the effect at
---@param viewAngles Angle Angles to render the effect at
---@param viewFOV number Field of View to render the effect at
function RenderSuperDoF(viewOrigin, viewAngles, viewFOV) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Called by permissions.AskToConnect
--- If the server has the permission "connect" granted, it will instantly connect you to the server.
--- If the permission is not granted it will, it opens a confirmation window to connect to the server.
---@param serverip string The server ip to connect to
function RequestConnectToServer(serverip) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Opens a confirmation window to open the url.
---@param url string The Website URL to open.
function RequestOpenURL(url) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Opens a confirmation window to grant the requested permission.
---@param permission string The permission to ask
function RequestPermission(permission) end

---[SHARED] First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.
--- Running this function with pcall or xpcall will still print an error that counts towards sv_kickerrornum.Issue Tracker: 1041This function will try to load local client file if sv_allowcslua is 1Modules can't be installed as part of an addon and have to be put directly into garrysmod/lua/bin/ to be detected.
--- This is a safety measure, because modules can be malicious and harm the system.
---@param name string The name of the module to be loaded.
function require(name) end

---[CLIENT] Restores position of your cursor on screen. You can save it by using RememberCursorPosition.
function RestoreCursorPosition() end

---[SHARED] Executes the given console command with the parameters.
--- Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see Blocked ConCommands.
---@param command string The command to be executed.
---@param ... ... The arguments. Note, that unlike Player:ConCommand, you must pass each argument as a new string, not separating them with a space.
function RunConsoleCommand(command, ...) end

---[MENU] Runs a menu command. Equivalent to RunConsoleCommand( "gamemenucommand", command ) unless the command starts with the "engine" keyword in which case it is equivalent to RunConsoleCommand( command ).
---@param command string The menu command to run Should be one of the following:  Disconnect - Disconnects from the current server. OpenBenchmarkDialog - Opens the "Video Hardware Stress Test" dialog. OpenChangeGameDialog - Does not work in GMod. OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server. OpenCustomMapsDialog - Does nothing. OpenFriendsDialog - Does nothing. OpenGameMenu - Does not work in GMod. OpenLoadCommentaryDialog - Opens the "Developer Commentary" selection dialog. Useless in GMod. OpenLoadDemoDialog - Does nothing. OpenLoadGameDialog - Opens the Source "Load Game" dialog. OpenNewGameDialog - Opens the "New Game" dialog. Useless in GMod. OpenOptionsDialog - Opens the options dialog. OpenPlayerListDialog - Opens the "Mute Players" dialog that shows all players connected to the server and allows to mute them. OpenSaveGameDialog - Opens the Source "Save Game" dialog. OpenServerBrowser - Opens the legacy server browser. Quit - Quits the game without confirmation (unlike other Source games). QuitNoConfirm - Quits the game without confirmation (like other Source games). ResumeGame - Closes the menu and returns to the game. engine <concommand> - Runs a console command. Unlike RunConsoleCommand( <concommand> ) It will ignore Blocked ConCommands
function RunGameUICommand(command) end

---[SHARED] Evaluates and executes the given code, will throw an error on failure.
--- Local variables are not passed to the given code.
---@param code string The code to execute.
---@param identifier string The name that should appear in any error messages caused by this code.
---@param handleError boolean If false, this function will return a string containing any error messages instead of throwing an error.
---@return string If handleError is false, the error message (if any).
function RunString(code, identifier, handleError) end

---[SHARED] Alias of RunString.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- Use RunString instead.
function RunStringEx() end

---[SHARED] Removes the given entity unless it is a player or the world entity
---@param ent Entity Entity to safely remove.
function SafeRemoveEntity(ent) end

---[SHARED] Removes entity after delay using SafeRemoveEntity
---@param entity Entity Entity to be removed
---@param delay number Delay for entity removal in seconds
function SafeRemoveEntityDelayed(entity, delay) end

---[MENU] Sets the content of addonpresets.txt located in the garrysmod/settings folder. By default, this file stores your addon presets as JSON.
--- You can use LoadAddonPresets to retrieve the data in this file.
---@param JSON string The new contents of the file.
function SaveAddonPresets(JSON) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Hides the News List when set to true.
--- If you call this don't forget to call LoadNewsList to update the News List.
---@param hide boolean true if it should hide the News.
function SaveHideNews(hide) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- This function is used to save the last map and category to which the map belongs as a .
---@param map string The name of the map.
---@param category string The name of the category to which this map belongs.
function SaveLastMap(map, category) end

---[CLIENT] Overwrites all presets with the supplied table. Used by the presets for preset saving
---@param presets table Presets to be saved
function SavePresets(presets) end

---[CLIENT] Returns a number based on the Size argument and your screen's width. The screen's width is always equal to size 640. This function is primarily used for scaling font sizes.
---@param Size number The number you want to scale.
---@return number The scaled number based on your screen's width
function ScreenScale(Size) end

---[CLIENT] Gets the height of the game's window (in pixels).
---@return number The height of the game's window in pixels
function ScrH() end

---[CLIENT] Gets the width of the game's window (in pixels).
---@return number The width of the game's window in pixels
function ScrW() end

---[SHARED] Used to select single values from a vararg or get the count of values in it.
---@param parameter any Can be a number or string.  If it's a string and starts with "#", the function will return the amount of values in the vararg (ignoring the rest of the string). If it's a positive number, the function will return all values starting from the given index. If the number is negative, it will return the amount specified from the end instead of the beginning. This mode will not be compiled by LuaJIT.
---@param ... ... The vararg. These are the values from which you want to select.
---@return any Returns a number or vararg, depending on the select method.
function select(parameter, ...) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This uses the umsg internally, which has been deprecated. Use the net instead.
--- Send a usermessage
--- Useless on client, only server can send info to client.
---@param name string The name of the usermessage
---@param recipients any Can be a CRecipientFilter, table or Player object.
---@param ... ... Data to send in the usermessage
function SendUserMessage(name, recipients, ...) end

---[SHARED] Returns approximate duration of a sentence by name. See EmitSentence.
---@param name string The sentence name.
---@return number The approximate duration.
function SentenceDuration(name) end

---[SERVER] Prints ServerLog: PARAM without a newline, to the server log and console.
--- As of June 2022, if sv_logecho is set to 0 (defaults to 1) the message will not print to console and will only be written to the server's log file.
---@param parameter string The value to be printed to console.
function ServerLog(parameter) end

---[CLIENT] Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.
---@param text string The text to add to the clipboard.
function SetClipboardText(text) end

---[SHARED] Sets the environment for a function or a stack level. Can be used to sandbox code.
---@param location function The function to set the environment for, or a number representing stack level.
---@param environment table Table to be used as the the environment.
---@return function The function passed, otherwise nil.
function setfenv(location, environment) end

---[SHARED] Defines an angle to be automatically networked to clients
--- Running this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global angle with
---@param angle Angle Angle to be networked
function SetGlobal2Angle(index, angle) end

---[SHARED] Defined a boolean to be automatically networked to clients
--- Running this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global boolean with
---@param bool boolean Boolean to be networked
function SetGlobal2Bool(index, bool) end

---[SHARED] Defines an entity to be automatically networked to clients
--- Running this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global entity with
---@param ent Entity Entity to be networked
function SetGlobal2Entity(index, ent) end

---[SHARED] Defines a floating point number to be automatically networked to clients
--- This function has a floating point precision error. Use SetGlobalFloat insteadRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global float with
---@param float number Float to be networked
function SetGlobal2Float(index, float) end

---[SHARED] Sets an integer that is shared between the server and all clients.
--- The integer has a 32 bit limit. Use SetGlobalInt insteadRunning this function clientside will only set it clientside for the client it is called on!
---@param index string The unique index to identify the global value with.
---@param value number The value to set the global value to
function SetGlobal2Int(index, value) end

---[SHARED] Defines a string with a maximum of 511 characters to be automatically networked to clients
--- Running this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global string with
---@param string string String to be networked
function SetGlobal2String(index, string) end

---[SHARED] Defines a variable to be automatically networked to clients
--- 
--- 
--- 
--- Allowed Types
--- 
--- 
--- 
--- 
--- Angle
--- 
--- 
--- Boolean
--- 
--- 
--- Entity
--- 
--- 
--- Float
--- 
--- 
--- Int
--- 
--- 
--- String
--- 
--- 
--- Vector
--- 
--- 
--- 
--- Trying to network a type that is not listed above will result in a nil value!Running this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global vector with
---@param value any Value to be networked
function SetGlobal2Var(index, value) end

---[SHARED] Defines a vector to be automatically networked to clients
--- Running this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global vector with
---@param vec Vector Vector to be networked
function SetGlobal2Vector(index, vec) end

---[SHARED] Defines an angle to be automatically networked to clients
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2Angle. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global angle with
---@param angle Angle Angle to be networked
function SetGlobalAngle(index, angle) end

---[SHARED] Defined a boolean to be automatically networked to clients
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2Bool. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global boolean with
---@param bool boolean Boolean to be networked
function SetGlobalBool(index, bool) end

---[SHARED] Defines an entity to be automatically networked to clients
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2Entity. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global entity with
---@param ent Entity Entity to be networked
function SetGlobalEntity(index, ent) end

---[SHARED] Defines a floating point number to be automatically networked to clients
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2Float. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global float with
---@param float number Float to be networked
function SetGlobalFloat(index, float) end

---[SHARED] Sets an integer that is shared between the server and all clients.
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2Int. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it clientside for the client it is called on!This function will not round decimal values as it actually networks a float internally.Issue Tracker: 3374
---@param index string The unique index to identify the global value with.
---@param value number The value to set the global value to
function SetGlobalInt(index, value) end

---[SHARED] Defines a string with a maximum of 199 characters to be automatically networked to clients
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2String. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageIf you want to have a higher characters limit use SetGlobal2StringRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global string with
---@param string string String to be networked
function SetGlobalString(index, string) end

---[SHARED] Defines a variable to be automatically networked to clients
--- 
--- 
--- 
--- Allowed Types
--- 
--- 
--- 
--- 
--- Angle
--- 
--- 
--- Boolean
--- 
--- 
--- Entity
--- 
--- 
--- Float
--- 
--- 
--- Int
--- 
--- 
--- String
--- 
--- 
--- Vector
--- 
--- 
--- 
--- Trying to network a type that is not listed above will result in an error!
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2Var. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global vector with
---@param value any Value to be networked
function SetGlobalVar(index, value) end

---[SHARED] Defines a vector to be automatically networked to clients
--- There's a 4095 slots Network limit. If you need more, consider using the net library or SetGlobal2Vector. You should also consider the fact that you have way too many variables. You can learn more about this limit here: Networking_UsageRunning this function clientside will only set it clientside for the client it is called on!
---@param index any Index to identify the global vector with
---@param vec Vector Vector to be networked
function SetGlobalVector(index, vec) end

---[SHARED] Sets, changes or removes a table's metatable. Returns Tab (the first argument).
---@param Tab table The table who's metatable to change.
---@param Metatable table The metatable to assign.  If it's nil, the metatable will be removed.
---@return table The first argument.
function setmetatable(Tab, Metatable) end

---[SHARED] Called by the engine to set which constraint system the next created constraints should use.
---@param constraintSystem Entity Constraint system to use
function SetPhysConstraintSystem(constraintSystem) end

---[SHARED] This function can be used in a for loop instead of pairs. It sorts all keys alphabetically.
--- For sorting by specific value member, use SortedPairsByMemberValue.
--- For sorting by value, use SortedPairsByValue.
---@param table table The table to sort
---@param desc boolean Reverse the sorting order
---@return function, table function - Iterator function
---@return function, table table - The table being iterated over
function SortedPairs(table, desc) end

---[SHARED] Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.
--- To sort by value, use SortedPairsByValue.
--- To sort by keys, use SortedPairs.
---@param table table Table to create iterator for.
---@param memberKey any Key of the value member to sort by.
---@param descending boolean Whether the iterator should iterate in descending order or not.
---@return function, table function - Iterator function
---@return function, table table - The table the iterator was created for.
function SortedPairsByMemberValue(table, memberKey, descending) end

---[SHARED] Returns an iterator function that can be used to loop through a table in order of its values.
--- To sort by specific value member, use SortedPairsByMemberValue.
--- To sort by keys, use SortedPairs.
---@param table table Table to create iterator for
---@param descending boolean Whether the iterator should iterate in descending order or not
---@return function, table function - Iterator function
---@return function, table table - The table which will be iterated over
function SortedPairsByValue(table, descending) end

---[SHARED] Runs util.PrecacheSound and returns the string.
--- util.PrecacheSound does nothing and therefore so does this function.
---@param soundPath string The soundpath to precache.
---@return string The string passed as the first argument.
function Sound(soundPath) end

---[SHARED] Returns the duration of the specified sound in seconds.
--- This function does not return the correct duration on MacOS and Linux, or if the file is a non-.wav file on Windows.Issue Tracker: 936
---@param soundName string The sound file path.
---@return number Sound duration in seconds.
function SoundDuration(soundName) end

---[SHARED] Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of sql.SQLStr
---@param input string String to be escaped
---@param noQuotes boolean Whether the returned value should be surrounded in quotes or not
---@return string Escaped input
function SQLStr(input, noQuotes) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using ScreenScale instead.
--- Returns a number based on the Size argument and your screen's width. Alias of ScreenScale.
---@param Size number The number you want to scale.
function SScale(Size) end

---[SHARED] Returns the ordinal suffix of a given number.
---@param number number The number to find the ordinal suffix of.
---@return string suffix
function STNDRD(number) end

---[SERVER] Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.
---@param suppressPlayer Player The player to suppress any networking to.
function SuppressHostEvents(suppressPlayer) end

---[SHARED] Returns a highly accurate time in seconds since the start up, ideal for benchmarking. Unlike RealTime, this value will be updated any time the function is called, allowing for sub-think precision.
---@return number Uptime of the server.
function SysTime() end

---[SHARED] Returns a TauntCamera object
---@return table TauntCamera
function TauntCamera() end

---[CLIENT] Clears focus from any text entries player may have focused.
function TextEntryLoseFocus() end

---[SHARED] Returns a cosine value that fluctuates based on the current time
---@param frequency number The frequency of fluctuation
---@param min number Minimum value
---@param max number Maximum value
---@param offset number Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time
---@return number Cosine value
function TimedCos(frequency, min, max, offset) end

---[SHARED] Returns a sine value that fluctuates based on CurTime. The value returned will be between the start value plus/minus the range value.
--- The range arguments don't work as intended. The existing (bugged) behavior is documented below.
---@param frequency number The frequency of fluctuation, in
---@param origin number The center value of the sine wave.
---@param max number This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.
---@param offset number Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time
---@return number Sine value
function TimedSin(frequency, origin, max, offset) end

---[SHARED] Attempts to return an appropriate boolean for the given value
---@param val any The object to be converted to a boolean
---@return boolean false for the boolean false. false for "false". false for "0". false for numeric 0. false for nil. true otherwise.
function tobool(val) end

---[MENU] Toggles whether or not the named map is favorited in the new game list.
---@param map string Map to toggle favorite.
function ToggleFavourite(map) end

---[SHARED] Attempts to convert the value to a number.
--- Returns nil on failure.
---@param value any The value to convert. Can be a number or string.
---@param base number The base used in the string. Can be any integer between 2 and 36, inclusive.
---@return number The numeric representation of the value with the given base, or nil if the conversion failed.
function tonumber(value, base) end

---[SHARED] Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.
--- print also uses this functionality.
---@param value any The object to be converted to a string.
---@return string The string representation of the value.
function tostring(value) end

---[MENU] We advise against using this. It may be changed or removed in a future update.This is used internally - although you're able to use it you probably shouldn't.
--- Returns "Lua Cache File" if the given file name is in a certain string table, nothing otherwise.
---@param filename string File name to test
---@return string "Lua Cache File" if the given file name is in a certain string table, nothing otherwise.
function TranslateDownloadableName(filename) end

---[SHARED] Returns a string representing the name of the type of the passed object.
--- This will return table if the input is Color, consider using IsColor in that case.
---@param var any The object to get the type of.
---@return string The name of the object's type.
function type(var) end

---[SHARED] Gets the associated type ID of the variable. Unlike type, this does not work with no value - an argument must be provided.
--- This returns garbage for _LOADLIB objects.This returns TYPE_NIL for protos.
---@param variable any The variable to get the type ID of.
---@return number The type ID of the variable. See the Enums/TYPE.
function TypeID(variable) end

---[SHARED] This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.
---@param tbl table The table to generate the vararg from.
---@param startIndex number Which index to start from. Optional.
---@param endIndex number Which index to end at. Optional, even if you set StartIndex.
---@return ... Output values
function unpack(tbl, startIndex, endIndex) end

---[SHARED] Returns the current asynchronous in-game time.
---@return number The asynchronous in-game time.
function UnPredictedCurTime() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- This function retrieves the values from GetAddonStatus and passes them to JS(JavaScript).
function UpdateAddonDisabledState() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- This function is called by UpdateMapList to pass the AddonMaps to JS to be used for the Search.
function UpdateAddonMapList() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the Gamelist.
function UpdateGames() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- This function searches for all available languages and passes them to JS(JavaScript). JS then updates the Language list with the given languages.
function UpdateLanguages() end

---[MENU] Runs JavaScript on the loading screen panel (GetLoadPanel).
---@param javascript string JavaScript to run on the loading panel.
function UpdateLoadPanel(javascript) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Called from JS when starting a new game
--- This function updates the Map List
function UpdateMapList() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Called from JS when starting a new game
--- Updates the Server Settings when called.
function UpdateServerSettings() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the Addons list.
function UpdateSubscribedAddons() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use IsUselessModel instead.
--- Returns whether or not a model is useless by checking that the file path is that of a proper model.
--- If the string ".mdl" is not found in the model name, the function will return true.
--- The function will also return true if any of the following strings are found in the given model name:
--- 
--- "_gesture"
--- "_anim"
--- "_gst"
--- "_pst"
--- "_shd"
--- "_ss"
--- "_posture"
--- "_anm"
--- "ghostanim"
--- "_paths"
--- "_shared"
--- "anim_"
--- "gestures_"
--- "shared_ragdoll_"
---@param modelName string The model name to be checked
---@return boolean Whether or not the model is useless
function UTIL_IsUselessModel(modelName) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use IsValid instead
--- Returns if a panel is safe to use.
---@param panel Panel The panel to validate.
function ValidPanel(panel) end

---[SHARED] Creates a Vector object.
--- This function is very expensive when used in often running hooks or in operations requiring very frequent calls (like loops for example). It is better to store the vector in a variable or to use the default vectors available.
---@param x number The x component of the vector. If this is a Vector, this function will return a copy of the given vector. If this is a string, this function will try to parse the string as a vector. If it fails, it returns a 0 vector. (See examples)
---@param y number The y component of the vector.
---@param z number The z component of the vector.
---@return Vector The created vector object.
function Vector(x, y, z) end

---[SHARED] Returns a random vector whose components are each between min(inclusive), max(exclusive).
---@param min number Min bound inclusive.
---@param max number Max bound exclusive.
---@return Vector The random direction vector.
function VectorRand(min, max) end

---[SHARED] Returns the time in seconds it took to render the VGUI.
function VGUIFrameTime() end

---[CLIENT] Creates and returns a DShape rectangle GUI element with the given dimensions.
---@param x number X position of the created element
---@param y number Y position of the created element
---@param w number Width of the created element
---@param h number Height of the created element
---@return Panel DShape element
function VGUIRect(x, y, w, h) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Used by the vgui_visualizelayout convar
--- Briefly displays layout details of the given panel on-screen
---@param panel Panel Panel to display layout details of
function VisualizeLayout(panel) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns a new WorkshopFileBase element
---@param namespace string Namespace for the file base
---@param requiredTags table Tags required for a Workshop submission to be interacted with by the filebase
---@return table WorkshopFileBase element
function WorkshopFileBase(namespace, requiredTags) end

---[SHARED] Translates the specified position and angle into the specified coordinate system.
---@param position Vector The position that should be translated from the current to the new system.
---@param angle Angle The angles that should be translated from the current to the new system.
---@param newSystemOrigin Vector The origin of the system to translate to.
---@param newSystemAngles Angle The angles of the system to translate to.
---@return Vector, Angle Vector - Local position
---@return Vector, Angle Angle - Local angles
function WorldToLocal(position, angle, newSystemOrigin, newSystemAngles) end

---[SHARED] Attempts to call the first function. If the execution succeeds, this returns true followed by the returns of the function. If execution fails, this returns false and the second function is called with the error message.
--- Unlike in pcall, the stack is not unwound and can therefore be used for stack analyses with the debug.
--- This cannot stop errors from hooks called from the engine.Issue Tracker: 2036This does not stop Error and ErrorNoHalt from sending error messages to the server (if called clientside) or calling the GM:OnLuaError hook. The success boolean returned will always return true and thus you will not get the error message returned. error does not exhibit these behaviours.Issue Tracker: 2498This does not stop errors incurred by include.Issue Tracker: 3112
---@param func function The function to call initially.
---@param errorCallback function The function to be called if execution of the first fails; the error message is passed as a string. You cannot throw an error() from this callback: it will have no effect (not even stopping the callback).
---@param ... ... Arguments to pass to the initial function.
---@return boolean, ... boolean - Status of the execution; true for success, false for failure.
---@return boolean, ... ... - The returns of the first function if execution succeeded, otherwise the first return value of the error callback.
function xpcall(func, errorCallback, ...) end

---@class IGModAudioChannel
local IGModAudioChannel = {}

---[CLIENT] Enables or disables looping of audio channel, requires noblock flag.
---@param enable boolean Enable or disable looping of this audio channel.
function IGModAudioChannel:EnableLooping(enable) end

---[CLIENT] Computes the DFT (discrete Fourier transform) of the sound channel.
--- The size parameter specifies the number of consecutive audio samples to use as the input to the DFT and is restricted to a power of two. A Hann window is applied to the input data.
--- The computed DFT has the same number of frequency bins as the number of samples. Only half of this DFT is returned, since the DFT magnitudes are symmetric for real input data. The magnitudes of the DFT (values from 0 to 1) are used to fill the output table, starting at index 1.
--- Visualization protip: For a size N DFT, bin k (1-indexed) corresponds to a frequency of (k - 1) / N * sampleRate.
--- Visualization protip: Sound energy is proportional to the square of the magnitudes. Adding magnitudes together makes no sense physically, but adding energies does.
--- Visualization protip: The human ear works on a logarithmic amplitude scale. You can convert to decibels by taking 20 * math.log10 of frequency magnitudes, or 10 * math.log10 of energy. The decibel values will range from -infinity to 0.
---@param tbl table The table to output the DFT magnitudes (numbers between 0 and 1) into. Indices start from 1.
---@param size number The number of samples to use. See Enums/FFT
---@return number The number of frequency bins that have been filled in the output table.
function IGModAudioChannel:FFT(tbl, size) end

---[CLIENT] Returns 3D cone of the sound channel. See IGModAudioChannel:Set3DCone.
---@return number, number, number number - The angle of the inside projection cone in degrees.
---@return number, number, number number - The angle of the outside projection cone in degrees.
---@return number, number, number number - The delta-volume outside the outer projection cone.
function IGModAudioChannel:Get3DCone() end

---[CLIENT] Returns if the sound channel is currently in 3D mode or not. This value will be affected by IGModAudioChannel:Set3DEnabled.
---@return boolean Is currently 3D or not.
function IGModAudioChannel:Get3DEnabled() end

---[CLIENT] Returns 3D fade distances of a sound channel.
---@return number, number number - The minimum distance. The channel's volume is at maximum when the listener is within this distance
---@return number, number number - The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance
function IGModAudioChannel:Get3DFadeDistance() end

---[CLIENT] Returns the average bit rate of the sound channel.
---@return number The average bit rate of the sound channel.
function IGModAudioChannel:GetAverageBitRate() end

---[CLIENT] Retrieves the number of bits per sample of the sound channel.
--- Doesn't work for mp3 and ogg files.
---@return number Number of bits per sample, or 0 if unknown.
function IGModAudioChannel:GetBitsPerSample() end

---[CLIENT] Returns the filename for the sound channel.
---@return string The file name. This will not be always what you have put into the sound.PlayURL as first argument.
function IGModAudioChannel:GetFileName() end

---[CLIENT] Returns the length of sound played by the sound channel.
---@return number The length of the sound. This value seems to be less then 0 for continuous radio streams.
function IGModAudioChannel:GetLength() end

---[CLIENT] Returns the right and left levels of sound played by the sound channel.
---@return number, number number - The left sound level. The value is between 0 and 1.
---@return number, number number - The right sound level. The value is between 0 and 1.
function IGModAudioChannel:GetLevel() end

---[CLIENT] Gets the relative volume of the left and right channels.
---@return number Relative volume between the left and right channels. -1 means only in left channel, 0 is center and 1 is only in the right channel. 0 by default.
function IGModAudioChannel:GetPan() end

---[CLIENT] Returns the playback rate of the sound channel.
---@return number The current playback rate of the sound channel
function IGModAudioChannel:GetPlaybackRate() end

---[CLIENT] Returns position of the sound channel
---@return Vector The position of the sound channel, previously set by IGModAudioChannel:SetPos
function IGModAudioChannel:GetPos() end

---[CLIENT] Returns the sample rate for currently playing sound.
---@return number The sample rate in Hz. This should always be 44100.
function IGModAudioChannel:GetSamplingRate() end

---[CLIENT] Returns the state of a sound channel
---@return number The state of the sound channel, see Enums/GMOD_CHANNEL
function IGModAudioChannel:GetState() end

---[CLIENT] Retrieves HTTP headers from a bass stream channel created by sound.PlayURL, if available.
---@return table Returns a table of HTTP headers.Returns nil if no information is available.
function IGModAudioChannel:GetTagsHTTP() end

---[CLIENT] Retrieves the ID3 version 1 info from a bass channel created by sound.PlayFile or sound.PlayURL, if available.
--- ID3v2 is not supported.
---@return table Returns a table containing the information. Returns nil if no information is available.
function IGModAudioChannel:GetTagsID3() end

---[CLIENT] Retrieves meta stream info from a bass stream channel created by sound.PlayURL, if available.
---@return string Returns a string containing the information. Returns nil if no information is available.
function IGModAudioChannel:GetTagsMeta() end

---[CLIENT] Retrieves OGG media info tag, from a bass channel created by sound.PlayURL or sound.PlayFile, if available.
---@return table Returns a table containing the information. Returns nil if no information is available.
function IGModAudioChannel:GetTagsOGG() end

---[CLIENT] Retrieves OGG Vendor tag, usually containing the application that created the file, from a bass channel created by sound.PlayURL or sound.PlayFile, if available.
---@return string Returns a string containing the information. Returns nil if no information is available.
function IGModAudioChannel:GetTagsVendor() end

---[CLIENT] Returns the current time of the sound channel in seconds
---@return number The current time of the stream
function IGModAudioChannel:GetTime() end

---[CLIENT] Returns volume of a sound channel
---@return number The volume of the sound channel
function IGModAudioChannel:GetVolume() end

---[CLIENT] Returns if the sound channel is in 3D mode or not.
---@return boolean Is 3D or not.
function IGModAudioChannel:Is3D() end

---[CLIENT] Returns whether the audio stream is block streamed or not.
---@return boolean Is the audio stream block streamed or not.
function IGModAudioChannel:IsBlockStreamed() end

---[CLIENT] Returns if the sound channel is looping or not.
---@return boolean Is looping or not.
function IGModAudioChannel:IsLooping() end

---[CLIENT] Returns if the sound channel is streamed from the Internet or not.
---@return boolean Is online or not.
function IGModAudioChannel:IsOnline() end

---[CLIENT] Returns if the sound channel is valid or not.
---@return boolean Is the sound channel valid or not
function IGModAudioChannel:IsValid() end

---[CLIENT] Pauses the stream. It can be started again using IGModAudioChannel:Play
function IGModAudioChannel:Pause() end

---[CLIENT] Starts playing the stream.
function IGModAudioChannel:Play() end

---[CLIENT] Sets 3D cone of the sound channel.
---@param innerAngle number The angle of the inside projection cone in degrees. Range is from 0 (no cone) to 360 (sphere), -1 = leave current.
---@param outerAngle number The angle of the outside projection cone in degrees. Range is from 0 (no cone) to 360 (sphere), -1 = leave current.
---@param outerVolume number The delta-volume outside the outer projection cone. Range is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current.
function IGModAudioChannel:Set3DCone(innerAngle, outerAngle, outerVolume) end

---[CLIENT] Sets the 3D mode of the channel. This will affect IGModAudioChannel:Get3DEnabled but not IGModAudioChannel:Is3D.
--- This feature requires the channel to be initially created in 3D mode, i.e. IGModAudioChannel:Is3D should return true or this function will do nothing.
---@param enable boolean true to enable, false to disable 3D.
function IGModAudioChannel:Set3DEnabled(enable) end

---[CLIENT] Sets 3D fade distances of a sound channel.
---@param min number The minimum distance. The channel's volume is at maximum when the listener is within this distance. 0 or less = leave current.
---@param max number The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance. 0 or less = leave current.
function IGModAudioChannel:Set3DFadeDistance(min, max) end

---[CLIENT] Sets the relative volume of the left and right channels.
---@param pan number Relative volume between the left and right channels. -1 means only in left channel, 0 is center and 1 is only in the right channel.
function IGModAudioChannel:SetPan(pan) end

---[CLIENT] Sets the playback rate of the sound channel. May not work with high values for radio streams.
---@param rate number Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc.
function IGModAudioChannel:SetPlaybackRate(rate) end

---[CLIENT] Sets position of sound channel in case the sound channel has a 3d option set.
---@param pos Vector The position to put the sound into
---@param dir Vector The direction of the sound
function IGModAudioChannel:SetPos(pos, dir) end

---[CLIENT] Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.
--- Streamed sounds must have "noblock" parameter for this to work and IGModAudioChannel:IsBlockStreamed must return false.
---@param secs number The time to set the stream to, in seconds.
---@param dont_decode boolean Set to true to skip decoding to set time, and instead just seek to it which is faster. Certain streams do not support seeking and have to decode to the given position.
function IGModAudioChannel:SetTime(secs, dont_decode) end

---[CLIENT] Sets the volume of a sound channel
---@param volume number Volume to set. 1 meaning 100% volume, 0.5 is 50% and 3 is 300%, etc.
function IGModAudioChannel:SetVolume(volume) end

---[CLIENT] Stop the stream. It can be started again using IGModAudioChannel:Play.
--- Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions.Issue Tracker: 1497
function IGModAudioChannel:Stop() end

---@class IMaterial
local IMaterial = {}

---[SHARED] Returns the color of the specified pixel of the $basetexture, only works for materials created from PNG files.
--- Basically identical to ITexture:GetColor used on IMaterial:GetTexture( "$basetexture" ).
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@param x number The X coordinate.
---@param y number The Y coordinate.
---@return table The color of the pixel as a Color.
function IMaterial:GetColor(x, y) end

---[SHARED] Returns the specified material value as a float, or nil if the value is not set.
---@param materialFloat string The name of the material value.
---@return number float
function IMaterial:GetFloat(materialFloat) end

---[SHARED] Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.
--- Please note that certain material flags such as $model are stored in the $flags variable and cannot be directly retrieved with this function. See the full list here: Material Flags
---@param materialInt string The name of the material integer.
---@return number The retrieved value as an integer
function IMaterial:GetInt(materialInt) end

---[SHARED] Gets all the key values defined for the material.
---@return table The material's key values.
function IMaterial:GetKeyValues() end

---[SHARED] Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.
---@param materialMatrix string The name of the material matrix.
---@return VMatrix matrix
function IMaterial:GetMatrix(materialMatrix) end

---[SHARED] Returns the name of the material, in most cases the path.
---@return string Material name/path
function IMaterial:GetName() end

---[SHARED] Returns the name of the materials shader.
--- This function does not work serverside on Linux SRCDS.Issue Tracker: 3256
---@return string shaderName
function IMaterial:GetShader() end

---[SHARED] Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.
---@param materialString string The name of the material string.
---@return string The value as a string
function IMaterial:GetString(materialString) end

---[SHARED] Returns an ITexture based on the passed shader parameter.
---@param param string The shader parameter to retrieve. This should normally be $basetexture.
---@return ITexture The value of the shader parameter. Returns nothing if the param doesn't exist.
function IMaterial:GetTexture(param) end

---[SHARED] Returns the specified material vector, or nil if the value is not set.
--- See also IMaterial:GetVectorLinear
---@param materialVector string The name of the material vector.
---@return Vector The color vector
function IMaterial:GetVector(materialVector) end

---[SHARED] Returns the specified material vector as a 4 component vector.
---@param name string The name of the material vector to retrieve.
---@return number, number, number, number number - The x component of the vector.
---@return number, number, number, number number - The y component of the vector.
---@return number, number, number, number number - The z component of the vector.
---@return number, number, number, number number - The w component of the vector.
function IMaterial:GetVector4D(name) end

---[SHARED] Returns the specified material linear color vector, or nil if the value is not set.
--- See https://en.wikipedia.org/wiki/Gamma_correction
--- See also IMaterial:GetVector
---@param materialVector string The name of the material vector.
---@return Vector The linear color vector
function IMaterial:GetVectorLinear(materialVector) end

---[SHARED] Returns the height of the member texture set for $basetexture.
---@return number height
function IMaterial:Height() end

---[SHARED] Returns whenever the material is valid, i.e. whether it was not loaded successfully from disk or not.
---@return boolean Is this material the error material? (___error)
function IMaterial:IsError() end

---[SHARED] Recomputes the material's snapshot. This needs to be called if you have changed variables on your material and it isn't changing.
--- Be careful though - this function is slow - so try to call it only when needed!
function IMaterial:Recompute() end

---[MENU] Changes the Material into the give Image.
--- This is used internally - although you're able to use it you probably shouldn't.
--- 
--- This is used by the Background to change the Image.
---@param path string The path to a Image.
function IMaterial:SetDynamicImage(path) end

---[SHARED] Sets the specified material float to the specified float, does nothing on a type mismatch.
---@param materialFloat string The name of the material float.
---@param float number The new float value.
function IMaterial:SetFloat(materialFloat, float) end

---[SHARED] Sets the specified material value to the specified int, does nothing on a type mismatch.
--- Please note that certain material flags such as $model are stored in the $flags variable and cannot be directly set with this function. See the full list here: Material Flags
---@param materialInt string The name of the material int.
---@param int number The new int value.
function IMaterial:SetInt(materialInt, int) end

---[SHARED] Sets the specified material value to the specified matrix, does nothing on a type mismatch.
---@param materialMatrix string The name of the material int.
---@param matrix VMatrix The new matrix.
function IMaterial:SetMatrix(materialMatrix, matrix) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This function does nothing
--- The functionality of this function was removed due to the amount of crashes it caused.
---@param shaderName string Name of the shader
function IMaterial:SetShader(shaderName) end

---[SHARED] Sets the specified material value to the specified string, does nothing on a type mismatch.
---@param materialString string The name of the material string.
---@param string string The new string.
function IMaterial:SetString(materialString, string) end

---[SHARED] Sets the specified material texture to the specified texture, does nothing on a type mismatch.
---@param materialTexture string The name of the keyvalue on the material to store the texture on.
---@param texture ITexture The new texture. This can also be a string, the name of the new texture.
function IMaterial:SetTexture(materialTexture, texture) end

---[SHARED] Unsets the value for the specified material value.
---@param materialValueName string The name of the material value to be unset.
function IMaterial:SetUndefined(materialValueName) end

---[SHARED] Sets the specified material vector to the specified vector, does nothing on a type mismatch.
---@param MaterialVector string The name of the material vector.
---@param vec Vector The new vector.
function IMaterial:SetVector(MaterialVector, vec) end

---[SHARED] Sets the specified material vector to the specified 4 component vector, does nothing on a type mismatch.
---@param name string The name of the material vector.
---@param x number The x component of the new vector.
---@param y number The y component of the new vector.
---@param z number The z component of the new vector.
---@param w number The w component of the new vector.
function IMaterial:SetVector4D(name, x, y, z, w) end

---[SHARED] Returns the width of the member texture set for $basetexture.
---@return number width
function IMaterial:Width() end

---@class IMesh
local IMesh = {}

---[CLIENT] Builds the mesh from a table mesh vertexes.
--- See Mesh and util.GetModelMeshes for examples.
---@param vertexes table A table consisting of Structures/MeshVertexs.
function IMesh:BuildFromTriangles(vertexes) end

---[CLIENT] Deletes the mesh and frees the memory used by it.
function IMesh:Destroy() end

---[CLIENT] Renders the mesh with the active matrix.
function IMesh:Draw() end

---[CLIENT] Returns whether this IMesh is valid or not.
---@return boolean Whether this IMesh is valid or not.
function IMesh:IsValid() end

---@class IRestore
local IRestore = {}

---[SHARED] Ends current data block started with IRestore:StartBlock and returns to the parent block.
--- To avoid all sorts of errors, you must end all blocks you start.
function IRestore:EndBlock() end

---[SHARED] Reads next bytes from the restore object as an Angle.
---@return Angle The angle that has been read
function IRestore:ReadAngle() end

---[SHARED] Reads next bytes from the restore object as a boolean.
---@return boolean The boolean that has been read
function IRestore:ReadBool() end

---[SHARED] Reads next bytes from the restore object as an Entity.
---@return Entity The entity that has been read.
function IRestore:ReadEntity() end

---[SHARED] Reads next bytes from the restore object as a floating point number.
---@return number The read floating point number.
function IRestore:ReadFloat() end

---[SHARED] Reads next bytes from the restore object as an integer number.
---@return number The read integer number.
function IRestore:ReadInt() end

---[SHARED] Reads next bytes from the restore object as a string.
---@return string The read string.
function IRestore:ReadString() end

---[SHARED] Reads next bytes from the restore object as a Vector.
---@return Vector The read vector.
function IRestore:ReadVector() end

---[SHARED] Loads next block of data to be read inside current block. Blocks must be ended with IRestore:EndBlock.
---@return string The name of the next data block to be read.
function IRestore:StartBlock() end

---@class ISave
local ISave = {}

---[SHARED] Ends current data block started with ISave:StartBlock and returns to the parent block.
--- To avoid all sorts of errors, you must end all blocks you start.
function ISave:EndBlock() end

---[SHARED] Starts a new block of data that you can write to inside current block. Blocks must be ended with ISave:EndBlock.
---@param name string Name of the new block. Used for determining which block is which, returned by IRestore:StartBlock during game load.
function ISave:StartBlock(name) end

---[SHARED] Writes an Angle to the save object.
---@param ang Angle The angle to write.
function ISave:WriteAngle(ang) end

---[SHARED] Writes a boolean to the save object.
---@param bool boolean The boolean to write.
function ISave:WriteBool(bool) end

---[SHARED] Writes an Entity to the save object.
---@param ent Entity The entity to write.
function ISave:WriteEntity(ent) end

---[SHARED] Writes a floating point number to the save object.
---@param float number The floating point number to write.
function ISave:WriteFloat(float) end

---[SHARED] Writes an integer number to the save object.
---@param int number The integer number to write.
function ISave:WriteInt(int) end

---[SHARED] Writes a null terminated string to the save object.
---@param str string The string to write.
function ISave:WriteString(str) end

---[SHARED] Writes a Vector to the save object.
---@param vec Vector The vector to write.
function ISave:WriteVector(vec) end

---@class ITexture
local ITexture = {}

---[SHARED] Invokes the generator of the texture. Reloads file based textures from disk and clears render target textures.
function ITexture:Download() end

---[SHARED] Returns the color of the specified pixel, only works for textures created from PNG files.
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@param x number The X coordinate.
---@param y number The Y coordinate.
---@return table The color of the pixel as a Color.
function ITexture:GetColor(x, y) end

---[SHARED] Returns the true unmodified height of the texture.
---@return number height
function ITexture:GetMappingHeight() end

---[SHARED] Returns the true unmodified width of the texture.
---@return number width
function ITexture:GetMappingWidth() end

---[SHARED] Returns the name of the texture, in most cases the path.
---@return string name
function ITexture:GetName() end

---[SHARED] Returns the number of animation frames in this texture.
---@return number The number of animation frames in this texture.
function ITexture:GetNumAnimationFrames() end

---[SHARED] Returns the modified height of the texture, this value may be affected by mipmapping and other factors.
---@return number height
function ITexture:Height() end

---[SHARED] Returns whenever the texture is valid. (i.e. was loaded successfully or not)
--- The "error" texture is a valid texture, and therefore this function will return false when used on it. Use ITexture:IsErrorTexture, instead.
---@return boolean Whether the texture was loaded successfully or not.
function ITexture:IsError() end

---[SHARED] Returns whenever the texture is the error texture (pink and black checkerboard pattern).
---@return boolean Whether the texture is the error texture or not.
function ITexture:IsErrorTexture() end

---[SHARED] Returns the modified width of the texture, this value may be affected by mipmapping and other factors.
---@return number width
function ITexture:Width() end

---@class IVideoWriter
local IVideoWriter = {}

---[CLIENT] Adds the current framebuffer to the video stream.
---@param frameTime number Usually set to what FrameTime is, or simply 1/fps.
---@param downsample boolean If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefor not the whole screen.
function IVideoWriter:AddFrame(frameTime, downsample) end

---[CLIENT] Ends the video recording and dumps it to disk.
function IVideoWriter:Finish() end

---[CLIENT] Returns the height of the video stream.
---@return number height
function IVideoWriter:Height() end

---[CLIENT] Sets whether to record sound or not.
---@param record boolean Record.
function IVideoWriter:SetRecordSound(record) end

---[CLIENT] Returns the width of the video stream.
---@return number width
function IVideoWriter:Width() end

---@class IconEditor
local IconEditor = {}

---[CLIENT] Applies the top-down view camera settings for the model in the DAdjustableModelPanel.
--- Called when a user clicks the Above (third) button (See IconEditor).
function IconEditor:AboveLayout() end

---[CLIENT] Applies the best camera settings for the model in the DAdjustableModelPanel, using the values returned by PositionSpawnIcon.
--- Called when a user clicks the wand button (See the ) and when IconEditor:Refresh is called.
function IconEditor:BestGuessLayout() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Fills the DListView on the left of the editor with the model entity's animation list. Called by IconEditor:Refresh.
---@param ent Entity The entity being rendered within the model panel.
function IconEditor:FillAnimations(ent) end

---[CLIENT] Applies the front view camera settings for the model in the DAdjustableModelPanel.
--- Called when a user clicks the Front (second) button (See the ).
function IconEditor:FullFrontalLayout() end

---[CLIENT] Places the camera at the origin (0,0,0), relative to the entity, in the DAdjustableModelPanel.
--- Called when a user clicks the Center (fifth) button (See the ).
function IconEditor:OriginLayout() end

---[CLIENT] Updates the internal DAdjustableModelPanel and SpawnIcon.
--- This should be called immediately after setting the SpawnIcon with IconEditor:SetIcon.
function IconEditor:Refresh() end

---[CLIENT] Re-renders the SpawnIcon.
--- Called when a user clicks the RENDER button, this retrieves the render data from the internal DAdjustableModelPanel and passes it as a table to Panel:RebuildSpawnIconEx.
function IconEditor:RenderIcon() end

---[CLIENT] Applies the right side view camera settings for the model in the DAdjustableModelPanel.
--- Called when a user clicks the Right (fourth) button (See the ). (Note: The icon for this points left.)
function IconEditor:RightLayout() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets up the default ambient and directional lighting for the DAdjustableModelPanel. Called by IconEditor:Refresh.
function IconEditor:SetDefaultLighting() end

---[CLIENT] Sets the editor's model and icon from an entity. Alternative to IconEditor:SetIcon, with uses a SpawnIcon.
--- You do not need to call IconEditor:Refresh after this.
---@param ent Entity The entity to retrieve the model and skin from.
function IconEditor:SetFromEntity(ent) end

---[CLIENT] Sets the SpawnIcon to modify. You should call Panel:Refresh immediately after this, as the user will not be able to make changes to the icon beforehand.
---@param icon Panel The SpawnIcon object to be modified.
function IconEditor:SetIcon(icon) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the entity being rendered in the internal DAdjustableModelPanel. Called by the model panel's DModelPanel:LayoutEntity method.
---@param ent Entity The entity being rendered within the model panel.
function IconEditor:UpdateEntity(ent) end

---@class ImageCheckBox
local ImageCheckBox = {}

---[CLIENT] Returns the checked state of the ImageCheckBox
---@return boolean true for checked, false otherwise
function ImageCheckBox:GetChecked() end

---[CLIENT] Sets the checked state of the checkbox.
--- Checked state can be obtained by ImageCheckBox.State.
---@param OnOff boolean true for checked, false otherwise
function ImageCheckBox:Set(OnOff) end

---[CLIENT] Sets the checked state of the checkbox.
--- Checked state can be obtained via ImageCheckBox:GetChecked
---@param bOn boolean true for checked, false otherwise
function ImageCheckBox:SetChecked(bOn) end

---[CLIENT] Sets the material that will be visible when the ImageCheckBox is checked.
--- Internally calls Material:SetMaterial.
--- Will error if no material was set.
---@param mat string The file path of the material to set (relative to "garrysmod/materials/").
function ImageCheckBox:SetMaterial(mat) end

---@class MarkupObject
local MarkupObject = {}

---[CLIENT] Draws the computed markupobject to the screen. See markup.Parse.
---@param xOffset number The X coordinate on the screen.
---@param yOffset number The Y coordinate on the screen.
---@param xAlign number The alignment of the x coordinate within the text using Enums/TEXT_ALIGN
---@param yAlign number The alignment of the y coordinate within the text using Enums/TEXT_ALIGN
---@param alphaoverride number Sets the alpha of all drawn objects to this value.
---@param textAlign number The alignment of the text horizontally using Enums/TEXT_ALIGN
function MarkupObject:Draw(xOffset, yOffset, xAlign, yAlign, alphaoverride, textAlign) end

---[CLIENT] Gets computed the height of the markupobject.
---@return number The computed height.
function MarkupObject:GetHeight() end

---[CLIENT] Gets maximum width for this markup object as defined in markup.Parse.
---@return number The max width.
function MarkupObject:GetMaxWidth() end

---[CLIENT] Gets computed the width of the markupobject.
---@return number The computed width.
function MarkupObject:GetWidth() end

---[CLIENT] Gets computed the width and height of the markupobject.
---@return number, number number - The computed width.
---@return number, number number - The computed height.
function MarkupObject:Size() end

---@class Material
local Material = {}

---[CLIENT] Sets the alpha value of the Material panel.
---@param alpha number The alpha value, from 0 to 255.
function Material:SetAlpha(alpha) end

---[CLIENT] Sets the material used by the panel.
--- If the material is not showing up as the correct size, try setting the Material panel's AutoSize variable to false
---@param matname string The file path of the material to set (relative to "garrysmod/materials/").
function Material:SetMaterial(matname) end

---@class NEXTBOT
local NEXTBOT = {}

---[SERVER] Called to initialize the behaviour.
--- This is called automatically when the NextBot is created, you should not call it manually.
--- You shouldn't override this unless you know what you are doing - it's used to kick off the coroutine that runs the bot's behaviour. See NEXTBOT:RunBehaviour instead.
function NEXTBOT:BehaveStart() end

---[SERVER] Called to update the bot's behaviour.
---@param interval number How long since the last update
function NEXTBOT:BehaveUpdate(interval) end

---[SERVER] Called to update the bot's animation.
function NEXTBOT:BodyUpdate() end

---[SERVER] Called when the nextbot touches another entity.
---@param ent Entity The entity the nextbot came in contact with.
function NEXTBOT:OnContact(ent) end

---[SERVER] Called when the nextbot NPC sees another Nextbot NPC or a Player.
--- This hook will only run after NextBot:SetFOV or other vision related function is called on the nextbot. See NextBot:IsAbleToSee for more details.This hook is not called in some scenarios.Issue Tracker: 4734
---@param ent Entity the entity that was seen
function NEXTBOT:OnEntitySight(ent) end

---[SERVER] Called when the nextbot NPC loses sight of another Nextbot NPC or a Player.
--- This hook will only run after NextBot:SetFOV or other vision related function is called on the nextbot. See NextBot:IsAbleToSee for more details.This hook is not called in some scenarios.Issue Tracker: 4734
---@param ent Entity the entity that we lost sight of
function NEXTBOT:OnEntitySightLost(ent) end

---[SERVER] Called when the bot is ignited.
function NEXTBOT:OnIgnite() end

---[SERVER] Called when the bot gets hurt. This is a good place to play hurt sounds or voice lines.
---@param info CTakeDamageInfo The damage info
function NEXTBOT:OnInjured(info) end

---[SERVER] Called when the bot gets killed.
---@param info CTakeDamageInfo The damage info
function NEXTBOT:OnKilled(info) end

---[SERVER] Called when the bot's feet return to the ground.
---@param ent Entity The entity the nextbot has landed on.
function NEXTBOT:OnLandOnGround(ent) end

---[SERVER] Called when the bot's feet leave the ground - for whatever reason.
---@param ent Entity The entity the bot "jumped" from.
function NEXTBOT:OnLeaveGround(ent) end

---[SERVER] Called when the nextbot enters a new navigation area.
---@param old CNavArea The navigation area the bot just left
---@param new CNavArea The navigation area the bot just entered
function NEXTBOT:OnNavAreaChanged(old, new) end

---[SERVER] Called when someone else or something else has been killed.
---@param victim Entity The victim that was killed
---@param info CTakeDamageInfo The damage info
function NEXTBOT:OnOtherKilled(victim, info) end

---[SERVER] Called when the bot thinks it is stuck.
function NEXTBOT:OnStuck() end

---[SERVER] Called when a trace attack is done against the nextbot, allowing override of the damage being dealt by altering the CTakeDamageInfo.
--- This is called before NEXTBOT:OnInjured.
---@param info CTakeDamageInfo The damage info
---@param dir Vector The direction the damage goes in
---@param trace table The Structures/TraceResult of the attack, containing the hitgroup.
function NEXTBOT:OnTraceAttack(info, dir, trace) end

---[SERVER] Called when the bot thinks it is un-stuck.
function NEXTBOT:OnUnStuck() end

---[SERVER] A hook called to process nextbot logic.
--- This hook runs in a coroutine by default. It will only be called if NEXTBOT:BehaveStart is not overriden.
function NEXTBOT:RunBehaviour() end

---@class NPC
local NPC = {}

---[SERVER] Makes the NPC like, hate, feel neutral towards, or fear the entity in question. If you want to setup relationship towards a certain entity class, use NPC:AddRelationship.
--- NPCs do not see NextBots by default. This can be fixed by adding the FL_OBJECT flag to the NextBot.
---@param target Entity The entity for the relationship to be applied to.
---@param disposition number A Enums/D representing the relationship type.
---@param priority number How strong the relationship is.
function NPC:AddEntityRelationship(target, disposition, priority) end

---[SERVER] Changes how an NPC feels towards another NPC.  If you want to setup relationship towards a certain entity, use NPC:AddEntityRelationship.
--- Avoid using this in GM:OnEntityCreated to prevent crashing due to infinite loops. This function may create an entity with given class and delete it immediately after.
---@param relationstring string A string representing how the relationship should be set up. Should be formatted as "npc_class Enums/D numberPriority".
function NPC:AddRelationship(relationstring) end

---[SERVER] Force an NPC to play their Alert sound.
function NPC:AlertSound() end

---[SERVER] Executes any movement the current sequence may have.
---@param interval number This is a good place to use Entity:GetAnimTimeInterval.
---@param target Entity 
---@return boolean true if any movement was performed.
function NPC:AutoMovement(interval, target) end

---[SERVER] Adds a capability to the NPC.
---@param capabilities number Capabilities to add, see Enums/CAP.
function NPC:CapabilitiesAdd(capabilities) end

---[SERVER] Removes all of Capabilities the NPC has.
function NPC:CapabilitiesClear() end

---[SERVER] Returns the NPC's capabilities along the ones defined on its weapon.
---@return number The capabilities as a bitflag. See Enums/CAP
function NPC:CapabilitiesGet() end

---[SERVER] Remove a certain capability.
---@param capabilities number Capabilities to remove, see Enums/CAP
function NPC:CapabilitiesRemove(capabilities) end

---[SERVER] Returns the NPC class. Do not confuse with Entity:GetClass!
---@return number See Enums/CLASS
function NPC:Classify() end

---[SERVER] Resets the NPC:GetBlockingEntity.
function NPC:ClearBlockingEntity() end

---[SERVER] Clears out the specified Enums/COND on this NPC.
---@param condition number The Enums/COND to clear out.
function NPC:ClearCondition(condition) end

---[SERVER] Clears the Enemy from the NPC's memory, effectively forgetting it until met again with either the NPC vision or with NPC:UpdateEnemyMemory.
---@param enemy Entity The enemy to mark
function NPC:ClearEnemyMemory(enemy) end

---[SERVER] Clears the NPC's current expression which can be set with NPC:SetExpression.
function NPC:ClearExpression() end

---[SERVER] Clears the current NPC goal or target.
function NPC:ClearGoal() end

---[SERVER] Stops the current schedule that the NPC is doing.
function NPC:ClearSchedule() end

---[SERVER] Translates condition ID to a string.
---@param cond number The NPCs condition ID, see Enums/COND
---@return string A human understandable string equivalent of that condition.
function NPC:ConditionName(cond) end

---[SERVER] Returns the way the NPC "feels" about the entity.
---@param ent Entity The entity to get the disposition from.
---@return number The NPCs disposition, see Enums/D.
function NPC:Disposition(ent) end

---[SERVER] Forces the NPC to drop the specified weapon.
---@param weapon Weapon Weapon to be dropped. If unset, will default to the currently equipped weapon.
---@param target Vector If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
---@param velocity Vector If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
function NPC:DropWeapon(weapon, target, velocity) end

---[SERVER] Makes an NPC exit a scripted sequence, if one is playing.
function NPC:ExitScriptedSequence() end

---[SERVER] Force an NPC to play its Fear sound.
function NPC:FearSound() end

---[SERVER] Force an NPC to play its FoundEnemy sound.
function NPC:FoundEnemySound() end

---[SHARED] Returns the weapon the NPC is currently carrying, or NULL.
---@return Entity The NPCs current weapon
function NPC:GetActiveWeapon() end

---[SERVER] Returns the NPC's current activity.
---@return number Current activity, see Enums/ACT.
function NPC:GetActivity() end

---[SERVER] Returns the aim vector of the NPC. NPC alternative of Player:GetAimVector.
---@return Vector The aim direction of the NPC.
function NPC:GetAimVector() end

---[SERVER] Returns the activity to be played when the NPC arrives at its goal
---@return number 
function NPC:GetArrivalActivity() end

---[SERVER] Returns the sequence to be played when the NPC arrives at its goal.
---@return number Sequence ID to be played, or -1 if there's no sequence.
function NPC:GetArrivalSequence() end

---[SERVER] Returns the most dangerous/closest sound hint based on the NPCs location and the types of sounds it can sense.
---@param types number The types of sounds to choose from. See SOUND_ enums
---@return table A table with SoundHintData structure or nil if no sound hints are nearby.
function NPC:GetBestSoundHint(types) end

---[SERVER] Returns the entity blocking the NPC along its path.
---@return Entity Blocking entity
function NPC:GetBlockingEntity() end

---[SERVER] Returns the NPC's current schedule.
---@return number The NPCs schedule, see Enums/SCHED or -1 if we failed for some reason
function NPC:GetCurrentSchedule() end

---[SERVER] Returns how proficient (skilled) an NPC is with its current weapon.
---@return number NPC's proficiency for current weapon. See Enums/WEAPON_PROFICIENCY.
function NPC:GetCurrentWeaponProficiency() end

---[SERVER] Gets the NPC's current waypoint position (where NPC is currently moving towards), if any is available.
---@return Vector The position of the current NPC waypoint.
function NPC:GetCurWaypointPos() end

---[SERVER] Returns the entity that this NPC is trying to fight.
--- This returns nil if the NPC has no enemy. You should use IsValid (which accounts for nil and NULL) on the return to verify validity of the enemy.Issue Tracker: 3132
---@return NPC Enemy NPC.
function NPC:GetEnemy() end

---[SERVER] Returns the first time an NPC's enemy was seen by the NPC.
---@param enemy Entity The enemy to check.
---@return number First time the given enemy was seen.
function NPC:GetEnemyFirstTimeSeen(enemy) end

---[SERVER] Returns the last known position of an NPC's enemy.
--- Similar to NPC:GetEnemyLastSeenPos, but the known position will be a few seconds ahead of the last seen position.
---@param enemy Entity The enemy to check.
---@return Vector The last known position.
function NPC:GetEnemyLastKnownPos(enemy) end

---[SERVER] Returns the last seen position of an NPC's enemy.
--- Similar to NPC:GetEnemyLastKnownPos, but the known position will be a few seconds ahead of the last seen position.
---@param enemy Entity The enemy to check.
---@return Vector The last seen position.
function NPC:GetEnemyLastSeenPos(enemy) end

---[SERVER] Returns the last time an NPC's enemy was seen by the NPC.
---@param enemy Entity The enemy to check.
---@return number Last time the given enemy was seen.
function NPC:GetEnemyLastTimeSeen(enemy) end

---[SERVER] Returns the expression file the NPC is currently playing.
---@return string The file path of the expression.
function NPC:GetExpression() end

---[SERVER] Returns NPCs hull type set by NPC:SetHullType.
---@return number Hull type, see Enums/HULL
function NPC:GetHullType() end

---[SERVER] Returns the ideal activity the NPC currently wants to achieve.
---@return number The ideal activity. Enums/ACT.
function NPC:GetIdealActivity() end

---[SERVER] Returns the ideal move acceleration of the NPC.
---@return number The ideal move acceleration.
function NPC:GetIdealMoveAcceleration() end

---[SERVER] Returns the ideal move speed of the NPC.
---@return number The ideal move speed.
function NPC:GetIdealMoveSpeed() end

---[SERVER] Returns all known enemies this NPC has.
--- See also NPC:GetKnownEnemyCount
---@return table Table of entities that this NPC knowns as enemies.
function NPC:GetKnownEnemies() end

---[SERVER] Returns known enemy count of this NPC.
--- See also NPC:GetKnownEnemies
---@return number Amount of entities that this NPC knowns as enemies.
function NPC:GetKnownEnemyCount() end

---[SERVER] Returns CurTime based time since this NPC last received damage from given enemy.
---@param enemy Entity The enemy to test. Defaults to currently active enemy (NPC:GetEnemy)
---@return number Time since this NPC last received damage from given enemy.
function NPC:GetLastTimeTookDamageFromEnemy(enemy) end

---[SERVER] Returns NPCs max view distance. An NPC will not be able to see enemies outside of this distance.
---@return number The maximum distance the NPC can see at.
function NPC:GetMaxLookDistance() end

---[SERVER] Returns how far should the NPC look ahead in its route.
---@return number How far the NPC checks ahead of its route.
function NPC:GetMinMoveCheckDist() end

---[SERVER] Returns how far before the NPC can come to a complete stop.
---@param minResult number The minimum value that will be returned by this function.
---@return number The minimum stop distance.
function NPC:GetMinMoveStopDist(minResult) end

---[SERVER] Returns the current timestep the internal NPC motor is working on.
---@return number The current timestep.
function NPC:GetMoveInterval() end

---[SERVER] Returns the NPC's current movement activity.
---@return number Current NPC movement activity, see Enums/ACT.
function NPC:GetMovementActivity() end

---[SERVER] Returns the index of the sequence the NPC uses to move.
---@return number The movement sequence index
function NPC:GetMovementSequence() end

---[SERVER] Returns the current move velocity of the NPC.
---@return Vector The current move velocity of the NPC.
function NPC:GetMoveVelocity() end

---[SERVER] Returns the NPC's navigation type.
---@return number The nav type. See Enums/NAV.
function NPC:GetNavType() end

---[SERVER] Returns the nearest member of the squad the NPC is in.
---@return NPC The nearest member of the squad the NPC is in.
function NPC:GetNearestSquadMember() end

---[SERVER] Gets the NPC's next waypoint position, where NPC will be moving after reaching current waypoint, if any is available.
---@return Vector The position of the next NPC waypoint.
function NPC:GetNextWaypointPos() end

---[SERVER] Returns the NPC's state.
---@return number The NPC's current state, see Enums/NPC_STATE.
function NPC:GetNPCState() end

---[SERVER] Returns the distance the NPC is from Target Goal.
---@return number The number of hammer units the NPC is away from the Goal.
function NPC:GetPathDistanceToGoal() end

---[SERVER] Returns the amount of time it will take for the NPC to get to its Target Goal.
---@return number The amount of time to get to the target goal.
function NPC:GetPathTimeToGoal() end

---[SERVER] Returns the shooting position of the NPC.
--- This only works properly when called on an NPC that can hold weapons, otherwise it will return the same value as Entity:GetPos.
---@return Vector The NPC's shooting position.
function NPC:GetShootPos() end

---[SERVER] Returns the current squad name of the NPC.
---@return string The new squad name to set.
function NPC:GetSquad() end

---[SERVER] Returns the NPC's current target set by NPC:SetTarget.
--- This returns nil if the NPC has no target. You should use IsValid (which accounts for nil and NULL) on the return to verify validity of the target.Issue Tracker: 3132
---@return Entity Target entity
function NPC:GetTarget() end

---[SERVER] Returns the status of the current task.
---@return number The status. See Enums/TASKSTATUS.
function NPC:GetTaskStatus() end

---[SERVER] Returns CurTime based time since the enemy was reacquired, meaning it is currently in Line of Sight of the NPC.
---@param enemy Entity The enemy to test. Defaults to currently active enemy (NPC:GetEnemy)
---@return number Time enemy was last reacquired.
function NPC:GetTimeEnemyLastReacquired(enemy) end

---[SERVER] Returns a specific weapon the NPC owns.
---@param class string A classname of the weapon to try to get.
---@return Weapon The weapon for the specified class, or NULL of the NPC doesn't have given weapon.
function NPC:GetWeapon(class) end

---[SERVER] Returns a table of the NPC's weapons.
---@return table A list of the weapons the NPC currently has.
function NPC:GetWeapons() end

---[SERVER] Used to give a weapon to an already spawned NPC.
---@param weapon string Class name of the weapon to equip to the NPC.
---@return Weapon The weapon entity given to the NPC.
function NPC:Give(weapon) end

---[SERVER] Returns whether or not the NPC has the given condition.
---@param condition number The condition index, see Enums/COND.
---@return boolean True if the NPC has the given condition, false otherwise.
function NPC:HasCondition(condition) end

---[SERVER] Polls the enemy memory to check if the given entity has eluded us or not.
---@param enemy Entity The enemy to test.
---@return boolean If the enemy has eluded us.
function NPC:HasEnemyEluded(enemy) end

---[SERVER] Polls the enemy memory to check if the NPC has any memory of given enemy.
---@param enemy Entity The entity to test.
---@return boolean If we have any memory on given enemy.
function NPC:HasEnemyMemory(enemy) end

---[SERVER] Returns true if the current navigation has a obstacle, this is different from NPC:GetBlockingEntity, this includes obstacles that it can steer around.
---@return boolean true if the current navigation has a obstacle.
function NPC:HasObstacles() end

---[SERVER] Force an NPC to play their Idle sound.
function NPC:IdleSound() end

---[SERVER] Makes the NPC ignore given entity/enemy until given time.
---@param enemy Entity The enemy to ignore.
---@param _until number How long to ignore the enemy for. This will be compared to CurTime, so your value should be based on it.
function NPC:IgnoreEnemyUntil(enemy, _until) end

---[SERVER] Returns whether or not the NPC is performing the given schedule.
---@param schedule number The schedule number, see Enums/SCHED.
---@return boolean True if the NPC is performing the given schedule, false otherwise.
function NPC:IsCurrentSchedule(schedule) end

---[SERVER] Returns whether the NPC has an active goal.
---@return boolean Whether the NPC has an active goal or not.
function NPC:IsGoalActive() end

---[SERVER] Returns if the current movement is locked on the Yaw axis.
---@return boolean Whether the movement is yaw locked or not.
function NPC:IsMoveYawLocked() end

---[SERVER] Returns whether the NPC is moving or not.
---@return boolean Whether the NPC is moving or not.
function NPC:IsMoving() end

---[SERVER] Checks if the NPC is running an ai_goal. ( e.g. An npc_citizen NPC following the Player. )
---@return boolean Returns true if running an ai_goal, otherwise returns false.
function NPC:IsRunningBehavior() end

---[SERVER] Returns whether the current NPC is the leader of the squad it is in.
---@return boolean Whether the NPC is the leader of the squad or not.
function NPC:IsSquadLeader() end

---[SERVER] Returns true if the entity was remembered as unreachable. The memory is updated automatically from following engine tasks if they failed:
--- 
--- TASK_GET_CHASE_PATH_TO_ENEMY
--- TASK_GET_PATH_TO_ENEMY_LKP
--- TASK_GET_PATH_TO_INTERACTION_PARTNER
--- TASK_ANTLIONGUARD_GET_CHASE_PATH_ENEMY_TOLERANCE
--- SCHED_FAIL_ESTABLISH_LINE_OF_FIRE - Combine NPCs, also when failing to change their enemy
---@param testEntity Entity The entity to test.
---@return boolean If the entity is reachable or not.
function NPC:IsUnreachable(testEntity) end

---[SERVER] Force an NPC to play their LostEnemy sound.
function NPC:LostEnemySound() end

---[SERVER] Tries to achieve our ideal animation state, playing any transition sequences that we need to play to get there.
function NPC:MaintainActivity() end

---[SERVER] Causes the NPC to temporarily forget the current enemy and switch on to a better one.
---@param enemy Entity The enemy to mark
function NPC:MarkEnemyAsEluded(enemy) end

---[SERVER] Marks the NPC as took damage from given entity.
--- See also NPC:GetLastTimeTookDamageFromEnemy.
---@param enemy Entity The enemy to mark. Defaults to currently active enemy (NPC:GetEnemy)
function NPC:MarkTookDamageFromEnemy(enemy) end

---[SERVER] Executes a climb move.
--- Related functions are NPC:MoveClimbStart and NPC:MoveClimbStop.
---@param destination Vector The destination of the climb.
---@param dir Vector The direction of the climb.
---@param distance number The distance.
---@param yaw number The yaw angle.
---@param left number Amount of climb nodes left?
---@return number The result. See Enums/AIMR.
function NPC:MoveClimbExec(destination, dir, distance, yaw, left) end

---[SERVER] Starts a climb move.
--- Related functions are NPC:MoveClimbExec and NPC:MoveClimbStop.
---@param destination Vector The destination of the climb.
---@param dir Vector The direction of the climb.
---@param distance number The distance.
---@param yaw number The yaw angle.
function NPC:MoveClimbStart(destination, dir, distance, yaw) end

---[SERVER] Stops a climb move.
--- Related functions are NPC:MoveClimbExec and NPC:MoveClimbStart.
function NPC:MoveClimbStop() end

---[SERVER] Executes a jump move.
--- Related functions are NPC:MoveJumpStart and NPC:MoveJumpStop.
---@return number The result. See Enums/AIMR.
function NPC:MoveJumpExec() end

---[SERVER] Starts a jump move.
--- Related functions are NPC:MoveJumpExec and NPC:MoveJumpStop.
---@param vel Vector The jump velocity.
function NPC:MoveJumpStart(vel) end

---[SERVER] Stops a jump move.
--- Related functions are NPC:MoveJumpExec and NPC:MoveJumpStart.
---@return number The result. See Enums/AIMR.
function NPC:MoveJumpStop() end

---[SERVER] Makes the NPC walk toward the given position. The NPC will return to the player after amount of time set by player_squad_autosummon_time ConVar.
--- Only works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.
--- The NPC must be in the player's squad for this to work.
---@param position Vector The target position for the NPC to walk to.
function NPC:MoveOrder(position) end

---[SERVER] Pauses the NPC movement?
--- Related functions are NPC:MoveStart, NPC:MoveStop and NPC:ResetMoveCalc.
function NPC:MovePause() end

---[SERVER] Starts NPC movement?
--- Related functions are NPC:MoveStop, NPC:MovePause and NPC:ResetMoveCalc.
function NPC:MoveStart() end

---[SERVER] Stops the NPC movement?
--- Related functions are NPC:MoveStart, NPC:MovePause and NPC:ResetMoveCalc.
function NPC:MoveStop() end

---[SERVER] Works similarly to NPC:NavSetRandomGoal.
---@param pos Vector The origin to calculate a path from.
---@param length number The target length of the path to calculate.
---@param dir Vector The direction in which to look for a new path end goal.
---@return boolean Whether path generation was successful or not.
function NPC:NavSetGoal(pos, length, dir) end

---[SERVER] Creates a path to closest node at given position. This won't actually force the NPC to move.
--- See also NPC:NavSetRandomGoal.
---@param pos Vector The position to calculate a path to.
---@return boolean Whether path generation was successful or not.
function NPC:NavSetGoalPos(pos) end

---[SERVER] Set the goal target for an NPC.
---@param target Entity The targeted entity to set the goal to.
---@param offset Vector The offset to apply to the targeted entity's position.
---@return boolean Whether path generation was successful or not
function NPC:NavSetGoalTarget(target, offset) end

---[SERVER] Creates a random path of specified minimum length between a closest start node and random node in the specified direction. This won't actually force the NPC to move.
---@param minPathLength number Minimum length of path in units
---@param dir Vector Unit vector pointing in the direction of the target random node
---@return boolean Whether path generation was successful or not
function NPC:NavSetRandomGoal(minPathLength, dir) end

---[SERVER] Sets a goal in x, y offsets for the NPC to wander to
---@param xOffset number X offset
---@param yOffset number Y offset
---@return boolean Whether path generation was successful or not
function NPC:NavSetWanderGoal(xOffset, yOffset) end

---[SERVER] Forces the NPC to pickup an existing weapon entity. The NPC will not pick up the weapon if they already own a weapon of given type, or if the NPC could not normally have this weapon in their inventory.
---@param wep Weapon The weapon to try to pick up.
---@return boolean Whether the NPC succeeded in picking up the weapon or not.
function NPC:PickupWeapon(wep) end

---[SERVER] Forces the NPC to play a sentence from scripts/sentences.txt
---@param sentence string The sentence string to speak.
---@param delay number Delay in seconds until the sentence starts playing.
---@param volume number The volume of the sentence, from 0 to 1.
---@return number Returns the sentence index, -1 if the sentence couldn't be played.
function NPC:PlaySentence(sentence, delay, volume) end

---[SERVER] Makes the NPC remember an entity or an enemy as unreachable, for a specified amount of time. Use NPC:IsUnreachable to check if an entity is still unreachable.
---@param ent Entity The entity to mark as unreachable.
---@param time number For how long to remember the entity as unreachable. Negative values will act as 3 seconds.
function NPC:RememberUnreachable(ent, time) end

---[SERVER] We advise against using this. It may be changed or removed in a future update.
--- This function crashes the game no matter how it is used and will be removed in a future update.
--- Use NPC:ClearEnemyMemory instead.
function NPC:RemoveMemory() end

---[SERVER] Resets the ideal activity of the NPC. See also NPC:SetIdealActivity.
---@param act number The new activity. See Enums/ACT.
function NPC:ResetIdealActivity(act) end

---[SERVER] Resets all the movement calculations.
--- Related functions are NPC:MoveStart, NPC:MovePause and NPC:MoveStop.
function NPC:ResetMoveCalc() end

---[SERVER] Starts an engine task.
--- Used internally by the ai_task.
---@param taskID number The task ID, see ai_task.h
---@param taskData number The task data.
function NPC:RunEngineTask(taskID, taskData) end

---[SERVER] Forces the NPC to switch to a specific weapon the NPC owns. See NPC:GetWeapons.
---@param class string A classname of the weapon or a Weapon entity to switch to.
function NPC:SelectWeapon(class) end

---[SERVER] Stops any sounds (speech) the NPC is currently palying.
--- Equivalent to Entity:EmitSound( "AI_BaseNPC.SentenceStop" )
function NPC:SentenceStop() end

---[SERVER] Sets the NPC's current activity.
---@param act number The new activity to set, see Enums/ACT.
function NPC:SetActivity(act) end

---[SERVER] 
---@param act number See Enums/ACT.
function NPC:SetArrivalActivity(act) end

---[SERVER] 
---@param dir Vector 
function NPC:SetArrivalDirection(dir) end

---[SERVER] Sets the distance to goal at which the NPC should stop moving and continue to other business such as doing the rest of their tasks in a schedule.
---@param dist number The distance to goal that is close enough for the NPC
function NPC:SetArrivalDistance(dist) end

---[SERVER] 
---@param seq number See Entity:LookupSequence.
function NPC:SetArrivalSequence(seq) end

---[SERVER] Sets the arrival speed? of the NPC
---@param speed number The new arrival speed
function NPC:SetArrivalSpeed(speed) end

---[SERVER] Sets an NPC condition.
---@param condition number The condition index, see Enums/COND.
function NPC:SetCondition(condition) end

---[SERVER] Sets the weapon proficiency of an NPC (how skilled an NPC is with its current weapon).
---@param proficiency number The proficiency for the NPC's current weapon. See Enums/WEAPON_PROFICIENCY.
function NPC:SetCurrentWeaponProficiency(proficiency) end

---[SERVER] Sets the target for an NPC.
---@param enemy Entity The enemy that the NPC should target
---@param newenemy boolean Calls NPC:SetCondition(COND_NEW_ENEMY) if the new enemy is valid and not equal to the last enemy.
function NPC:SetEnemy(enemy, newenemy) end

---[SERVER] Sets the NPC's .vcd expression. Similar to Entity:PlayScene except the scene is looped until it's interrupted by default NPC behavior or NPC:ClearExpression.
---@param expression string The expression filepath.
---@return number 
function NPC:SetExpression(expression) end

---[SERVER] Updates the NPC's hull and physics hull in order to match its model scale. Entity:SetModelScale seems to take care of this regardless.
function NPC:SetHullSizeNormal() end

---[SERVER] Sets the hull type for the NPC.
---@param hullType number Hull type. See Enums/HULL
function NPC:SetHullType(hullType) end

---[SERVER] Sets the ideal activity the NPC currently wants to achieve. This is most useful for custom SNPCs.
---@param number number The ideal activity to set. Enums/ACT.
function NPC:SetIdealActivity(number) end

---[SERVER] Sets the ideal yaw angle (left-right rotation) for the NPC and forces them to turn to that angle.
---@param angle number The aim direction to set, the yaw component.
---@param speed number The turn speed. Special values are:  -1 - Calculate automatically -2 - Keep the previous yaw speed
function NPC:SetIdealYawAndUpdate(angle, speed) end

---[SERVER] Sets the last registered or memorized position for an npc. When using scheduling, the NPC will focus on navigating to the last position via nodes.
--- The navigation requires ground nodes to function properly, otherwise the NPC could only navigate in a small area. (https://developer.valvesoftware.com/wiki/Info_node)
---@param Position Vector Where the NPC's last position will be set.
function NPC:SetLastPosition(Position) end

---[SERVER] Sets NPC's max view distance. An NPC will not be able to see enemies outside of this distance.
---@param dist number New maximum distance the NPC can see at. Default is 2048 and 6000 for long range NPCs such as the sniper.
function NPC:SetMaxLookDistance(dist) end

---[SERVER] Sets how long to try rebuilding path before failing task.
---@param time number How long to try rebuilding path before failing task
function NPC:SetMaxRouteRebuildTime(time) end

---[SERVER] Sets the timestep the internal NPC motor is working on.
---@param time number The new timestep.
function NPC:SetMoveInterval(time) end

---[SERVER] Sets the activity the NPC uses when it moves.
---@param activity number The movement activity, see Enums/ACT.
function NPC:SetMovementActivity(activity) end

---[SERVER] Sets the sequence the NPC navigation path uses for speed calculation. Doesn't seem to have any visible effect on NPC movement.
---@param sequenceId number The movement sequence index
function NPC:SetMovementSequence(sequenceId) end

---[SERVER] Sets the move velocity of the NPC
---@param vel Vector The new movement velocity.
function NPC:SetMoveVelocity(vel) end

---[SERVER] Sets whether the current movement should locked on the Yaw axis or not.
---@param lock boolean Whether the movement should yaw locked or not.
function NPC:SetMoveYawLocked(lock) end

---[SERVER] Sets the navigation type of the NPC.
---@param navtype number The new nav type. See Enums/NAV.
function NPC:SetNavType(navtype) end

---[SERVER] Sets the state the NPC is in to help it decide on a ideal schedule.
---@param state number New NPC state, see Enums/NPC_STATE
function NPC:SetNPCState(state) end

---[SERVER] Sets the NPC's current schedule.
---@param schedule number The NPC schedule, see Enums/SCHED.
function NPC:SetSchedule(schedule) end

---[SERVER] Assigns the NPC to a new squad. A squad can have up to 16 NPCs. NPCs in a single squad should be friendly to each other.
---@param name string The new squad name to set.
function NPC:SetSquad(name) end

---[SERVER] Sets the NPC's target. This is used in some engine schedules.
---@param entity Entity The target of the NPC.
function NPC:SetTarget(entity) end

---[SERVER] Sets the status of the current task.
---@param status number The status. See Enums/TASKSTATUS.
function NPC:SetTaskStatus(status) end

---[SERVER] Forces the NPC to start an engine task, this has different results for every NPC.
---@param task number The id of the task to start, see ai_task.h
---@param taskData number The task data as a float, not all tasks make use of it.
function NPC:StartEngineTask(task, taskData) end

---[SERVER] Resets the NPC's movement animation and velocity. Does not actually stop the NPC from moving.
function NPC:StopMoving() end

---[SERVER] Cancels NPC:MoveOrder basically.
--- Only works on Citizens (npc_citizen) and is a part of the Half-Life 2 squad system.
--- The NPC must be in the player's squad for this to work.
---@param target Entity Must be a player, does nothing otherwise.
function NPC:TargetOrder(target) end

---[SERVER] Marks the current NPC task as completed.
--- This is meant to be used alongside NPC:TaskFail to complete or fail custom Lua defined tasks. (Schedule:AddTask)
function NPC:TaskComplete() end

---[SERVER] Marks the current NPC task as failed.
--- This is meant to be used alongside NPC:TaskComplete to complete or fail custom Lua defined tasks. (Schedule:AddTask)
---@param task string A string most likely defined as a Source Task, for more information on Tasks go to https://developer.valvesoftware.com/wiki/Task
function NPC:TaskFail(task) end

---[SERVER] Force the NPC to update information on the supplied enemy, as if it had line of sight to it.
---@param enemy Entity The enemy to update.
---@param pos Vector The last known position of the enemy.
function NPC:UpdateEnemyMemory(enemy, pos) end

---[SERVER] Updates the turn activity. Basically applies the turn animations depending on the current turn yaw.
function NPC:UpdateTurnActivity() end

---[SERVER] Only usable on "ai" base entities.
---@return boolean If we succeeded setting the behavior.
function NPC:UseActBusyBehavior() end

---[SERVER] 
---@return boolean 
function NPC:UseAssaultBehavior() end

---[SERVER] Only usable on "ai" base entities.
---@return boolean If we succeeded setting the behavior.
function NPC:UseFollowBehavior() end

---[SERVER] 
---@return boolean 
function NPC:UseFuncTankBehavior() end

---[SERVER] 
---@return boolean 
function NPC:UseLeadBehavior() end

---[SERVER] Undoes the other Use*Behavior functions.
--- Only usable on "ai" base entities.
function NPC:UseNoBehavior() end

---@class NextBot
local NextBot = {}

---[SERVER] Become a ragdoll and remove the entity.
---@param info CTakeDamageInfo Damage info passed from an onkilled event
---@return Entity The created ragdoll, if any.
function NextBot:BecomeRagdoll(info) end

---[SERVER] Should only be called in NEXTBOT:BodyUpdate. This sets the move_x and move_y pose parameters of the bot to fit how they're currently moving, sets the animation speed (Entity:GetPlaybackRate) to suit the ground speed, and calls Entity:FrameAdvance.
--- This function might cause crashes with some activities.Issue Tracker: 3420
function NextBot:BodyMoveXY() end

---[SERVER] Like NextBot:FindSpots but only returns a vector.
---@param type string Either "random", "near", "far"
---@param options table This table should contain the search info. string type - The type (Only'hiding' for now) Vector pos - the position to search. number radius - the radius to search. number stepup - the highest step to step up. number stepdown - the highest we can step down without being hurt.
---@return Vector If it finds a spot it will return a vector. If not it will return nil.
function NextBot:FindSpot(type, options) end

---[SERVER] Returns a table of hiding spots.
---@param specs table This table should contain the search info. string type - The type (optional, only 'hiding' supported) Vector pos - the position to search. number radius - the radius to search. number stepup - the highest step to step up. number stepdown - the highest we can step down without being hurt.
---@return table An unsorted table of tables containing: Vector vector - The position of the hiding spot number distance - the distance to that position
function NextBot:FindSpots(specs) end

---[SERVER] Returns the currently running activity
---@return number The current activity
function NextBot:GetActivity() end

---[SERVER] Returns the Field of View of the Nextbot NPC, used for its vision functionality, such as NextBot:IsAbleToSee.
---@return number The current FOV of the nextbot
function NextBot:GetFOV() end

---[SERVER] Returns the maximum range the nextbot can see other nextbots/players at. See NextBot:IsAbleToSee.
---@return number The current vision range
function NextBot:GetMaxVisionRange() end

---[SERVER] Returns squared distance to an entity or a position.
--- See also NextBot:GetRangeTo.
---@param to Vector The position to measure distance to. Can be an entity.
---@return number The squared distance
function NextBot:GetRangeSquaredTo(to) end

---[SERVER] Returns the distance to an entity or position.
--- See also NextBot:GetRangeSquaredTo.
---@param to Vector The position to measure distance to. Can be an entity.
---@return number The distance
function NextBot:GetRangeTo(to) end

---[SERVER] Returns the solid mask for given NextBot.
---@return number The solid mask, see Enums/CONTENTS and Enums/MASK
function NextBot:GetSolidMask() end

---[SERVER] Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.
--- You should always call self.loco:ClearStuck() in this function to reset the stuck status - so it knows it's unstuck. See CLuaLocomotion:ClearStuck.
function NextBot:HandleStuck() end

---[SERVER] Returns if the Nextbot NPC can see the give entity or not.
--- Using this function creates the nextbot vision interface which will cause a significant performance hit!
---@param ent Entity The entity to test if we can see
---@param useFOV number Whether to use the Field of View of the Nextbot
---@return boolean If the nextbot can see or not
function NextBot:IsAbleToSee(ent, useFOV) end

---[SERVER] To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck
---@param pos Vector The position we want to get to
---@param options table A table containing a bunch of tweakable options. number lookahead - Minimum look ahead distance. number tolerance - How close we must be to the goal before it can be considered complete. boolean draw - Draw the path. Only visible on listen servers and single player. number maxage - Maximum age of the path before it times out. number repath - Rebuilds the path after this number of seconds.
---@return string Either "failed", "stuck", "timeout" or "ok" - depending on how the NPC got on
function NextBot:MoveToPos(pos, options) end

---[SERVER] To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning.
---@param name string The sequence name
---@param speed number Playback Rate of that sequence
function NextBot:PlaySequenceAndWait(name, speed) end

---[SERVER] Sets the Field of View for the Nextbot NPC, used for its vision functionality, such as NextBot:IsAbleToSee.
---@param fov number The new FOV
function NextBot:SetFOV(fov) end

---[SERVER] Sets the maximum range the nextbot can see other nextbots/players at. See NextBot:IsAbleToSee.
---@param range number The new vision range to set.
function NextBot:SetMaxVisionRange(range) end

---[SERVER] Sets the solid mask for given NextBot.
--- The default solid mask of a NextBot is MASK_NPCSOLID.
---@param mask number The new mask, see Enums/CONTENTS and Enums/MASK
function NextBot:SetSolidMask(mask) end

---[SERVER] Start doing an activity (animation)
---@param activity number One of the Enums/ACT
function NextBot:StartActivity(activity) end

---@class PANEL
local PANEL = {}

---[CLIENT] Called whenever a panel receives a command signal from one of its children.
--- This hook is called when using Panel:Command, when clicking a Button with Panel:SetCommand set, and when clicking text within a RichText panel that is marked as click-able.
---@param signalName string The name of the signal, usually the sender of the signal or the command name.
---@param signalValue string The value of the signal, usually a command argument.
function PANEL:ActionSignal(signalName, signalValue) end

---[CLIENT] Called every frame unless Panel:IsVisible is set to false. Similar to PANEL:Think, but can be disabled by Panel:SetAnimationEnabled as explained below.
--- If you are overriding this, you must call Panel:AnimationThinkInternal every frame, else animations will cease to work.
--- If you want to "disable" this hook with Panel:SetAnimationEnabled, you must call it after defining this hook. Once disabled, a custom hook will not be re-enabled by Panel:SetAnimationEnabled again - the hook will have to be re-defined.
function PANEL:AnimationThink() end

---[CLIENT] Called whenever the panel should apply its scheme (colors, fonts, style).
--- It is called a few frames after Panel's creation once.
function PANEL:ApplySchemeSettings() end

---[CLIENT] Called when an object is dragged and hovered over this panel for 0.1 seconds.
--- This is used by DPropertySheet and DTree, for example to open a tab or expand a node when an object is hovered over it.
---@param hoverTime number The time the object was hovered over this panel.
function PANEL:DragHoverClick(hoverTime) end

---[CLIENT] Called when this panel is dropped onto another panel.
--- Only works for panels derived from DDragBase.
---@param pnl Panel The panel we are dropped onto
function PANEL:DroppedOn(pnl) end

---[CLIENT] Called when the panel should generate example use case / example code to use for this panel. Used in the panel opened by derma_controls console command.
---@param class string The classname of the panel to generate example for. This will be the class name of your panel.
---@param dpropertysheet Panel A DPropertySheet to add your example to. See examples below.
---@param width number Width of the property sheet?
---@param height number Width of the property sheet?
function PANEL:GenerateExample(class, dpropertysheet, width, height) end

---[CLIENT] Called when the panel is created. This is called for each base type that the panel has.
function PANEL:Init() end

---[CLIENT] Called after Panel:SetCookieName is called on this panel to apply the just loaded cookie values for this panel.
function PANEL:LoadCookies() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called when we are activated during level load. Used by the loading screen panel.
function PANEL:OnActivate() end

---[CLIENT] Called by HTML panels when the target URL of the frame has changed, this happens when you hover over a link.
---@param url string New target URL.
function DHTML:OnChangeTargetURL(url) end

---[CLIENT] Called by HTML panels when the title of the loaded page has been changed.
---@param newTitle string The new title of the page.
function DHTML:OnChangeTitle(newTitle) end

---[CLIENT] Called whenever a child was parented to the panel.
--- This is called before the panel's metatable is set.Issue Tracker: 2759
---@param child Panel The child which was added.
function PANEL:OnChildAdded(child) end

---[CLIENT] Called whenever a child of the panel is about to removed.
---@param child Panel The child which is about to be removed.
function PANEL:OnChildRemoved(child) end

---[CLIENT] Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).
---@param sourceURL string The URL of the page requesting to create a child.
---@param targetURL string The URL of the requested child.
---@param isPopup boolean True if the requested view is a popup.
function DHTML:OnChildViewCreated(sourceURL, targetURL, isPopup) end

---[CLIENT] Called whenever the cursor entered the panels bounds.
function PANEL:OnCursorEntered() end

---[CLIENT] Called whenever the cursor left the panels bounds.
function PANEL:OnCursorExited() end

---[CLIENT] Called whenever the cursor was moved with the panels bounds.
---@param cursorX number The new x position of the cursor relative to the panels origin.
---@param cursorY number The new y position of the cursor relative to the panels origin.
---@return boolean Return true to suppress default action.
function PANEL:OnCursorMoved(cursorX, cursorY) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called when we are deactivated during level load. Used by the loading screen panel.
function PANEL:OnDeactivate() end

---[CLIENT] Called by HTML panels when the panel's DOM has been set up. You can run JavaScript in here.
---@param url string The URL of the current page.
function DHTML:OnDocumentReady(url) end

---[CLIENT] We're being dropped on something
--- We can create a new panel here and return it, so that instead of dropping us - it drops the new panel instead! We remain where we are!
--- Only works for panels derived from DDragBase.
---@return Panel The panel to drop instead of us. By default you should return self.
function PANEL:OnDrop() end

---[CLIENT] Called when this panel successfully loads a page.
---@param url string The URL of the current page.
function DHTML:OnFinishLoadingDocument(url) end

---[CLIENT] Called whenever the panel gained or lost focus.
--- Panel:HasFocus will only be updated on the next frame and will return the "old" value at the time this hook is run. Same goes for vgui.GetKeyboardFocus.
---@param gained boolean If the focus was gained (true) or lost (false).
function PANEL:OnFocusChanged(gained) end

---[CLIENT] Called whenever a keyboard key was pressed while the panel is focused.
--- This is not run for ESC/"cancelselect" binding.Issue Tracker: 2886
---@param keyCode number The key code of the pressed key, see Enums/KEY.
---@return boolean Return true to suppress default action.
function PANEL:OnKeyCodePressed(keyCode) end

---[CLIENT] Called whenever a keyboard key was released while the panel is focused.
--- This is not run for TILDE/"toggleconsole" binding.Issue Tracker: 2886
---@param keyCode number The key code of the released key, see Enums/KEY.
---@return boolean Return true to suppress default action.
function PANEL:OnKeyCodeReleased(keyCode) end

---[CLIENT] Called whenever a mouse key was pressed while the panel is focused.
---@param keyCode number They key code of the key pressed, see Enums/MOUSE.
---@return boolean Return true to suppress default action such as right click opening edit menu for DTextEntry.
function PANEL:OnMousePressed(keyCode) end

---[CLIENT] Called whenever a mouse key was released while the panel is focused.
---@param keyCode number They key code of the key released, see Enums/MOUSE.
---@return boolean Return true to suppress default action.
function PANEL:OnMouseReleased(keyCode) end

---[CLIENT] Called whenever the mouse wheel was used.
---@param scrollDelta number The scroll delta, indicating how much the user turned the mouse wheel.
---@return boolean Return true to suppress default action.
function PANEL:OnMouseWheeled(scrollDelta) end

---[CLIENT] Called when the panel is about to be removed.
function PANEL:OnRemove() end

---[CLIENT] Called when the player's screen resolution of the game changes.
--- ScrW and ScrH will return the new values when this hook is called.
---@param oldWidth number The previous width  of the game's window
---@param oldHeight number The previous height of the game's window
function PANEL:OnScreenSizeChanged(oldWidth, oldHeight) end

---[CLIENT] Called just after the panel size changes.
--- All size functions will return the new values when this hook is called.
--- Changing the panel size in this hook will cause an infinite loop!
---@param newWidth number The new width of the panel
---@param newHeight number The new height of the panel
function PANEL:OnSizeChanged(newWidth, newHeight) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by dragndrop.StartDragging when the panel starts being dragged.
function PANEL:OnStartDragging() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by Panel:DragMouseRelease when the panel object is released after being dragged.
function PANEL:OnStopDragging() end

---[CLIENT] Called whenever the panel should be drawn.
--- You can create panels with a customized appearance by overriding their Paint() function, which will prevent the default appearance from being drawn.
--- Render operations from the surface (and consequentially the draw) are always offset by the global position of this panel, as seen in the example belowThis hook will not run if the panel is completely off the screen. The hook will still run however if any parts of the panel are still on screen.
---@param width number The panel's width.
---@param height number The panel's height.
---@return boolean Returning true prevents the background from being drawn.
function PANEL:Paint(width, height) end

---@class Panel
local Panel = {}

---[CLIENT] Paints a ghost copy of the panel at the given position.
--- Breaks Z pos of panel PANEL:SetZPos
---@param posX number The x coordinate to draw the panel from.
---@param posY number The y coordinate to draw the panel from.
function Panel:PaintAt(posX, posY) end

---[CLIENT] Called whenever the panel and all its children were drawn, return true to override the default drawing.
---@param width number The panels current width.
---@param height number The panels current height.
---@return boolean Should we disable default PaintOver rendering? This is useful in case with Derma panels that use Derma hooks.
function PANEL:PaintOver(width, height) end

---[CLIENT] Parents the panel to the HUD.
--- Makes it invisible on the escape-menu and disables controls.
function Panel:ParentToHUD() end

---[CLIENT] Called whenever the panels' layout needs to be performed again. This means all child panels must be re-positioned to fit the possibly new size of this panel.
--- This can be triggered in numerous ways:
--- 
--- Panel:InvalidateLayout was called this or previous frame (depending on the argument)
--- A child element was added to this panel (TODO: Verify me)
--- The size of this panel has changed
--- 
--- Do NOT call this function directly. Use Panel:InvalidateLayout instead!ExampleCreating a resizeable DFrame with a 'sidebar' that rescales along with the DFrame
--- local frame = vgui.Create("DFrame")
--- frame:SetSize(500, 400)
--- frame:Center()
--- frame:SetSizable(true)
--- -- oPerformLayout stores the original PerformLayout function
--- -- We store it because we are going to overwrite it with our own to scale the Sidebar
--- -- We then call the original function to maintain proper functionality of the frame
--- -- You can find the original PerformLayout here https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dframe.lua#L234-L258
--- local oPerformLayout = frame.PerformLayout
--- 
--- frame.PerformLayout = function(pnl, w, h)
---     oPerformLayout(pnl, w, h)
---     pnl.Sidebar:SetWide(w * 0.5)
--- end
--- 
--- frame.Sidebar = frame:Add("DPanel")
--- frame.Sidebar:Dock(LEFT)
--- 
--- frame.Sidebar.Paint = function(pnl, w, h)
---     surface.SetDrawColor(255, 0, 0)
---     surface.DrawRect(0, 0, w, h)
--- end
--- 
--- frame.Sidebar.PerformLayout = function(pnl, w, h)
---     local buttonWidth = w * 0.5
---     local buttonHeight = h * 0.5
---     pnl.Button:SetSize(buttonWidth, buttonHeight)
---     -- now we center our button
---     pnl.Button:SetPos(w / 2 - buttonWidth / 2, h / 2 - buttonHeight / 2)
--- end
--- 
--- frame.Sidebar.Button = frame.Sidebar:Add("DButton")
--- frame.Sidebar.Button:SetText("Hello!")
---@param width number The panels current width.
---@param height number The panels current height.
function PANEL:PerformLayout(width, height) end

---[CLIENT] Only works on elements defined with derma.DefineControl and only if the panel has AllowAutoRefresh set to true.
--- Called after derma.DefineControl is called with panel's class name.
--- See also PANEL:PreAutoRefresh
function PANEL:PostAutoRefresh() end

---[CLIENT] Only works on elements defined with derma.DefineControl and only if the panel has AllowAutoRefresh set to true.
--- Called when derma.DefineControl is called with this panel's class name before applying changes to this panel.
--- See also PANEL:PostAutoRefresh
function PANEL:PreAutoRefresh() end

---[CLIENT] Enables or disables painting of the panel manually with Panel:PaintManual.
---@param paintedManually boolean True if the panel should be painted manually.
function Panel:SetPaintedManually(paintedManually) end

---[CLIENT] Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.
---@param str string The text to be displayed in the tooltip. Set false to disable it.
function Panel:SetTooltip(str) end

---[CLIENT] Sets the panel to be displayed as contents of a DTooltip when a player hovers over the panel object with their cursor. See Panel:SetTooltipPanelOverride if you are looking to override DTooltip itself.
--- Panel:SetTooltip will override this functionality.Calling this from PANEL:OnCursorEntered is too late! The tooltip will not be displayed or be updated.
--- Given panel or the previously set one will NOT be automatically removed.
---@param tooltipPanel Panel The panel to use as the tooltip.
function Panel:SetTooltipPanel(tooltipPanel) end

---[CLIENT] Sets the panels z position which determines the rendering order.
--- Panels with lower z positions appear behind panels with higher z positions.
--- This also controls in which order panels docked with Panel:Dock appears.
---@param zIndex number The z position of the panel.  Can't be lower than -32768 or higher than 32767.
function Panel:SetZPos(zIndex) end

---[CLIENT] Resizes the panel so that its width and height fit all of the content inside.
--- Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented the Panel:SizeToContents method, such as DNumberWang and DImage.You must call this function AFTER setting text/font, adjusting child panels or otherwise altering the panel.
function Panel:SizeToContents() end

---[CLIENT] Called to test if the panel is being hovered by the mouse. This will only be called if the panel's parent is being hovered.
---@param x number The x coordinate of the cursor, in screen space.
---@param y number The y coordinate of the cursor, in screen space.
---@return boolean Return false when the cursor is not considered on the panel, true if it is considered on the panel. Do not return anything for default behavior.
function PANEL:TestHover(x, y) end

---[CLIENT] Called every frame while Panel:IsVisible is true.
function PANEL:Think() end

---@class PLAYER
local PLAYER = {}

---[SHARED] Called when the player's class was changed from this class.
function PLAYER:ClassChanged() end

---[SERVER] Called when the player dies
function PLAYER:Death() end

---[CLIENT] Called from GM:FinishMove.
--- This hook will not work if the current gamemode overrides GM:FinishMove and does not call this hook.This hook is run after the drive.FinishMove has been called.
---@param mv CMoveData 
---@return boolean Return true to prevent default action
function PLAYER:FinishMove(mv) end

---[CLIENT] Called on player spawn to determine which hand model to use
---@return table A table containing info about view model hands model to be set. See examples.
function PLAYER:GetHandsModel() end

---[SHARED] Called when the class object is created
function PLAYER:Init() end

---[SERVER] Called on spawn to give the player their default loadout
function PLAYER:Loadout() end

---[CLIENT] Called from GM:Move.
--- This hook will not work if the current gamemode overrides GM:Move and does not call this hook.This hook is run after the drive.Move has been called.
---@param mv CMoveData Movement information
---@return boolean Return true to prevent default action
function PLAYER:Move(mv) end

---[CLIENT] Called after the viewmodel has been drawn
---@param viewmodel Entity The viewmodel
---@param weapon Entity The weapon
function PLAYER:PostDrawViewModel(viewmodel, weapon) end

---[CLIENT] Called before the viewmodel is drawn
---@param viewmodel Entity The viewmodel
---@param weapon Entity The weapon
function PLAYER:PreDrawViewModel(viewmodel, weapon) end

---[SERVER] Called when we need to set player model from the class.
--- This will only be called if you have not overridden GM:PlayerSetModel or call this function from it or anywhere else using player_manager.RunClass
function PLAYER:SetModel() end

---[SHARED] Setup the network table accessors.
function PLAYER:SetupDataTables() end

---[SERVER] Called when the player spawns
function PLAYER:Spawn() end

---[CLIENT] Called from GM:CreateMove.
--- This hook will not work if the current gamemode overrides GM:SetupMove and does not call this hook.This hook is run after the drive.StartMove has been called.
---@param mv CMoveData 
---@param cmd CUserCmd 
---@return boolean Return true to prevent default action
function PLAYER:StartMove(mv, cmd) end

---[CLIENT] Called when the player changes their weapon to another one causing their viewmodel model to change
---@param viewmodel Entity The viewmodel that is changing
---@param old string The old model
---@param new string The new model
function PLAYER:ViewModelChanged(viewmodel, old, new) end

---[CLIENT] Adds the specified object to the panel.
---@param object Panel The panel to be added (parented). Can also be:  string Class Name - creates panel with the specified name and adds it to the panel. table PANEL table - creates a panel from table and adds it to the panel.
---@return Panel New panel
function Panel:Add(object) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Does nothing
--- This function does nothing.
function Panel:AddText() end

---[CLIENT] Aligns the panel on the bottom of its parent with the specified offset.
---@param offset number The align offset.
function Panel:AlignBottom(offset) end

---[CLIENT] Aligns the panel on the left of its parent with the specified offset.
---@param offset number The align offset.
function Panel:AlignLeft(offset) end

---[CLIENT] Aligns the panel on the right of its parent with the specified offset.
---@param offset number The align offset.
function Panel:AlignRight(offset) end

---[CLIENT] Aligns the panel on the top of its parent with the specified offset.
---@param offset number The align offset.
function Panel:AlignTop(offset) end

---[CLIENT] Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay.
---@param alpha number The alpha value (0-255) to approach.
---@param duration number The time in seconds it should take to reach the alpha.
---@param delay number The delay before the animation starts.
---@param callback function The function to be called once the animation finishes. Arguments are:  table animData - The AnimationData that was used. See Structures/AnimationData Panel pnl - The panel object whose alpha was changed.
function Panel:AlphaTo(alpha, duration, delay, callback) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Performs the per-frame operations required for panel animations.
--- This is called every frame by PANEL:AnimationThink.
function Panel:AnimationThinkInternal() end

---[CLIENT] Returns the SysTime value when all animations for this panel object will end.
---@return number The system time value when all animations will end for this panel.
function Panel:AnimTail() end

---[CLIENT] Appends text to a RichText element. This does not automatically add a new line.
---@param txt string The text to append (add on).
function Panel:AppendText(txt) end

---[CLIENT] Used by Panel:LoadGWENFile and Panel:LoadGWENString to apply a GWEN controls table to a panel object.
--- You can do this manually using file.Read and util.JSONToTable to import and create a GWEN table structure from a .gwen file. This method can then be called, passing the GWEN table's Controls member.
---@param GWENTable table The GWEN controls table to apply to the panel.
function Panel:ApplyGWEN(GWENTable) end

---[CLIENT] Centers the panel on its parent.
function Panel:Center() end

---[CLIENT] Centers the panel horizontally with specified fraction.
---@param fraction number The center fraction.
function Panel:CenterHorizontal(fraction) end

---[CLIENT] Centers the panel vertically with specified fraction.
---@param fraction number The center fraction.
function Panel:CenterVertical(fraction) end

---[CLIENT] Returns the amount of children of the of panel.
---@return number The amount of children the panel has.
function Panel:ChildCount() end

---[CLIENT] Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner).
---@return number, number number - The children size width.
---@return number, number number - The children size height.
function Panel:ChildrenSize() end

---[CLIENT] Marks all of the panel's children for deletion.
function Panel:Clear() end

---[CLIENT] Fades panels color to specified one. It won't work unless panel has SetColor function.
---@param color table The color to fade to
---@param length number Length of the animation
---@param delay number Delay before start fading
---@param callback function Function to execute when finished
function Panel:ColorTo(color, length, delay, callback) end

---[CLIENT] Sends an action command signal to the panel. The response is handled by PANEL:ActionSignal.
---@param command string The command to send to the panel.
function Panel:Command(command) end

---[CLIENT] Updates a panel object's associated console variable. This must first be set up with Derma_Install_Convar_Functions, and have a ConVar set using Panel:SetConVar.
---@param newValue string The new value to set the associated console variable to.
function Panel:ConVarChanged(newValue) end

---[CLIENT] A think hook for Panels using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.
--- This function is best for: checkboxes, sliders, number wangs
--- For a string alternative, see Panel:ConVarStringThink.
--- Make sure your Panel has a SetValue function, else you may get errors.
function Panel:ConVarNumberThink() end

---[CLIENT] A think hook for panels using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.
--- This function is best for: text inputs, read-only inputs, dropdown selects
--- For a number alternative, see Panel:ConVarNumberThink.
--- Make sure your Panel has a SetValue function, else you may get errors.
function Panel:ConVarStringThink() end

---[CLIENT] Gets the size, position and dock state of the passed panel object, and applies it to this one.
---@param srcPanel Panel The panel to copy the boundary and dock settings from.
function Panel:CopyBase(srcPanel) end

---[CLIENT] Copies position and size of the panel.
---@param base Panel The panel to copy size and position from.
function Panel:CopyBounds(base) end

---[CLIENT] Copies the height of the panel.
---@param base Panel Panel to copy the height from.
function Panel:CopyHeight(base) end

---[CLIENT] Copies the position of the panel.
---@param base Panel Panel to position the width from.
function Panel:CopyPos(base) end

---[CLIENT] Performs the control + c key combination effect ( Copy selection to clipboard ) on selected text in a TextEntry or RichText based element.
function Panel:CopySelected() end

---[CLIENT] Copies the width of the panel.
---@param base Panel Panel to copy the width from.
function Panel:CopyWidth(base) end

---[CLIENT] Returns the cursor position relative to the top left of the panel.
--- This is equivalent to calling gui.MousePos and then Panel:ScreenToLocal.
--- This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
--- ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of PANEL:Think or PANEL:PerformLayout within the last frame.
---@return number, number number - X coordinate of the cursor, relative to the top left of the panel.
---@return number, number number - Y coordinate of the cursor, relative to the top left of the panel.
function Panel:CursorPos() end

---[CLIENT] Performs the control + x (delete text and copy it to clipboard buffer) action on selected text in a TextEntry or RichText based element.
function Panel:CutSelected() end

---[CLIENT] Deletes a cookie value using the panel's cookie name ( Panel:GetCookieName ) and the passed extension.
---@param cookieName string The unique cookie name to delete.
function Panel:DeleteCookie(cookieName) end

---[CLIENT] Resets the panel object's Panel:SetPos method and removes its animation table (Panel.LerpAnim). This effectively undoes the changes made by Panel:LerpPositions.
--- In order to use Lerp animation again, you must call Panel:Stop before setting its SetPosReal property to nil. See the example below.
function Panel:DisableLerp() end

---[CLIENT] Returns the linear distance from the center of this panel object and another. Both panels must have the same parent for this function to work properly.
---@param tgtPanel Panel The target object with which to compare position.
---@return number The linear (straight-line) distance between the center of the two objects.
function Panel:Distance(tgtPanel) end

---[CLIENT] Returns the distance between the center of this panel object and a specified point local to the parent panel.
---@param posX number The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.
---@param posY number The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container, not the panel the function is called on.
---@return number The linear (straight-line) distance between the specified point local to parent panel and the center of this panel object.
function Panel:DistanceFrom(posX, posY) end

---[CLIENT] Sets the dock type for the panel, making the panel "dock" in a certain direction, modifying it's position and size.
--- You can set the inner spacing of a panel's docking using Panel:DockPadding, which will affect docked child panels, and you can set the outer spacing of a panel's docking using Panel:DockMargin, which affects how docked siblings are positioned/sized.
--- You may need to use Panel:SetZPos to ensure child panels (DTextEntry) stay in a specific order.
--- After using this function, if you want to get the correct panel's bounds (position, size), use Panel:InvalidateParent (use true as argument if you need to update immediately)
---@param dockType number Dock type using Enums/DOCK.
function Panel:Dock(dockType) end

---[CLIENT] Sets the dock margin of the panel.
--- The dock margin is the extra space that will be left around the edge when this element is docked inside its parent element.
---@param marginLeft number The left margin to the parent.
---@param marginTop number The top margin to the parent.
---@param marginRight number The right margin to the parent.
---@param marginBottom number The bottom margin to the parent.
function Panel:DockMargin(marginLeft, marginTop, marginRight, marginBottom) end

---[CLIENT] Sets the dock padding of the panel.
--- The dock padding is the extra space that will be left around the edge when child elements are docked inside this element.
---@param paddingLeft number The left padding to the parent.
---@param paddingTop number The top padding to the parent.
---@param paddingRight number The right padding to the parent.
---@param paddingBottom number The bottom padding to the parent.
function Panel:DockPadding(paddingLeft, paddingTop, paddingRight, paddingBottom) end

---[CLIENT] Makes the panel "lock" the screen until it is removed. All input will be directed to the given panel.
--- It will silently fail if used while cursor is not visible.
--- Call Panel:MakePopup before calling this function.
--- This must be called on a panel derived from EditablePanel.
function Panel:DoModal() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by Panel:DragMouseRelease when a user clicks one mouse button whilst dragging with another.
---@return boolean Always returns true.
function Panel:DragClick() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called by dragndrop.HoverThink to perform actions on an object that is dragged and hovered over another.
---@param HoverTime number If this time is greater than 0.1, PANEL:DragHoverClick is called, passing it as an argument.
function Panel:DragHover(HoverTime) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called to end a drag and hover action. This resets the panel's PANEL:PaintOver method, and is primarily used by dragndrop.StopDragging.
function Panel:DragHoverEnd() end

---[CLIENT] Called to inform the dragndrop that a mouse button is being held down on a panel object.
---@param mouseCode number The code for the mouse button pressed, passed by, for example, PANEL:OnMousePressed. See the Enums/MOUSE.
function Panel:DragMousePress(mouseCode) end

---[CLIENT] Called to inform the dragndrop that a mouse button has been depressed on a panel object.
---@param mouseCode number The code for the mouse button pressed, passed by, for example, PANEL:OnMouseReleased. See the Enums/MOUSE.
---@return boolean true if an object was being dragged, otherwise false.
function Panel:DragMouseRelease(mouseCode) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called to draw the drop target when an object is being dragged across another. See Panel:SetDropTarget.
---@param x number The x coordinate of the top-left corner of the drop area.
---@param y number The y coordinate of the top-left corner of the drop area.
---@param width number The width of the drop area.
---@param height number The height of the drop area.
function Panel:DrawDragHover(x, y, width, height) end

---[CLIENT] Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using surface.SetDrawColor. This should only be called within the object's PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawRect.
function Panel:DrawFilledRect() end

---[CLIENT] Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using surface.SetDrawColor. This should only be called within the object's PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawOutlinedRect.
function Panel:DrawOutlinedRect() end

---[CLIENT] Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the object's PANEL:PaintOver hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using Panel:SetSelectable and Panel:SetSelected respectively.
function Panel:DrawSelections() end

---[CLIENT] Used to draw the text in a DTextEntry within a derma skin. This should be called within the SKIN:PaintTextEntry skin hook.
--- Will silently fail if any of arguments are not Color.
---@param textCol table The colour of the main text.
---@param highlightCol table The colour of the selection highlight (when selecting text).
---@param cursorCol table The colour of the text cursor (or caret).
function Panel:DrawTextEntryText(textCol, highlightCol, cursorCol) end

---[CLIENT] Draws a textured rectangle to fill the panel object this method is called on. The texture is set using surface.SetTexture or surface.SetMaterial. This should only be called within the object's PANEL:Paint or PANEL:PaintOver hooks, as a shortcut for surface.DrawTexturedRect.
function Panel:DrawTexturedRect() end

---[CLIENT] Makes this panel droppable. This is used with Panel:Receiver to create drag and drop events.
--- Can be called multiple times with different names allowing to be dropped onto different receivers.
---@param name string Name of your droppable panel
---@return table Blank table stored on the panel itself under pnl.m_DragSlot[ name ]. Is reset every time this function is called and does not appear to be used or exposed anywhere else.
function Panel:Droppable(name) end

---[CLIENT] Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled.
---@return boolean Whether the end point of the selection box was within the selection canvas.
function Panel:EndBoxSelection() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used to run commands within a DHTML window.
---@param cmd string The command to be run.
function Panel:Exec(cmd) end

---[CLIENT] Finds a panel in its children(and sub children) with the given name.
---@param panelName string The name of the panel that should be found.
---@return Panel foundPanel
function Panel:Find(panelName) end

---[CLIENT] Focuses the next panel in the focus queue.
function Panel:FocusNext() end

---[CLIENT] Focuses the previous panel in the focus queue.
function Panel:FocusPrevious() end

---[CLIENT] Returns the alpha multiplier for this panel.
---@return number alphaMul
function Panel:GetAlpha() end

---[CLIENT] Returns the background color of a panel such as a RichText, Label or DColorCube.
--- This doesn't apply to all VGUI elements and its function varies between them
---@return number The Color structure
function Panel:GetBGColor() end

---[CLIENT] Returns the position and size of the panel.
--- This is equivalent to calling Panel:GetPos and Panel:GetSize together.
---@return number, number, number, number number - The x coordinate of the panel, relative to its parent's top left.
---@return number, number, number, number number - The y coordinate of the panel, relative to its parent's top left.
---@return number, number, number, number number - The width of the panel.
---@return number, number, number, number number - The height of the panel.
function Panel:GetBounds() end

---[CLIENT] Returns the position/offset of the caret (or text cursor) in a text-based panel object.
---@return number The caret position/offset from the start of the text. A value of 0 means the caret sits before the first character.
function Panel:GetCaretPos() end

---[CLIENT] Gets a child by its index. For use with Panel:ChildCount.
---@param childIndex number The index of the child to get. This index starts at 0, except when you use this on a DMenu.This index starts at 0, except when you use this on a DMenu.This index starts at 0, except when you use this on a DMenu.
function Panel:GetChild(childIndex) end

---[CLIENT] Gets a child object's position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called.
---@param pnl Panel The panel to get the position of.
---@return number, number number - The horizontal (x) position of the child relative to this panel object.
---@return number, number number - The vertical (y) position of the child relative to this panel object.
function Panel:GetChildPosition(pnl) end

---[CLIENT] Returns a table with all the child panels of the panel.
---@return table All direct children of this panel.
function Panel:GetChildren() end

---[CLIENT] Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle.
---@param x number The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object.
---@param y number The vertical (y) position of the top-left corner of the rectangle, relative to the panel object.
---@param w number The width of the rectangle.
---@param h number The height of the rectangle.
---@return table A table of panel objects that lie at least partially within the specified rectangle.
function Panel:GetChildrenInRect(x, y, w, h) end

---[CLIENT] Returns the class name of the panel.
---@return string className
function Panel:GetClassName() end

---[CLIENT] Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.
---@param x number The horizontal (x) position of the point.
---@param y number The vertical (y) position of the point.
---@return Panel, number Panel - The child object that was closest to the specified point.
---@return Panel, number number - The distance that this child was from the point.
function Panel:GetClosestChild(x, y) end

---[CLIENT] Gets the size of the content/children within a panel object.
--- Only works with Label derived panels by default such as DLabel.
--- Will also work on any panel that manually implements this method.
---@return number, number number - The content width of the object.
---@return number, number number - The content height of the object.
function Panel:GetContentSize() end

---[CLIENT] Gets the value of a cookie stored by the panel object. This can also be done with cookie.GetString, using the panel's cookie name, a fullstop, and then the actual name of the cookie.
--- Make sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with Panel:GetCookieName and Panel:SetCookieName.
---@param cookieName string The name of the cookie from which to retrieve the value.
---@param default string The default value to return if the cookie does not exist.
---@return string The value of the stored cookie, or the default value should the cookie not exist.
function Panel:GetCookie(cookieName, default) end

---[CLIENT] Gets the name the panel uses to store cookies. This is set with Panel:SetCookieName.
---@return string The name the panel uses when reading or writing cookies. The format used is as follows: panelCookieName.individualCookieNamepanelCookieName.individualCookieName
function Panel:GetCookieName() end

---[CLIENT] Gets the value of a cookie stored by the panel object, as a number. This can also be done with cookie.GetNumber, using the panel's cookie name, a fullstop, and then the actual name of the cookie.
--- Make sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with Panel:GetCookieName and Panel:SetCookieName.
---@param cookieName string The name of the cookie from which to retrieve the value.
---@param default number The default value to return if the cookie does not exist.
---@return number The number value of the stored cookie, or the default value should the cookie not exist.
function Panel:GetCookieNumber(cookieName, default) end

---[CLIENT] Returns a dock enum for the panel's current docking type.
---@return number The dock enum for the panel. See Enums/DOCK.
function Panel:GetDock() end

---[CLIENT] Returns the docked margins of the panel. (set by Panel:DockMargin)
---@return number, number, number, number number - Left margin.
---@return number, number, number, number number - Top margin.
---@return number, number, number, number number - Right margin.
---@return number, number, number, number number - Bottom margin.
function Panel:GetDockMargin() end

---[CLIENT] Returns the docked padding of the panel. (set by Panel:DockPadding)
---@return number, number, number, number number - Left padding.
---@return number, number, number, number number - Top padding.
---@return number, number, number, number number - Right padding.
---@return number, number, number, number number - Bottom padding.
function Panel:GetDockPadding() end

---[CLIENT] Returns the foreground color of the panel.
--- For a Label or RichText, this is the color of its text.
--- This doesn't apply to all VGUI elements (such as DLabel) and its function varies between them
---@return table A color structure. See Color
function Panel:GetFGColor() end

---[CLIENT] Returns the name of the font that the panel renders its text with.
--- This is the same font name set with Panel:SetFontInternal.
---@return string fontName
function Panel:GetFont() end

---[CLIENT] Returns the panel's HTML material. Only works with Awesomium, HTML and DHTML panels that have been fully loaded.
---@return IMaterial The HTML material used by the panel. Typically starts with "_vgui_texture" followed by an incremental number.
function Panel:GetHTMLMaterial() end

---[CLIENT] Returns the current maximum character count.
--- This function will only work on RichText and TextEntry panels and their derivatives.
---@return number The maximum amount of characters this panel is allowed to contain.
function Panel:GetMaximumCharCount() end

---[CLIENT] Returns the internal name of the panel. Can be set via Panel:SetName.
---@return string The previously set internal name of the panel.
function Panel:GetName() end

---[CLIENT] Returns the number of lines in a RichText. You must wait a couple frames before calling this after using Panel:AppendText or Panel:SetText, otherwise it will return the number of text lines before the text change.
--- Even though this function can be called on any panel, it will only work with RichText
---@return number The number of lines.
function Panel:GetNumLines() end

---[CLIENT] Returns the parent of the panel, returns nil if there is no parent.
---@return Panel The parent of given panel
function Panel:GetParent() end

---[CLIENT] Returns the position of the panel relative to its Panel:GetParent.
--- If you require the panel's position and size, consider using Panel:GetBounds instead.
--- If you need the position in screen space, see Panel:LocalToScreen.
--- See also Panel:GetX and Panel:GetY.
---@return number, number number - X coordinate, relative to this panels parents top left corner.
---@return number, number number - Y coordinate, relative to this panels parents top left corner.
function Panel:GetPos() end

---[CLIENT] Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type Panel.
---@return table A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive).
function Panel:GetSelectedChildren() end

---[CLIENT] Returns the currently selected range of text.
--- This function will only work on RichText and TextEntry panels and their derivatives.
---@return number, number number - The start of the range. If no text is selected it may be 0 and/or equal to the end range.
---@return number, number number - The end of the range. If no text is selected it may be 0 and/or equal to the start range.
function Panel:GetSelectedTextRange() end

---[CLIENT] Returns the panel object (self) if it has been enabled as a selection canvas. This is achieved using Panel:SetSelectionCanvas.
---@return Panel The panel object this method was called on if enabled as a selection canvas, otherwise nil.
function Panel:GetSelectionCanvas() end

---[CLIENT] Returns the size of the panel.
--- If you require both the panel's position and size, consider using Panel:GetBounds instead.
---@return number, number number - width
---@return number, number number - height
function Panel:GetSize() end

---[CLIENT] Returns the table for the derma skin currently being used by this panel object.
---@return table The derma skin table currently being used by this object.
function Panel:GetSkin() end

---[CLIENT] Returns the internal Lua table of the panel.
---@return table A table containing all the members of given panel object.
function Panel:GetTable() end

---[CLIENT] Returns the height of the panel.
--- See Panel:GetWide for the width of the panel. See also Panel:GetSize for a function that returns both.
---@return number height
function Panel:GetTall() end

---[CLIENT] Returns the panel's text (where applicable).
--- This method returns a maximum of 1023 bytes, except for DTextEntry.
---@return string The panel's text.
function Panel:GetText() end

---[CLIENT] Gets the left and top text margins of a text-based panel object, such as a DButton or DLabel. This is set with Panel:SetTextInset.
---@return number, number number - The left margin of the text, in pixels.
---@return number, number number - The top margin of the text, in pixels.
function Panel:GetTextInset() end

---[CLIENT] Gets the size of the text within a Label derived panel.
---@return number, number number - The width of the text in the DLabel.
---@return number, number number - The height of the text in the DLabel.
function Panel:GetTextSize() end

---[CLIENT] Returns the tooltip text that was set with PANEL:SetTooltip.
---@return string The tooltip text, if it was set.
function Panel:GetTooltip() end

---[CLIENT] Returns the tooltip delay (time between hovering over the panel, and the tooltip showing up) that was set with Panel:SetTooltipDelay, or nothing if it was not set.
--- If the delay is not explicitly set by this function, it will fallback to the value of the tooltip_delay ConVar, which is 0.5 by default.
---@return number The tooltip delay in seconds, if it was set.
function Panel:GetTooltipDelay() end

---[CLIENT] Returns the tooltip panel that was set with PANEL:SetTooltipPanel.
---@return Panel The tooltip panel, if it was set.
function Panel:GetTooltipPanel() end

---[CLIENT] Gets valid receiver slot of currently dragged panel.
---@return Panel, table Panel - The panel this was called on if a valid receiver slot exists, otherwise false.
---@return Panel, table table - The slot table.
function Panel:GetValidReceiverSlot() end

---[CLIENT] Returns the value the panel holds.
--- In engine is only implemented for CheckButton, Label and TextEntry as a string.
--- This function is limited to 8092 Bytes. If using DTextEntry, use Panel:GetText for unlimited bytes.
---@return any The value the panel holds.
function Panel:GetValue() end

---[CLIENT] Returns the width of the panel.
--- See Panel:GetTall for the height of the panel. See also Panel:GetSize for a function that returns both.
---@return number width
function Panel:GetWide() end

---[CLIENT] Returns the X position of the panel relative to its Panel:GetParent.
--- Uses Panel:GetPos internally.
---@return number X coordinate.
function Panel:GetX() end

---[CLIENT] Returns the Y position of the panel relative to its Panel:GetParent.
--- Uses Panel:GetPos internally.
---@return number Y coordinate.
function Panel:GetY() end

---[CLIENT] Returns the Z position of the panel.
---@return number The Z order position of the panel.
function Panel:GetZPos() end

---[CLIENT] Goes back one page in the HTML panel's history if available.
function Panel:GoBack() end

---[CLIENT] Goes forward one page in the HTML panel's history if available.
function Panel:GoForward() end

---[CLIENT] Goes to the page in the HTML panel's history at the specified relative offset.
---@param offset number The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.
function Panel:GoToHistoryOffset(offset) end

---[CLIENT] Causes a RichText element to scroll to the bottom of its text.
function Panel:GotoTextEnd() end

---[CLIENT] Causes a RichText element to scroll to the top of its text.
--- This does not work on the same frame as Panel:SetText.Issue Tracker: 2239
function Panel:GotoTextStart() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the CheckboxText property to a DCheckBoxLabel. This does exactly the same as Panel:GWEN_SetText, but exists to cater for the seperate GWEN properties.
---@param txt string The text to be applied to the DCheckBoxLabel.
function Panel:GWEN_SetCheckboxText(txt) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the ControlName property to a panel. This calls Panel:SetName.
---@param name string The new name to apply to the panel.
function Panel:GWEN_SetControlName(name) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the Dock property to a  panel object. This calls Panel:Dock.
---@param dockState string The dock mode to pass to the panel's Dock method. This reads a string and applies the approriate Enums/DOCK.  Right: Dock right. Left: Dock left. Bottom: Dock at the bottom. Top: Dock at the top. Fill: Fill the parent panel.
function Panel:GWEN_SetDock(dockState) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the HorizontalAlign property to a  panel object. This calls Panel:SetContentAlignment.
---@param hAlign string The alignment, as a string, to pass to Panel:SetContentAlignment. Accepts:  Right: Align mid-right. Left: Align mid-left. Center: Align mid-center.
function Panel:GWEN_SetHorizontalAlign(hAlign) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the Margin property to a  panel object. This calls Panel:DockMargin.
---@param margins table A four-membered table containing the margins as numbers:  number left - The left margin. number top - The top margin. number right - The right margin. number bottom - The bottom margin.
function Panel:GWEN_SetMargin(margins) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the Max property to a  DNumberWang, Slider, DNumSlider or DNumberScratch. This calls SetMax on one of the previously listed methods.
---@param maxValue number The maximum value the element is to permit.
function Panel:GWEN_SetMax(maxValue) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the Min property to a  DNumberWang, Slider, DNumSlider or DNumberScratch. This calls SetMin on one of the previously listed methods.
---@param minValue number The minimum value the element is to permit.
function Panel:GWEN_SetMin(minValue) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the Position property to a  panel object. This calls Panel:SetPos.
---@param pos table A two-membered table containing the x and y coordinates as numbers:  number x - The x coordinate. number y - The y coordinate.
function Panel:GWEN_SetPosition(pos) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the Size property to a  panel object. This calls Panel:SetSize.
---@param size table A two-membered table containing the width and heights as numbers:  number w - The width. number h - The height.
function Panel:GWEN_SetSize(size) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used by Panel:ApplyGWEN to apply the Text property to a panel.
---@param txt string The text to be applied to the panel.
function Panel:GWEN_SetText(txt) end

---[CLIENT] Returns whenever the panel has child panels.
---@return boolean hasChilds
function Panel:HasChildren() end

---[CLIENT] Returns if the panel is focused.
---@return boolean hasFocus
function Panel:HasFocus() end

---[CLIENT] Returns if the panel or any of its children(sub children and so on) has the focus.
---@return boolean hasHierarchicalFocus
function Panel:HasHierarchicalFocus() end

---[CLIENT] Returns whether the panel is a descendent of the given panel.
---@param parentPanel Panel 
---@return boolean True if the panel is contained within parentPanel.
function Panel:HasParent(parentPanel) end

---[CLIENT] Makes a panel invisible.
function Panel:Hide() end

---[CLIENT] Marks the end of a clickable text segment in a RichText element, started with Panel:InsertClickableTextStart.
function Panel:InsertClickableTextEnd() end

---[CLIENT] Starts the insertion of clickable text for a RichText element. Any text appended with Panel:AppendText between this call and Panel:InsertClickableTextEnd will become clickable text.
--- The hook PANEL:ActionSignal is called when the text is clicked, with "TextClicked" as the signal name and signalValue as the signal value.
--- The clickable text is a separate Derma panel which will not inherit the current font from the RichText.
---@param signalValue string The text passed as the action signal's value.
function Panel:InsertClickableTextStart(signalValue) end

---[CLIENT] Inserts a color change in a RichText element, which affects the color of all text added with Panel:AppendText until another color change is applied.
---@param r number The red value (0 - 255).
---@param g number The green value (0 - 255).
---@param b number The blue value (0 - 255).
---@param a number The alpha value (0 - 255).
function Panel:InsertColorChange(r, g, b, a) end

---[CLIENT] Begins a text fade for a RichText element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.
--- The alpha of the text at any given time is determined by the text's base alpha * ((sustain - CurTime) / length) where CurTime is added to sustain when this method is called.
---@param sustain number The number of seconds the text remains visible.
---@param length number The number of seconds it takes the text to fade out. If set lower than sustain, the text will not begin fading out until (sustain - length) seconds have passed. If set higher than sustain, the text will begin fading out immediately at a fraction of the base alpha. If set to -1, the text doesn't fade out.
function Panel:InsertFade(sustain, length) end

---[CLIENT] Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling PANEL:PerformLayout. If you want to perform the layout in the next frame, you will have loop manually through all children, and call Panel:InvalidateLayout on each.
---@param recursive boolean If true, the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected.
function Panel:InvalidateChildren(recursive) end

---[CLIENT] Causes the panel to re-layout in the next frame. During the layout process  PANEL:PerformLayout will be called on the target panel.
--- You should avoid calling this function every frame.
--- Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique Panel:SetZPos to each docked element.Issue Tracker: 2574
---@param layoutNow boolean If true the panel will re-layout instantly and not wait for the next frame.
function Panel:InvalidateLayout(layoutNow) end

---[CLIENT] Calls Panel:InvalidateLayout on the panel's parent. This function will silently fail if the panel has no parent.
--- This will cause the parent panel to re-layout, calling PANEL:PerformLayout.
--- Internally sets LayingOutParent to true on this panel, and will silently fail if it is already set.
---@param layoutNow boolean If true, the re-layout will occur immediately, otherwise it will be performed in the next frame.
function Panel:InvalidateParent(layoutNow) end

---[CLIENT] Determines whether the mouse cursor is hovered over one of this panel object's children. This is a reverse process using vgui.GetHoveredPanel, and looks upward to find the parent.
---@param immediate boolean Set to true to check only the immediate children of given panel ( first level )
---@return boolean Whether or not one of this panel object's children is being hovered over.
function Panel:IsChildHovered(immediate) end

---[CLIENT] Returns whether this panel is draggable ( if user is able to drag it ) or not.
---@return boolean Whether this panel is draggable ( if user is able to drag it ) or not.
function Panel:IsDraggable() end

---[CLIENT] Returns whether this panel is currently being dragged or not.
---@return boolean Whether this panel is currently being dragged or not.
function Panel:IsDragging() end

---[CLIENT] Returns whether the the panel is enabled or disabled.
--- See Panel:SetEnabled for a function that makes the panel enabled or disabled.
---@return boolean Whether the panel is enabled or disabled.
function Panel:IsEnabled() end

---[CLIENT] Returns whether the mouse cursor is hovering over this panel or not
--- Uses vgui.GetHoveredPanel internally.
--- Requires Panel:SetMouseInputEnabled to be set to true.
---@return boolean true if the panel is hovered
function Panel:IsHovered() end

---[CLIENT] Returns true if the panel can receive keyboard input.
---@return boolean keyboardInputEnabled
function Panel:IsKeyboardInputEnabled() end

---[CLIENT] Determines whether or not a HTML or DHTML element is currently loading a page.
--- Before calling Panel:SetHTML or DHTML:OpenURL, the result seems to be false with the Awesomium web renderer and true for the Chromium web renderer. This difference can be used to determine the available HTML5 capabilities.On Awesomium, the result remains true until the root document is loaded and when in-page content is loading (when adding pictures, frames, etc.). During this state, the HTML texture is not refreshed and the panel is not painted (it becomes invisible).
--- On Chromium, the value is only true when the root document is not ready. The rendering is not suspended when in-page elements are loading.
---@return boolean Whether or not the (D)HTML object is loading.
function Panel:IsLoading() end

---[CLIENT] Returns if the panel is going to be deleted in the next frame.
---@return boolean markedForDeletion
function Panel:IsMarkedForDeletion() end

---[CLIENT] Returns whether the panel was made modal or not. See Panel:DoModal.
---@return boolean True if the panel is modal.
function Panel:IsModal() end

---[CLIENT] Returns true if the panel can receive mouse input.
---@return boolean mouseInputEnabled
function Panel:IsMouseInputEnabled() end

---[CLIENT] Returns whether the panel contains the given panel, recursively.
---@param childPanel Panel 
---@return boolean True if the panel contains childPanel.
function Panel:IsOurChild(childPanel) end

---[CLIENT] Returns if the panel was made popup or not. See Panel:MakePopup
---@return boolean true if the panel was made popup.
function Panel:IsPopup() end

---[CLIENT] Determines if the panel object is selectable (like icons in the Spawn Menu, holding ⇧ shift). This is set with Panel:SetSelectable.
---@return boolean Whether the panel is selectable or not.
function Panel:IsSelectable() end

---[CLIENT] Returns if the panel object is selected (like icons in the Spawn Menu, holding ⇧ shift). This can be set in Lua using Panel:SetSelected.
---@return boolean Whether the panel object is selected or not. Always returns false if the object is not selectable. This can be modified using Panel:SetSelectable.
function Panel:IsSelected() end

---[CLIENT] Determines if the panel object is a selection canvas or not. This is set with Panel:SetSelectionCanvas.
---@return any The value (if any) set by Panel:SetSelectionCanvas.
function Panel:IsSelectionCanvas() end

---[CLIENT] Returns if the panel is valid and not marked for deletion.
---@return boolean True if the object is valid.
function Panel:IsValid() end

---[CLIENT] Returns if the panel is visible. This will NOT take into account visibility of the parent.
---@return boolean true if the panel ls visible, false otherwise.
function Panel:IsVisible() end

---[CLIENT] Returns if a panel allows world clicking set by Panel:SetWorldClicker.
---@return boolean If the panel allows world clicking.
function Panel:IsWorldClicker() end

---[CLIENT] Remove the focus from the panel.
function Panel:KillFocus() end

---[CLIENT] Redefines the panel object's Panel:SetPos method to operate using frame-by-frame linear interpolation (Lerp). When the panel's position is changed, it will move to the target position at the speed defined. You can undo this with Panel:DisableLerp.
--- Unlike the other panel animation functions, such as Panel:MoveTo, this animation method will not operate whilst the game is paused. This is because it relies on FrameTime.
---@param speed number The speed at which to move the panel. This is affected by the value of easeOut. Recommended values are:  0.1 - 10 when easeOut is false. 0.1 - 1 when easeOut is true.
---@param easeOut boolean This causes the panel object to 'jump' at the target, slowing as it approaches. This affects the speed value significantly, see above.
function Panel:LerpPositions(speed, easeOut) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.This is used internally - although you're able to use it you probably shouldn't.
--- Similar to Panel:LoadControlsFromString but loads controls from a file.
---@param path string The path to load the controls from.
function Panel:LoadControlsFromFile(path) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.This is used internally - although you're able to use it you probably shouldn't.
--- Loads controls(positions, etc) from given data. This is what the default options menu uses.
---@param data string The data to load controls from. Format unknown.
function Panel:LoadControlsFromString(data) end

---[CLIENT] Loads a .gwen file (created by GWEN Designer) and calls Panel:LoadGWENString with the contents of the loaded file.
--- Used to load panel controls from a file.
---@param filename string The file to open. The path is relative to garrysmod/garrysmod/.
---@param path string The path used to look up the file.  "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc) "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons "DATA" Data folder (garrysmod/data) "MOD" Strictly the game folder (garrysmod/), ignores mounting.
function Panel:LoadGWENFile(filename, path) end

---[CLIENT] Loads controls for the panel from a JSON string.
---@param str string JSON string containing information about controls to create.
function Panel:LoadGWENString(str) end

---[CLIENT] Sets a new image to be loaded by a TGAImage.
---@param imageName string The file path.
---@param strPath string The PATH to search in. See File Search Paths. This isn't used internally.
function Panel:LoadTGAImage(imageName, strPath) end

---[CLIENT] Returns the cursor position local to the position of the panel (usually the upper-left corner).
---@return number, number number - The x coordinate
---@return number, number number - The y coordinate
function Panel:LocalCursorPos() end

---[CLIENT] Gets the absolute screen position of the position specified relative to the panel.
--- See also Panel:ScreenToLocal.
--- This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of PANEL:Think or PANEL:PerformLayout within the last frame.If the panel uses Panel:Dock, this function will return 0, 0 when the panel was created. The position will be updated in the next frame.
---@param posX number The X coordinate of the position on the panel to translate.
---@param posY number The Y coordinate of the position on the panel to translate.
---@return number, number number - The X coordinate relative to the screen.
---@return number, number number - The Y coordinate relative to the screen.
function Panel:LocalToScreen(posX, posY) end

---[CLIENT] Focuses the panel and enables it to receive input.
--- This automatically calls Panel:SetMouseInputEnabled and Panel:SetKeyboardInputEnabled and sets them to true.
--- Panels derived from Panel will not work properly with this function. Due to this, any children will not be intractable with keyboard. Derive from EditablePanel instead.
--- For non gui related mouse focus, you can use gui.EnableScreenClicker.
function Panel:MakePopup() end

---[CLIENT] Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.
---@param doCapture boolean Set to true to enable, set to false to disable.
function Panel:MouseCapture(doCapture) end

---[CLIENT] Places the panel above the passed panel with the specified offset.
---@param panel Panel Panel to position relatively to.
---@param offset number The align offset.
function Panel:MoveAbove(panel, offset) end

---[CLIENT] Places the panel below the passed panel with the specified offset.
---@param panel Panel Panel to position relatively to.
---@param offset number The align offset.
function Panel:MoveBelow(panel, offset) end

---[CLIENT] Moves the panel by the specified coordinates using animation.
---@param moveX number The number of pixels to move by in the horizontal (x) direction.
---@param moveY number The number of pixels to move by in the vertical (y) direction.
---@param time number The time (in seconds) in which to perform the animation.
---@param delay number The delay (in seconds) before the animation begins.
---@param ease number The easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.
---@param callback function The function to be called once the animation is complete. Arguments are:  table animData - The AnimationData that was used. Panel pnl - The panel object that was moved.
function Panel:MoveBy(moveX, moveY, time, delay, ease, callback) end

---[CLIENT] Places the panel left to the passed panel with the specified offset.
---@param panel Panel Panel to position relatively to.
---@param offset number The align offset.
function Panel:MoveLeftOf(panel, offset) end

---[CLIENT] Places the panel right to the passed panel with the specified offset.
---@param panel Panel Panel to position relatively to.
---@param offset number The align offset.
function Panel:MoveRightOf(panel, offset) end

---[CLIENT] Moves the panel to the specified position using animation.
--- Setting the ease argument to 0 will result in the animation happening instantly, this applies to all MoveTo/SizeTo functions
---@param posX number The target x coordinate of the panel.
---@param posY number The target y coordinate of the panel.
---@param time number The time to perform the animation within.
---@param delay number The delay before the animation starts.
---@param ease number The easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.
---@param callback function The function to be called once the animation finishes. Arguments are:  table animData - The Structures/AnimationData that was used. Panel pnl - The panel object that was moved.
function Panel:MoveTo(posX, posY, time, delay, ease, callback) end

---[CLIENT] Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind.
---@param siblingPanel Panel The panel to move this one in front of. Must be a child of the same parent panel.
---@return boolean false if the passed panel is not a sibling, otherwise nil.
function Panel:MoveToAfter(siblingPanel) end

---[CLIENT] Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with Panel:MakePopup, it will still draw in front of any panels that haven't.
function Panel:MoveToBack() end

---[CLIENT] Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the Panel:SetZPos of siblings now in front.
---@param siblingPanel Panel The panel to move this one behind. Must be a child of the same parent panel.
---@return boolean false if the passed panel is not a sibling, otherwise nil.
function Panel:MoveToBefore(siblingPanel) end

---[CLIENT] Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using Panel:MakePopup, it will still draw behind any that have.
function Panel:MoveToFront() end

---[CLIENT] Creates a new animation for the panel object.
--- Methods that use this function:
--- 
--- Panel:MoveTo
--- Panel:SizeTo
--- Panel:SlideUp
--- Panel:SlideDown
--- Panel:ColorTo
--- Panel:AlphaTo
--- Panel:MoveBy
--- Panel:LerpPositions
---@param length number The length of the animation in seconds.
---@param delay number The delay before the animation starts.
---@param ease number The power/index to use for easing.  Positive values greater than 1 will ease in; the higher the number, the sharper the curve's gradient (less linear). A value of 1 removes all easing. Positive values between 0 and 1 ease out; values closer to 0 increase the curve's gradient (less linear). A value of 0 will break the animation and should be avoided. Any value less than zero will ease in/out; the value has no effect on the gradient.
---@param callback function The function to be called when the animation ends. Arguments passed are:  table animTable - The Structures/AnimationData that was used. Panel tgtPanel - The panel object that was animated.
---@return table Partially filled Structures/AnimationData with members:  number EndTime - Equal to length and delay arguments added together, plus either the SysTime if there is no other animation queued or the end time of the last animation in the queue. number StartTime - Equal to the delay argument, plus either the SysTime if there is no other animation queued or the end time of the last animation in the queue. number Ease - Equal to the ease argument. function OnEnd - Equal to the callback argument.
function Panel:NewAnimation(length, delay, ease, callback) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@param objectName string 
function Panel:NewObject(objectName) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
---@param objectName string 
---@param callbackName string 
function Panel:NewObjectCallback(objectName, callbackName) end

---[CLIENT] Sets whether this panel's drawings should be clipped within the parent panel's bounds.
--- See also DisableClipping.
---@param clip boolean Whether to clip or not.
function Panel:NoClipping(clip) end

---[CLIENT] Returns the number of children of the panel object that are selected. This is equivalent to calling Panel:IsSelected on all child objects and counting the number of returns that are true.
---@return number The number of child objects that are currently selected. This does not include the parent object you are calling the method from.
function Panel:NumSelectedChildren() end

---[CLIENT] Called when this panel begins loading a page.
---@param url string The URL of the current page.
function DHTML:OnBeginLoadingDocument(url) end

---[CLIENT] Called by the engine when a callback function is called.
---@param library string Library name of the JS function you are defining.
---@param name string Name of the JS function you are defining.
---@param callback function Function called when the JS function is called. Arguments passed to the JS function will be passed here.
---@return boolean Return true to suppress default engine action.
function DHTML:OnCallback(library, name, callback) end

---[CLIENT] Called whenever the cursor entered the panels bounds.
function PANEL:OnCursorEntered() end

---[CLIENT] Called when this panel successfully loads a page.
---@param url string The URL of the current page.
function DHTML:OnFinishLoadingDocument(url) end

---[CLIENT] Instructs a HTML control to download and parse a HTML script using the passed URL.
--- This function can also be used on HTML.
---@param URL string URL to open. It has to start or be one of the following:  http:// https:// asset:// about:blank chrome://credits/
function Panel:OpenURL(URL) end

---[CLIENT] Paints a ghost copy of the panel at the given position.
--- Breaks Z pos of panel PANEL:SetZPos
---@param posX number The x coordinate to draw the panel from.
---@param posY number The y coordinate to draw the panel from.
function Panel:PaintAt(posX, posY) end

Panel = {}

---[CLIENT] Set to true by the dragndrop system when the panel is being drawn for the drag'n'drop.
---@return boolean Set to true if drawing for the transparent dragging render.
function Panel.PaintingDragging() end

---[CLIENT] Paints the panel at its current position. To use this you must call Panel:SetPaintedManually(true).
function Panel:PaintManual() end

---[CLIENT] Parents the panel to the HUD.
--- Makes it invisible on the escape-menu and disables controls.
function Panel:ParentToHUD() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Due to privacy concerns, this function has been disabled
--- Only works for TextEntries.
--- Pastes the contents of the clipboard into the TextEntry.
--- Tab characters will be dropped from the pasted text
function Panel:Paste() end

---[CLIENT] Sets the width and position of a DLabel and places the passed panel object directly to the right of it. Returns the y value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected.
---@param lblWidth number The width to set the label to.
---@param x number The horizontal (x) position at which to place the label.
---@param y number The vertical (y) position at which to place the label.
---@param lbl Panel The label to resize and position.
---@param panelObj Panel The panel object to place to the right of the label.
---@return number The distance from the top of the parent panel to the bottom of the tallest object (the y position plus the height of the label or passed panel, depending on which is tallest).
function Panel:PositionLabel(lblWidth, x, y, lbl, panelObj) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Only used in deprecated Derma controls.
--- Sends a command to the panel.
---@param messageName string The name of the message.
---@param valueType string The type of the variable to post.
---@param value string The value to post.
function Panel:PostMessage(messageName, valueType, value) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Installs Lua defined functions into the panel.
function Panel:Prepare() end

---[CLIENT] Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before Panel:NewAnimation to work, and only applies to the next new animation. If you want to queue many, you must call this before each.
function Panel:Queue() end

---[CLIENT] Causes a SpawnIcon to rebuild its model image.
function Panel:RebuildSpawnIcon() end

---[CLIENT] Re-renders a spawn icon with customized cam data.
--- PositionSpawnIcon can be used to easily calculate the necessary camera parameters.
--- This function does not accept the standard Structures/CamData.
---@param data table A four-membered table containing the information needed to re-render:  Vector cam_pos - The relative camera position the model is viewed from. Angle cam_ang - The camera angle the model is viewed from. number cam_fov - The camera's field of view (FOV). Entity ent - The entity object of the model. See the example below for how to retrieve these values.
function Panel:RebuildSpawnIconEx(data) end

---[CLIENT] Allows the panel to receive drag and drop events. Can be called multiple times with different names to receive multiple different draggable panel events.
---@param name string Name of DnD panels to receive. This is set on the drag'n'drop-able panels via  Panel:Droppable
---@param func function This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:  Panel pnl - The receiver panel table tbl - A table of panels dropped onto receiver panel boolean dropped - False if hovering over, true if dropped onto number menuIndex - Index of clicked menu item from third argument of Panel:Receiver number x - Cursor pos, relative to the receiver number y - Cursor pos, relative to the receiver
---@param menu table A table of strings that will act as a menu if drag'n'drop was performed with a right click
function Panel:Receiver(name, func, menu) end

---[CLIENT] Refreshes the HTML panel's current page.
---@param ignoreCache boolean If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers.
function Panel:Refresh(ignoreCache) end

---[CLIENT] Marks a panel for deletion so it will be deleted on the next frame.
--- This will not mark child panels for deletion this frame, but they will be marked and deleted in the next frame.
--- See also Panel:IsMarkedForDeletion
--- Will automatically call Panel:InvalidateParent.
function Panel:Remove() end

---[CLIENT] Attempts to obtain focus for this panel.
function Panel:RequestFocus() end

---[CLIENT] Resets all text fades in a RichText element made with Panel:InsertFade.
---@param hold boolean True to reset fades, false otherwise.
---@param expiredOnly boolean Any value equating to true will reset fades only on text segments that are completely faded out.
---@param newSustain number The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.
function Panel:ResetAllFades(hold, expiredOnly, newSustain) end

---[CLIENT] Runs/Executes a string as JavaScript code in a panel.
--- This function does NOT evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).Because a return value is nil/no value (a.k.a. void).If you wish to pass/return values from JS to Lua, you may want to use DHTML:AddFunction function to accomplish that job.The Awesomium web renderer automatically delays the code execution if the document is not ready, but the Chromium web renderer does not!
--- This means that with Chromium, you cannot JavaScript run code immediatly after calling Panel:SetHTML or DHTML:OpenURL. You should wait for the events PANEL:OnDocumentReady or PANEL:OnFinishLoadingDocument to be triggered before proceeding, otherwise you may manipulate an empty / incomplete document.
---@param js string Specify JavaScript code to be executed.
function Panel:RunJavascript(js) end

---[CLIENT] Saves the current state (caret position and the text inside) of a TextEntry as an undo state.
--- See also Panel:Undo.
function Panel:SaveUndoState() end

---[CLIENT] Translates global screen coordinate to coordinates relative to the panel.
--- See also Panel:LocalToScreen.
--- This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass, so inaccurate results may be returned if the panel or any of its ancestors have been re-positioned outside of PANEL:Think or PANEL:PerformLayout within the last frame.
---@param screenX number The x coordinate of the screen position to be translated.
---@param screenY number The y coordinate of the screed position be to translated.
---@return number, number number - Relativeposition X
---@return number, number number - Relativeposition Y
function Panel:ScreenToLocal(screenX, screenY) end

---[CLIENT] Selects all items within a panel or object. For text-based objects, selects all text.
function Panel:SelectAll() end

---[CLIENT] If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.
function Panel:SelectAllOnFocus() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Duplicate of Panel:SelectAll.
--- Selects all the text in a panel object. Will not select non-text items; for this, use Panel:SelectAll.
function Panel:SelectAllText() end

---[CLIENT] Deselects all items in a panel object. For text-based objects, this will deselect all text.
function Panel:SelectNone() end

---[CLIENT] Sets the achievement to be displayed by AchievementIcon.
---@param id number Achievement number ID
function Panel:SetAchievement(id) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Does nothing at all.
--- Used in Button to call a function when the button is clicked and in Slider when the value changes.
---@param func function Function to call when the Button is clicked or the Slider value is changed. Arguments given are:  Panel self - The panel itself string action - "Command" on button press, "SliderMoved" on slider move. number val - The new value of the Slider. Will always equal 0 for buttons. number zed - Always equals 0.
function Panel:SetActionFunction(func) end

---[CLIENT] Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.
--- Characters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.
---@param allowed boolean Set to true in order not to restrict input characters.
function Panel:SetAllowNonAsciiCharacters(allowed) end

---[CLIENT] Sets the alpha multiplier for the panel
---@param alpha number The alpha value in the range of 0-255.
function Panel:SetAlpha(alpha) end

---[CLIENT] Enables or disables animations for the panel object by overriding the PANEL:AnimationThink hook to nil and back.
---@param enable boolean Whether to enable or disable animations.
function Panel:SetAnimationEnabled(enable) end

---[CLIENT] Sets whenever the panel should be removed if the parent was removed.
---@param autoDelete boolean Whenever to delete if the parent was removed or not.
function Panel:SetAutoDelete(autoDelete) end

---[CLIENT] Sets the background color of a panel such as a RichText, Label or DColorCube.
--- This doesn't apply to all VGUI elements and its function varies between them
--- For DLabel elements, you must use Panel:SetPaintBackgroundEnabled( true ) before applying the color.
--- This will not work on setup of the panel - you should use this function in a hook like PANEL:ApplySchemeSettings or PANEL:PerformLayout.
---@param rOrColor number The red channel of the color, or a Color. If you pass the latter, the following three arguments are ignored.
---@param g number The green channel of the color.
---@param b number The blue channel of the color.
---@param a number The alpha channel of the color.
function Panel:SetBGColor(rOrColor, g, b, a) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the background color of the panel.
---@param r number The red channel of the color.
---@param g number The green channel of the color.
---@param b number The blue channel of the color.
---@param a number The alpha channel of the color.
function Panel:SetBGColorEx(r, g, b, a) end

---[CLIENT] Sets the position of the caret (or text cursor) in a text-based panel object.
---@param offset number Caret position/offset from the start of text. A value of 0 places the caret before the first character.
function Panel:SetCaretPos(offset) end

---[CLIENT] Sets the action signal command that's fired when a Button is clicked. The hook PANEL:ActionSignal is called as the click response.
--- This has no effect on buttons unless it has had its AddActionSignalTarget method called (an internal function not available by default in Garry's Mod LUA).
--- A better alternative is calling Panel:Command when a DButton is clicked.
function Panel:SetCommand() end

---[CLIENT] Sets the alignment of the contents.
---@param alignment number The direction of the content, based on the number pad. 1: bottom-left  2: bottom-center  3: bottom-right  4: middle-left  5: center  6: middle-right  7: top-left  8: top-center  9: top-right
function Panel:SetContentAlignment(alignment) end

---[CLIENT] This function does not exist on all panelsThis function cannot interact with serverside convars unless you are hostBlocked convars will not work with this, see Blocked ConCommands
--- Sets this panel's convar. When the convar changes this panel will update automatically.
--- For developer implementation, see Derma_Install_Convar_Functions.
---@param convar string The console variable to check.
function Panel:SetConVar(convar) end

---[CLIENT] Stores a string in the named cookie using Panel:GetCookieName as prefix.
--- You can also retrieve and modify this cookie by using the cookie. Cookies are stored in this format:
--- panelCookieName.cookieNameThe panel's cookie name MUST be set for this function to work. See Panel:SetCookieName.
---@param cookieName string The unique name used to retrieve the cookie later.
---@param value string The value to store in the cookie. This can be retrieved later as a string or number.
function Panel:SetCookie(cookieName, value) end

---[CLIENT] Sets the panel's cookie name. Calls PANEL:LoadCookies if defined.
---@param name string The panel's cookie name. Used as prefix for Panel:SetCookie
function Panel:SetCookieName(name) end

---[CLIENT] Sets the appearance of the cursor. You can find a list of all available cursors with image previews here.
---@param cursor string The cursor to be set. Can be one of the following:  arrow beam hourglass waitarrow crosshair up sizenwse sizenesw sizewe sizens sizeall no hand blank  Set to anything else to set it to "none", the default fallback. Do note that a value of "none" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of "blank" instead.
function Panel:SetCursor(cursor) end

---[CLIENT] Sets the drag parent.
--- Drag parent means that when we start to drag this panel, we'll really start dragging the defined parent.
---@param parent Panel The panel to set as drag parent.
function Panel:SetDragParent(parent) end

---[CLIENT] Sets the visibility of the language selection box when typing in non-English mode.
--- See Panel:SetDrawLanguageIDAtLeft for a function that changes the position of the language selection box.
---@param visible boolean true to make it visible, false to hide it.
function DTextEntry:SetDrawLanguageID(visible) end

---[CLIENT] Sets where to draw the language selection box.
--- See Panel:SetDrawLanguageID for a function that hides or shows the language selection box.
---@param left boolean true = left, false = right
function DTextEntry:SetDrawLanguageIDAtLeft(left) end

---[CLIENT] Makes the panel render in front of all others, including the spawn menu and main menu.
--- Priority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.
--- This only makes the panel draw above other panels. If there's another panel that would have otherwise covered it, users will not be able to interact with it.
--- Completely disregards PANEL:ParentToHUD.This does not work when using PANEL:SetPaintedManually or PANEL:PaintAt.
---@param drawOnTop boolean Whether or not to draw the panel in front of all others.
function Panel:SetDrawOnTop(drawOnTop) end

---[CLIENT] Sets the target area for dropping when an object is being dragged around this panel using the dragndrop.
--- This draws a target box of the specified size and position, until Panel:DragHoverEnd is called. It uses Panel:DrawDragHover to draw this area.
---@param x number The x coordinate of the top-left corner of the drop area.
---@param y number The y coordinate of the top-left corner of the drop area.
---@param width number The width of the drop area.
---@param height number The height of the drop area.
function Panel:SetDropTarget(x, y, width, height) end

---[CLIENT] Sets the enabled state of a disable-able panel object, such as a DButton or DTextEntry.
--- See Panel:IsEnabled for a function that retrieves the "enabled" state of a panel.
---@param enable boolean Whether to enable or disable the panel object.
function Panel:SetEnabled(enable) end

---[CLIENT] Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.
---@param distance number The distance of the shadow from the panel.
---@param Color table The color of the shadow. Uses the Color.
function Panel:SetExpensiveShadow(distance, Color) end

---[CLIENT] Sets the foreground color of a panel.
--- For a Label or RichText, this is the color of its text.
--- This function calls Panel:SetFGColorEx internally.
--- This doesn't apply to all VGUI elements (such as DLabel) and its function varies between them
---@param rOrColor number The red channel of the color, or a Color. If you pass the latter, the following three arguments are ignored.
---@param g number The green channel of the color.
---@param b number The blue channel of the color.
---@param a number The alpha channel of the color.
function Panel:SetFGColor(rOrColor, g, b, a) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the foreground color of the panel.
--- For labels, this is the color of their text.
---@param r number The red channel of the color.
---@param g number The green channel of the color.
---@param b number The blue channel of the color.
---@param a number The alpha channel of the color.
function Panel:SetFGColorEx(r, g, b, a) end

---[CLIENT] Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy. This function will only work on EditablePanel class panels and its derivatives.
---@param state boolean 
function Panel:SetFocusTopLevel(state) end

---[CLIENT] Sets the font used to render this panel's text. This works for Label, TextEntry and RichText, but it's a better idea to use their local SetFont (DTextEntry:SetFont, DLabel:SetFont) methods when available.
--- To retrieve the font used by a panel, call Panel:GetFont.
---@param fontName string The name of the font. See here for a list of existing fonts. Alternatively, use surface.CreateFont to create your own custom font.
function Panel:SetFontInternal(fontName) end

---[CLIENT] Sets the height of the panel.
--- Calls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).
--- See also Panel:SetSize.
---@param height number The height to be set.
function Panel:SetHeight(height) end

---[CLIENT] Allows you to set HTML code within a panel.
---@param hTMLCode string The code to set.
function Panel:SetHTML(hTMLCode) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Alias of Panel:SetKeyboardInputEnabled
--- Enables or disables the keyboard input for the panel.
---@param keyboardInput boolean Whether to enable or disable keyboard input.
function Panel:SetKeyBoardInputEnabled(keyboardInput) end

---[CLIENT] Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children.
---@param enable boolean Whether keyboard input should be enabled for this panel.
function Panel:SetKeyboardInputEnabled(enable) end

---[CLIENT] Sets the maximum character count this panel should have.
--- This function will only work on RichText and TextEntry panels and their derivatives.
---@param maxChar number The new maximum amount of characters this panel is allowed to contain.
function Panel:SetMaximumCharCount(maxChar) end

---[CLIENT] Sets the minimum dimensions of the panel or object.
--- You can restrict either or both values.
--- Calling the function without arguments will remove the minimum size.
---@param minW number The minimum width of the object.
---@param minH number The minimum height of the object.
function Panel:SetMinimumSize(minW, minH) end

---[CLIENT] Sets the model to be displayed by SpawnIcon.
--- This must be called after setting size if you wish to use a different size spawnicon
---@param ModelPath string The path of the model to set
---@param skin number The skin to set
---@param bodygroups string The body groups to set. Each single-digit number in the string represents a separate bodygroup, This argument must be 9 characters in total.
function Panel:SetModel(ModelPath, skin, bodygroups) end

---[CLIENT] Enables or disables the mouse input for the panel.
--- Panels parented to the context menu will not be clickable unless Panel:SetKeyboardInputEnabled is enabled or Panel:MakePopup has been called. If you want the panel to have mouse input but you do not want to prevent players from moving, set Panel:SetKeyboardInputEnabled to false immediately after calling Panel:MakePopup.
---@param mouseInput boolean Whenever to enable or disable mouse input.
function Panel:SetMouseInputEnabled(mouseInput) end

---[CLIENT] Sets the internal name of the panel. Can be retrieved with Panel:GetName.
---@param name string The new name of the panel.
function Panel:SetName(name) end

---[CLIENT] Sets whenever all the default background of the panel should be drawn or not.
---@param paintBackground boolean Whenever to draw the background or not.
function Panel:SetPaintBackgroundEnabled(paintBackground) end

---[CLIENT] Sets whenever all the default border of the panel should be drawn or not.
---@param paintBorder boolean Whenever to draw the border or not.
function Panel:SetPaintBorderEnabled(paintBorder) end

---[CLIENT] Enables or disables painting of the panel manually with Panel:PaintManual.
---@param paintedManually boolean True if the panel should be painted manually.
function Panel:SetPaintedManually(paintedManually) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- This function does nothing.
--- This function does nothing.
function Panel:SetPaintFunction() end

---[CLIENT] Sets the parent of the panel.
--- Panels parented to the context menu will not be clickable unless Panel:SetMouseInputEnabled and Panel:SetKeyboardInputEnabled are both true or Panel:MakePopup has been called. If you want the panel to have mouse input but you do not want to prevent players from moving, set Panel:SetKeyboardInputEnabled to false immediately after calling Panel:MakePopup.
---@param parent Panel The new parent of the panel.
function Panel:SetParent(parent) end

---[CLIENT] Used by AvatarImage to load an avatar for given player.
---@param player Player The player to use avatar of.
---@param size number The size of the avatar to use. Acceptable sizes are 32, 64, 184.
function Panel:SetPlayer(player, size) end

---[CLIENT] If this panel object has been made a popup with Panel:MakePopup, this method will prevent it from drawing in front of other panels when it receives input focus.
---@param stayAtBack boolean If true, the popup panel will not draw in front of others when it gets focus, for example when it is clicked.
function Panel:SetPopupStayAtBack(stayAtBack) end

---[CLIENT] Sets the position of the panel's top left corner.
--- This will trigger PANEL:PerformLayout. You should avoid calling this function in PANEL:PerformLayout to avoid infinite loops.
--- See also Panel:SetX and Panel:SetY.
--- If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find Panel:Dock useful
---@param posX number The x coordinate of the position.
---@param posY number The y coordinate of the position.
function Panel:SetPos(posX, posY) end

---[CLIENT] Sets whenever the panel should be rendered in the next screenshot.
---@param renderInScreenshot boolean Whether to render in the screenshot or not.
function Panel:SetRenderInScreenshots(renderInScreenshot) end

---[CLIENT] Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding ⇧ shift). If enabled, this will affect the function of a DButton whilst ⇧ shift is pressed. Panel:SetSelected can be used to select/deselect the object.
---@param selectable boolean Whether the panel object should be selectable or not.
function Panel:SetSelectable(selectable) end

---[CLIENT] Sets the selected state of a selectable panel object. This functionality is set with Panel:SetSelectable and checked with Panel:IsSelectable.
---@param selected boolean Whether the object should be selected or deselected. Panel:IsSelected can be used to determine the selected state of the object.
function Panel:SetSelected(selected) end

---[CLIENT] Enables the panel object for selection (much like the spawn menu).
---@param set boolean Whether to enable selection.
function Panel:SetSelectionCanvas(set) end

---[CLIENT] Sets the size of the panel.
--- Calls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).
--- See also Panel:SetWidth and Panel:SetHeight.
--- If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find Panel:Dock useful
---@param width number The width of the panel.
---@param height number The height of the panel.
function Panel:SetSize(width, height) end

---[CLIENT] Sets the derma skin that the panel object will use, and refreshes all panels with derma.RefreshSkins.
---@param skinName string The name of the skin to use. The default derma skin is Default.
function Panel:SetSkin(skinName) end

---[CLIENT] Sets the .png image to be displayed on a  SpawnIcon or the panel it is based on - ModelImage.
--- Only .png images can be used with this function.
---@param icon string A path to the .png material, for example one of the Silkicons shipped with the game.
function Panel:SetSpawnIcon(icon) end

---[CLIENT] Used by AvatarImage panels to load an avatar by its 64-bit Steam ID (community ID).
---@param steamid string The 64bit SteamID of the player to load avatar of
---@param size number The size of the avatar to use. Acceptable sizes are 32, 64, 184.
function Panel:SetSteamID(steamid, size) end

---[CLIENT] When TAB is pressed, the next selectable panel in the number sequence is selected.
---@param position number 
function Panel:SetTabPosition(position) end

---[CLIENT] Sets height of a panel. An alias of Panel:SetHeight.
---@param height number Desired height to set
function Panel:SetTall(height) end

---[CLIENT] Removes the panel after given time in seconds.
--- This function will not work if PANEL:AnimationThink is overridden, unless Panel:AnimationThinkInternal is called every frame.
---@param delay number Delay in seconds after which the panel should be removed.
function Panel:SetTerm(delay) end

---[CLIENT] Sets the text value of a panel object containing text, such as a Label, TextEntry or  RichText and their derivatives, such as DLabel, DTextEntry or DButton.
--- When used on a Label or its derivatives ( DLabel and DButton ), it will automatically call Panel:InvalidateLayout, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.
---@param text string The text value to set.
function Panel:SetText(text) end

---[CLIENT] Sets the left and top text margins of a text-based panel object, such as a DButton or DLabel.
---@param insetX number The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.
---@param insetY number The top margin for the text, in pixels.
function Panel:SetTextInset(insetX, insetY) end

---[CLIENT] Sets text selection colors of a RichText element.
---@param textColor table The Color to set for selected text.
---@param backgroundColor table The Color to set for selected text background.
function Panel:SetTextSelectionColors(textColor, backgroundColor) end

---[CLIENT] Sets the height of a RichText element to accommodate the text inside.
--- This function internally relies on Panel:GetNumLines, so it should be called at least a couple frames after modifying the text using Panel:AppendText
function Panel:SetToFullHeight() end

---[CLIENT] Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.
---@param str string The text to be displayed in the tooltip. Set false to disable it.
function Panel:SetTooltip(str) end

---[CLIENT] Sets the tooltip delay. (time between hovering over the panel, and the tooltip showing up)
--- Can be retrieved with Panel:GetTooltipDelay.
---@param tooltip number The tooltip delay to set.
function Panel:SetTooltipDelay(tooltip) end

---[CLIENT] Sets the panel to be displayed as contents of a DTooltip when a player hovers over the panel object with their cursor. See Panel:SetTooltipPanelOverride if you are looking to override DTooltip itself.
--- Panel:SetTooltip will override this functionality.Calling this from PANEL:OnCursorEntered is too late! The tooltip will not be displayed or be updated.
--- Given panel or the previously set one will NOT be automatically removed.
---@param tooltipPanel Panel The panel to use as the tooltip.
function Panel:SetTooltipPanel(tooltipPanel) end

---[CLIENT] Sets the panel class to be created instead of DTooltip when the player hovers over this panel and a tooltip needs creating.
---@param override string The panel class to override the default DTooltip. The new panel class must have the following methods:  SetText - If you are using Panel:SetTooltip. SetContents - If you are using Panel:SetTooltipPanel. OpenForPanel - A "hook" type function that gets called shortly after creation (and after the above 2) to open and position the tooltip. You can see this logic in lua/includes/util/tooltips.lua.
function Panel:SetTooltipPanelOverride(override) end

---[CLIENT] Sets the underlined font for use by clickable text in a RichText. See also Panel:InsertClickableTextStart
--- This function will only work on RichText panels.
---@param fontName string The name of the font. See here for a list of existing fonts. Alternatively, use surface.CreateFont to create your own custom font.
function Panel:SetUnderlineFont(fontName) end

---[CLIENT] Sets the URL of a link-based panel such as DLabelURL.
---@param url string The URL to set. It must begin with either http:// or https://.
function Panel:SetURL(url) end

---[CLIENT] Sets the visibility of the vertical scrollbar.
--- Works for RichText and TextEntry.
---@param display boolean True to display the vertical text scroll bar, false to hide it.
function Panel:SetVerticalScrollbarEnabled(display) end

---[CLIENT] Sets the "visibility" of the panel.
---@param visible boolean The visibility of the panel.
function Panel:SetVisible(visible) end

---[CLIENT] Sets width of a panel. An alias of Panel:SetWidth.
---@param width number Desired width to set
function Panel:SetWide(width) end

---[CLIENT] Sets the width of the panel.
--- Calls PANEL:OnSizeChanged and marks this panel for layout (Panel:InvalidateLayout).
--- See also Panel:SetSize.
---@param width number The new width of the panel.
function Panel:SetWidth(width) end

---[CLIENT] This makes it so that when you're hovering over this panel you can click on the world. Your viewmodel will aim etc. This is primarily used for the Sandbox context menu.
--- This function doesn't scale with custom FOV specified by GM:CalcView or WEAPON:TranslateFOV.Issue Tracker: 3467
---@param enabled boolean 
function Panel:SetWorldClicker(enabled) end

---[CLIENT] Sets whether text wrapping should be enabled or disabled on Label and DLabel panels.
--- Use DLabel:SetAutoStretchVertical to automatically correct vertical size; Panel:SizeToContents will not set the correct height.
---@param wrap boolean True to enable text wrapping, false otherwise.
function Panel:SetWrap(wrap) end

---[CLIENT] Sets the X position of the panel.
--- Uses Panel:SetPos internally.
---@param x number The X coordinate of the position.
function Panel:SetX(x) end

---[CLIENT] Sets the Y position of the panel.
--- Uses Panel:SetPos internally.
---@param y number The Y coordinate of the position.
function Panel:SetY(y) end

---[CLIENT] Sets the panels z position which determines the rendering order.
--- Panels with lower z positions appear behind panels with higher z positions.
--- This also controls in which order panels docked with Panel:Dock appears.
---@param zIndex number The z position of the panel.  Can't be lower than -32768 or higher than 32767.
function Panel:SetZPos(zIndex) end

---[CLIENT] Makes a panel visible.
function Panel:Show() end

---[CLIENT] Uses animation to resize the panel to the specified size.
---@param sizeW number The target width of the panel. Use -1 to retain the current width.
---@param sizeH number The target height of the panel. Use -1 to retain the current height.
---@param time number The time to perform the animation within.
---@param delay number The delay before the animation starts.
---@param ease number Easing of the start and/or end speed of the animation. See Panel:NewAnimation for how this works.
---@param callback function The function to be called once the animation finishes. Arguments are:  table animData - The Structures/AnimationData that was used. Panel pnl - The panel object that was resized.
function Panel:SizeTo(sizeW, sizeH, time, delay, ease, callback) end

---[CLIENT] Resizes the panel to fit the bounds of its children.
--- Your panel must have its layout updated (Panel:InvalidateLayout) for this function to work properly.The sizeW and sizeH parameters are false by default. Therefore, calling this function with no arguments will result in a no-op.
---@param sizeW boolean Resize with width of the panel.
---@param sizeH boolean Resize the height of the panel.
function Panel:SizeToChildren(sizeW, sizeH) end

---[CLIENT] Resizes the panel so that its width and height fit all of the content inside.
--- Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented the Panel:SizeToContents method, such as DNumberWang and DImage.You must call this function AFTER setting text/font, adjusting child panels or otherwise altering the panel.
function Panel:SizeToContents() end

---[CLIENT] Resizes the panel object's width to accommodate all child objects/contents.
--- Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented Panel:GetContentSize method.
--- You must call this function AFTER setting text/font or adjusting child panels.
---@param addVal number The number of extra pixels to add to the width. Can be a negative number, to reduce the width.
function Panel:SizeToContentsX(addVal) end

---[CLIENT] Resizes the panel object's height to accommodate all child objects/contents.
--- Only works on Label derived panels such as DLabel by default, and on any panel that manually implemented Panel:GetContentSize method.
--- You must call this function AFTER setting text/font or adjusting child panels.
---@param addVal number The number of extra pixels to add to the height.
function Panel:SizeToContentsY(addVal) end

---[CLIENT] Slides the panel in from above.
---@param Length number Time to complete the animation.
function Panel:SlideDown(Length) end

---[CLIENT] Slides the panel out to the top.
---@param Length number Time to complete the animation.
function Panel:SlideUp(Length) end

---[CLIENT] Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursor's position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using Panel:SetSelectionCanvas.
function Panel:StartBoxSelection() end

---[CLIENT] Stops all panel animations by clearing its animation list. This also clears all delayed animations.
function Panel:Stop() end

---[CLIENT] Resizes the panel object's height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panel's height to leave a gap between it and the passed panel.
---@param tgtPanel Panel The panel to align the bottom of this one with.
---@param offset number The gap to leave between this and the passed panel. Negative values will cause the panel's height to increase, forming an overlap.
function Panel:StretchBottomTo(tgtPanel, offset) end

---[CLIENT] Resizes the panel object's width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panel's width to leave a gap between it and the passed panel.
---@param tgtPanel Panel The panel to align the right edge of this one with.
---@param offset number The gap to leave between this and the passed panel. Negative values will cause the panel's width to increase, forming an overlap.
function Panel:StretchRightTo(tgtPanel, offset) end

---[CLIENT] Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren't nil.
---@param offsetLeft number The left offset to the parent.
---@param offsetTop number The top offset to the parent.
---@param offsetRight number The right offset to the parent.
---@param offsetBottom number The bottom offset to the parent.
function Panel:StretchToParent(offsetLeft, offsetTop, offsetRight, offsetBottom) end

---[CLIENT] Toggles the selected state of a selectable panel object. This functionality is set with Panel:SetSelectable and checked with Panel:IsSelectable. To check whether the object is selected or not, Panel:IsSelected is used.
function Panel:ToggleSelection() end

---[CLIENT] Toggles the visibility of a panel and all its children.
function Panel:ToggleVisible() end

---[CLIENT] Restores the last saved state (caret position and the text inside) of a TextEntry. Should act identically to pressing CTRL+Z in a TextEntry.
--- See also Panel:SaveUndoState.
function Panel:Undo() end

---[CLIENT] Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.
function Panel:UnselectAll() end

---[CLIENT] Forcibly updates the panels' HTML Material, similar to when Paint is called on it.This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.
--- Only works on with panels that have a HTML Material. See Panel:GetHTMLMaterial for more details.A good place to call this is in the GM:PreRender hook
function Panel:UpdateHTMLTexture() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use Panel:IsValid instead.
--- Returns if a given panel is valid or not.
---@return boolean Whether the panel is valid or not, true being it is, false being it isn't.
function Panel:Valid() end

---@class PathFollower
local PathFollower = {}

---[SERVER] If you created your path with type "Chase" this functions should be used in place of PathFollower:Update to cause the bot to chase the specified entity.
---@param bot NextBot The bot to update along the path. This can also be a nextbot player (player.CreateNextbot)
---@param ent Entity The entity we want to chase
function PathFollower:Chase(bot, ent) end

---[SERVER] Compute shortest path from bot to 'goal' via A* algorithm.
---@param from NextBot The nextbot we're generating for.  This can also be a nextbot player (player.CreateNextbot).
---@param to Vector To point
---@param generator function A funtion that allows you to alter the path generation. See example below for the default function.
---@return boolean If returns true, path was found to the goal position. If returns false, path may either be invalid (use IsValid() to check), or valid but doesn't reach all the way to the goal.
function PathFollower:Compute(from, to, generator) end

---[SERVER] Draws the path. This is meant for debugging - and uses debug overlay.
function PathFollower:Draw() end

---[SERVER] Returns the first segment of the path.
---@return table A table with Structures/PathSegment.
function PathFollower:FirstSegment() end

---[SERVER] Returns the age since the path was built
---@return number Path age
function PathFollower:GetAge() end

---[SERVER] Returns all of the segments of the given path.
---@return table A table of tables with Structures/PathSegment.
function PathFollower:GetAllSegments() end

---[SERVER] The closest position along the path to a position
---@param position Vector The point we're querying for
---@return Vector The closest position on the path
function PathFollower:GetClosestPosition(position) end

---[SERVER] Returns the current goal data. Can return nil if the current goal is invalid, for example immediately after PathFollower:Update.
---@return table A table with Structures/PathSegment.
function PathFollower:GetCurrentGoal() end

---[SERVER] Returns the cursor data
---@return table A table with 3 keys: number curvature Vector forward Vector pos
function PathFollower:GetCursorData() end

---[SERVER] Returns the current progress along the path
---@return number The current progress
function PathFollower:GetCursorPosition() end

---[SERVER] Returns the path end position
---@return Vector The end position
function PathFollower:GetEnd() end

---[SERVER] Returns how close we can get to the goal to call it done.
---@return number The distance we're setting it to
function PathFollower:GetGoalTolerance() end

---[SERVER] 
---@return Entity 
function PathFollower:GetHindrance() end

---[SERVER] Returns the total length of the path
---@return number The length of the path
function PathFollower:GetLength() end

---[SERVER] Returns the minimum range movement goal must be along path.
---@return number The minimum look ahead distance
function PathFollower:GetMinLookAheadDistance() end

---[SERVER] Returns the vector position of distance along path
---@param distance number The distance along the path to query
---@return Vector The position
function PathFollower:GetPositionOnPath(distance) end

---[SERVER] Returns the path start position
---@return Vector The start position
function PathFollower:GetStart() end

---[SERVER] Invalidates the current path
function PathFollower:Invalidate() end

---[SERVER] Returns true if the path is valid
---@return boolean Wether the path is valid or not.
function PathFollower:IsValid() end

---[SERVER] Returns the last segment of the path.
---@return table A table with Structures/PathSegment.
function PathFollower:LastSegment() end

---[SERVER] Moves the cursor by give distance.
--- For a function that sets the distance, see PathFollower:MoveCursorTo.
---@param distance number The distance to move the cursor (in relative world units)
function PathFollower:MoveCursor(distance) end

---[SERVER] Sets the cursor position to given distance.
--- For relative distance, see PathFollower:MoveCursor.
---@param distance number The distance to move the cursor (in world units)
function PathFollower:MoveCursorTo(distance) end

---[SERVER] Moves the cursor of the path to the closest position compared to given vector.
---@param pos Vector 
---@param type number Seek type 0 = SEEK_ENTIRE_PATH - Search the entire path length 1 = SEEK_AHEAD - Search from current cursor position forward toward end of path 2 = SEEK_BEHIND - Search from current cursor position backward toward path start
---@param alongLimit number 
function PathFollower:MoveCursorToClosestPosition(pos, type, alongLimit) end

---[SERVER] Moves the cursor to the end of the path
function PathFollower:MoveCursorToEnd() end

---[SERVER] Moves the cursor to the end of the path
function PathFollower:MoveCursorToStart() end

---[SERVER] Resets the age which is retrieved by PathFollower:GetAge to 0.
function PathFollower:ResetAge() end

---[SERVER] How close we can get to the goal to call it done
---@param distance number The distance we're setting it to
function PathFollower:SetGoalTolerance(distance) end

---[SERVER] Sets minimum range movement goal must be along path
---@param mindist number The minimum look ahead distance
function PathFollower:SetMinLookAheadDistance(mindist) end

---[SERVER] Move the bot along the path.
---@param bot NextBot The bot to update along the path
function PathFollower:Update(bot) end

---@class PhysCollide
local PhysCollide = {}

---[SHARED] Destroys the PhysCollide object.
function PhysCollide:Destroy() end

---[SHARED] Checks whether this PhysCollide object is valid or not.
--- You should just use IsValid instead.
---@return boolean Is valid or not.
function PhysCollide:IsValid() end

---[SHARED] Performs a trace against this PhysCollide with the given parameters. This can be used for both line traces and box traces.
---@param origin Vector The origin for the PhysCollide during the trace
---@param angles Angle The angles for the PhysCollide during the trace
---@param rayStart Vector The start position of the trace
---@param rayEnd Vector The end position of the trace
---@param rayMins Vector The mins of the trace's bounds
---@param rayMaxs Vector The maxs of the trace's bounds
---@return Vector, Vector, number Vector - Hit position of the trace. This is false if the trace did not hit.
---@return Vector, Vector, number Vector - Hit normal of the trace
---@return Vector, Vector, number number - Fraction of the trace. This is calculated from the distance between startPos, hitPos, and endPos.
function PhysCollide:TraceBox(origin, angles, rayStart, rayEnd, rayMins, rayMaxs) end

---@class PhysObj
local PhysObj = {}

---[SHARED] Adds the specified angular velocity velocity to the current PhysObj.
---@param angularVelocity Vector The additional velocity in degrees/s. (Local to the physics object.) Does nothing on frozen objects.Does nothing on frozen objects.Does nothing on frozen objects.
function PhysObj:AddAngleVelocity(angularVelocity) end

---[SHARED] Adds one or more bit flags.
---@param flags number Bitflag, see Enums/FVPHYSICS.
function PhysObj:AddGameFlag(flags) end

---[SHARED] Adds the specified velocity to the current.
---@param velocity Vector Additional velocity in source_unit/s. (World frame) Does nothing on frozen objects.Does nothing on frozen objects.Does nothing on frozen objects.
function PhysObj:AddVelocity(velocity) end

---[SHARED] Rotates the object so that it's angles are aligned to the ones inputted.
---@param from Angle 
---@param to Angle 
---@return Angle 
function PhysObj:AlignAngles(from, to) end

---[SHARED] Applies the specified impulse in the mass center of the physics object.
--- This will not work on players, use Entity:SetVelocity instead.
---@param impulse Vector The impulse to be applied in kg*source_unit/s. (The vector is in world frame)
function PhysObj:ApplyForceCenter(impulse) end

---[SHARED] Applies the specified impulse on the physics object at the specified position.
---@param impulse Vector The impulse to be applied in kg*source_unit/s. (World frame)
---@param position Vector The position in world coordinates (source units) where the force is applied to the physics object.
function PhysObj:ApplyForceOffset(impulse, position) end

---[SHARED] Applies the specified angular impulse to the physics object. See PhysObj:CalculateForceOffset
---@param angularImpulse Vector The angular impulse to be applied in kg * m^2 * degrees / s. (The vector is in world frame) The unit conversion between meters and source units in this case is 1 meter ≈ 39.37 source units (100/2.54 exactly)The unit conversion between meters and source units in this case is 1 meter ≈ 39.37 source units (100/2.54 exactly)The unit conversion between meters and source units in this case is 1 meter ≈ 39.37 source units (100/2.54 exactly)
function PhysObj:ApplyTorqueCenter(angularImpulse) end

---[SHARED] Calculates the linear and angular impulse on the object's center of mass for an offset impulse.The outputs can be used with PhysObj:ApplyForceCenter and PhysObj:ApplyTorqueCenter, respectively. Be careful to convert the angular impulse to world frame (PhysObj:LocalToWorldVector) if you are going to use it with ApplyTorqueCenter.
---@param impulse Vector The impulse acting on the object in kg*source_unit/s. (World frame)
---@param position Vector The location of the impulse in world coordinates (source units)
---@return Vector, Vector Vector - The calculated linear impulse on the physics object's center of mass in kg*source_unit/s. (World frame)
---@return Vector, Vector Vector - The calculated angular impulse on the physics object's center of mass in kg*m^2*degrees/s. (Local frame)
function PhysObj:CalculateForceOffset(impulse, position) end

---[SHARED] Calculates the linear and angular velocities on the center of mass for an offset impulse. The outputs can be directly passed to PhysObj:AddVelocity and PhysObj:AddAngleVelocity, respectively.
--- This will return zero length vectors if the physics object's motion is disabled. See PhysObj:IsMotionEnabled.
---@param impulse Vector The impulse acting on the object in kg*source_unit/s. (World frame)
---@param position Vector The location of the impulse in world coordinates (source units)
---@return Vector, Vector Vector - The calculated linear velocity from the impulse on the physics object's center of mass in source_unit/s. (World frame)
---@return Vector, Vector Vector - The calculated angular velocity from the impulse on the physics object's center of mass in degrees/s. (Local frame)
function PhysObj:CalculateVelocityOffset(impulse, position) end

---[SHARED] Removes one of more specified flags.
---@param flags number Bitflag, see Enums/FVPHYSICS.
function PhysObj:ClearGameFlag(flags) end

---[SHARED] Allows you to move a PhysObj to a point and angle in 3D space.
---@param shadowparams table The parameters for the shadow. See example code to see how its used.
function PhysObj:ComputeShadowControl(shadowparams) end

---[SHARED] Sets whether the physics object should collide with anything or not, including world.
--- This function currently has major problems with player collisions, and as such should be avoided at all costs.
--- A better alternative to this function would be using Entity:SetCollisionGroup( COLLISION_GROUP_WORLD ).
---@param enable boolean True to enable, false to disable.
function PhysObj:EnableCollisions(enable) end

---[SHARED] Sets whenever the physics object should be affected by drag.
---@param enable boolean True to enable, false to disable.
function PhysObj:EnableDrag(enable) end

---[SHARED] Sets whether the PhysObject should be affected by gravity
---@param enable boolean True to enable, false to disable.
function PhysObj:EnableGravity(enable) end

---[SHARED] Sets whether the physobject should be able to move or not.
--- This is the exact method the Physics Gun uses to freeze props. If a motion-disabled physics object is grabbed with the physics gun, the object will be able to move again. To disallow this, use GM:PhysgunPickup.
---@param enable boolean True to enable, false to disable.
function PhysObj:EnableMotion(enable) end

---[SHARED] Returns the mins and max of the physics object.
---@return Vector, Vector Vector - Mins
---@return Vector, Vector Vector - Maxs
function PhysObj:GetAABB() end

---[SHARED] Returns the angles of the physics object in degrees.
---@return Angle The angles of the physics object.
function PhysObj:GetAngles() end

---[SHARED] Gets the angular velocity of the object in degrees per second as a local vector. You can use dot product to read the magnitude from a specific axis.
---@return Vector The angular velocity
function PhysObj:GetAngleVelocity() end

---[SHARED] Returns the contents flag of the PhysObj.
---@return number The Enums/CONTENTS.
function PhysObj:GetContents() end

---[SHARED] Returns the linear and angular damping of the physics object.
---@return number, number number - The linear damping
---@return number, number number - The angular damping
function PhysObj:GetDamping() end

---[SHARED] Returns the sum of the linear and rotational kinetic energies of the physics object.
---@return number The kinetic energy
function PhysObj:GetEnergy() end

---[SHARED] Returns the parent entity of the physics object.
---@return Entity The entity this physics object belongs to
function PhysObj:GetEntity() end

---[SERVER] Returns the friction snapshot of this physics object. This is useful for determining if an object touching ground for example.
---@return table A table of tables containing the following data:  PhysObj Other - The other physics object we came in contact with number EnergyAbsorbed - number FrictionCoefficient - number NormalForce - Vector Normal - Direction of the friction event Vector ContactPoint - Contact point of the friction event number Material - Surface Property ID of our physics obj number MaterialOther - Surface Property ID of the physics obj we came in contact with
function PhysObj:GetFrictionSnapshot() end

---[SHARED] Returns the principal moments of inertia (Ixx, Iyy, Izz) of the physics object, in the local frame, with respect to the center of mass.
---@return Vector The moment of inertia in kg * m^2 The unit conversion between meters and source units in this case is 1 meter ≈ 39.37 source units (100/2.54 exactly)This value changes proportionally to the physics object's mass (e.g. making the object twice as heavy will result in it having twice the angular inertia)The unit conversion between meters and source units in this case is 1 meter ≈ 39.37 source units (100/2.54 exactly)The unit conversion between meters and source units in this case is 1 meter ≈ 39.37 source units (100/2.54 exactly)This value changes proportionally to the physics object's mass (e.g. making the object twice as heavy will result in it having twice the angular inertia)This value changes proportionally to the physics object's mass (e.g. making the object twice as heavy will result in it having twice the angular inertia)
function PhysObj:GetInertia() end

---[SHARED] Returns 1 divided by the angular inertia. See PhysObj:GetInertia
---@return Vector The inverted angular inertia Returns [0, 0, 0] on frozen physics objects.Returns [0, 0, 0] on frozen physics objects.Returns [0, 0, 0] on frozen physics objects.
function PhysObj:GetInvInertia() end

---[SHARED] Returns 1 divided by the physics object's mass (in kilograms).
---@return number The inverted mass. Returns 0 on frozen physics objects.Returns 0 on frozen physics objects.Returns 0 on frozen physics objects.
function PhysObj:GetInvMass() end

---[SHARED] Returns the mass of the physics object.
---@return number The mass in kilograms.
function PhysObj:GetMass() end

---[SHARED] Returns the center of mass of the physics object as a local vector.
---@return Vector The center of mass of the physics object.
function PhysObj:GetMassCenter() end

---[SHARED] Returns the physical material of the physics object.
---@return string The physical material
function PhysObj:GetMaterial() end

---[SHARED] Returns the physics mesh of the object which is used for physobj-on-physobj collision.
---@return table Table of Structures/MeshVertexs where each three vertices represent a triangle. Returns nil if the physics object is a sphere.
function PhysObj:GetMesh() end

---[SHARED] Returns all convex physics meshes of the object. See Entity:PhysicsInitMultiConvex for more information.
---@return table Table of Structures/MeshVertexs where each Structures/MeshVertex is an independent convex mesh and each three vertices represent a triangle. Returns nil if the physics object is a sphere.
function PhysObj:GetMeshConvexes() end

---[SHARED] Returns the name of the physics object.
---@return string The name of the physics object.
function PhysObj:GetName() end

---[SHARED] Returns the position of the physics object.
---@return Vector The position in world coordinates. (source units)
function PhysObj:GetPos() end

---[SHARED] Returns the position and angle of the physics object as a 3x4 matrix (VMatrix is 4x4 so the fourth row goes unused). The first three columns store the angle as a rotation matrix, and the fourth column stores the position vector.
---@return VMatrix The position and angle matrix.
function PhysObj:GetPositionMatrix() end

---[SHARED] Returns the rotation damping of the physics object.
---@return number The rotation damping
function PhysObj:GetRotDamping() end

---[SHARED] Returns the angles of the PhysObj shadow. See PhysObj:UpdateShadow.
---@return Angle The angles of the PhysObj shadow.
function PhysObj:GetShadowAngles() end

---[SHARED] Returns the position of the PhysObj shadow. See PhysObj:UpdateShadow.
---@return Vector The position of the PhysObj shadow.
function PhysObj:GetShadowPos() end

---[SHARED] Returns the speed damping of the physics object.
---@return number speedDamping
function PhysObj:GetSpeedDamping() end

---[SERVER] Returns the internal and external stress of the entity.
---@return number, number number - The external stress (𝜎𝑒). It's the value of a giving force to other entities (in kg).
---@return number, number number - The internal stress (𝜎𝑖). It's the value of a receiving force from other entities (in kg).
function PhysObj:GetStress() end

---[SHARED] Returns the surface area of the physics object in source-units². Or nil if the PhysObj is a generated sphere or box.
---@return number The surface area or nil if the PhysObj is a generated sphere or box.
function PhysObj:GetSurfaceArea() end

---[SHARED] Returns the absolute directional velocity of the physobject.
---@return Vector velocity
function PhysObj:GetVelocity() end

---[SHARED] Returns the world velocity of a point in world coordinates about the object. This is useful for objects rotating around their own axis/origin.
---@param point Vector A point to test in world space coordinates
---@return Vector Velocity at the given point
function PhysObj:GetVelocityAtPoint(point) end

---[SHARED] Returns the volume in source units³. Or nil if the PhysObj is a generated sphere or box.
---@return number The volume or nil if the PhysObj is a generated sphere or box.
function PhysObj:GetVolume() end

---[SHARED] Returns whenever the specified flag(s) is/are set.
---@param flags number Bitflag, see Enums/FVPHYSICS.
---@return boolean If flag was set or not
function PhysObj:HasGameFlag(flags) end

---[SHARED] Returns whether the physics object is "sleeping".
--- See PhysObj:Sleep for more information.
---@return boolean Whether the physics object is sleeping.
function PhysObj:IsAsleep() end

---[SHARED] Returns whenever the entity is able to collide or not.
---@return boolean isCollisionEnabled
function PhysObj:IsCollisionEnabled() end

---[SHARED] Returns whenever the entity is affected by drag.
---@return boolean dragEnabled
function PhysObj:IsDragEnabled() end

---[SHARED] Returns whenever the entity is affected by gravity.
---@return boolean true if the gravity is enabled, false otherwise
function PhysObj:IsGravityEnabled() end

---[SHARED] Returns if the physics object can move itself (by velocity, acceleration)
---@return boolean true if the motion is enabled, false otherwise.
function PhysObj:IsMotionEnabled() end

---[SHARED] Returns whenever the entity is able to move.
---@return boolean movable
function PhysObj:IsMoveable() end

---[SHARED] Returns whenever the physics object is penetrating another physics object.
--- This is internally implemented as PhysObj:HasGameFlag( FVPHYSICS_PENETRATING ) and thus is only updated for non-static physics objects.
---@return boolean Whether the physics object is penetrating another object.
function PhysObj:IsPenetrating() end

---[SHARED] Returns if the physics object is valid/not NULL.
---@return boolean isValid
function PhysObj:IsValid() end

---[SHARED] Mapping a vector in local frame of the physics object to world frame.
--- this function does translation and rotation, with translation done first.
---@param LocalVec Vector A vector in the physics object's local frame
---@return Vector The corresponding vector in world frame
function PhysObj:LocalToWorld(LocalVec) end

---[SHARED] Rotate a vector from the local frame of the physics object to world frame.
--- This function only rotates the vector, without any translation operation.
---@param LocalVec Vector A vector in the physics object's local frame
---@return Vector The corresponding vector in world frame
function PhysObj:LocalToWorldVector(LocalVec) end

---[SHARED] Prints debug info about the state of the physics object to the console.
function PhysObj:OutputDebugInfo() end

---[SHARED] Call this when the collision filter conditions change due to this object's state (e.g. changing solid type or collision group)
function PhysObj:RecheckCollisionFilter() end

---[SHARED] A convinience function for Angle:RotateAroundAxis.
---@param dir Vector Direction, around which we will rotate
---@param ang number Amount of rotation, in degrees
---@return Angle The resulting angle
function PhysObj:RotateAroundAxis(dir, ang) end

---[SHARED] Sets the amount of drag to apply to a physics object when attempting to rotate.
---@param coefficient number Drag coefficient. The bigger this value is, the slower the angles will change.
function PhysObj:SetAngleDragCoefficient(coefficient) end

---[SHARED] Sets the angles of the physobject in degrees.
---@param angles Angle The new angles of the physobject. The new angle will not be applied on the parent entity while the physics object is asleep (PhysObj:Sleep)The new angle will not be applied on the parent entity while the physics object is asleep (PhysObj:Sleep)The new angle will not be applied on the parent entity while the physics object is asleep (PhysObj:Sleep)
function PhysObj:SetAngles(angles) end

---[SHARED] Sets the specified angular velocity on the PhysObj
---@param angularVelocity Vector The new velocity in degrees/s. (Local frame)
function PhysObj:SetAngleVelocity(angularVelocity) end

---[SHARED] Sets the specified instantaneous angular velocity on the PhysObj
---@param angularVelocity Vector The new velocity to set velocity.
function PhysObj:SetAngleVelocityInstantaneous(angularVelocity) end

---[SHARED] Sets the buoyancy ratio of the physics object. (How well it floats in water)
---@param buoyancy number Buoyancy ratio, where 0 is not buoyant at all (like a rock), and 1 is very buoyant (like wood). You can set values larger than 1 for greater effect.
function PhysObj:SetBuoyancyRatio(buoyancy) end

---[SHARED] Sets the contents flag of the PhysObj.
---@param contents number The Enums/CONTENTS.
function PhysObj:SetContents(contents) end

---[SHARED] Sets the linear and angular damping of the physics object.
---@param linearDamping number Linear damping.
---@param angularDamping number Angular damping.
function PhysObj:SetDamping(linearDamping, angularDamping) end

---[SHARED] Modifies how much drag (air resistance) affects the object.
---@param drag number The drag coefficient It can be positive or negative.
function PhysObj:SetDragCoefficient(drag) end

---[SHARED] Sets the angular inertia. See PhysObj:GetInertia.
--- This does not affect linear inertia.
---@param angularInertia Vector The angular inertia of the object.
function PhysObj:SetInertia(angularInertia) end

---[SHARED] Sets the mass of the physics object.
---@param mass number The mass in kilograms, in range [0, 50000]
function PhysObj:SetMass(mass) end

---[SHARED] Sets the material of the physobject.
--- Impact sounds will only change if this is called on client
---@param materialName string The name of the phys material to use. From this list: Valve Developer
function PhysObj:SetMaterial(materialName) end

---[SHARED] Sets the position of the physobject.
---@param position Vector The new position of the physobject in world coordinates. (source units). The new position will not be applied on the parent entity while the physics object is asleep (PhysObj:Sleep)The new position will not be applied on the parent entity while the physics object is asleep (PhysObj:Sleep)The new position will not be applied on the parent entity while the physics object is asleep (PhysObj:Sleep)
---@param teleport boolean 
function PhysObj:SetPos(position, teleport) end

---[SHARED] Sets the velocity of the physics object for the next iteration.
---@param velocity Vector The new velocity of the physics object in source_unit/s. (World frame)
function PhysObj:SetVelocity(velocity) end

---[SHARED] Sets the velocity of the physics object.
---@param velocity Vector The new velocity of the physics object.
function PhysObj:SetVelocityInstantaneous(velocity) end

---[SHARED] Makes the physics object "sleep".
--- The physics object will no longer be moving unless it is "woken up" by either a collision with another moving object, or by PhysObj:Wake. This is an optimization feature of the physics engine.
function PhysObj:Sleep() end

---[SHARED] Unlike PhysObj:SetPos and PhysObj:SetAngles, this allows the movement of a physobj while leaving physics interactions intact.
--- This is used internally by the motion controller of the Gravity Gun , the +use pickup and the Physics Gun, and entities such as the crane.
--- This is the ideal function to move a physics shadow created with Entity:PhysicsInitShadow or Entity:MakePhysicsObjectAShadow.
---@param targetPosition Vector The position we should move to.
---@param targetAngles Angle The angle we should rotate towards.
---@param frameTime number The frame time to use for this movement, can be generally filled with FrameTime or ENTITY:PhysicsSimulate with the deltaTime. Can be set to 0 when you need to update the physics object just once.
function PhysObj:UpdateShadow(targetPosition, targetAngles, frameTime) end

---[SHARED] Wakes the physics object.
--- See PhysObj:Sleep for more information.
function PhysObj:Wake() end

---[SHARED] Converts a vector to a relative to the physics object coordinate system.
---@param vec Vector The vector in world space coordinates.
---@return Vector The vector local to PhysObj:GetPos.
function PhysObj:WorldToLocal(vec) end

---[SHARED] Rotate a vector from the world frame to the local frame of the physics object.
--- This function only rotates the vector, without any translation operation.
---@param WorldVec Vector A vector in the world frame
---@return Vector The corresponding vector relative to the PhysObj
function PhysObj:WorldToLocalVector(WorldVec) end

---@class Player
local Player = {}

---[SHARED] Returns the player's AccountID aka SteamID3. ([U:1:AccountID])
--- See Player:SteamID for the text representation of the full SteamID.
--- See Player:SteamID64 for a 64bit representation of the full SteamID.
--- Unlike other variations of SteamID, SteamID3 does not include the "Account Type" and "Account Instance" part of the SteamID.
--- In a -multirun environment, this will return no value for all "copies" of a player because they are not authenticated with Steam.
--- For bots this will return values starting with 0 for the first bot, 1 for the second bot and so on. It will return no value clientside for bots.
---@return number The AccountID of Player's SteamID.
function Player:AccountID() end

---[SHARED] Adds an entity to the player's clean up list.
---@param type string Cleanup type
---@param ent Entity Entity to add
function Player:AddCleanup(type, ent) end

---[SHARED] See GetCount for list of types
--- Adds an entity to the total count of entities of same type.
---@param str string Entity type
---@param ent Entity Entity
function Player:AddCount(str, ent) end

---[SERVER] Add a certain amount to the player's death count
---@param count number number of deaths to add
function Player:AddDeaths(count) end

---[SERVER] Add a certain amount to the player's frag count (or kills count)
---@param count number number of frags to add
function Player:AddFrags(count) end

---[SERVER] Adds a entity to the player's list of frozen objects.
---@param ent Entity Entity
---@param physobj PhysObj Physics object belonging to ent
function Player:AddFrozenPhysicsObject(ent, physobj) end

---[CLIENT] Sets up the voting system for the player.
--- This is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.
---@param name string Name of the vote
---@param timeout number Time until the vote expires
---@param vote_callback function The function to be run when the player presses 0-9 while a vote is active.
---@param draw_callback function Used to draw the vote panel.
function Player:AddPlayerOption(name, timeout, vote_callback, draw_callback) end

---[SHARED] Plays a sequence directly from a sequence number, similar to Player:AnimRestartGesture. This function has the advantage to play sequences that haven't been bound to an existing Enums/ACT
---@param slot number Gesture slot using Enums/GESTURE_SLOT
---@param sequenceId number The sequence ID to play, can be retrieved with Entity:LookupSequence.
---@param cycle number The cycle to start the animation at, ranges from 0 to 1.
---@param autokill boolean If the animation should not loop. true = stops the animation, false = the animation keeps playing.
function Player:AddVCDSequenceToGestureSlot(slot, sequenceId, cycle, autokill) end

---[SHARED] Checks if the player is alive.
---@return boolean Whether the player is alive
function Player:Alive() end

---[SHARED] Sets if the player can toggle their flashlight. Function exists on both the server and client but has no effect when ran on the client.
---@param canFlashlight boolean True allows flashlight toggling
function Player:AllowFlashlight(canFlashlight) end

---[SERVER] Lets the player spray their decal without delay
---@param allow boolean Allow or disallow
function Player:AllowImmediateDecalPainting(allow) end

---[SHARED] Resets player gesture in selected slot.
---@param slot number Slot to reset. See the Enums/GESTURE_SLOT.
function Player:AnimResetGestureSlot(slot) end

---[SHARED] Restart a gesture on a player, within a gesture slot.
--- This is not automatically networked. This function has to be called on the client to be seen by said client.
---@param slot number Gesture slot using Enums/GESTURE_SLOT
---@param activity number The activity ( see Enums/ACT ) or sequence that should be played
---@param autokill boolean Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping
function Player:AnimRestartGesture(slot, activity, autokill) end

---[SHARED] Restarts the main animation on the player, has the same effect as calling Entity:SetCycle( 0 ).
function Player:AnimRestartMainSequence() end

---[SHARED] Sets the sequence of the animation playing in the given gesture slot.
---@param slot number The gesture slot. See Enums/GESTURE_SLOT
---@param sequenceID number Sequence ID to set.
function Player:AnimSetGestureSequence(slot, sequenceID) end

---[SHARED] Sets the weight of the animation playing in the given gesture slot.
---@param slot number The gesture slot. See Enums/GESTURE_SLOT
---@param weight number The weight this slot should be set to. Value must be ranging from 0 to 1.
function Player:AnimSetGestureWeight(slot, weight) end

---[SHARED] Returns the player's armor.
---@return number The player's armor.
function Player:Armor() end

---[SERVER] Bans the player from the server for a certain amount of minutes.
---@param minutes number Duration of the ban in minutes (0 is permanent)
---@param kick boolean Whether to kick the player after banning them or not
function Player:Ban(minutes, kick) end

---[SHARED] Returns true if the player's flashlight hasn't been disabled by Player:AllowFlashlight.
--- This is not synchronized between clients and server automatically!
---@return boolean Whether the player can use flashlight.
function Player:CanUseFlashlight() end

---[SHARED] Prints a string to the chatbox of the client.
--- Just like the usermessage, this function is affected by the 255 byte limit!
---@param message string String to be printed
function Player:ChatPrint(message) end

---[SHARED] Checks if the limit is hit or not. If it is, it will throw a notification saying so.
---@param limitType string Limit type. In unmodified Sandbox possible values are:  "props" "ragdolls" "vehicles" "effects" "balloons" "cameras" "npcs" "sents" "dynamite" "lamps" "lights" "wheels" "thrusters" "hoverballs" "buttons" "emitters"
---@return boolean Returns true if limit is not hit, false if it is hit
function Player:CheckLimit(limitType) end

---[SHARED] Runs the concommand on the player. This does not work on bots.
--- If you wish to directly modify the movement input of bots, use GM:StartCommand instead.
--- Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see Blocked ConCommands.On clientside running a ConCommand on an other player will not throw any warnings or errors but will run the ConCommand on LocalPlayer() instead.
---@param command string command to run
function Player:ConCommand(command) end

---[SERVER] Creates the player's death ragdoll entity and deletes the old one.
--- This is normally used when a player dies, to create their death ragdoll.
--- The ragdoll will be created with the player's properties such as Position, Angles, PlayerColor, Velocity and Model.
--- You can retrieve the entity this creates with Player:GetRagdollEntity.
function Player:CreateRagdoll() end

---[SERVER] Disables the default player's crosshair. Can be reenabled with Player:CrosshairEnable. This will affect WEAPON:DoDrawCrosshair.
function Player:CrosshairDisable() end

---[SERVER] Enables the player's crosshair, if it was previously disabled via Player:CrosshairDisable.
function Player:CrosshairEnable() end

---[SHARED] Returns whether the player is crouching or not (FL_DUCKING flag).
---@return boolean Whether the player is crouching.
function Player:Crouching() end

---[SHARED] Returns the player's death count
---@return number The number of deaths the player has had.
function Player:Deaths() end

---[SERVER] Prints the players' name and position to the console.
function Player:DebugInfo() end

---[SERVER] Detonates all tripmines belonging to the player.
function Player:DetonateTripmines() end

---[SERVER] Disables world clicking for given player. See Panel:SetWorldClicker and Player:IsWorldClickingDisabled.
---@param disable boolean Whether the world clicking should be disabled.
function Player:DisableWorldClicking(disable) end

---[SHARED] Sends a third person animation event to the player.
--- Calls GM:DoAnimationEvent with PLAYERANIMEVENT_CUSTOM_GESTURE as the event, data as the given data.
---@param data number The data to send.
function Player:DoAnimationEvent(data) end

---[SHARED] Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.
--- Similar to other animation event functions, calls GM:DoAnimationEvent with PLAYERANIMEVENT_ATTACK_PRIMARY as the event and no extra data.
function Player:DoAttackEvent() end

---[SHARED] Sends a specified third person animation event to the player.
--- Calls GM:DoAnimationEvent with specified arguments.
---@param event number The event to send. See Enums/PLAYERANIMEVENT.
---@param data number The data to send alongside the event.
function Player:DoCustomAnimEvent(event, data) end

---[SHARED] Sends a third person reload animation event to the player.
--- Similar to other animation event functions, calls GM:DoAnimationEvent with PLAYERANIMEVENT_RELOAD as the event and no extra data.
function Player:DoReloadEvent() end

---[SHARED] Sends a third person secondary fire animation event to the player.
--- Similar to other animation event functions, calls GM:DoAnimationEvent with PLAYERANIMEVENT_ATTACK_SECONDARY as the event and no extra data.
function Player:DoSecondaryAttack() end

---[SHARED] Show/Hide the player's weapon's viewmodel.
---@param draw boolean Should draw
---@param vm number Which view model to show/hide, 0-2.
function Player:DrawViewModel(draw, vm) end

---[SERVER] Show/Hide the player's weapon's worldmodel.
---@param draw boolean Should draw
function Player:DrawWorldModel(draw) end

---[SERVER] Drops the players' weapon of a specific class.
---@param class string The class to drop.
---@param target Vector If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
---@param velocity Vector If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
function Player:DropNamedWeapon(class, target, velocity) end

---[SERVER] Drops any object the player is currently holding with either gravitygun or +Use (E key)
function Player:DropObject() end

---[SERVER] Forces the player to drop the specified weapon
---@param weapon Weapon Weapon to be dropped. If unset, will default to the currently equipped weapon.
---@param target Vector If set, launches the weapon at given position. There is a limit to how far it is willing to throw the weapon. Overrides velocity argument.
---@param velocity Vector If set and previous argument is unset, launches the weapon with given velocity. If the velocity is higher than 400, it will be clamped to 400.
function Player:DropWeapon(weapon, target, velocity) end

---[SERVER] Enters the player into specified vehicle
---@param vehicle Vehicle Vehicle the player will enter
function Player:EnterVehicle(vehicle) end

---[SERVER] Equips the player with the HEV suit.
--- Allows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.
--- The player also emits a flatline sound on death, which can be overridden with GM:PlayerDeathSound.
--- The player is automatically equipped with the suit on spawn, if you wish to stop that, use Player:RemoveSuit.
function Player:EquipSuit() end

---[SERVER] Makes the player exit the vehicle if they're in one.
function Player:ExitVehicle() end

---[SERVER] Enables/Disables the player's flashlight.Player:CanUseFlashlight must be true in order for the player's flashlight to be changed.
---@param isOn boolean Turns the flashlight on/off
function Player:Flashlight(isOn) end

---[SHARED] Returns true if the player's flashlight is on.
---@return boolean Whether the player's flashlight is on.
function Player:FlashlightIsOn() end

---[SHARED] Returns the amount of frags a player has.
--- The value will change depending on the player's kill or suicide: +1 for a kill, -1 for a suicide.
---@return number frags
function Player:Frags() end

---[SERVER] Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to Player:Lock but the player can still take damage.
--- Adds or removes the FL_FROZEN flag from the player.
--- Frozen bots will still be able to look around.
---@param frozen boolean Whether the player should be frozen.
function Player:Freeze(frozen) end

---[SHARED] Returns the player's active weapon.
--- If used on a LocalPlayer() and the player is spectating another player with OBS_MODE_IN_EYE, the weapon returned will be of the spectated player.
---@return Weapon The weapon the player currently has equipped.
function Player:GetActiveWeapon() end

---[SERVER] Returns the player's current activity.
---@return number The player's current activity. See Enums/ACT.
function Player:GetActivity() end

---[SHARED] Returns the direction that the player is aiming.
---@return Vector The direction vector of players aim
function Player:GetAimVector() end

---[SHARED] Returns true if the players' model is allowed to rotate around the pitch and roll axis.
---@return boolean Allowed
function Player:GetAllowFullRotation() end

---[SHARED] Returns whether the player is allowed to use their weapons in a vehicle or not.
---@return boolean Whether the player is allowed to use their weapons in a vehicle or not.
function Player:GetAllowWeaponsInVehicle() end

---[SHARED] Returns a table of all ammo the player has.
---@return table A table with the following format  number Key - AmmoID to be used with functions like game.GetAmmoName. number Value - Amount of ammo the player has of this kind.
function Player:GetAmmo() end

---[SHARED] Gets the amount of ammo the player has.
---@param ammotype any The ammunition type. Can be either number ammo ID or string ammo name.
---@return number The amount of ammo player has in reserve.
function Player:GetAmmoCount(ammotype) end

---[SHARED] Gets if the player will be pushed out of nocollided players.
---@return boolean pushed
function Player:GetAvoidPlayers() end

---[SHARED] Returns true if the player is able to walk using the (default) alt key.
---@return boolean AbleToWalk
function Player:GetCanWalk() end

---[SHARED] Determines whenever the player is allowed to use the zoom functionality.
---@return boolean canZoom
function Player:GetCanZoom() end

---[SHARED] Returns the player's class id.
---@return number The player's class id.
function Player:GetClassID() end

---[SHARED] Gets total count of entities of same type.
--- Default types:
--- balloons
--- buttons
--- cameras
--- dynamite
--- emitters
--- hoverballs
--- lamps
--- lights
--- props
--- ragdolls
--- thrusters
--- wheels
---@param type string Type to get entity count of.
---@param minus number If specified, it will reduce the counter by this value. Works only serverside.
---@return number The returned count.
function Player:GetCount(type, minus) end

---[SHARED] Returns the crouched walk speed multiplier.
--- See also Player:GetWalkSpeed and Player:SetCrouchedWalkSpeed.
---@return number The crouched walk speed multiplier.
function Player:GetCrouchedWalkSpeed() end

---[SHARED] Returns the last command which was sent by the specified player. This can only be called on the player which GetPredictionPlayer() returns.
--- When called clientside in singleplayer during WEAPON:Think, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.This will fail in GM:StartCommand.Issue Tracker: 3302
---@return CUserCmd Last user commands
function Player:GetCurrentCommand() end

---[SHARED] Gets the actual view offset which equals the difference between the players actual position and their view when standing.
--- Do not confuse with Player:GetViewOffset and Player:GetViewOffsetDucked
---@return Vector The actual view offset.
function Player:GetCurrentViewOffset() end

---[SHARED] Gets the entity the player is currently driving via the drive library.
---@return Entity The currently driven entity, or NULL entity
function Player:GetDrivingEntity() end

---[SHARED] Returns driving mode of the player. See Entity Driving.
---@return number The drive mode ID or 0 if player doesn't use the drive system.
function Player:GetDrivingMode() end

---[SHARED] Returns a player's duck speed (in seconds)
---@return number duckspeed
function Player:GetDuckSpeed() end

---[SHARED] Returns the entity the player is currently using, like func_tank mounted turrets or +use prop pickups.
---@return Entity Entity in use, or NULL entity otherwise. For +use prop pickups, this will be NULL clientside.
function Player:GetEntityInUse() end

---[SHARED] Returns a table with information of what the player is looking at.
--- The results of this function are cached clientside every frame.
--- Uses util.GetPlayerTrace internally and is therefore bound by its limits.
--- See also Player:GetEyeTraceNoCursor.
---@return table Trace information, see Structures/TraceResult.
function Player:GetEyeTrace() end

---[SHARED] Returns the trace according to the players view direction, ignoring their mouse (holding c and moving the mouse in Sandbox).
--- The results of this function are cached clientside every frame.
--- Uses util.GetPlayerTrace internally and is therefore bound by its limits.
--- See also Player:GetEyeTrace.
---@return table Trace result. See Structures/TraceResult.
function Player:GetEyeTraceNoCursor() end

---[SHARED] Returns the FOV of the player.
---@return number Field of view as a float
function Player:GetFOV() end

---[CLIENT] Returns the steam "relationship" towards the player.
---@return string Should return one of four different things depending on their status on your friends list: "friend", "blocked", "none" or "requested".
function Player:GetFriendStatus() end

---[SHARED] Gets the hands entity of a player
---@return Entity The hands entity if players has one
function Player:GetHands() end

---[SHARED] Returns the widget the player is hovering with their mouse.
---@return Entity The hovered widget.
function Player:GetHoveredWidget() end

---[SHARED] Gets the bottom base and the top base size of the player's hull.
---@return Vector, Vector Vector - Player's hull bottom base size.
---@return Vector, Vector Vector - Player's hull top base size.
function Player:GetHull() end

---[SHARED] Gets the bottom base and the top base size of the player's crouch hull.
---@return Vector, Vector Vector - Player's crouch hull bottom base size.
---@return Vector, Vector Vector - Player's crouch hull top base size.
function Player:GetHullDuck() end

---[SHARED] Retrieves the value of a client-side ConVar. The ConVar must have a FCVAR_USERINFO flag for this to work.
--- The returned value is truncated to 31 bytes.On client this function will return value of the local player, regardless of which player the function was called on!
---@param cVarName string The name of the client-side ConVar.
---@return string The value of the ConVar.
function Player:GetInfo(cVarName) end

---[SHARED] Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The ConVar must have a FCVAR_USERINFO flag for this to work.
---@param cVarName string The name of the ConVar to query the value of
---@param default number Default value if we failed to retrieve the number.
---@return number The value of the ConVar or the default value
function Player:GetInfoNum(cVarName, default) end

---[SHARED] Returns the jump power of the player
---@return number Jump power
function Player:GetJumpPower() end

---[SHARED] Returns the player's ladder climbing speed.
--- See Player:GetWalkSpeed for normal walking speed, Player:GetRunSpeed for sprinting speed and Player:GetSlowWalkSpeed for slow walking speed.
---@return number The ladder climbing speed.
function Player:GetLadderClimbSpeed() end

---[SHARED] Returns the timescale multiplier of the player movement.
---@return number The timescale multiplier, defaults to 1.
function Player:GetLaggedMovementValue() end

---[SHARED] Returns the maximum amount of armor the player should have. Default value is 100.
---@return number The new max armor value
function Player:GetMaxArmor() end

---[SHARED] Returns the player's maximum movement speed.
--- See also Player:SetMaxSpeed, Player:GetWalkSpeed and Player:GetRunSpeed.
---@return number The maximum movement speed the player can go at.
function Player:GetMaxSpeed() end

---[SHARED] Returns the player's name, this is an alias of Player:Nick.
--- This function overrides Entity:GetName (in the Lua metatable, not in c++), keep it in mind when dealing with ents.FindByName or any engine function which requires the mapping name.
---@return string The player's name.
function Player:GetName() end

---[SHARED] Returns whenever the player is set not to collide with their teammates.
---@return boolean noCollideWithTeammates
function Player:GetNoCollideWithTeammates() end

---[SHARED] Returns the the observer mode of the player
---@return number Observe mode of that player, see Enums/OBS_MODE.
function Player:GetObserverMode() end

---[SHARED] Returns the entity the player is currently observing.
--- Set using Player:SpectateEntity.
---@return Entity The entity the player is currently spectating, or NULL if the player has no target.
function Player:GetObserverTarget() end

---[SHARED] Returns a Player Data key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)
--- Internally uses the sql.
--- This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.PData is not networked from servers to clients!
---@param key string Name of the PData key
---@param default any Default value if PData key doesn't exist.
---@return string The data in the SQL database or the default value given.
function Player:GetPData(key, default) end

---[SHARED] Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.
---@return Vector color
function Player:GetPlayerColor() end

---[SHARED] Returns a table containing player information.
---@return table A table containing player information.
function Player:GetPlayerInfo() end

---[SERVER] Returns the preferred carry angles of an object, if any are set.
--- Calls GM:GetPreferredCarryAngles with the target entity and returns the carry angles.
---@param carryEnt Entity Entity to retrieve the carry angles of.
---@return Angle Carry angles or nil if the entity has no preferred carry angles.
function Player:GetPreferredCarryAngles(carryEnt) end

---[SHARED] Returns the widget entity the player is using.
--- Having a pressed widget stops the player from firing their weapon to allow input to be passed onto the widget.
---@return Entity The pressed widget.
function Player:GetPressedWidget() end

---[SHARED] Returns the weapon the player previously had equipped.
---@return Entity The previous weapon of the player. This is not guaranteed to be a weapon entity so it should be checked with Entity:IsWeapon for safety.This is not guaranteed to be a weapon entity so it should be checked with Entity:IsWeapon for safety.This is not guaranteed to be a weapon entity so it should be checked with Entity:IsWeapon for safety.
function Player:GetPreviousWeapon() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use Player:GetViewPunchAngles instead.
--- Returns players screen punch effect angle. See Player:ViewPunch and Player:SetViewPunchAngles
---@return Angle The punch angle
function Player:GetPunchAngle() end

---[SHARED] Returns players death ragdoll. The ragdoll is created by Player:CreateRagdoll.
---@return Entity The ragdoll. Unlike normal clientside ragdolls (C_ClientRagdoll), this will be a C_HL2MPRagdoll on the client, and hl2mp_ragdoll on the server.
function Player:GetRagdollEntity() end

---[SHARED] Returns the render angles for the player.
---@return Angle The render angles of the player. Only yaw part of the angle seems to be present.
function Player:GetRenderAngles() end

---[SHARED] Returns the player's sprint speed.
--- See also Player:SetRunSpeed, Player:GetWalkSpeed and Player:GetMaxSpeed.
---@return number The sprint speed
function Player:GetRunSpeed() end

---[SHARED] Returns the position of a Player's view
--- This is the same as calling Entity:EyePos on the player.
---@return Vector aim pos
function Player:GetShootPos() end

---[SHARED] Returns the player's slow walking speed, which is activated via +walk keybind.
--- See Player:GetWalkSpeed for normal walking speed, Player:GetRunSpeed for sprinting speed and Player:GetLadderClimbSpeed for ladder climb speed.
---@return number The new slow walking speed.
function Player:GetSlowWalkSpeed() end

---[SHARED] Returns the maximum height player can step onto.
---@return number The maximum height player can get up onto without jumping, in hammer units.
function Player:GetStepSize() end

---[SHARED] Returns the player's HEV suit power.
--- This will only work for the local player when used clientside.Issue Tracker: 3449
---@return number The current suit power.
function Player:GetSuitPower() end

---[SERVER] Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with Player:IsTimingOut.
--- This function is relatively useless because it is tied to the value of the sv_timeout ConVar, which is irrelevant to the description above. This is not considered as a bug.
---@return number Timeout seconds.
function Player:GetTimeoutSeconds() end

---[SHARED] Returns TOOL table of players current tool, or of the one specified.
---@param mode string Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )
---@return table TOOL table, or nil if the table wasn't found or the player doesn't have a tool gun.
function Player:GetTool(mode) end

---[SHARED] Returns a player's unduck speed (in seconds)
---@return number unduck speed
function Player:GetUnDuckSpeed() end

---[SHARED] Returns the entity the player would use if they would press their +use keybind.
--- Because entity physics objects usually do not exist on the client, the client's use entity will resolve to whatever the crosshair is placed on within a little less than 72 units of the player's eye position. This differs from the entity returned by the server, which has fully physical use checking. See util.TraceHull.
--- Issue tracker: 5027
---@return Entity The entity that would be used or NULL.
function Player:GetUseEntity() end

---[SHARED] Returns the player's user group. By default, player user groups are loaded from garrysmod/settings/users.txt.
---@return string The user group of the player. This will return "user" if player has no user group.
function Player:GetUserGroup() end

---[SHARED] Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving.
---@return Vehicle vehicle
function Player:GetVehicle() end

---[SHARED] Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).
--- This function will return a [NULL Entity] until Player:SetViewEntity has been used
---@return Entity The entity the player is using to see from
function Player:GetViewEntity() end

---[SHARED] Returns the player's view model entity by the index.
--- Each player has 3 view models by default, but only the first one is used.
--- To use the other viewmodels in your SWEP, see Entity:SetWeaponModel.
--- In the Client realm, other players' viewmodels are not available unless they are being spectated.
---@param index number optional index of the view model to return, can range from 0 to 2
---@return Entity The view model entity
function Player:GetViewModel(index) end

---[SHARED] Returns the view offset of the player which equals the difference between the players actual position and their view.
--- See also Player:GetViewOffsetDucked.
---@return Vector New view offset, must be local vector to players Entity:GetPos
function Player:GetViewOffset() end

---[SHARED] Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.
--- See also Player:GetViewOffset.
---@return Vector New crouching view offset, must be local vector to players Entity:GetPos
function Player:GetViewOffsetDucked() end

---[SHARED] Returns players screen punch effect angle.
---@return Angle The punch angle
function Player:GetViewPunchAngles() end

---[SHARED] Returns client's view punch velocity. See Player:ViewPunch and Player:SetViewPunchVelocity
---@return Angle The current view punch angle velocity.
function Player:GetViewPunchVelocity() end

---[CLIENT] Returns the current voice volume scale for given player on client.
---@return number The voice volume scale, where 0 is 0% and 1 is 100%.
function Player:GetVoiceVolumeScale() end

---[SHARED] Returns the player's normal walking speed. Not sprinting, not slow walking. (+walk)
--- See also Player:SetWalkSpeed, Player:GetMaxSpeed and Player:GetRunSpeed.
---@return number The normal walking speed.
function Player:GetWalkSpeed() end

---[SHARED] Returns the weapon for the specified class
---@param className string Class name of weapon
---@return Weapon The weapon for the specified class.
function Player:GetWeapon(className) end

---[SHARED] Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.
---@return Vector color
function Player:GetWeaponColor() end

---[SHARED] Returns a table of the player's weapons.
---@return table All the weapons the player currently has.
function Player:GetWeapons() end

---[SERVER] Gives the player a weapon.
--- While this function is meant for weapons/pickupables only, it is not restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs.
---@param weaponClassName string Class name of weapon to give the player
---@param bNoAmmo boolean Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)
---@return Weapon The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesn't exist.
function Player:Give(weaponClassName, bNoAmmo) end

---[SERVER] Gives ammo to a player
---@param amount number Amount of ammo
---@param type any Type of ammo. This is a string for named ammo types, and a number for ammo ID. You can find a list of default ammo types here.
---@param hidePopup boolean Hide display popup when giving the ammo
---@return number Ammo given.
function Player:GiveAmmo(amount, type, hidePopup) end

---[SERVER] Disables god mode on the player.
function Player:GodDisable() end

---[SERVER] Enables god mode on the player.
function Player:GodEnable() end

---[SHARED] Returns whether the player has god mode or not, contolled by Player:GodEnable and Player:GodDisable.
--- This is not synced between the client and server. This will cause the client to always return false even in godmode.Issue Tracker: 2038
---@return boolean Whether the player has god mode or not.
function Player:HasGodMode() end

---[SHARED] Returns if the player has the specified weapon
---@param className string Class name of the weapon
---@return boolean True if the player has the weapon
function Player:HasWeapon(className) end

---[SHARED] Returns if the player is in a vehicle
---@return boolean Whether the player is in a vehicle.
function Player:InVehicle() end

---[SERVER] Returns the player's IP address and connection port in ip:port form
--- Returns Error! for bots.
---@return string The player's IP address and connection port
function Player:IPAddress() end

---[SHARED] Returns whether the player is an admin or not. It will also return true if the player is Player:IsSuperAdmin by default.
--- Internally this is determined by Player:IsUserGroup.
---@return boolean True if the player is an admin or a super admin.
function Player:IsAdmin() end

---[SHARED] Returns if the player is an bot or not
---@return boolean True if the player is a bot.
function Player:IsBot() end

---[SERVER] Returns true from the point when the player is sending client info but not fully in the game until they disconnect.
---@return boolean isConnected
function Player:IsConnected() end

---[SHARED] Used to find out if a player is currently 'driving' an entity (by which we mean 'right click > drive' ).
---@return boolean A value representing whether or not the player is 'driving' an entity.
function Player:IsDrivingEntity() end

---[SHARED] Returns whether the players movement is currently frozen, controlled by Player:Freeze.
---@return boolean Whether the players movement is currently frozen or not.
function Player:IsFrozen() end

---[SERVER] Returns whether the player identity was confirmed by the steam network.
--- See also GM:PlayerAuthed.
---@return boolean Whether the player has been fully authenticated or not. This will always be true for singleplayer and the listen server host. This will always be false for bots.
function Player:IsFullyAuthenticated() end

---[SERVER] Returns if a player is the host of the current session.
---@return boolean True if the player is the listen server host, false otherwise. This will always be true in single player, and false on a dedicated server.
function Player:IsListenServerHost() end

---[CLIENT] Returns whether or not the player is muted locally.
---@return boolean whether or not the player is muted locally.
function Player:IsMuted() end

---[SHARED] Returns true if the player is playing a taunt.
---@return boolean Whether the player is playing a taunt.
function Player:IsPlayingTaunt() end

---[SHARED] Returns whenever the player is heard by the local player clientside, or if the player is speaking serverside.
---@return boolean Is the player speaking or not.
function Player:IsSpeaking() end

---[SHARED] Returns whether the player is currently sprinting or not, specifically if they are holding their sprint key and are allowed to sprint.
--- This will not check if the player is currently sprinting into a wall. (i.e. holding their sprint key but not moving)
---@return boolean Is the player sprinting or not
function Player:IsSprinting() end

---[SHARED] Returns whenever the player is equipped with the suit item.
--- This will only work for the local player when used clientside.Issue Tracker: 3449
---@return boolean Is the suit equipped or not.
function Player:IsSuitEquipped() end

---[SHARED] Returns whether the player is a super admin.
--- Internally this is determined by Player:IsUserGroup. See also Player:IsAdmin.
---@return boolean True if the player is a super admin.
function Player:IsSuperAdmin() end

---[SERVER] Returns true if the player is timing out (i.e. is losing connection), false otherwise.
--- A player is considered timing out when more than 4 seconds has elapsed since a network packet was received from given player.
---@return boolean isTimingOut
function Player:IsTimingOut() end

---[SHARED] Returns whether the player is typing in their chat.
--- This may not work properly if the server uses a custom chatbox.
---@return boolean Whether the player is typing in their chat or not.
function Player:IsTyping() end

---[SHARED] Returns true/false if the player is in specified group or not. See Player:GetUserGroup for a way to get player's usergroup.
---@param groupname string Group to check the player for.
---@return boolean isInUserGroup
function Player:IsUserGroup(groupname) end

---[CLIENT] Returns if the player can be heard by the local player.
---@return boolean isAudible
function Player:IsVoiceAudible() end

---[SHARED] Returns if the player is in the context menu.
--- Although this is shared, it will only work properly on the CLIENT for the local player. Using this serverside or on other players will return false.
---@return boolean Is the player world clicking or not.
function Player:IsWorldClicking() end

---[SHARED] Returns whether the world clicking is disabled for given player or not. See Player:DisableWorldClicking.
--- This value is meant to be networked to the client, but is not currently.
---@return boolean Whether the world clicking is disabled or not.
function Player:IsWorldClickingDisabled() end

---[SHARED] Gets whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.
---@param key number The key, see Enums/IN
---@return boolean isDown ?
function Player:KeyDown(key) end

---[SHARED] Gets whether a key was down one tick ago.
---@param key number The key, see Enums/IN
---@return boolean Is key down ?
function Player:KeyDownLast(key) end

---[SHARED] Gets whether a key was just pressed this tick.
---@param key number Corresponds to an Enums/IN
---@return boolean Was pressed or not
function Player:KeyPressed(key) end

---[SHARED] Gets whether a key was just released this tick.
---@param key number The key, see Enums/IN
---@return boolean Was released or not
function Player:KeyReleased(key) end

---[SERVER] Kicks the player from the server.
--- This can not be run before the player has fully joined in. Use game.KickID for that.
---@param reason string Reason to show for disconnection. This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.
function Player:Kick(reason) end

---[SERVER] Kills a player and calls GM:PlayerDeath.
function Player:Kill() end

---[SERVER] Kills a player without notifying the rest of the server.
--- This will call GM:PlayerSilentDeath instead of GM:PlayerDeath.
function Player:KillSilent() end

---[SHARED] This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.
--- This technique is most commonly used on things that hit other entities instantaneously, such as traces.
--- Entity:FireBullets calls this function internally.
--- Lag compensation only works for players and entities that have been enabled with Entity:SetLagCompensated
--- Despite being defined shared, it can only be used server-side in a Predicted Hook.
--- This function NEEDS to be disabled after you're done with it or it will break the movement of the entities affected!Lag compensation does not support pose parameters.Issue Tracker: 3683
---@param lagCompensation boolean The state of the lag compensation, true to enable and false to disable.
function Player:LagCompensation(lagCompensation) end

---[SERVER] Returns the hitgroup where the player was last hit.
---@return number Hitgroup, see Enums/HITGROUP
function Player:LastHitGroup() end

---[SHARED] Shows "limit hit" notification in sandbox.
--- This function is only available in Sandbox and its derivatives.
---@param type string Type of hit limit.
function Player:LimitHit(type) end

---[SHARED] Returns the direction a player is looking as a entity/local-oriented angle.
--- Unlike Entity:EyeAngles, this function does not include angles of the Player's Entity:GetParent.
---@return Angle local eye angles
function Player:LocalEyeAngles() end

---[SERVER] Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to Player:Freeze but the player takes no damage.
--- Adds the FL_FROZEN and FL_GODMODE flags to the player.
--- Frozen bots will still be able to look around.
function Player:Lock() end

---[SHARED] Returns the position of a Kinect bone.
---@param bone number Bone to get the position of. Must be from 0 to 19.
---@return Vector Position of the bone.
function Player:MotionSensorPos(bone) end

---[SHARED] Returns the players name. Identical to Player:Nick and Player:GetName.
---@return string Player's Steam name.
function Player:Name() end

---[SHARED] Returns the player's nickname.
---@return string Player's Steam name
function Player:Nick() end

---[SERVER] Returns the 64-bit SteamID aka CommunityID of the Steam Account that owns the Garry's Mod license this player is using. This is useful for detecting players using Steam Family Sharing.
--- If player is not using Steam Family Sharing, this will return the player's actual SteamID64().
--- This data will only be available after the player has fully authenticated with Steam. See Player:IsFullyAuthenticated.
---@return string The 64bit SteamID
function Player:OwnerSteamID64() end

---[SHARED] Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.
---@return number Packets lost
function Player:PacketLoss() end

---[SHARED] Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.
---@return number Number of props unfrozen.
function Player:PhysgunUnfreeze() end

---[SERVER] This makes the player hold ( same as pressing e on a small prop ) the provided entity.
--- Don't get this confused with picking up items like ammo or health kitsThis picks up the passed entity regardless of its mass or distance from the player
---@param entity Entity Entity to pick up.
function Player:PickupObject(entity) end

---[SERVER] Forces the player to pickup an existing weapon entity. The player will not pick up the weapon if they already own a weapon of given type, or if the player could not normally have this weapon in their inventory.
--- This function will bypass GM:PlayerCanPickupWeapon.
---@param wep Weapon The weapon to try to pick up.
---@param ammoOnly boolean If set to true, the player will only attempt to pick up the ammo from the weapon. The weapon will not be picked up even if the player doesn't have a weapon of this type, and the weapon will be removed if the player picks up any ammo from it.
---@return boolean Whether the player succeeded in picking up the weapon or not.
function Player:PickupWeapon(wep, ammoOnly) end

---[SHARED] Returns the player's ping to server.
---@return number The player's ping.
function Player:Ping() end

---[SERVER] Plays the correct step sound according to what the player is staying on.
---@param volume number Volume for the sound, in range from 0 to 1
function Player:PlayStepSound(volume) end

---[SHARED] Displays a message either in their chat, console, or center of the screen. See also PrintMessage.
--- When called serverside, this uses the archaic user message system (the umsg) and hence is limited to ≈250 characters.
--- HUD_PRINTCENTER will not work when this is called clientside.
---@param type number Which type of message should be sent to the player (Enums/HUD).
---@param message string Message to be sent to the player.
function Player:PrintMessage(type, message) end

---[SERVER] Removes all ammo from a certain player
function Player:RemoveAllAmmo() end

---[SERVER] Removes all weapons and ammo from the player.
function Player:RemoveAllItems() end

---[SHARED] Removes the amount of the specified ammo from the player.
---@param ammoCount number The amount of ammunition to remove.
---@param ammoName string The name of the ammunition to remove from. This can also be a number ammoID.
function Player:RemoveAmmo(ammoCount, ammoName) end

---[SHARED] Removes a Player Data key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)
--- Internally uses the sql.
--- This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
---@param key string Key to remove
---@return boolean true is succeeded, false otherwise
function Player:RemovePData(key) end

---[SERVER] Strips the player's suit item.
function Player:RemoveSuit() end

---[SHARED] Resets both normal and duck hulls to their default values.
function Player:ResetHull() end

---[SERVER] Forces the player to say whatever the first argument is. Works on bots too.
--- This function ignores the default chat message cooldown
---@param text string The text to force the player to say.
---@param teamOnly boolean Whether to send this message to our own team only.
function Player:Say(text, teamOnly) end

---[SHARED] Fades the screen
---@param flags number Fade flags defined with Enums/SCREENFADE.
---@param clr number The color of the screenfade
---@param fadeTime number Fade(in/out) effect transition time ( From no fade to full fade and vice versa ). This is limited to 7 bits integer part and 9 bits fractional part.
---@param fadeHold number Fade effect hold time. This is limited to 7 bits integer part and 9 bits fractional part.
function Player:ScreenFade(flags, clr, fadeTime, fadeHold) end

---[SERVER] Sets the active weapon of the player by its class name.
--- This will switch the weapon out of prediction, causing delay on the client and WEAPON:Deploy and WEAPON:Holster to be called out of prediction. Try using CUserCmd:SelectWeapon or input.SelectWeapon, instead.This will trigger the weapon switch event and associated animations. To switch weapons silently, use Player:SetActiveWeapon.
---@param className string The class name of the weapon to switch to. If the player doesn't have the specified weapon, nothing will happen. You can use Player:Give to give the weapon first.
function Player:SelectWeapon(className) end

---[SERVER] Sends a hint to a player.
--- This function is only available in Sandbox and its derivatives. Since this adds #Hint_ to the beginning of each message, you should only use it with default hint messages, or those cached with language.Add. For hints with custom text, look at notification.AddLegacy.
---@param name string Name/class/index of the hint. The text of the hint will contain this value. ( "#Hint_" .. name ) An example is PhysgunFreeze.
---@param delay number Delay in seconds before showing the hint
function Player:SendHint(name, delay) end

---[SERVER] Executes a simple Lua string on the player.
--- If you need to use this function more than once consider using net library. Send net message and make the entire code you want to execute in net.Receive on client.The string is limited to 254 bytes. Consider using the net library for more advanced server-client interaction.
---@param script string The script to execute.
function Player:SendLua(script) end

---[SERVER] Sets the player's active weapon. You should use CUserCmd:SelectWeapon or Player:SelectWeapon, instead in most cases.
--- This function will not trigger the weapon switch events or associated equip animations. It will bypass
--- GM:PlayerSwitchWeapon and the currently active weapon's WEAPON:Holster return value.
---@param weapon Weapon The weapon to equip.
function Player:SetActiveWeapon(weapon) end

---[SERVER] Sets the player's activity.
---@param act number The new activity to set. See Enums/ACT.
function Player:SetActivity(act) end

---[SHARED] Set if the players' model is allowed to rotate around the pitch and roll axis.
---@param Allowed boolean Allowed to rotate
function Player:SetAllowFullRotation(Allowed) end

---[SERVER] Allows player to use their weapons in a vehicle. You need to call this before entering a vehicle.
--- Shooting in a vehicle fires two bullets.Issue Tracker: 1277
---@param allow boolean Show we allow player to use their weapons in a vehicle or not.
function Player:SetAllowWeaponsInVehicle(allow) end

---[SHARED] Sets the amount of the specified ammo for the player.
---@param ammoCount number The amount of ammunition to set.
---@param ammoType any The ammunition type. Can be either number ammo ID or string ammo name.
function Player:SetAmmo(ammoCount, ammoType) end

---[SERVER] Sets the player armor to the argument.
---@param Amount number The amount that the player armor is going to be set to.
function Player:SetArmor(Amount) end

---[SHARED] Pushes the player away from another player whenever it's inside the other players bounding box.
---@param avoidPlayers boolean Avoid or not avoid.
function Player:SetAvoidPlayers(avoidPlayers) end

---[SHARED] Set if the player should be allowed to walk using the (default) alt key.
---@param abletowalk boolean True allows the player to walk.
function Player:SetCanWalk(abletowalk) end

---[SHARED] Sets whether the player can use the HL2 suit zoom ("+zoom" bind) or not.
---@param canZoom boolean Whether to make the player able or unable to zoom.
function Player:SetCanZoom(canZoom) end

---[SHARED] Sets the player's class id.
---@param classID number The class id the player is being set with.
function Player:SetClassID(classID) end

---[SHARED] Sets the crouched walk speed multiplier.
--- Doesn't work for values above 1.
--- See also Player:SetWalkSpeed and Player:GetCrouchedWalkSpeed.
---@param speed number The walk speed multiplier that crouch speed should be.
function Player:SetCrouchedWalkSpeed(speed) end

---[SHARED] Sets the actual view offset which equals the difference between the players actual position and their view when standing.
--- Do not confuse with Player:SetViewOffset and Player:SetViewOffsetDucked
---@param viewOffset Vector The new view offset.
function Player:SetCurrentViewOffset(viewOffset) end

---[SERVER] Sets a player's death count
---@param deathcount number Number of deaths (positive or negative)
function Player:SetDeaths(deathcount) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the driving entity and driving mode.
--- Use drive.PlayerStartDriving instead, see Entity Driving.
---@param drivingEntity Entity The entity the player should drive.
---@param drivingMode number The driving mode index.
function Player:SetDrivingEntity(drivingEntity, drivingMode) end

---[SHARED] Applies the specified sound filter to the player.
---@param soundFilter number The index of the sound filter to apply. Pick from the list of DSP's.
---@param fastReset boolean If set to true the sound filter will be removed faster.
function Player:SetDSP(soundFilter, fastReset) end

---[SHARED] Sets how quickly a player ducks.
--- This will not work for values >= 1.Issue Tracker: 2722
---@param duckSpeed number How quickly the player will duck.
function Player:SetDuckSpeed(duckSpeed) end

---[SHARED] Sets the local angle of the player's view (may rotate body too if angular difference is large)
---@param angle Angle Angle to set the view to
function Player:SetEyeAngles(angle) end

---[SHARED] Set a player's FOV (Field Of View) over a certain amount of time.
---@param fov number the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings )
---@param time number the time it takes to transition to the FOV expressed in a floating point.
---@param requester Entity The requester or "owner" of the zoom event. Only this entity will be able to change the player's FOV until it is set back to 0.
function Player:SetFOV(fov, time, requester) end

---[SERVER] Sets a player's frags (kills)
---@param fragcount number Number of frags (positive or negative)
function Player:SetFrags(fragcount) end

---[SHARED] Sets the hands entity of a player.
--- The hands entity is an entity introduced in Garry's Mod 13 and it's used to show the player's hands attached to the viewmodel.
--- This is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit Using Viewmodel Hands.
---@param hands Entity The hands entity to set
function Player:SetHands(hands) end

---[SHARED] Sets the widget that is currently hovered by the player's mouse.
---@param widget Entity The widget entity that the player is hovering.
function Player:SetHoveredWidget(widget) end

---[SHARED] Sets the mins and maxs of the AABB of the players collision.
--- See Player:SetHullDuck for the hull while crouching/ducking.
---@param hullMins Vector The min coordinates of the hull.
---@param hullMaxs Vector The max coordinates of the hull.
function Player:SetHull(hullMins, hullMaxs) end

---[SHARED] Sets the mins and maxs of the AABB of the players collision when ducked.
--- See Player:SetHull for setting the hull while standing.
---@param hullMins Vector The min coordinates of the hull.
---@param hullMaxs Vector The max coordinates of the hull.
function Player:SetHullDuck(hullMins, hullMaxs) end

---[SHARED] Sets the jump power, eg. the velocity that will be applied to the player when they jump.
---@param jumpPower number The new jump velocity.
function Player:SetJumpPower(jumpPower) end

---[SHARED] Sets the player's ladder climbing speed.
--- See Player:SetWalkSpeed for normal walking speed, Player:SetRunSpeed for sprinting speed and Player:SetSlowWalkSpeed for slow walking speed.
---@param speed number The ladder climbing speed.
function Player:SetLadderClimbSpeed(speed) end

---[SERVER] Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.
--- It achieves such behavior by multiplying the FrameTime by the specified timescale at the start of the movement simulation and then restoring it afterwards.
--- This is reset to 1 on spawn.
--- There is no weapon counterpart to this, you'll have to hardcode the multiplier in the weapon or call Weapon:SetNextPrimaryFire / Weapon:SetNextSecondaryFire manually from a.
---@param timescale number The timescale multiplier.
function Player:SetLaggedMovementValue(timescale) end

---[SERVER] Sets the hitgroup where the player was last hit.
---@param hitgroup number The hitgroup to set as the "last hit", see Enums/HITGROUP.
function Player:SetLastHitGroup(hitgroup) end

---[SERVER] Sets the maximum amount of armor the player should have. This affects default built-in armor pickups, but not Player:SetArmor.
---@param maxarmor number The new max armor value.
function Player:SetMaxArmor(maxarmor) end

---[SHARED] Sets the maximum speed which the player can move at.
--- This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see CMoveData:SetMaxClientSpeed.
---@param walkSpeed number The maximum speed.
function Player:SetMaxSpeed(walkSpeed) end

---[CLIENT] Sets if the player should be muted locally.
---@param mute boolean Mute or unmute.
function Player:SetMuted(mute) end

---[SHARED] Sets whenever the player should not collide with their teammates.
--- This will only work for teams with ID 1 to 4 due to internal Engine limitations.This causes traces with COLLISION_GROUP_PLAYER to pass through players.
---@param shouldNotCollide boolean True to disable, false to enable collision.
function Player:SetNoCollideWithTeammates(shouldNotCollide) end

---[SERVER] Sets the players visibility towards NPCs.
--- Internally this toggles the FL_NOTARGET flag, which you can manually test for using Entity:IsFlagSet
---@param visibility boolean The visibility.
function Player:SetNoTarget(visibility) end

---[SHARED] Sets the players observer mode. You must start the spectating first with Player:Spectate.
---@param mode number Spectator mode using Enums/OBS_MODE.
function Player:SetObserverMode(mode) end

---[SHARED] Writes a Player Data key-value pair to the SQL database. (sv.db when called on server,  cl.db when called on client)
--- Internally uses the sql.
--- This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.PData is not networked from servers to clients!
---@param key string Name of the PData key
---@param value any Value to write to the key (must be an SQL valid data type, such as a string or integer)
---@return boolean Whether the operation was successful or not
function Player:SetPData(key, value) end

---[SHARED] Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.
---@param Color Vector This is the color to be set. The format is Vector(r, g, b), and each color should be between 0 and 1.
function Player:SetPlayerColor(Color) end

---[SHARED] Sets the widget that is currently in use by the player's mouse.
--- Having a pressed widget stops the player from firing their weapon to allow input to be passed onto the widget.
---@param pressedWidget Entity The widget the player is currently using.
function Player:SetPressedWidget(pressedWidget) end

---[SHARED] Sets the render angles of a player.
---@param ang Angle The new render angles to set
function Player:SetRenderAngles(ang) end

---[SHARED] Sets the player's sprint speed.
--- See also Player:GetRunSpeed, Player:SetWalkSpeed and Player:SetMaxSpeed.
--- player_default class run speed is: 600
---@param runSpeed number The new sprint speed when sv_friction is below 10. Higher sv_friction values will result in slower speed. Has to be 7 or above or the player won't be able to move.
function Player:SetRunSpeed(runSpeed) end

---[SHARED] Sets the player's slow walking speed, which is activated via +walk keybind.
--- See Player:SetWalkSpeed for normal walking speed, Player:SetRunSpeed for sprinting speed and Player:SetLadderClimbSpeed for ladder climb speed.
---@param speed number The new slow walking speed.
function Player:SetSlowWalkSpeed(speed) end

---[SHARED] Sets the maximum height a player can step onto without jumping.
---@param stepHeight number The new maximum height the player can step onto without jumping
function Player:SetStepSize(stepHeight) end

---[SHARED] Sets the player's HEV suit power.
--- This will only work for the local player when used clientside.Issue Tracker: 3449
---@param power number The new suit power.
function Player:SetSuitPower(power) end

---[SHARED] Sets whenever to suppress the pickup notification for the player.
---@param doSuppress boolean Whenever to suppress the notice or not.
function Player:SetSuppressPickupNotices(doSuppress) end

---[SERVER] Sets the player to the chosen team.
---@param Team number The team that the player is being set to.
function Player:SetTeam(Team) end

---[SHARED] Sets how quickly a player un-ducks
---@param UnDuckSpeed number How quickly the player will un-duck
function Player:SetUnDuckSpeed(UnDuckSpeed) end

---[SERVER] Sets up the players view model hands. Calls GM:PlayerSetHandsModel to set the model of the hands.
---@param ent Entity If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.
function Player:SetupHands(ent) end

---[SERVER] Sets the usergroup of the player.
---@param groupName string The user group of the player.
function Player:SetUserGroup(groupName) end

---[SERVER] Attaches the players view to the position and angles of the specified entity.
---@param viewEntity Entity The entity to attach the player view to.
function Player:SetViewEntity(viewEntity) end

---[SHARED] Sets the desired view offset which equals the difference between the players actual position and their view when standing.
--- If you want to set actual view offset, use Player:SetCurrentViewOffset
--- See also Player:SetViewOffsetDucked for desired view offset when crouching.
---@param viewOffset Vector The new desired view offset when standing.
function Player:SetViewOffset(viewOffset) end

---[SHARED] Sets the desired view offset which equals the difference between the players actual position and their view when crouching.
--- If you want to set actual view offset, use Player:SetCurrentViewOffset
--- See also Player:SetViewOffset for desired view offset when standing.
---@param viewOffset Vector The new desired view offset when crouching.
function Player:SetViewOffsetDucked(viewOffset) end

---[SHARED] Sets client's view punch angle, but not the velocity. See Player:ViewPunch
---@param punchAngle Angle The angle to set.
function Player:SetViewPunchAngles(punchAngle) end

---[SHARED] Sets client's view punch velocity. See Player:ViewPunch and Player:SetViewPunchAngles
---@param punchVel Angle The angle velocity to set.
function Player:SetViewPunchVelocity(punchVel) end

---[CLIENT] Sets the voice volume scale for given player on client. This value will persist from server to server, but will be reset when the game is shut down.
--- This doesn't work on bots, their scale will always be 1.
---@param number number The voice volume scale, where 0 is 0% and 1 is 100%.
function Player:SetVoiceVolumeScale(number) end

---[SHARED] Sets the player's normal walking speed. Not sprinting, not slow walking +walk.
--- See also Player:SetSlowWalkSpeed, Player:GetWalkSpeed, Player:SetCrouchedWalkSpeed, Player:SetMaxSpeed and Player:SetRunSpeed.
--- Using a speed of 0 can lead to prediction errors.Issue Tracker: 2030player_default class walk speed is: 400.
---@param walkSpeed number The new walk speed when sv_friction is below 10. Higher sv_friction values will result in slower speed. Has to be 7 or above or the player won't be able to move.
function Player:SetWalkSpeed(walkSpeed) end

---[SHARED] Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model.
---@param Color Vector This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.
function Player:SetWeaponColor(Color) end

---[CLIENT] Returns whether the player's player model will be drawn at the time the function is called.
---@return boolean true if the player's playermodel is visible
function Player:ShouldDrawLocalPlayer() end

---[SERVER] Sets whether the player's current weapon should drop on death.
--- This is reset on spawn to the player class's DropWeaponOnDie field by player_manager.OnPlayerSpawn.
---@param drop boolean Whether to drop the player's current weapon or not
function Player:ShouldDropWeapon(drop) end

---[CLIENT] Opens the player steam profile page in the steam overlay browser.
function Player:ShowProfile() end

---[SERVER] Signals the entity that it was dropped by the gravity gun.
---@param ent Entity Entity that was dropped.
function Player:SimulateGravGunDrop(ent) end

---[SERVER] Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.
---@param ent Entity The entity picked up
---@param lightning boolean Whether or not to show lightning effects around the entity
function Player:SimulateGravGunPickup(ent, lightning) end

---[SERVER] Starts spectate mode for given player. This will also affect the players movetype in some cases.
--- Using this function while spectating the player's own ragdoll will cause it to teleport it to the center of the map. You will spectate the ragdoll even after it's been teleported. This only happens on the client of the player spectating the ragdoll and is purely client-side.Issue Tracker: 4608
---@param mode number Spectate mode, see Enums/OBS_MODE.
function Player:Spectate(mode) end

---[SERVER] Makes the player spectate the entity.
--- To get the applied spectated entity, use Player:GetObserverTarget.
---@param entity Entity Entity to spectate.
function Player:SpectateEntity(entity) end

---[SERVER] Makes a player spray their decal.
---@param sprayOrigin Vector The location to spray from
---@param sprayEndPos Vector The location to spray to
function Player:SprayDecal(sprayOrigin, sprayEndPos) end

---[SERVER] Disables the sprint on the player.
--- Not working - use Player:SetRunSpeed or CMoveData:SetMaxSpeed in a GM:Move hook, instead.Issue Tracker: 2390
function Player:SprintDisable() end

---[SERVER] Enables the sprint on the player.
--- Not working - use Player:SetRunSpeed or CMoveData:SetMaxSpeed in a GM:Move hook, instead.Issue Tracker: 2390
function Player:SprintEnable() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
--- Doesn't appear to do anything.
function Player:StartSprinting() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
--- When used in a GM:SetupMove hook, this function will force the player to walk, as well as preventing the player from sprinting.
function Player:StartWalking() end

---[SHARED] Returns the player's SteamID.
--- See Player:AccountID for a shorter version of the SteamID and Player:SteamID64 for the Community/Profile formatted SteamID.
--- In a -multirun environment, this will return STEAM_0:0:0 (serverside) or NULL (clientside) for all "copies" of a player because they are not authenticated with Steam.
--- For Bots this will return BOT on the server and on the client it returns NULL.
---@return string SteamID
function Player:SteamID() end

---[SHARED] Returns the player's 64-bit SteamID aka CommunityID.
--- See Player:AccountID for a shorter version of the SteamID and Player:SteamID for the normal version of the SteamID.
--- In a -multirun environment, this will return nil for all "copies" of a player because they are not authenticated with Steam.
--- For bots, this will return 90071996842377216 (equivalent to STEAM_0:0:0) for the first bot to join.
--- For each additional bot, the number increases by 1. So the next bot will be 90071996842377217 (STEAM_0:1:0) then 90071996842377218 (STEAM_0:0:1) and so on.
--- It returns no value for bots clientside.
---@return string Player's 64-bit SteamID aka CommunityID.
function Player:SteamID64() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
--- When used in a GM:SetupMove hook, this function will prevent the player from sprinting.
--- When +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function.
function Player:StopSprinting() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
--- When used in a GM:SetupMove hook, this function behaves unexpectedly by preventing the player from sprinting similar to Player:StopSprinting.
function Player:StopWalking() end

---[SERVER] Turns off the zoom mode of the player. (+zoom console command)
--- Basically equivalent of entering "-zoom" into player's console.
function Player:StopZooming() end

---[SERVER] Removes all ammo from the player.
function Player:StripAmmo() end

---[SERVER] Removes the specified weapon class from a certain player
--- this function will call the Entity:OnRemove but if you try use Entity:GetOwner it will return nil
---@param weapon string The weapon class to remove
function Player:StripWeapon(weapon) end

---[SERVER] Removes all weapons from a certain player
function Player:StripWeapons() end

---[SERVER] Prevents a hint from showing up.
--- This function is only available in Sandbox and its derivatives
---@param name string Hint name/class/index to prevent from showing up
function Player:SuppressHint(name) end

---[SERVER] Attempts to switch the player weapon to the one specified in the "cl_defaultweapon" convar, if the player does not own the specified weapon nothing will happen.
--- If you want to switch to a specific weapon, use: Player:SetActiveWeapon
function Player:SwitchToDefaultWeapon() end

---[SHARED] Returns the player's team ID.
--- Returns 0 clientside when the game is not fully loaded.
---@return number The player's team's index number, as in the Enums/TEAM or a custom team defined in team.SetUp.
function Player:Team() end

---[SERVER] Returns the time in seconds since the player connected.
--- Bots will always return value 0.
---@return number 
function Player:TimeConnected() end

---[SERVER] Performs a trace hull and applies damage to the entities hit, returns the first entity hit.
--- Hitting the victim entity with this function in ENTITY:OnTakeDamage can cause infinite loops.
---@param startPos Vector The start position of the hull trace.
---@param endPos Vector The end position of the hull trace.
---@param mins Vector The minimum coordinates of the hull.
---@param maxs Vector The maximum coordinates of the hull.
---@param damage number The damage to be applied.
---@param damageFlags number Bitflag specifying the damage type, see Enums/DMG.
---@param damageForce number The force to be applied to the hit object.
---@param damageAllNPCs boolean Whether to apply damage to all hit NPCs or not.
---@return Entity The hit entity
function Player:TraceHullAttack(startPos, endPos, mins, maxs, damage, damageFlags, damageForce, damageAllNPCs) end

---[SHARED] Translates Enums/ACT according to the holdtype of players currently held weapon.
---@param act number The initial Enums/ACT
---@return number Translated Enums/ACT
function Player:TranslateWeaponActivity(act) end

---[SHARED] Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.
function Player:UnfreezePhysicsObjects() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use Player:SteamID64, Player:SteamID or Player:AccountID to uniquely identify players instead.This function has collisions, where more than one player has the same UniqueID. It is highly recommended to use Player:AccountID, Player:SteamID or Player:SteamID64 instead, which are guaranteed to be unique to each player.
--- Returns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.
--- In Singleplayer, this function will always return 1.
---@return number The player's Unique ID
function Player:UniqueID() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This is based on Player:UniqueID which is deprecated and vulnerable to collisions.
--- Returns a table that will stay allocated for the specific player between connects until the server shuts down.
--- This table is not synchronized between client and server.
---@param key any Unique table key.
---@return table The table that contains any info you have put in it.
function Player:UniqueIDTable(key) end

---[SERVER] Unlocks the player movement if locked previously.
--- 
--- Will disable godmode for the player if locked previously.
function Player:UnLock() end

---[SERVER] Stops the player from spectating another entity.
function Player:UnSpectate() end

---[SHARED] Returns the player's ID.
--- You can use Player() to get the player by their ID.
---@return number The player's user ID
function Player:UserID() end

---[SHARED] Simulates a push on the client's screen. This adds view punch velocity, and does not touch the current view punch angle, for which you can use Player:SetViewPunchAngles.
---@param PunchAngle Angle The angle in which to push the player's screen.
function Player:ViewPunch(PunchAngle) end

---[SHARED] Resets the player's view punch (and the view punch velocity, read more at Player:ViewPunch) effect back to normal.
---@param tolerance number Reset all ViewPunch below this threshold.
function Player:ViewPunchReset(tolerance) end

---[CLIENT] Returns the players voice volume, how loud the player's voice communication currently is, as a normal number. Doesn't work on local player unless the voice_loopback convar is set to 1.
---@return number The voice volume.
function Player:VoiceVolume() end

---@class ProjectedTexture
local ProjectedTexture = {}

---[CLIENT] Returns the angle of the ProjectedTexture, which were previously set by ProjectedTexture:SetAngles
---@return Angle The angles of the ProjectedTexture.
function ProjectedTexture:GetAngles() end

---[CLIENT] Returns the brightness of the ProjectedTexture, which was previously set by ProjectedTexture:SetBrightness
---@return number The brightness of the ProjectedTexture.
function ProjectedTexture:GetBrightness() end

---[CLIENT] Returns the color of the ProjectedTexture, which was previously set by ProjectedTexture:SetColor.
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@return table Color, the color of the ProjectedTexture.
function ProjectedTexture:GetColor() end

---[CLIENT] Returns the constant attenuation of the projected texture, which can also be set by ProjectedTexture:SetConstantAttenuation.
---@return number The constant attenuation
function ProjectedTexture:GetConstantAttenuation() end

---[CLIENT] Returns whether shadows are enabled for this ProjectedTexture, which was previously set by ProjectedTexture:SetEnableShadows
---@return boolean Whether shadows are enabled.
function ProjectedTexture:GetEnableShadows() end

---[CLIENT] Returns the projection distance of the ProjectedTexture, which was previously set by ProjectedTexture:SetFarZ
---@return number The projection distance of the ProjectedTexture.
function ProjectedTexture:GetFarZ() end

---[CLIENT] Returns the horizontal FOV of the ProjectedTexture, which was previously set by ProjectedTexture:SetHorizontalFOV or ProjectedTexture:SetFOV
---@return number The horizontal FOV of the ProjectedTexture.
function ProjectedTexture:GetHorizontalFOV() end

---[CLIENT] Returns the linear attenuation of the projected texture, which can also be set by ProjectedTexture:SetLinearAttenuation.
---@return number The linear attenuation.
function ProjectedTexture:GetLinearAttenuation() end

---[CLIENT] Returns the NearZ value of the ProjectedTexture, which was previously set by ProjectedTexture:SetNearZ
---@return number NearZ of the ProjectedTexture.
function ProjectedTexture:GetNearZ() end

---[CLIENT] Returns the current orthographic settings of the Projected Texture. To set these values, use ProjectedTexture:SetOrthographic.
---@return boolean, number, number, number, number boolean - Whether or not this projected texture is orthographic. When false, nothing else is returned.
---@return boolean, number, number, number, number number - left
---@return boolean, number, number, number, number number - top
---@return boolean, number, number, number, number number - right
---@return boolean, number, number, number, number number - bottom
function ProjectedTexture:GetOrthographic() end

---[CLIENT] Returns the position of the ProjectedTexture, which was previously set by ProjectedTexture:SetPos
---@return Vector The position of the ProjectedTexture.
function ProjectedTexture:GetPos() end

---[CLIENT] Returns the quadratic attenuation of the projected texture, which can also be set by ProjectedTexture:SetQuadraticAttenuation.
---@return number The quadratic attenuation
function ProjectedTexture:GetQuadraticAttenuation() end

---[CLIENT] Returns the shadow depth bias of the projected texture.
--- Set by ProjectedTexture:SetShadowDepthBias.
---@return number The current shadow depth bias.
function ProjectedTexture:GetShadowDepthBias() end

---[CLIENT] Returns the shadow "filter size" of the projected texture. 0 is fully pixelated, higher values will blur the shadow more.
--- Set by ProjectedTexture:SetShadowFilter.
---@return number The current shadow filter size.
function ProjectedTexture:GetShadowFilter() end

---[CLIENT] Returns the shadow depth slope scale bias of the projected texture.
--- Set by ProjectedTexture:SetShadowSlopeScaleDepthBias.
---@return number The current shadow depth slope scale bias.
function ProjectedTexture:GetShadowSlopeScaleDepthBias() end

---[CLIENT] Returns the target entity of this projected texture.
---@return Entity The current target entity.
function ProjectedTexture:GetTargetEntity() end

---[CLIENT] Returns the texture of the ProjectedTexture, which was previously set by ProjectedTexture:SetTexture
---@return ITexture The texture of the ProjectedTexture.
function ProjectedTexture:GetTexture() end

---[CLIENT] Returns the texture frame of the ProjectedTexture, which was previously set by ProjectedTexture:SetTextureFrame
---@return number The texture frame.
function ProjectedTexture:GetTextureFrame() end

---[CLIENT] Returns the vertical FOV of the ProjectedTexture, which was previously set by ProjectedTexture:SetVerticalFOV or ProjectedTexture:SetFOV
---@return number The vertical FOV of the ProjectedTexture.
function ProjectedTexture:GetVerticalFOV() end

---[CLIENT] Returns true if the projected texture is valid (i.e. has not been removed), false otherwise.
--- Instead of calling this directly it's a good idea to call IsValid in case the variable is nil.
--- IsValid( ptexture )
--- This not only checks whether the projected texture is valid - but also checks whether it's nil.
---@return boolean Whether the projected texture is valid.
function ProjectedTexture:IsValid() end

---[CLIENT] Removes the projected texture. After calling this, ProjectedTexture:IsValid will return false, and any hooks with the projected texture as the identifier will be automatically deleted.
function ProjectedTexture:Remove() end

---[CLIENT] Sets the angles (direction) of the projected texture.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param angle Angle 
function ProjectedTexture:SetAngles(angle) end

---[CLIENT] Sets the brightness of the projected texture.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param brightness number The brightness to give the projected texture.
function ProjectedTexture:SetBrightness(brightness) end

---[CLIENT] Sets the color of the projected texture.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param color table Must be a Color. Unlike other projected textures, this color can only go up to 255.
function ProjectedTexture:SetColor(color) end

---[CLIENT] Sets the constant attenuation of the projected texture.
--- See also ProjectedTexture:SetLinearAttenuation and ProjectedTexture:SetQuadraticAttenuation.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param constAtten number 
function ProjectedTexture:SetConstantAttenuation(constAtten) end

---[CLIENT] Enable or disable shadows cast from the projected texture.
--- As with all types of projected textures (including the player's flashlight and env_projectedtexture), there can only be 8 projected textures with shadows enabled in total.This limit can be increased with the launch parameter -numshadowtextures LIMIT where LIMIT is the new limit.Naturally, many projected lights with shadows enabled will drastically decrease framerate.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param newState boolean 
function ProjectedTexture:SetEnableShadows(newState) end

---[CLIENT] Sets the distance at which the projected texture ends.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param farZ number 
function ProjectedTexture:SetFarZ(farZ) end

---[CLIENT] Sets the angle of projection.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param fov number Must be higher than 0 and lower than 180
function ProjectedTexture:SetFOV(fov) end

---[CLIENT] Sets the horizontal angle of projection without affecting the vertical angle.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param hFOV number The new horizontal Field Of View for the projected texture. Must be in range between 0 and 180.
function ProjectedTexture:SetHorizontalFOV(hFOV) end

---[CLIENT] Sets the linear attenuation of the projected texture.
--- See also ProjectedTexture:SetConstantAttenuation and ProjectedTexture:SetQuadraticAttenuation.
--- The default value of linear attenuation when the projected texture is created is 100. (others are 0, as you are not supposed to mix them)
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param linearAtten number 
function ProjectedTexture:SetLinearAttenuation(linearAtten) end

---[CLIENT] Sets the distance at which the projected texture begins its projection.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
--- Setting this to 0 will disable the projected texture completely! This may be useful if you want to disable a projected texture without actually removing itThis seems to affect the rendering of shadows - a higher Near Z value will have shadows begin to render closer to their casting object. Comparing a low Near Z value (like 1) with a normal one (12) or high one (1000) is the easiest way to understand this artifact
---@param nearZ number 
function ProjectedTexture:SetNearZ(nearZ) end

---[CLIENT] Changes the current projected texture between orthographic and perspective projection.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
--- Shadows dont work. (For non static props and for most map brushes)
---@param orthographic boolean When false, all other arguments are ignored and the texture is reset to perspective projection.
---@param left number The amount of units left from the projected texture's origin to project.
---@param top number The amount of units upwards from the projected texture's origin to project.
---@param right number The amount of units right from the projected texture's origin to project.
---@param bottom number The amount of units downwards from the projected texture's origin to project.
function ProjectedTexture:SetOrthographic(orthographic, left, top, right, bottom) end

---[CLIENT] Move the Projected Texture to the specified position.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param position Vector 
function ProjectedTexture:SetPos(position) end

---[CLIENT] Sets the quadratic attenuation of the projected texture.
--- See also ProjectedTexture:SetLinearAttenuation and ProjectedTexture:SetConstantAttenuation.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param quadAtten number 
function ProjectedTexture:SetQuadraticAttenuation(quadAtten) end

---[CLIENT] Sets the shadow depth bias of the projected texture.
--- The initial value is 0.0001. Normal projected textures obey the value of the mat_depthbias_shadowmap ConVar.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param bias number The shadow depth bias to set.
function ProjectedTexture:SetShadowDepthBias(bias) end

---[CLIENT] Sets the shadow "filter size" of the projected texture. 0 is fully pixelated, higher values will blur the shadow more. The initial value is the value of r_projectedtexture_filter ConVar.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param filter number The shadow filter size to set.
function ProjectedTexture:SetShadowFilter(filter) end

---[CLIENT] Sets the shadow depth slope scale bias of the projected texture.
--- The initial value is 2. Normal projected textures obey the value of the mat_slopescaledepthbias_shadowmap ConVar.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param bias number The shadow depth slope scale bias to set.
function ProjectedTexture:SetShadowSlopeScaleDepthBias(bias) end

---[CLIENT] Sets the target entity for this projected texture, meaning it will only be lighting the given entity and the world.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param target Entity The target entity, or NULL to reset.
function ProjectedTexture:SetTargetEntity(target) end

---[CLIENT] Sets the texture to be projected.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param texture string The name of the texture. Can also be an ITexture.
function ProjectedTexture:SetTexture(texture) end

---[CLIENT] For animated textures, this will choose which frame in the animation will be projected.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param frame number The frame index to use.
function ProjectedTexture:SetTextureFrame(frame) end

---[CLIENT] Sets the vertical angle of projection without affecting the horizontal angle.
--- You must call ProjectedTexture:Update after using this function for it to take effect.
---@param vFOV number The new vertical Field Of View for the projected texture. Must be in range between 0 and 180.
function ProjectedTexture:SetVerticalFOV(vFOV) end

---[CLIENT] Updates the Projected Light and applies all previously set parameters.
function ProjectedTexture:Update() end

---@class SANDBOX
local SANDBOX = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- This hook is used to add default categories to spawnmenu tool tabs.
--- Do not override or hook this function, use SANDBOX:AddToolMenuCategories!
function SANDBOX:AddGamemodeToolMenuCategories() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- This hook is used to add default tool tabs to spawnmenu.
--- Do not override or hook this function, use SANDBOX:AddToolMenuTabs!
function SANDBOX:AddGamemodeToolMenuTabs() end

---[CLIENT] This hook is used to add new categories to spawnmenu tool tabs.
function SANDBOX:AddToolMenuCategories() end

---[CLIENT] This hook is used to add new tool tabs to spawnmenu.
function SANDBOX:AddToolMenuTabs() end

---[SHARED] Called when a player attempts to "arm" a duplication with the Duplicator tool. Return false to prevent the player from sending data to server, and to ignore data if it was somehow sent anyway.
---@param ply Player The player who attempted to arm a dupe.
---@return boolean Can the player arm a dupe or not.
function SANDBOX:CanArmDupe(ply) end

---[SHARED] Called when a player attempts to drive a prop via Prop Drive
---@param ply Player The player who attempted to use Prop Drive.
---@param ent Entity The entity the player is attempting to drive
---@return boolean Return true to allow driving, false to disallow
function SANDBOX:CanDrive(ply, ent) end

---[SHARED] Controls if a property can be used or not.
---@param ply Player Player, that tried to use the property
---@param property string Class of the property that is tried to use, for example - bonemanipulate This is not guaranteed to be the internal property name used in properties.Add!This is not guaranteed to be the internal property name used in properties.Add!This is not guaranteed to be the internal property name used in properties.Add!
---@param ent Entity The entity, on which property is tried to be used on
---@return boolean Return false to disallow using that property
function SANDBOX:CanProperty(ply, property, ent) end

---[SHARED] Called when a player attempts to fire their tool gun. Return true to specifically allow the attempt, false to block it.
---@param ply Player The player who attempted to use their toolgun.
---@param tr table A trace from the players eye to where in the world their crosshair/cursor is pointing. See Structures/TraceResult
---@param toolname string The tool mode the player currently has selected.
---@param tool table The tool mode table the player currently has selected.
---@param button number The tool button pressed.
---@return boolean Can use toolgun or not.
function SANDBOX:CanTool(ply, tr, toolname, tool, button) end

---[CLIENT] Called when player selects an item on the spawnmenu sidebar at the left.
---@param parent Panel The panel that holds spawnicons and the sidebar of spawnmenu
---@param node Panel The item player selected
function SANDBOX:ContentSidebarSelection(parent, node) end

---[CLIENT] Called when the context menu is supposedly closed.
--- This is simply an alias of GM:OnContextMenuClose.
--- This hook will be called even if the Sandbox's context menu doesn't actually exist, i.e. SANDBOX:ContextMenuEnabled blocked its creation.
function SANDBOX:ContextMenuClosed() end

---[CLIENT] Called when the context menu is created.
---@param g_ContextMenu Panel The created context menu panel
function SANDBOX:ContextMenuCreated(g_ContextMenu) end

---[CLIENT] Allows to prevent the creation of the context menu. If the context menu is already created, this will have no effect.
---@return boolean Return false to prevent the context menu from being created.
function SANDBOX:ContextMenuEnabled() end

---[CLIENT] Called when the context menu is trying to be opened.
---@return boolean Return false to block the opening.
function SANDBOX:ContextMenuOpen() end

---[CLIENT] Called when the context menu is supposedly opened.
--- This is simply an alias of GM:OnContextMenuOpen but will not be called if SANDBOX:ContextMenuOpen prevents the context menu from opening.
--- This hook will be called even if the context menu doesn't actually exist, i.e. SANDBOX:ContextMenuEnabled blocked its creation.
function SANDBOX:ContextMenuOpened() end

---[CLIENT] Called when the Client reverts spawnlist changes
function SANDBOX:OnRevertSpawnlist() end

---[CLIENT] Called when a player saves his changes made to the spawnmenu
function SANDBOX:OnSaveSpawnlist() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- This hook is called when the player edits a category in the Spawnmenu
function SANDBOX:OpenToolbox() end

---[CLIENT] Called from GM:HUDPaint; does nothing by default.
--- This cannot be used with hook.Add
function SANDBOX:PaintNotes() end

---[CLIENT] Called from GM:HUDPaint to draw world tips. By default, enabling cl_drawworldtooltips will stop world tips from being drawn here.
--- See AddWorldTip for more information.
--- This cannot be used with hook.Add
function SANDBOX:PaintWorldTips() end

---[SERVER] Called when persistent props are loaded.
---@param name string Save from which to load.
function SANDBOX:PersistenceLoad(name) end

---[SERVER] Called when persistent props are saved.
---@param name string Where to save. By default is convar "sbox_persist".
function SANDBOX:PersistenceSave(name) end

---[SERVER] Called when a player attempts to give themselves a weapon from the Q menu. ( Left mouse clicks on an icon )
---@param ply Player The player who attempted to give themselves a weapon.
---@param weapon string Class name of the weapon the player tried to give themselves.
---@param swep table The swep table of this weapon, see Structures/SWEP
---@return boolean Can the SWEP be given to the player
function SANDBOX:PlayerGiveSWEP(ply, weapon, swep) end

---[SERVER] Called after the player spawned an effect.
---@param ply Player The player that spawned the effect
---@param model string The model of spawned effect
---@param ent Entity The spawned effect itself
function SANDBOX:PlayerSpawnedEffect(ply, model, ent) end

---[SERVER] Called after the player spawned an NPC.
---@param ply Player The player that spawned the NPC
---@param ent Entity The spawned NPC itself
function SANDBOX:PlayerSpawnedNPC(ply, ent) end

---[SERVER] Called when a player has successfully spawned a prop from the Q menu.
---@param ply Player The player who spawned a prop.
---@param model string Path to the model of the prop the player is attempting to spawn.
---@param entity Entity The entity that was spawned.
function SANDBOX:PlayerSpawnedProp(ply, model, entity) end

---[SERVER] Called after the player spawned a ragdoll.
---@param ply Player The player that spawned the ragdoll
---@param model string The ragdoll model that player wants to spawn
---@param ent Entity The spawned ragdoll itself
function SANDBOX:PlayerSpawnedRagdoll(ply, model, ent) end

---[SERVER] Called after the player has spawned a scripted entity.
---@param ply Player The player that spawned the SENT
---@param ent Entity The spawned SENT
function SANDBOX:PlayerSpawnedSENT(ply, ent) end

---[SERVER] Called after the player has spawned a scripted weapon from the spawnmenu with a middle mouse click.
--- For left mouse click spawns, see SANDBOX:PlayerGiveSWEP.
---@param ply Player The player that spawned the SWEP
---@param ent Entity The SWEP itself
function SANDBOX:PlayerSpawnedSWEP(ply, ent) end

---[SERVER] Called after the player spawned a vehicle.
---@param ply Player The player that spawned the vehicle
---@param ent Entity The vehicle itself
function SANDBOX:PlayerSpawnedVehicle(ply, ent) end

---[SERVER] Called to ask if player allowed to spawn a particular effect or not.
---@param ply Player The player that wants to spawn an effect
---@param model string The effect model that player wants to spawn
---@return boolean Return false to disallow spawning that effect
function SANDBOX:PlayerSpawnEffect(ply, model) end

---[SERVER] Called to ask if player allowed to spawn a particular NPC or not.
---@param ply Player The player that wants to spawn that NPC
---@param npc_type string The npc type that player is trying to spawn
---@param weapon string The weapon of that NPC
---@return boolean Return false to disallow spawning that NPC
function SANDBOX:PlayerSpawnNPC(ply, npc_type, weapon) end

---[SERVER] Called to ask whether player is allowed to spawn a given model. This includes props, effects, and ragdolls and is called before the respective PlayerSpawn* hook.
---@param ply Player The player in question
---@param model string Model path
---@param skin number Skin number
---@return boolean Return false to disallow the player to spawn the given model.
function SANDBOX:PlayerSpawnObject(ply, model, skin) end

---[SERVER] Called when a player attempts to spawn a prop from the Q menu.
---@param ply Player The player who attempted to spawn a prop.
---@param model string Path to the model of the prop the player is attempting to spawn.
---@return boolean Should the player be able to spawn the prop or not.
function SANDBOX:PlayerSpawnProp(ply, model) end

---[SERVER] Called when a player attempts to spawn a ragdoll from the Q menu.
---@param ply Player The player who attempted to spawn a ragdoll.
---@param model string Path to the model of the ragdoll the player is attempting to spawn.
---@return boolean Should the player be able to spawn the ragdoll or not.
function SANDBOX:PlayerSpawnRagdoll(ply, model) end

---[SERVER] Called when a player attempts to spawn an Entity from the Q menu.
---@param ply Player The player who attempted to spawn the entity.
---@param class string Class name of the entity the player tried to spawn.
---@return boolean Should the player be able to spawn the entity or not.
function SANDBOX:PlayerSpawnSENT(ply, class) end

---[SERVER] Called when a player attempts to spawn a weapon from the Q menu. ( Mouse wheel clicks on an icon )
---@param ply Player The player who attempted to spawn a weapon.
---@param weapon string Class name of the weapon the player tried to spawn.
---@param swep table Information about the weapon the player is trying to spawn, see Structures/SWEP
---@return boolean Can the SWEP be spawned
function SANDBOX:PlayerSpawnSWEP(ply, weapon, swep) end

---[SERVER] Called to ask if player allowed to spawn a particular vehicle or not.
---@param ply Player The player that wants to spawn that vehicle
---@param model string The vehicle model that player wants to spawn
---@param name string Vehicle name
---@param table table Table of that vehicle, containing info about it See Structures/VehicleTable.
---@return boolean Return false to disallow spawning that vehicle
function SANDBOX:PlayerSpawnVehicle(ply, model, name, table) end

---[CLIENT] Called by the spawnmenu when the content tab is generated
--- Creating an error in this Hook will result in a completely broken Content Tab
---@param pnlContent panel The SpawnmenuContentPanel
---@param tree panel The ContentNavBar tree from the SpawnmenuContentPanel
---@param node panel The old Spawnlists
function SANDBOX:PopulateContent(pnlContent, tree, node) end

---[CLIENT] Called by the spawnmenu when the Entities tab is generated
--- Creating an error in this Hook will result in a completely broken Entites Tab
---@param pnlContent panel The SpawnmenuContentPanel
---@param tree panel The ContentNavBar tree from the SpawnmenuContentPanel
---@param node panel The old Spawnlists
function SANDBOX:PopulateEntities(pnlContent, tree, node) end

---[CLIENT] Called by the spawnmenu when the NPCs tab is generated
--- Creating an error in this Hook will result in a completely broken NPCs Tab
---@param pnlContent panel The SpawnmenuContentPanel
---@param tree panel The ContentNavBar tree from the SpawnmenuContentPanel
---@param node panel The old Spawnlists
function SANDBOX:PopulateNPCs(pnlContent, tree, node) end

---[CLIENT] This hook makes the engine load the spawnlist text files.
--- It calls spawnmenu.PopulateFromEngineTextFiles by default.
function SANDBOX:PopulatePropMenu() end

---[CLIENT] Called to populate the Scripted Tool menu.
--- We advise against using this. It may be changed or removed in a future update.
--- 
--- This hook is never called. Use SANDBOX:PopulateToolMenu instead.
function SANDBOX:PopulateSTOOLMenu() end

---[CLIENT] Add the STOOLS to the tool menu. You want to call spawnmenu.AddToolMenuOption in this hook.
function SANDBOX:PopulateToolMenu() end

---[CLIENT] Called by the spawnmenu when the Vehicles tab is generated
--- Creating an error in this Hook will result in a completely broken vehicles Tab
---@param pnlContent panel The SpawnmenuContentPanel
---@param tree panel The ContentNavBar tree from the SpawnmenuContentPanel
---@param node panel The old Spawnlists
function SANDBOX:PopulateVehicles(pnlContent, tree, node) end

---[CLIENT] Called by the spawnmenu when the Weapons tab is generated
--- Creating an error in this Hook will result in a completely broken Weapons Tab
---@param pnlContent panel The SpawnmenuContentPanel
---@param tree panel The ContentNavBar tree from the SpawnmenuContentPanel
---@param node panel The old Spawnlists
function SANDBOX:PopulateWeapons(pnlContent, tree, node) end

---[CLIENT] Called right after the Lua Loaded tool menus are reloaded. This is a good place to set up any ControlPanels.
function SANDBOX:PostReloadToolsMenu() end

---[CLIENT] Called right before the Lua Loaded tool menus are reloaded.
function SANDBOX:PreReloadToolsMenu() end

---[CLIENT] Called when changes were made to the spawnmenu like creating a new category.
function SANDBOX:SpawnlistContentChanged() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Called when there's one or more items selected in the spawnmenu by the player, to open the multi selection right click menu (DMenu)
---@param canvas Panel The canvas that has the selection. (SANDBOX:SpawnlistOpenGenericMenu)
function SANDBOX:SpawnlistOpenGenericMenu(canvas) end

---[CLIENT] If false is returned then the spawn menu is never created. This saves load times if your mod doesn't actually use the spawn menu for any reason.
---@return boolean Whether to create spawnmenu or not.
function SANDBOX:SpawnMenuEnabled() end

---[CLIENT] Called when spawnmenu is trying to be opened.
--- Hiding the spawnmenu will not stop people from being able to use the various console commands to spawn in items, etc. See GM:PlayerSpawn* hooks for blocking actual spawning.
---@return boolean Return false to dissallow opening the spawnmenu
function SANDBOX:SpawnMenuOpen() end

---[CLIENT] Called when the spawnmenu is opened.
--- This is an alias of GM:OnSpawnMenuOpen but will not be called if SANDBOX:SpawnMenuOpen prevents the spawnmenu from opening.
--- This hook will be called even if the spawnmenu doesn't actually exist, i.e. SANDBOX:SpawnMenuEnabled blocked its creation.
function SANDBOX:SpawnMenuOpened() end

---@class Schedule
local Schedule = {}

---[SERVER] Adds a task to the schedule. See also Schedule:AddTaskEx if you wish to customize task start and run function names.
--- See also ENTITY:StartSchedule, NPC:StartEngineTask, and NPC:RunEngineTask.
---@param taskname string Custom task name
---@param taskdata any Task data to be passed into the NPC's functions
function Schedule:AddTask(taskname, taskdata) end

---[SERVER] Adds a task to the schedule with completely custom function names.
--- See also Schedule:AddTask.
---@param start string The full name of a function on the entity's table to be ran when the task is started.
---@param run string The full name of a function on the entity's table to be ran when the task is continuously running.
---@param data number Task data to be passed into the NPC's functions
function Schedule:AddTaskEx(start, run, data) end

---[SERVER] Adds an engine task to the schedule.
---@param taskname string Task name, see ai_task.h
---@param taskdata number Task data, can be a float.
function Schedule:EngTask(taskname, taskdata) end

---[SERVER] Returns the task at the given index.
---@param num number Task index.
function Schedule:GetTask(num) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Initialises the Schedule. Called by ai_schedule.New when the Schedule is created.
---@param debugName string The name passed from ai_schedule.New.
function Schedule:Init(debugName) end

---[SERVER] Returns the number of tasks in the schedule.
---@return number The number of tasks in this schedule.
function Schedule:NumTasks() end

---@class SpawnIcon
local SpawnIcon = {}

---[CLIENT] Returns the currently set body groups of the spawn icon. This is set by SpawnIcon:SetBodyGroup.
---@return string The bodygroups of the spawnicon
function SpawnIcon:GetBodyGroup() end

---[CLIENT] Returns the currently set model name. This is set by SpawnIcon:SetModelName.
---@return string The model name
function SpawnIcon:GetModelName() end

---[CLIENT] Returns the currently set skin of the spawnicon. This is set by SpawnIcon:SetSkinID.
---@return number Current skin ID
function SpawnIcon:GetSkinID() end

---[CLIENT] Called when right clicked on the SpawnIcon. It will not be called if there is a selection (Panel:GetSelectionCanvas), in which case SANDBOX:SpawnlistOpenGenericMenu is called.
function SpawnIcon:OpenMenu() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.
--- Sets the bodygroups, so it can be retrieved with SpawnIcon:GetBodyGroup. Use Panel:SetModel instead.
---@param bodygroup number The id of the bodygroup you're setting. Starts from 0.
---@param value number The value you're setting the bodygroup to. Starts from 0.
function SpawnIcon:SetBodyGroup(bodygroup, value) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.
--- Sets the model name, so it can be retrieved with SpawnIcon:GetModelName. Use Panel:SetModel instead.
---@param mdl string The model name to set
function SpawnIcon:SetModelName(mdl) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- This is done automatically by SpawnIcon. You do not need to call this. Doing so may cause unforeseen consequences.
--- Sets the skin id of the spawn icon, so it can be retrieved with SpawnIcon:GetSkinID. Use Panel:SetModel instead.
---@param skin number Skin ID to set
function SpawnIcon:SetSkinID(skin) end

---@class SpawnmenuContentPanel
local SpawnmenuContentPanel = {}

---[CLIENT] Changes the Spawnmenu category to search in
---@param hookname string The Hook name
function SpawnmenuContentPanel:CallPopulateHook(hookname) end

---[CLIENT] Allows the modification of the ContentSidebar
function SpawnmenuContentPanel:EnableModify() end

---[CLIENT] Changes the Spawnmenu category to search in
---@param category string The category
---@param hookname string The Hook name
function SpawnmenuContentPanel:EnableSearch(category, hookname) end

---[CLIENT] Switches the current panel with the given panel
---@param panel panel Panel to switch to
function SpawnmenuContentPanel:SwitchPanel(panel) end

---@class Stack
local Stack = {}

---[SHARED] Pop an item from the stack
---@param amount number Amount of items you want to pop.
---@return number New length of the stack.
function Stack:Pop(amount) end

---[SHARED] Pop an item from the stack
---@param amount number Amount of items you want to pop.
---@return table The Popped Items.
function Stack:PopMulti(amount) end

---[SHARED] Push an item onto the stack
---@param object any The item you want to push
function Stack:Push(object) end

---[SHARED] Returns the size of the stack
---@return number The size of the stack
function Stack:Size() end

---[SHARED] Get the item at the top of the stack
---@return any The item at the top of the stack
function Stack:Top() end

---@class SurfaceInfo
local SurfaceInfo = {}

---[SHARED] Returns the brush surface's material.
---@return IMaterial Material of one portion of a brush model.
function SurfaceInfo:GetMaterial() end

---[SHARED] Returns a list of vertices the brush surface is built from.
---@return table A list of Vector points. This will usually be 4 corners of a quadrilateral in counter-clockwise order.
function SurfaceInfo:GetVertices() end

---[SHARED] Checks if the brush surface is a nodraw surface, meaning it will not be drawn by the engine.
--- This internally checks the SURFDRAW_NODRAW flag.
---@return boolean Returns true if this surface won't be drawn.
function SurfaceInfo:IsNoDraw() end

---[SHARED] Checks if the brush surface is displaying the skybox.
--- This internally checks the SURFDRAW_SKY flag.
---@return boolean Returns true if the surface is the sky.
function SurfaceInfo:IsSky() end

---[SHARED] Checks if the brush surface is water.
--- This internally checks the SURFDRAW_WATER flag.
---@return boolean Returns true if the surface is water.
function SurfaceInfo:IsWater() end

---@class TOOL
local TOOL = {}

---[CLIENT] Called when the tool's control panel needs to be rebuilt.
--- Due to historical reasons, this hook does not provide the tool object as self! See examples.
---@param cpanel Panel The DForm control panel to add settings to.
function TOOL:BuildCPanel(cpanel) end

---[SHARED] Called when WEAPON:Deploy of the toolgun is called.
--- This is also called when switching from another tool on the server.
function TOOL:Deploy() end

---[CLIENT] Called when WEAPON:DrawHUD of the toolgun is called, only when the user has this tool selected.
function TOOL:DrawHUD() end

---[CLIENT] Called after the default tool screen has been drawn from WEAPON:RenderScreen.
--- If this method exists on the TOOL object table, the default scrolling text will not be drawnMaterials rendered in this hook require $ignorez parameter to draw properly.
---@param width number The width of the tool's screen in pixels.
---@param height number The height of the tool's screen in pixels.
function TOOL:DrawToolScreen(width, height) end

---[CLIENT] Called when WEAPON:Think of the toolgun is called, only when the user has this tool selected.
---@return boolean Return true to freeze the player
function TOOL:FreezeMovement() end

---[SHARED] Called when WEAPON:Holster of the toolgun is called, as well as serverside when switching between different toolguns.
function TOOL:Holster() end

---[SHARED] Called when the user left clicks with the tool.
---@param tr table A trace from user's eyes to wherever they aim at. See Structures/TraceResult
---@return boolean Return true to draw the tool gun beam and play fire animations, false otherwise.
function TOOL:LeftClick(tr) end

---[SHARED] Called when the user presses the reload key with the tool out.
---@param tr table A trace from user's eyes to wherever they aim at. See Structures/TraceResult
---@return boolean Return true to draw the tool gun beam and play fire animations, false otherwise
function TOOL:Reload(tr) end

---[SHARED] Called when the user right clicks with the tool.
---@param tr table A trace from user's eyes to wherever they aim at. See Structures/TraceResult
---@return boolean Return true to draw the tool gun beam and play fire animations, false otherwise
function TOOL:RightClick(tr) end

---[SHARED] Called when WEAPON:Think of the toolgun is called. This only happens when the tool gun is currently equipped/selected by the player and the selected tool is this tool.
function TOOL:Think() end

---@class Task
local Task = {}

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Initialises the AI task. Called by ai_task.New.
function Task:Init() end

---[SERVER] Initialises the AI task as an engine task.
---@param taskname string The name of the task.
---@param taskdata number 
function Task:InitEngine(taskname, taskdata) end

---[SERVER] Initialises the AI task as NPC method-based.
---@param startname string The name of the NPC method to call on task start.
---@param runname string The name of the NPC method to call on task run.
---@param taskdata number 
function Task:InitFunctionName(startname, runname, taskdata) end

---[SERVER] Determines if the task is an engine task (TYPE_ENGINE, 1).
function Task:IsEngineType() end

---[SERVER] Determines if the task is an NPC method-based task (TYPE_FNAME, 2).
function Task:IsFNameType() end

---[SERVER] Runs the AI task.
---@param target NPC The NPC to run the task on.
function Task:Run(target) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Runs the AI task as an NPC method. This requires the task to be of type TYPE_FNAME.
---@param target NPC The NPC to run the task on.
function Task:Run_FName(target) end

---[SERVER] Starts the AI task.
---@param target NPC The NPC to start the task on.
function Task:Start(target) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Starts the AI task as an NPC method.
---@param target NPC The NPC to start the task on.
function Task:Start_FName(target) end

---@class TextEntry
local TextEntry = {}

---[CLIENT] Called from engine whenever a valid character is typed while the text entry is focused.
--- Used internally for functionality of DTextEntry
---@param keyCode number They key code of the key pressed, see Enums/KEY.
---@return boolean Whether you've handled the key press. Returning true prevents the default text entry behavior from occurring.
function TextEntry:OnKeyCodeTyped(keyCode) end

---@class Tool
local Tool = {}

---[SHARED] Returns whether the tool is allowed to be used or not. This function ignores the SANDBOX:CanTool hook.
--- By default this will always return true clientside and uses TOOL.AllowedCVarwhich is a ConVar object pointing to  toolmode_allow_*toolname* convar on the server.
---@return boolean Returns true if the tool is allowed.
function Tool:Allowed() end

---[SHARED] Builds a list of all ConVars set via the ClientConVar variable on the Structures/TOOL and their default values. This is used for the preset system.
---@return table A list of all convars and their default values.
function Tool:BuildConVarList() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- This is called automatically for most toolgun actions so you shouldn't need to use it.
--- Checks all added objects to see if they're still valid, if not, clears the list of objects.
function Tool:CheckObjects() end

---[SHARED] Clears all objects previously set with Tool:SetObject.
function Tool:ClearObjects() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- This is called automatically for all tools.
--- Initializes the tool object
---@return Tool The created tool object.
function Tool:Create() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- This is called automatically for all tools.
--- Creates clientside ConVars based on the ClientConVar table specified in the tool structure. Also creates the 'toolmode_allow_X' ConVar.
function Tool:CreateConVars() end

---[SHARED] Retrieves a physics bone number previously stored using Tool:SetObject.
---@param id number The id of the object which was set in Tool:SetObject.
---@return number Associated physics bone with given id.
function Tool:GetBone(id) end

---[SHARED] Attempts to grab a clientside tool ConVar value as a boolean.
---@param name string Name of the ConVar to retrieve. The function will automatically add the mytoolfilename_ part to it.
---@param default boolean The default value to return in case the lookup fails.
---@return number The value of the requested ConVar. It will be true if the value if the convar is not 0, just like ConVar:GetBool
function Tool:GetClientBool(name, default) end

---[SHARED] Attempts to grab a clientside tool ConVar as a string.
---@param name string Name of the convar to retrieve. The function will automatically add the mytoolfilename_ part to it.
---@return string The value of the requested ConVar.
function Tool:GetClientInfo(name) end

---[SHARED] Attempts to grab a clientside tool ConVar's value as a number.
---@param name string Name of the convar to retrieve. The function will automatically add the mytoolfilename_ part to it.
---@param default number The default value to return in case the lookup fails.
---@return number The value of the requested ConVar.
function Tool:GetClientNumber(name, default) end

---[SHARED] Retrieves an Entity previously stored using Tool:SetObject.
---@param id number The id of the object which was set in Tool:SetObject.
---@return Entity Associated Entity with given id.
function Tool:GetEnt(id) end

---[SHARED] Returns a language key based on this tool's name and the current stage it is on.
---@return string The returned language key, for example "#tool.weld.1"
function Tool:GetHelpText() end

---[SHARED] Retrieves an local vector previously stored using Tool:SetObject.
--- See also Tool:GetPos.
---@param id number The id of the object which was set in Tool:SetObject.
---@return Vector Associated local vector with given id.
function Tool:GetLocalPos(id) end

---[SHARED] Returns the name of the current tool mode.
---@return string The current tool mode.
function Tool:GetMode() end

---[SHARED] Retrieves an normal vector previously stored using Tool:SetObject.
---@param id number The id of the object which was set in Tool:SetObject.
---@return Vector Associated normal vector with given id.
function Tool:GetNormal(id) end

---[SHARED] Returns the current operation of the tool set by Tool:SetOperation.
---@return number The current operation the tool is at.
function Tool:GetOperation() end

---[SHARED] Returns the owner of this tool.
---@return Entity Player using the tool
function Tool:GetOwner() end

---[SHARED] Retrieves an PhysObj previously stored using Tool:SetObject.
--- See also Tool:GetEnt.
---@param id number The id of the object which was set in Tool:SetObject.
---@return PhysObj Associated PhysObj with given id. If it wasn't specified, returns current PhysObj of associated Entity.
function Tool:GetPhys(id) end

---[SHARED] Retrieves an vector previously stored using Tool:SetObject. See also Tool:GetLocalPos.
---@param id number The id of the object which was set in Tool:SetObject.
---@return Vector Associated vector with given id. The vector is converted from Tool:GetLocalPos.
function Tool:GetPos(id) end

---[SHARED] Attempts to grab a serverside tool ConVar.
--- This will not do anything on client, despite the function being defined shared.
---@param name string Name of the convar to retrieve. The function will automatically add the "mytoolfilename_" part to it.
---@return string The value of the requested ConVar.
function Tool:GetServerInfo(name) end

---[SHARED] Returns the current stage of the tool set by Tool:SetStage.
---@return number The current stage of the current operation the tool is at.
function Tool:GetStage() end

---[SHARED] Initializes the ghost entity with the given model. Removes any old ghost entity if called multiple times.
--- The ghost is a regular prop_physics entity in singleplayer games, and a clientside prop in multiplayer games.
---@param model string The model of the new ghost entity
---@param pos Vector Position to initialize the ghost entity at, usually not needed since this is updated in Tool:UpdateGhostEntity.
---@param angle Angle Angle to initialize the ghost entity at, usually not needed since this is updated in Tool:UpdateGhostEntity.
function Tool:MakeGhostEntity(model, pos, angle) end

---[SHARED] Returns the amount of stored objects ( Entitys ) the tool has.
--- Are TOOLs limited to 4 entities?
---@return number The amount of stored objects, or Tool:GetStage clientide.
function Tool:NumObjects() end

---[CLIENT] Automatically forces the tool's control panel to be rebuilt.
---@param ... ... Any arguments given to this function will be added to TOOL.BuildCPanel's arguments.
function Tool:RebuildControlPanel(...) end

---[SHARED] Removes any ghost entity created for this tool.
function Tool:ReleaseGhostEntity() end

---[SHARED] Stores an Entity for later use in the tool.
--- The stored values can be retrieved by Tool:GetEnt, Tool:GetPos, Tool:GetLocalPos, Tool:GetPhys, Tool:GetBone and Tool:GetNormal
---@param id number The id of the object to store.
---@param ent Entity The entity to store.
---@param pos Vector The position to store. this position is in global space and is internally converted to local space relative to the object, so when you retrieve it later it will be corrected to the object's new positionthis position is in global space and is internally converted to local space relative to the object, so when you retrieve it later it will be corrected to the object's new positionthis position is in global space and is internally converted to local space relative to the object, so when you retrieve it later it will be corrected to the object's new position
---@param phys PhysObj The physics object to store.
---@param bone number The hit bone to store.
---@param normal Vector The hit normal to store.
function Tool:SetObject(id, ent, pos, phys, bone, normal) end

---[SHARED] Sets the current operation of the tool. Does nothing clientside. See also Tool:SetStage.
--- Operations and stages work as follows:
--- 
--- Operation 1
--- 
--- 
--- Stage 1
--- 
--- 
--- 
--- 
--- Stage 2
--- 
--- 
--- 
--- 
--- Stage 3
--- 
--- 
--- Operation 2
--- 
--- 
--- Stage 1
--- 
--- 
--- 
--- 
--- Stage 2
--- 
--- 
--- 
--- 
--- Stage ...
---@param operation number The new operation ID to set.
function Tool:SetOperation(operation) end

---[SHARED] Sets the current stage of the tool. Does nothing clientside.
--- See also Tool:SetOperation.
---@param stage number The new stage to set.
function Tool:SetStage(stage) end

---[SHARED] Initializes the ghost entity based on the supplied entity.
---@param ent Entity The entity to copy ghost parameters off
function Tool:StartGhostEntity(ent) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Called on deploy automatically
--- Sets the tool's stage to how many stored objects the tool has.
function Tool:UpdateData() end

---[SHARED] Updates the position and orientation of the ghost entity based on where the toolgun owner is looking along with data from object with id 1 set by Tool:SetObject.
--- This should be called in the tool's TOOL:Think hook.
--- This command is only used for tools that move props, such as easy weld, axis and motor. If you want to update a ghost like the thruster tool does it for example, check its source code.
function Tool:UpdateGhostEntity() end

---@class VMatrix
local VMatrix = {}

---[SHARED] Adds given matrix to this matrix.
---@param input VMatrix The input matrix to add.
function VMatrix:Add(input) end

---[SHARED] Returns the absolute rotation of the matrix.
---@return Angle Absolute rotation of the matrix
function VMatrix:GetAngles() end

---[SHARED] Returns a specific field in the matrix.
---@param row number Row of the field whose value is to be retrieved, from 1 to 4
---@param column number Column of the field whose value is to be retrieved, from 1 to 4
---@return number The value of the specified field
function VMatrix:GetField(row, column) end

---[SHARED] Gets the forward direction of the matrix.
--- ie. The first column of the matrix, excluding the w coordinate.
---@return Vector The forward direction of the matrix.
function VMatrix:GetForward() end

---[SHARED] Returns an inverted matrix without modifying the original matrix.
--- Inverting the matrix will fail if its determinant is 0 or close to 0. (ie. its "scale" in any direction is 0.)
--- See also VMatrix:GetInverseTR.
---@return VMatrix The inverted matrix if possible, nil otherwise
function VMatrix:GetInverse() end

---[SHARED] Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
--- Using this function on a matrix with modified scale may return an incorrect inverted matrix.
--- To get the inverse of a matrix that contains other modifications, see VMatrix:GetInverse.
---@return VMatrix The inverted matrix.
function VMatrix:GetInverseTR() end

---[SHARED] Gets the right direction of the matrix.
--- ie. The second column of the matrix, negated, excluding the w coordinate.
---@return Vector The right direction of the matrix.
function VMatrix:GetRight() end

---[SHARED] Returns the absolute scale of the matrix.
---@return Vector Absolute scale of the matrix
function VMatrix:GetScale() end

---[SHARED] Returns the absolute translation of the matrix.
---@return Vector Absolute translation of the matrix
function VMatrix:GetTranslation() end

---[SHARED] Returns the transpose (each row becomes a column) of this matrix.
---@return VMatrix The transposed matrix.
function VMatrix:GetTransposed() end

---[SHARED] Gets the up direction of the matrix.
--- ie. The third column of the matrix, excluding the w coordinate.
---@return Vector The up direction of the matrix.
function VMatrix:GetUp() end

---[SHARED] Initializes the matrix as Identity matrix.
function VMatrix:Identity() end

---[SHARED] Inverts the matrix.
--- Inverting the matrix will fail if its determinant is 0 or close to 0. (ie. its "scale" in any direction is 0.)
--- If the matrix cannot be inverted, it does not get modified.
--- See also VMatrix:InvertTR.
---@return boolean Whether the matrix was inverted or not
function VMatrix:Invert() end

---[SHARED] Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
--- Using this function on a matrix with modified scale may return an incorrect inverted matrix.
--- To invert a matrix that contains other modifications, see VMatrix:Invert.
function VMatrix:InvertTR() end

---[SHARED] Returns whether the matrix is equal to Identity matrix or not.
---@return boolean Is the matrix an Identity matrix or not
function VMatrix:IsIdentity() end

---[SHARED] Returns whether the matrix is a rotation matrix or not.
--- Technically it checks if the forward, right and up vectors are orthogonal and normalized.
---@return boolean Is the matrix a rotation matrix or not
function VMatrix:IsRotationMatrix() end

---[SHARED] Checks whenever all fields of the matrix are 0, aka if this is a null matrix.
---@return boolean If the matrix is a null matrix.
function VMatrix:IsZero() end

---[SHARED] Multiplies this matrix by given matrix.
---@param input VMatrix The input matrix to multiply by.
function VMatrix:Mul(input) end

---[SHARED] Rotates the matrix by the given angle.
--- Postmultiplies the matrix by a rotation matrix (A = AR).
---@param rotation Angle Rotation.
function VMatrix:Rotate(rotation) end

---[SHARED] Scales the matrix by the given vector.
--- Postmultiplies the matrix by a scaling matrix (A = AS).
---@param scale Vector Vector to scale with matrix with.
function VMatrix:Scale(scale) end

---[SHARED] Scales the absolute translation with the given value.
---@param scale number Value to scale the translation with.
function VMatrix:ScaleTranslation(scale) end

---[SHARED] Copies values from the given matrix object.
---@param src VMatrix The matrix to copy values from.
function VMatrix:Set(src) end

---[SHARED] Sets the absolute rotation of the matrix.
---@param angle Angle New angles.
function VMatrix:SetAngles(angle) end

---[SHARED] Sets a specific field in the matrix.
---@param row number Row of the field to be set, from 1 to 4
---@param column number Column of the field to be set, from 1 to 4
---@param value number The value to set in that field
function VMatrix:SetField(row, column, value) end

---[SHARED] Sets the forward direction of the matrix.
--- ie. The first column of the matrix, excluding the w coordinate.
---@param forward Vector The forward direction of the matrix.
function VMatrix:SetForward(forward) end

---[SHARED] Sets the right direction of the matrix.
--- ie. The second column of the matrix, negated, excluding the w coordinate.
---@param forward Vector The right direction of the matrix.
function VMatrix:SetRight(forward) end

---[SHARED] Modifies the scale of the matrix while preserving the rotation and translation.
---@param scale Vector The scale to set.
function VMatrix:SetScale(scale) end

---[SHARED] Sets the absolute translation of the matrix.
---@param translation Vector New translation.
function VMatrix:SetTranslation(translation) end

---[SHARED] Sets each component of the matrix.
---@param e11 number 
---@param e12 number 
---@param e13 number 
---@param e14 number 
---@param e21 number 
---@param e22 number 
---@param e23 number 
---@param e24 number 
---@param e31 number 
---@param e32 number 
---@param e33 number 
---@param e34 number 
---@param e41 number 
---@param e42 number 
---@param e43 number 
---@param e44 number 
function VMatrix:SetUnpacked(e11, e12, e13, e14, e21, e22, e23, e24, e31, e32, e33, e34, e41, e42, e43, e44) end

---[SHARED] Sets the up direction of the matrix.
--- ie. The third column of the matrix, excluding the w coordinate.
---@param forward Vector The up direction of the matrix.
function VMatrix:SetUp(forward) end

---[SHARED] Subtracts given matrix from this matrix.
---@param input VMatrix The input matrix to subtract.
function VMatrix:Sub(input) end

---[SHARED] Converts the matrix to a 4x4 table. See Matrix function.
---@return table The 4x4 table.
function VMatrix:ToTable() end

---[SHARED] Translates the matrix by the given vector aka. adds the vector to the translation.
--- Postmultiplies the matrix by a translation matrix (A = AT).
---@param translation Vector Vector to translate the matrix by.
function VMatrix:Translate(translation) end

---[SHARED] Returns each component of the matrix, expanding rows before columns.
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(1, 1)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(1, 2)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(1, 3)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(1, 4)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(2, 1)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(2, 2)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(2, 3)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(2, 4)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(3, 1)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(3, 2)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(3, 3)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(3, 4)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(4, 1)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(4, 2)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(4, 3)
---@return number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number number - VMatrix:GetField(4, 4)
function VMatrix:Unpack() end

---[SHARED] Sets all components of the matrix to 0, also known as a null matrix.
--- This function is more efficient than setting each element manually.
function VMatrix:Zero() end

---@class Vector
local Vector = {}

---[SHARED] Adds the values of the argument vector to the original vector. This function is the same as vector1 + vector2 without creating a new vector object, skipping object construction and garbage collection.
---@param vector Vector The vector to add.
function Vector:Add(vector) end

---[SHARED] Returns an angle representing the normal of the vector.
---@return Angle The angle/direction of the vector.
function Vector:Angle() end

---[SHARED] Returns the angle of this vector (normalized), but instead of assuming that up is Vector( 0, 0, 1 ) (Like Vector:Angle does) you can specify which direction is 'up' for the angle.
---@param up Vector The up direction vector
---@return Angle The angle
function Vector:AngleEx(up) end

---[SHARED] Calculates the cross product of this vector and the passed one.
--- The cross product of two vectors is a 3-dimensional vector with a direction perpendicular (at right angles) to both of them (according to the right-hand rule), and magnitude equal to the area of parallelogram they span. This is defined as the product of the magnitudes, the sine of the angle between them, and unit (normal) vector n defined by the right-hand rule:
--- :a × b = |a| |b| sin(θ) n̂
--- where a and b are vectors, and n̂ is a unit vector (magnitude of 1) perpendicular to both.
---@param otherVector Vector Vector to calculate the cross product with.
---@return Vector The cross product of the two vectors.
function Vector:Cross(otherVector) end

---[SHARED] Returns the euclidean distance between the vector and the other vector.
--- This function is more expensive than Vector:DistToSqr. However, please see the notes for Vector:DistToSqr before using it as squared distances are not the same as euclidean distances.
---@param otherVector Vector The vector to get the distance to.
---@return number Distance between the vectors.
function Vector:Distance(otherVector) end

---[SHARED] Returns the squared distance of 2 vectors, this is faster than Vector:Distance as calculating the square root is an expensive process.
--- Squared distances should not be summed. If you need to sum distances, use Vector:Distance.
--- When performing a distance check, ensure the distance being checked against is squared. See example code below.
---@param otherVec Vector The vector to calculate the distance to.
---@return number Squared distance to the vector.
function Vector:DistToSqr(otherVec) end

---[SHARED] Divide the vector by the given number, that means x, y and z are divided by that value. This will change the value of the original vector, see example 2 for division without changing the value.
---@param divisor number The value to divide the vector with.
function Vector:Div(divisor) end

---[SHARED] Returns the dot product  of this vector and the passed one.
--- The dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:
--- a · b = |a| |b| cos(θ) 
--- where a and b are vectors.
--- See Vector:Length for obtaining magnitudes.
--- A dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other.
---@param otherVector Vector The vector to calculate the dot product with
---@return number The dot product between the two vectors
function Vector:Dot(otherVector) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This is an alias of Vector:Dot. Use that instead.
--- Returns the dot product of the two vectors.
---@param Vector Vector The other vector.
---@return number Dot Product
function Vector:DotProduct(Vector) end

---[SHARED] Returns the negative version of this vector, i.e. a vector with every component to the negative value of itself.
--- See also Vector:Negate.
---@return Vector The negative of this vector.
function Vector:GetNegated() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use Vector:GetNormalized instead.
--- Returns a normalized version of the vector. This is a alias of Vector:GetNormalized.
---@return Vector Normalized version of the vector.
function Vector:GetNormal() end

---[SHARED] Returns a normalized version of the vector. Normalized means vector with same direction but with length of 1.
--- This does not affect the vector you call it on; to do this, use Vector:Normalize.
---@return Vector Normalized version of the vector.
function Vector:GetNormalized() end

---[SHARED] Returns if the vector is equal to another vector with the given tolerance.
---@param compare Vector The vector to compare to.
---@param tolerance number The tolerance range.
---@return boolean Are the vectors equal or not.
function Vector:IsEqualTol(compare, tolerance) end

---[SHARED] Checks whenever all fields of the vector are 0.
---@return boolean Do all fields of the vector equal 0 or not
function Vector:IsZero() end

---[SHARED] Returns the Euclidean length of the vector: √(x² + y² + z²).
--- This is a relatively expensive process since it uses the square root. It is recommended that you use Vector:LengthSqr whenever possible.
---@return number Length of the vector.
function Vector:Length() end

---[SHARED] Returns the length of the vector in two dimensions, without the Z axis.
--- This is a relatively expensive process since it uses the square root. It is recommended that you use Vector:Length2DSqr whenever possible.
---@return number Length of the vector in two dimensions, √(x² + y²)
function Vector:Length2D() end

---[SHARED] Returns the squared length of the vectors x and y value, x² + y².
--- This is faster than Vector:Length2D as calculating the square root is an expensive process.
---@return number Squared length of the vector in two dimensions
function Vector:Length2DSqr() end

---[SHARED] Returns the squared length of the vector, x² + y² + z².
--- This is faster than Vector:Length as calculating the square root is an expensive process.
---@return number Squared length of the vector
function Vector:LengthSqr() end

---[SHARED] Scales the vector by the given number (that means x, y and z are multiplied by that value) or Vector.
---@param multiplier number The value to scale the vector with.
function Vector:Mul(multiplier) end

---[SHARED] Negates this vector, i.e. sets every component to the negative value of itself. Same as Vector( -vec.x, -vec.y, -vec.z )
function Vector:Negate() end

---[SHARED] Normalizes the given vector. This changes the vector you call it on, if you want to return a normalized copy without affecting the original, use Vector:GetNormalized.
function Vector:Normalize() end

---[SHARED] Randomizes each element of this Vector object.
---@param min number The minimum value for each component.
---@param max number The maximum value for each component.
function Vector:Random(min, max) end

---[SHARED] Rotates a vector by the given angle.
--- Doesn't return anything, but rather changes the original vector.
---@param rotation Angle The angle to rotate the vector by.
function Vector:Rotate(rotation) end

---[SHARED] Copies the values from the second vector to the first vector.
---@param vector Vector The vector to copy from.
function Vector:Set(vector) end

---[SHARED] Sets the x, y, and z of the vector.
---@param x number The x component
---@param y number The y component
---@param z number The z component
function Vector:SetUnpacked(x, y, z) end

---[SHARED] Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection.
---@param vector Vector The other vector.
function Vector:Sub(vector) end

---[SHARED] Translates the Vector (values ranging from 0 to 1) into a Color. This will also range the values from 0 - 1 to 0 - 255.
--- x * 255 -> r
--- y * 255 -> g
--- z * 255 -> b
--- This is the opposite of Color:ToVector
---@return table The created Color.
function Vector:ToColor() end

---[CLIENT] Returns where on the screen the specified position vector would appear. A related function is gui.ScreenToVector, which converts a 2D coordinate to a 3D direction.
--- Should be called from a 3D rendering environment or after cam.Start3D or it may not work correctly.Errors in a render hook can make this value incorrect until the player restarts their game.Issue Tracker: 462cam.Start3D or 3D context cam.Start with non-default parameters incorrectly sets the reference FOV for this function, causing incorrect return values. This can be fixed by creating and ending a default 3D context (cam.Start3D with no arguments).Issue Tracker: 1404
---@return table The created Structures/ToScreenData.
function Vector:ToScreen() end

---[SHARED] Returns the vector as a table with three elements.
---@return table The table with elements 1 = x, 2 = y, 3 = z.
function Vector:ToTable() end

---[SHARED] Returns the x, y, and z of the vector.
---@return number, number, number number - x or Vector[1].
---@return number, number, number number - y or Vector[2].
---@return number, number, number number - z or Vector[3].
function Vector:Unpack() end

---[SHARED] Returns whenever the given vector is in a box created by the 2 other vectors.
---@param boxStart Vector The first vector.
---@param boxEnd Vector The second vector.
---@return boolean Is the vector in the box or not.
function Vector:WithinAABox(boxStart, boxEnd) end

---[SHARED] Sets x, y and z to 0.
function Vector:Zero() end

---@class Vehicle
local Vehicle = {}

---[SERVER] Returns the remaining boosting time left.
---@return number The remaining boosting time left
function Vehicle:BoostTimeLeft() end

---[SERVER] Tries to find an Exit Point for leaving vehicle, if one is unobstructed in the direction given.
---@param yaw number Yaw/roll from vehicle angle to check for exit
---@param distance number Distance from origin to drop player
---@return Vector Returns the vector for exit position or nil if cannot exit that way.
function Vehicle:CheckExitPoint(yaw, distance) end

---[SERVER] Sets whether the engine is enabled or disabled, i.e. can be started or not.
---@param enable boolean Enable or disable the engine
function Vehicle:EnableEngine(enable) end

---[CLIENT] Returns information about the ammo of the vehicle
---@return number, number, number number - Ammo type of the vehicle ammo
---@return number, number, number number - Clip size
---@return number, number, number number - Count
function Vehicle:GetAmmo() end

---[SHARED] Returns third person camera distance.
---@return number Camera distance
function Vehicle:GetCameraDistance() end

---[SHARED] Gets the driver of the vehicle, returns NULL if no driver is present.
---@return Entity The driver of the vehicle.
function Vehicle:GetDriver() end

---[SERVER] Returns the current speed of the vehicle in Half-Life Hammer Units (in/s). Same as Entity:GetVelocity + Vector:Length.
---@return number The speed of the vehicle
function Vehicle:GetHLSpeed() end

---[SERVER] Returns the max speed of the vehicle in MPH.
---@return number The max speed of the vehicle in MPH
function Vehicle:GetMaxSpeed() end

---[SERVER] Returns some info about the vehicle.
---@return table The operating params. See Structures/OperatingParams.
function Vehicle:GetOperatingParams() end

---[SHARED] Gets the passenger of the vehicle, returns NULL if no drivers is present.
---@param passenger number The index of the passenger
---@return Entity The passenger
function Vehicle:GetPassenger(passenger) end

---[SERVER] Returns the seat position and angle of a given passenger seat.
---@param role number The passenger role. ( 1 is the driver )
---@return Vector, Angle Vector - The seat position
---@return Vector, Angle Angle - The seat angle
function Vehicle:GetPassengerSeatPoint(role) end

---[SERVER] Returns the current RPM of the vehicle. This value is fake and doesn't actually affect the vehicle movement.
---@return number The RPM.
function Vehicle:GetRPM() end

---[SERVER] Returns the current speed of the vehicle in MPH.
---@return number The speed of the vehicle in MPH
function Vehicle:GetSpeed() end

---[SERVER] Returns the current steering of the vehicle.
---@return number The current steering of the vehicle.
function Vehicle:GetSteering() end

---[SERVER] Returns the maximum steering degree of the vehicle
---@return number The maximum steering degree of the vehicle
function Vehicle:GetSteeringDegrees() end

---[SHARED] Returns if vehicle has thirdperson mode enabled or not.
---@return boolean Returns true if third person mode enabled, false otherwise
function Vehicle:GetThirdPersonMode() end

---[SERVER] Returns the current throttle of the vehicle.
---@return number The current throttle of the vehicle
function Vehicle:GetThrottle() end

---[SHARED] Returns the vehicle class name. This is only useful for Sandbox spawned vehicles or any vehicle that properly sets the vehicle class with Vehicle:SetVehicleClass.
---@return string The class name of the vehicle.
function Vehicle:GetVehicleClass() end

---[SERVER] Returns the vehicle parameters of given vehicle.
---@return table The vehicle parameters. See Structures/VehicleParams
function Vehicle:GetVehicleParams() end

---[SHARED] Returns the view position and forward angle of a given passenger seat.
---@param role number The passenger role. 0 is the driver. This parameter seems to be ignored by the game engine and is therefore optional.
---@return Vector, Angle, number Vector - The view position, will be 0, 0, 0 on failure
---@return Vector, Angle, number Angle - The view angles, will be 0, 0, 0 on failure
---@return Vector, Angle, number number - The field of view, will be 0 on failure
function Vehicle:GetVehicleViewPosition(role) end

---[SERVER] Returns the PhysObj of given wheel.
---@param wheel number The wheel to retrieve
---@return PhysObj The wheel
function Vehicle:GetWheel(wheel) end

---[SERVER] Returns the base wheel height.
---@param wheel number The wheel to get the base wheel height of.
---@return number The base wheel height.
function Vehicle:GetWheelBaseHeight(wheel) end

---[SERVER] Returns the wheel contact point.
---@param wheel number The wheel to check
---@return Vector, number, boolean Vector - The contact position
---@return Vector, number, boolean number - The Surface Properties ID of hit surface.
---@return Vector, number, boolean boolean - Whether the wheel is on ground or not
function Vehicle:GetWheelContactPoint(wheel) end

---[SERVER] Returns the wheel count of the vehicle
---@return number The amount of wheels
function Vehicle:GetWheelCount() end

---[SERVER] Returns the total wheel height.
---@param wheel number The wheel to get the base wheel height of.
---@return number The total wheel height.
function Vehicle:GetWheelTotalHeight(wheel) end

---[SERVER] Returns whether this vehicle has boost at all.
---@return boolean Whether this vehicle has boost at all.
function Vehicle:HasBoost() end

---[SERVER] Returns whether this vehicle has a brake pedal. See Vehicle:SetHasBrakePedal.
---@return boolean Whether this vehicle has a brake pedal or not.
function Vehicle:HasBrakePedal() end

---[SERVER] Returns whether this vehicle is currently boosting or not.
---@return boolean Whether this vehicle is currently boosting or not.
function Vehicle:IsBoosting() end

---[SERVER] Returns whether the engine is enabled or not, i.e. whether it can be started.
---@return boolean Whether the engine is enabled
function Vehicle:IsEngineEnabled() end

---[SERVER] Returns whether the engine is started or not.
---@return boolean Whether the engine is started or not.
function Vehicle:IsEngineStarted() end

---[SHARED] Returns true if the vehicle object is a valid or not. This will return false when Vehicle functions are not usable on the vehicle.
---@return boolean Is the vehicle a valid vehicle or not
function Vehicle:IsValidVehicle() end

---[SERVER] Returns whether this vehicle's engine is underwater or not. ( Internally the attachment point "engine" or "vehicle_engine" is checked )
---@return boolean Whether this vehicle's engine is underwater or not.
function Vehicle:IsVehicleBodyInWater() end

---[SERVER] Releases the vehicle's handbrake (Jeep) so it can roll without any passengers.
--- This will be overwritten if the vehicle has a driver. Same as Vehicle:SetHandbrake( false )
function Vehicle:ReleaseHandbrake() end

---[SERVER] Sets the boost. It is possible that this function does not work while the vehicle has a valid driver in it.
---@param boost number The new boost value
function Vehicle:SetBoost(boost) end

---[SHARED] Sets the third person camera distance of the vehicle.
---@param distance number Camera distance to set to
function Vehicle:SetCameraDistance(distance) end

---[SERVER] Turns on or off the Jeep handbrake so it can roll without a driver inside.
--- Does nothing while the vehicle has a driver in it.
---@param handbrake boolean true to turn on, false to turn off.
function Vehicle:SetHandbrake(handbrake) end

---[SERVER] Sets whether this vehicle has a brake pedal.
---@param brakePedal boolean Whether this vehicle has a brake pedal
function Vehicle:SetHasBrakePedal(brakePedal) end

---[SERVER] Sets maximum reverse throttle
---@param maxRevThrottle number The new maximum throttle. This number must be negative.
function Vehicle:SetMaxReverseThrottle(maxRevThrottle) end

---[SERVER] Sets maximum forward throttle
---@param maxThrottle number The new maximum throttle.
function Vehicle:SetMaxThrottle(maxThrottle) end

---[SERVER] Sets spring length of given wheel
---@param wheel number The wheel to change spring length of
---@param length number The new spring length
function Vehicle:SetSpringLength(wheel, length) end

---[SERVER] Sets the steering of the vehicle.
--- The correct range, 0 to 1 or -1 to 1
---@param front number Angle of the front wheels (-1 to 1)
---@param rear number Angle of the rear wheels (-1 to 1)
function Vehicle:SetSteering(front, rear) end

---[SERVER] Sets the maximum steering degrees of the vehicle
---@param steeringDegrees number The new maximum steering degree
function Vehicle:SetSteeringDegrees(steeringDegrees) end

---[SHARED] Sets the third person mode state.
---@param enable boolean Enable or disable the third person mode for this vehicle
function Vehicle:SetThirdPersonMode(enable) end

---[SERVER] Sets the throttle of the vehicle. It is possible that this function does not work with a valid driver in it.
---@param throttle number The new throttle.
function Vehicle:SetThrottle(throttle) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Sets the vehicle class name.
---@param class string The vehicle class name to set
function Vehicle:SetVehicleClass(class) end

---[SERVER] Sets whether the entry or exit camera animation should be played or not.
---@param bOn boolean Whether the entry or exit camera animation should be played or not.
function Vehicle:SetVehicleEntryAnim(bOn) end

---[SERVER] Sets the vehicle parameters for given vehicle.
--- Not all variables from the Structures/VehicleParams can be set.
---@param params table The new new vehicle parameters. See Structures/VehicleParams.
function Vehicle:SetVehicleParams(params) end

---[SERVER] Sets friction of given wheel.  This function may be broken.
---@param wheel number The wheel to change the friction of
---@param friction number The new friction to set
function Vehicle:SetWheelFriction(wheel, friction) end

---[SERVER] Starts or stops the engine.
---@param start boolean True to start, false to stop.
function Vehicle:StartEngine(start) end

---@class WEAPON
local WEAPON = {}

---[SERVER] Called when another entity fires an event to this entity.
---@param inputName string The name of the input that was triggered.
---@param activator Entity The initial cause for the input getting triggered.
---@param called Entity The entity that directly trigger the input.
---@param data string The data passed.
---@return boolean Should we suppress the default action for this input?
function WEAPON:AcceptInput(inputName, activator, called, data) end

---[CLIENT] Allows you to adjust the mouse sensitivity. This hook only works if you haven't overridden GM:AdjustMouseSensitivity.
---@return number Sensitivity scale
function WEAPON:AdjustMouseSensitivity() end

---[SHARED] Returns how much of primary ammo the player has.
---@return number The amount of primary ammo player has
function WEAPON:Ammo1() end

---[SHARED] Returns how much of secondary ammo the player has.
---@return number The amount of secondary ammo player has
function WEAPON:Ammo2() end

---[CLIENT] Allows you to adjust player view while this weapon in use.
--- This hook is called from the default implementation of GM:CalcView which is here. Therefore, it will not be called if any other hook added to CalcView returns any value, or if the current gamemode overrides the default hook and does not call the SWEP function.
--- SWEPs that define this function will not work with the taunt camera.
---@param ply Player The owner of weapon
---@param pos Vector Current position of players view
---@param ang Angle Current angles of players view
---@param fov number Current FOV of players view
---@return Vector, Angle, number Vector - New position of players view
---@return Vector, Angle, number Angle - New angle of players view
---@return Vector, Angle, number number - New FOV of players view
function WEAPON:CalcView(ply, pos, ang, fov) end

---[CLIENT] Allows overriding the position and angle of the viewmodel. This hook only works if you haven't overridden GM:CalcViewModelView.
---@param ViewModel Entity The viewmodel entity
---@param OldEyePos Vector Original position (before viewmodel bobbing and swaying)
---@param OldEyeAng Angle Original angle (before viewmodel bobbing and swaying)
---@param EyePos Vector Current position
---@param EyeAng Angle Current angle
---@return Vector, Angle Vector - New position
---@return Vector, Angle Angle - New angle
function WEAPON:CalcViewModelView(ViewModel, OldEyePos, OldEyeAng, EyePos, EyeAng) end

---[SERVER] Called when a Citizen NPC is looking around to a (better) weapon to pickup.
---@return boolean Return true to allow this weapon to be picked up by NPCs.
function WEAPON:CanBePickedUpByNPCs() end

---[SHARED] Helper function for checking for no ammo.
---@return boolean Can use primary attack
function WEAPON:CanPrimaryAttack() end

---[SHARED] Helper function for checking for no ammo.
---@return boolean Can use secondary attack
function WEAPON:CanSecondaryAttack() end

---[CLIENT] Allows you to use any numbers you want for the ammo display on the HUD.
--- Can be useful for weapons that don't use standard ammo.
---@return table The new ammo display settings. A table with 4 possible keys:  boolean Draw - Whether to draw the ammo display or not number PrimaryClip - Amount of primary ammo in the clip number PrimaryAmmo - Amount of primary ammo in the reserves number SecondaryAmmo - Amount of secondary ammo. It is shown like alt-fire for SMG1 and AR2 are shown.  There is no SecondaryClip!
function WEAPON:CustomAmmoDisplay() end

---[SHARED] Called when player has just switched to this weapon.
--- Due to this hook being predicted, it is not called clientside in singleplayer at all, and in multiplayer it will not be called clientside if the weapon is switched with Player:SelectWeapon or the "use" console command, however it will be called clientside with the default weapon selection menu and when using CUserCmd:SelectWeapon
---@return boolean Return true to allow switching away from this weapon using lastinv command
function WEAPON:Deploy() end

---[CLIENT] Called when the crosshair is about to get drawn, and allows you to override it.
--- This function will not be called if SWEP.DrawCrosshair is set to false or if player is affected by Player:CrosshairDisable.
---@param x number X coordinate of the crosshair.
---@param y number Y coordinate of the crosshair.
---@return boolean Return true to override the default crosshair.
function WEAPON:DoDrawCrosshair(x, y) end

---[SHARED] Called so the weapon can override the impact effects it makes.
---@param tr table A Structures/TraceResult from player's eyes to the impact point
---@param damageType number The damage type of bullet. See Enums/DMG
---@return boolean Return true to not do the default thing - which is to call UTIL_ImpactTrace in C++
function WEAPON:DoImpactEffect(tr, damageType) end

---[CLIENT] This hook allows you to draw on screen while this weapon is in use.
--- If you want to draw a custom crosshair, consider using WEAPON:DoDrawCrosshair instead.
function WEAPON:DrawHUD() end

---[CLIENT] This hook allows you to draw on screen while this weapon is in use. This hook is called before WEAPON:DrawHUD and is equivalent of GM:HUDPaintBackground.
function WEAPON:DrawHUDBackground() end

---[CLIENT] This hook draws the selection icon in the weapon selection menu.
---@param x number X coordinate of the selection panel
---@param y number Y coordinate of the selection panel
---@param width number Width of the selection panel
---@param height number Height of the selection panel
---@param alpha number Alpha value of the selection panel
function WEAPON:DrawWeaponSelection(x, y, width, height, alpha) end

---[CLIENT] Called when we are about to draw the world model.
---@param flags number The STUDIO_ flags for this render operation.
function WEAPON:DrawWorldModel(flags) end

---[CLIENT] Called when we are about to draw the translucent world model.
---@param flags number The STUDIO_ flags for this render operation.
function WEAPON:DrawWorldModelTranslucent(flags) end

---[SERVER] Called when a player or NPC has picked the weapon up.
---@param NewOwner Entity The one who picked the weapon up. Can be Player or NPC.
function WEAPON:Equip(NewOwner) end

---[SERVER] The player has picked up the weapon and has taken the ammo from it.
--- The weapon will be removed immidiately after this call.
---@param ply Player The player who picked up the weapon
function WEAPON:EquipAmmo(ply) end

---[SHARED] Called before firing animation events, such as muzzle flashes or shell ejections.
--- This will only be called serverside for 3000-range events, and clientside for 5000-range  and other events.
---@param pos Vector Position of the effect.
---@param ang Angle Angle of the effect.
---@param event number The event ID of happened even. See this page.
---@param options string Name or options of the event.
---@param source Entity The source entity. This will be a viewmodel on the client and the weapon itself on the server
---@return boolean Return true to disable the effect.
function WEAPON:FireAnimationEvent(pos, ang, event, options, source) end

---[CLIENT] This hook allows you to freeze players screen.
--- Player will still be able to move or shoot
---@return boolean Return true to freeze moving the view
function WEAPON:FreezeMovement() end

---[SERVER] This hook is for NPCs, you return what they should try to do with it.
---@return number A number defining what NPC should do with the weapon. Use the Enums/CAP.
function WEAPON:GetCapabilities() end

---[SERVER] Called when the weapon is used by NPCs to determine how accurate the bullets fired should be.
--- The inaccuracy is simulated by changing the NPC:GetAimVector based on the value returned from this hook.
---@param proficiency number How proficient the NPC is with this gun. See Enums/WEAPON_PROFICIENCY
---@return number An amount of degrees the bullets should deviate from the NPC's NPC:GetAimVector. Default is 15.
function WEAPON:GetNPCBulletSpread(proficiency) end

---[SERVER] Called when the weapon is used by NPCs to tell the NPC how to use this weapon. Controls how long the NPC can or should shoot continuously.
---@return number, number, number number - Minimum amount of bullets per burst. Default is 1.
---@return number, number, number number - Maximum amount of bullets per burst. Default is 1.
---@return number, number, number number - Delay between each shot, aka firerate. Default is 1.
function WEAPON:GetNPCBurstSettings() end

---[SERVER] Called when the weapon is used by NPCs to tell the NPC how to use this weapon. Controls amount of time the NPC can rest (not shoot) between bursts.
---@return number, number number - Minimum amount of time the NPC can rest (not shoot) between bursts in seconds. Default is 0.3 seconds.
---@return number, number number - Maximum amount of time the NPC can rest (not shoot) between bursts in seconds. Default is 0.66 seconds.
function WEAPON:GetNPCRestTimes() end

---[CLIENT] Allows you to override where the tracer effect comes from. ( Visual bullets )
---@return Vector The new position to start tracer effect from
function WEAPON:GetTracerOrigin() end

---[CLIENT] This hook allows you to adjust view model position and angles.
---@param EyePos Vector Current position
---@param EyeAng Angle Current angle
---@return Vector, Angle Vector - New position
---@return Vector, Angle Angle - New angle
function WEAPON:GetViewModelPosition(EyePos, EyeAng) end

---[SHARED] Called when weapon tries to holster.
--- This will only be called serverside when using Player:SelectWeapon as that function immediately switches the weapon out of prediction.This is called twice for every holster clientside, one in Prediction and one not.Issue Tracker: 2854Before WEAPON:OnRemove is called, this function is only called serverside.Issue Tracker: 3133
---@param weapon Entity The weapon we are trying switch to.
---@return boolean Return true to allow weapon to holster. This will not have an effect if weapon was switched away from using Player:SetActiveWeapon
function WEAPON:Holster(weapon) end

---[CLIENT] This hook determines which parts of the HUD to draw.
---@param element string The HUD element in question
---@return boolean Return false to hide this HUD element
function WEAPON:HUDShouldDraw(element) end

---[SHARED] Called when the weapon entity is created.
--- Entity:GetOwner will return NULL at this point because the weapon is not equpped by a player or NPC yet. Use WEAPON:Equip or WEAPON:Deploy if you need the owner to be valid.This is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in WEAPON:Think. See the example below.Issue Tracker: 2732This is not called serverside after a quicksave.Issue Tracker: 3015
function WEAPON:Initialize() end

---[SERVER] Called when the engine sets a value for this scripted weapon.
--- See GM:EntityKeyValue for a hook that works for all entities.
--- See ENTITY:KeyValue for an  hook that works for scripted entities.
---@param key string The key that was affected.
---@param value string The new value.
---@return boolean Return true to suppress this KeyValue or return false or nothing to apply this key value.
function WEAPON:KeyValue(key, value) end

---[SERVER] Called when weapon is dropped by Player:DropWeapon.
--- See also WEAPON:OwnerChanged.
function WEAPON:OnDrop() end

---[SHARED] Called whenever the weapons Lua script is reloaded.
function WEAPON:OnReloaded() end

---[SHARED] Called when the swep is about to be removed.
function WEAPON:OnRemove() end

---[SHARED] Called when the weapon entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).
--- For the duplicator callbacks, see ENTITY:OnDuplicated.
--- See also saverestore for relevant functions.
function WEAPON:OnRestore() end

---[SHARED] Called when weapon is dropped or picked up by a new player. This can be called clientside for all players on the server if the weapon has no owner and is picked up.
--- See also WEAPON:OnDrop.
function WEAPON:OwnerChanged() end

---[CLIENT] Called after the view model has been drawn while the weapon in use. This hook is called from the default implementation of GM:PostDrawViewModel, and as such, will not occur if it has been overridden.
--- WEAPON:ViewModelDrawn is an alternative hook which is always called before GM:PostDrawViewModel.
---@param vm Entity This is the view model entity after it is drawn
---@param weapon Weapon This is the weapon that is from the view model (same as self)
---@param ply Player The owner of the view model
function WEAPON:PostDrawViewModel(vm, weapon, ply) end

---[CLIENT] Allows you to modify viewmodel while the weapon in use before it is drawn. This hook only works if you haven't overridden GM:PreDrawViewModel.
---@param vm Entity This is the view model entity before it is drawn.
---@param weapon Weapon This is the weapon that is from the view model.
---@param ply Player The the owner of the view model.
function WEAPON:PreDrawViewModel(vm, weapon, ply) end

---[SHARED] Called when primary attack button ( +attack ) is pressed.
--- When in singleplayer, this function is only called in the server realm. When in multiplayer, the hook will be called on both the server and the client in order to allow for Prediction.
--- You can force the hook to always be called on client like this:
--- if ( game.SinglePlayer() ) then self:CallOnClient( "PrimaryAttack" ) end
--- Note that due to prediction, in multiplayer SWEP:PrimaryAttack is called multiple times per one "shot" with the gun. To work around that, use IsFirstTimePredicted.
function WEAPON:PrimaryAttack() end

---[CLIENT] A convenience function that draws the weapon info box, used in WEAPON:DrawWeaponSelection.
---@param x number The x co-ordinate of box position
---@param y number The y co-ordinate of box position
---@param alpha number Alpha value for the box
function WEAPON:PrintWeaponInfo(x, y, alpha) end

---[SHARED] Called when the reload key ( +reload ) is pressed.
function WEAPON:Reload() end

---[CLIENT] Called every frame just before GM:RenderScene.
--- Used by the Tool Gun to render view model screens (TOOL:DrawToolScreen).
--- Materials rendered in this hook require $ignorez parameter to draw properly.
function WEAPON:RenderScreen() end

---[SHARED] Called when secondary attack button ( +attack2 ) is pressed.
--- For issues with this hook being called rapidly on the client side, see the global function IsFirstTimePredicted.
function WEAPON:SecondaryAttack() end

---[SHARED] Sets the weapon deploy speed. This value needs to match on client and server.
---@param speed number The value to set deploy speed to. Negative will slow down playback.
function WEAPON:SetDeploySpeed(speed) end

---[SHARED] Called when the SWEP should set up its  Data Tables.
function WEAPON:SetupDataTables() end

---[SHARED] Sets the hold type of the weapon. This must be called on both the server and the client to work properly.
--- NOTE: You should avoid calling this function and call Weapon:SetHoldType now.
---@param name string Name of the hold type. You can find all default hold types here
function WEAPON:SetWeaponHoldType(name) end

---[SHARED] A convenient function to shoot bullets.
---@param damage number The damage of the bullet
---@param num_bullets number Amount of bullets to shoot
---@param aimcone number Spread of bullets
---@param ammo_type string Ammo type of the bullets
---@param force number Force of the bullets
---@param tracer number Show a tracer on every x bullets
function WEAPON:ShootBullet(damage, num_bullets, aimcone, ammo_type, force, tracer) end

---[SHARED] A convenience function to create shoot effects.
function WEAPON:ShootEffects() end

---[CLIENT] Called to determine if the view model should be drawn or not.
---@return boolean Return true to draw the view model, false otherwise.
function WEAPON:ShouldDrawViewModel() end

---[SERVER] Should this weapon be dropped when its owner dies?
--- This only works if the player has Player:ShouldDropWeapon set to true.
---@return boolean Return true to drop the weapon, false otherwise. Default ( if you don't return anything ) is false.
function WEAPON:ShouldDropOnDie() end

---[SHARED] A convenience function to remove primary ammo from clip.
---@param amount number Amount of primary ammo to remove
function WEAPON:TakePrimaryAmmo(amount) end

---[SHARED] A convenience function to remove secondary ammo from clip.
---@param amount number How much of secondary ammo to remove
function WEAPON:TakeSecondaryAmmo(amount) end

---[SHARED] Called when the swep thinks.
--- This hook won't be called during the deploy animation and when using Weapon:DefaultReload.
--- Works only in players hands. Doesn't work in NPCs hands.Despite being a predicted hook, this hook is called clientside in single player, however it will not be recognized as a predicted hook to Player:GetCurrentCommand.This hook will be called before Player movement is processed on the client, and after on the server.This will not be run during deploy animations after a serverside-only deploy. This usually happens after picking up and dropping an object with +use.Issue Tracker: 2855
function WEAPON:Think() end

---[SHARED] Translate a player's Activity into a weapon's activity, depending on how you want the player to be holding the weapon.
--- For example, ACT_MP_RUN becomes ACT_HL2MP_RUN_PISTOL.
---@param act number The activity to translate
---@return number The translated activity
function WEAPON:TranslateActivity(act) end

---[SHARED] Allows to change players field of view while player holds the weapon.
--- This hook must be defined shared and return same value on both to properly affect Area Portals.
---@param fov number The current/default FOV.
---@return number The target FOV.
function WEAPON:TranslateFOV(fov) end

---[CLIENT] Called straight after the view model has been drawn. This is called before GM:PostDrawViewModel and WEAPON:PostDrawViewModel.
---@param ViewModel Entity Players view model
function WEAPON:ViewModelDrawn(ViewModel) end

---@class Weapon
local Weapon = {}

---[SHARED] Returns whether the weapon allows to being switched from when a better ( Weapon:GetWeight ) weapon is being picked up.
---@return boolean Whether the weapon allows to being switched from.
function Weapon:AllowsAutoSwitchFrom() end

---[SHARED] Returns whether the weapon allows to being switched to when a better ( Weapon:GetWeight ) weapon is being picked up.
---@return boolean Whether the weapon allows to being switched to.
function Weapon:AllowsAutoSwitchTo() end

---[SHARED] Calls a SWEP function on client.
--- This uses the usermessage internally, because of that, the combined length of the arguments of this function may not exceed 254 bytes/characters or the function will cease to function!
---@param functionName string Name of function to call. If you want to call SWEP:MyFunc() on client, you type in "MyFunc"
---@param arguments string Arguments for the function, separated by spaces. Only the second argument is passed as argument and must be a stringOnly the second argument is passed as argument and must be a stringOnly the second argument is passed as argument and must be a string
function Weapon:CallOnClient(functionName, arguments) end

---[SHARED] Returns how much primary ammo is in the magazine.
--- This is not shared between clients and will instead return the maximum primary clip size.
---@return number The amount of primary ammo in the magazine.
function Weapon:Clip1() end

---[SHARED] Returns how much secondary ammo is in the magazine.
--- This is not shared between clients and will instead return the maximum secondary clip size.
---@return number The amount of secondary ammo in the magazine.
function Weapon:Clip2() end

---[SHARED] Forces the weapon to reload while playing given animation.
--- This will stop the Weapon:Think function from getting called while the weapon is reloading!
---@param act number Sequence to use as reload animation. Uses the Enums/ACT.
---@return boolean Did reloading actually take place
function Weapon:DefaultReload(act) end

---[SHARED] Returns the sequence enumeration number that the weapon is playing.
--- This can return inconsistent results between the server and client.Issue Tracker: 2543
---@return number Current activity, see Enums/ACT. Returns 0 if the weapon doesn't have active sequence.
function Weapon:GetActivity() end

---[SHARED] Returns the hold type of the weapon.
---@return string The hold type of the weapon. You can find a list of default hold types here.
function Weapon:GetHoldType() end

---[SHARED] Returns maximum primary clip size
---@return number Maximum primary clip size
function Weapon:GetMaxClip1() end

---[SHARED] Returns maximum secondary clip size
---@return number Maximum secondary clip size
function Weapon:GetMaxClip2() end

---[SHARED] Gets the next time the weapon can primary fire. ( Can call WEAPON:PrimaryAttack )
---@return number The time, relative to CurTime
function Weapon:GetNextPrimaryFire() end

---[SHARED] Gets the next time the weapon can secondary fire. ( Can call WEAPON:SecondaryAttack )
---@return number The time, relative to CurTime
function Weapon:GetNextSecondaryFire() end

---[SHARED] Gets the primary ammo type of the given weapon.
---@return number The ammo type ID, or -1 if not found.
function Weapon:GetPrimaryAmmoType() end

---[SHARED] Returns the non-internal name of the weapon, that should be for displaying.
--- If that returns an untranslated message (#HL2_XX), use language.GetPhrase to see the "nice" name.If SWEP.PrintName is not set in the Weapon or the Weapon Base then "<MISSING SWEP PRINT NAME>" will be returned.
---@return string The "nice" name of the weapon.
function Weapon:GetPrintName() end

---[SHARED] Gets the ammo type of the given weapons secondary fire.
---@return number The secondary ammo type ID, or -1 if not found.
function Weapon:GetSecondaryAmmoType() end

---[SHARED] Returns the slot of the weapon.
--- The slot numbers start from 0.
---@return number The slot of the weapon.
function Weapon:GetSlot() end

---[SHARED] Returns slot position of the weapon
---@return number The slot position of the weapon
function Weapon:GetSlotPos() end

---[SHARED] Returns the view model of the weapon.
---@return string The view model of the weapon.
function Weapon:GetWeaponViewModel() end

---[SHARED] Returns the world model of the weapon.
---@return string The world model of the weapon.
function Weapon:GetWeaponWorldModel() end

---[SHARED] Returns the "weight" of the weapon, which is used when deciding which Weapon is better by the engine.
---@return number The weapon "weight".
function Weapon:GetWeight() end

---[SHARED] Returns whether the weapon has ammo left or not. It will return false when there's no ammo left in the magazine and when there's no reserve ammo left.
--- This will return true for weapons like crowbar, gravity gun, etc.
---@return boolean Whether the weapon has ammo or not.
function Weapon:HasAmmo() end

---[CLIENT] Returns whenever the weapon is carried by the local player.
---@return boolean Is the weapon is carried by the local player or not
function Weapon:IsCarriedByLocalPlayer() end

---[SHARED] Checks if the weapon is a SWEP or a built-in weapon.
---@return boolean Returns true if weapon is scripted ( SWEP ), false if not ( A built-in HL2/HL:S weapon )
function Weapon:IsScripted() end

---[SHARED] Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set.
---@return boolean Is visible or not
function Weapon:IsWeaponVisible() end

---[SHARED] Returns the time since this weapon last fired a bullet with Entity:FireBullets in seconds. It is not networked.
---@return number The time in seconds when the last bullet was fired.
function Weapon:LastShootTime() end

---[SHARED] Forces weapon to play activity/animation.
---@param act number Activity to play. See the Enums/ACT (specifically ACT_VM_).
function Weapon:SendWeaponAnim(act) end

---[SHARED] Sets the activity the weapon is playing.
--- See also Weapon:GetActivity.
---@param act number The new activity to set, see Enums/ACT.
function Weapon:SetActivity(act) end

---[SHARED] Lets you change the number of bullets in the given weapons primary clip.
---@param ammo number The amount of bullets the clip should contain
function Weapon:SetClip1(ammo) end

---[SHARED] Lets you change the number of bullets in the given weapons secondary clip.
---@param ammo number The amount of bullets the clip should contain
function Weapon:SetClip2(ammo) end

---[SHARED] Sets the hold type of the weapon. This function also calls WEAPON:SetWeaponHoldType and properly networks it to all clients.
--- This only works on scripted weapons.Using this function on weapons held by bots will not network holdtype changes to clients if the world model is set to an empty string (SWEP.WorldModel = "").
---@param name string Name of the hold type. You can find all default hold types here
function Weapon:SetHoldType(name) end

---[SHARED] Sets the time since this weapon last fired in seconds. Used in conjunction with Weapon:LastShootTime
---@param time number The time in seconds when the last time the weapon was fired.
function Weapon:SetLastShootTime(time) end

---[SHARED] Sets when the weapon can fire again. Time should be based on CurTime.
--- The standard HL2 "weapon_pistol" bypasses this function due to an internal implementation.This will fire extra bullets if the time is set to less than CurTime.Issue Tracker: 3786
---@param time number Time when player should be able to use primary fire again
function Weapon:SetNextPrimaryFire(time) end

---[SHARED] Sets when the weapon can alt-fire again. Time should be based on CurTime.
---@param time number Time when player should be able to use secondary fire again
function Weapon:SetNextSecondaryFire(time) end

---[SHARED] Called when the swep thinks.
--- This hook won't be called during the deploy animation and when using Weapon:DefaultReload.
--- Works only in players hands. Doesn't work in NPCs hands.Despite being a predicted hook, this hook is called clientside in single player, however it will not be recognized as a predicted hook to Player:GetCurrentCommand.This hook will be called before Player movement is processed on the client, and after on the server.This will not be run during deploy animations after a serverside-only deploy. This usually happens after picking up and dropping an object with +use.Issue Tracker: 2855
function WEAPON:Think() end

achievements = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of balloons burst. Once this count reaches 1000, the 'Popper' achievement is unlocked.
function achievements.BalloonPopped() end

---[CLIENT] Returns the amount of achievements in Garry's Mod.
---@return number The amount of achievements available.
function achievements.Count() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of balls eaten. Once this count reaches 200, the 'Ball Eater' achievement is unlocked.
function achievements.EatBall() end

---[CLIENT] Retrieves progress of given achievement
---@param achievementID number The ID of achievement to retrieve progress of. Note: IDs start from 0, not 1.
function achievements.GetCount(achievementID) end

---[CLIENT] Retrieves description of given achievement
---@param achievementID number The ID of achievement to retrieve description of. Note: IDs start from 0, not 1.
---@return string Description of an achievement
function achievements.GetDesc(achievementID) end

---[CLIENT] Retrieves progress goal of given achievement
---@param achievementID number The ID of achievement to retrieve goal of. Note: IDs start from 0, not 1.
---@return number Progress goal of an achievement
function achievements.GetGoal(achievementID) end

---[CLIENT] Retrieves name of given achievement
---@param achievementID number The ID of achievement to retrieve name of. Note: IDs start from 0, not 1.
---@return string Name of an achievement
function achievements.GetName(achievementID) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of baddies killed. Once this count reaches 1000, the 'War Zone' achievement is unlocked.
function achievements.IncBaddies() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of innocent animals killed. Once this count reaches 1000, the 'Innocent Bystander' achievement is unlocked.
function achievements.IncBystander() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of friendly NPCs killed. Once this count reaches 1000, the 'Bad Friend' achievement is unlocked.
function achievements.IncGoodies() end

---[CLIENT] Used in GMod 12 in the achievements menu to show the user if they have unlocked certain achievements.
---@param AchievementID number Internal Achievement ID number
---@return boolean Returns true if the given achievementID is achieved.
function achievements.IsAchieved(AchievementID) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of things removed. Once this count reaches 5000, the 'Destroyer' achievement is unlocked.
function achievements.Remover() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of NPCs spawned. Once this count reaches 1000, the 'Procreator' achievement is unlocked.
function achievements.SpawnedNPC() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of props spawned. Once this count reaches 5000, the 'Creator' achievement is unlocked.
function achievements.SpawnedProp() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of ragdolls spawned. Once this count reaches 2000, the 'Dollhouse' achievement is unlocked.
function achievements.SpawnedRagdoll() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds one to the count of how many times the spawnmenu has been opened. Once this count reaches 100,000, the 'Menu User' achievement is unlocked.
function achievements.SpawnMenuOpen() end

ai = {}

---[SERVER] Translates a schedule name to its corresponding ID.
---@param sched string Then schedule name. In most cases, this will be the same as the Enums/SCHED name.
---@return number The schedule ID, see Enums/SCHED. Returns -1 if the schedule name isn't valid.
function ai.GetScheduleID(sched) end

---[SERVER] Returns the squad leader of the given squad.
---@param squad string The squad name.
---@return NPC The squad leader.
function ai.GetSquadLeader(squad) end

---[SERVER] Returns the amount of members a given squad has.
---@param squad string The squad name.
---@return number The member count.
function ai.GetSquadMemberCount(squad) end

---[SERVER] Returns all members of a given squad.
---@param squad string The squad name.
---@return table A table of NPCs.
function ai.GetSquadMembers(squad) end

---[SERVER] Translates a task name to its corresponding ID.
---@param task string The task name.
---@return number The task ID, see ai_task.h. Returns -1 if the schedule name isn't valid.
function ai.GetTaskID(task) end

ai_schedule = {}

---[SERVER] Creates a schedule for scripted NPC.
---@param name string Name of the schedule.
---@return table A table containing schedule information to be used with ENTITY:StartSchedule.
function ai_schedule.New(name) end

ai_task = {}

---[SERVER] Create a new empty task. Used by Schedule:AddTask and Schedule:EngTask.
---@return Task The new task object.
function ai_task.New() end

baseclass = {}

---[SHARED] Gets the base class of an an object.
--- This is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with "gamemode_" prefix).
--- The keyword DEFINE_BASECLASS translates into a call to this function. In the engine, it is replaced with:
--- local BaseClass = baseclass.Get
---@param name string The child class.
---@return table The base class's meta table.
function baseclass.Get(name) end

---[SHARED] Add a new base class that can be derived by others. This is done automatically for:
--- 
--- widgets
--- panels
--- drive modes
--- entities
--- weapons
--- gamemodes (with prefix "gamemode_")
---@param name string The name of this base class. Must be completely unique.
---@param tab table The base class.
function baseclass.Set(name, tab) end

---@class bf_read
local bf_read = {}

---[CLIENT] Reads an returns an angle object from the bitstream.
---@return Angle The read angle
function bf_read:ReadAngle() end

---[CLIENT] Reads 1 bit an returns a bool representing the bit.
---@return boolean bit
function bf_read:ReadBool() end

---[CLIENT] Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char.
---@return number asciiVal
function bf_read:ReadChar() end

---[CLIENT] Reads a short representing an entity index and returns the matching entity handle.
---@return Entity ent
function bf_read:ReadEntity() end

---[CLIENT] Reads a 4 byte float from the bitstream and returns it.
---@return number float
function bf_read:ReadFloat() end

---[CLIENT] Reads a 4 byte long from the bitstream and returns it.
---@return number int
function bf_read:ReadLong() end

---[CLIENT] Reads a 2 byte short from the bitstream and returns it.
---@return number short
function bf_read:ReadShort() end

---[CLIENT] Reads a null terminated string from the bitstream.
---@return string str
function bf_read:ReadString() end

---[CLIENT] Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals.
---@return Vector vec
function bf_read:ReadVector() end

---[CLIENT] Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position.
---@return Vector normal
function bf_read:ReadVectorNormal() end

---[CLIENT] Rewinds the bitstream so it can be read again.
function bf_read:Reset() end

bit = {}

---[SHARED] Returns the arithmetically shifted value.
---@param value number The value to be manipulated.
---@param shiftCount number Amounts of bits to shift.
---@return number shiftedValue
function bit.arshift(value, shiftCount) end

---[SHARED] Performs the bitwise and for all values specified.
---@param value number The value to be manipulated.
---@param otherValues number Values bit to perform bitwise "and" with. Optional.
---@return number Result of bitwise "and" operation.
function bit.band(value, otherValues) end

---[SHARED] Returns the bitwise not of the value.
---@param value number The value to be inverted.
---@return number bitwiseNot
function bit.bnot(value) end

---[SHARED] Returns the bitwise OR of all values specified.
---@param value1 number The first value.
---@param ... ... Extra values to be evaluated. (must all be numbers)
---@return number The bitwise OR result between all numbers.
function bit.bor(value1, ...) end

---[SHARED] Swaps the byte order.
---@param value number The value to be byte swapped.
---@return number swapped
function bit.bswap(value) end

---[SHARED] Returns the bitwise xor of all values specified.
---@param value number The value to be manipulated.
---@param otherValues number Values bit xor with. Optional.
---@return number bitwiseXOr
function bit.bxor(value, otherValues) end

---[SHARED] Returns the left shifted value.
--- The returned value will be clamped to a signed 32-bit integer, even on 64-bit builds.
---@param value number The value to be manipulated.
---@param shiftCount number Amounts of bits to shift left by.
---@return number shiftedValue
function bit.lshift(value, shiftCount) end

---[SHARED] Returns the left rotated value.
---@param value number The value to be manipulated.
---@param shiftCount number Amounts of bits to rotate left by.
---@return number shiftedValue
function bit.rol(value, shiftCount) end

---[SHARED] Returns the right rotated value.
---@param value number The value to be manipulated.
---@param shiftCount number Amounts of bits to rotate right by.
---@return number shiftedValue
function bit.ror(value, shiftCount) end

---[SHARED] Returns the right shifted value.
--- The returned value will be clamped to a signed 32-bit integer, even on 64-bit builds.
---@param value number The value to be manipulated.
---@param shiftCount number Amounts of bits to shift right by.
---@return number shiftedValue
function bit.rshift(value, shiftCount) end

---[SHARED] Normalizes the specified value and clamps it in the range of a signed 32bit integer.
---@param value number The value to be normalized.
---@return number swapped
function bit.tobit(value) end

---[SHARED] Returns the hexadecimal representation of the number with the specified digits.
---@param value number The value to be normalized.
---@param digits number The number of digits. Optional
---@return string hexString
function bit.tohex(value, digits) end

cam = {}

---[CLIENT] Shakes the screen at a certain position.
---@param pos Vector Origin of the shake.
---@param angles Angle Angles of the shake.
---@param factor number The shake factor.
function cam.ApplyShake(pos, angles, factor) end

---[CLIENT] Switches the renderer back to the previous drawing mode from a 3D context.
--- This function is an alias of cam.End3D.
--- This will crash the game if there is no context to end.Issue Tracker: 1091
function cam.End() end

---[CLIENT] Switches the renderer back to the previous drawing mode from a 2D context.
--- This will crash the game if there is no context to end.Issue Tracker: 1091
function cam.End2D() end

---[CLIENT] Switches the renderer back to the previous drawing mode from a 3D context.
--- This will crash the game if there is no context to end.Issue Tracker: 1091
function cam.End3D() end

---[CLIENT] Switches the renderer back to the previous drawing mode from a 3D2D context.
--- This will crash the game if there is no context to end.Issue Tracker: 1091
function cam.End3D2D() end

---[CLIENT] Switches the renderer back to the previous drawing mode from a 3D orthographic rendering context.
function cam.EndOrthoView() end

---[CLIENT] Returns a copy of the model matrix that is at the top of the stack.
--- Editing the matrix will not edit the current view. To do so, you will have to push it.This function essentially returns the copy of the last pushed model matrix.
---@return VMatrix The currently active matrix.
function cam.GetModelMatrix() end

---[CLIENT] Tells the renderer to ignore the depth buffer and draw any upcoming operation "ontop" of everything that was drawn yet.
--- This is identical to calling render.DepthRange( 0, 0.01 ) for true and  render.DepthRange( 0, 1 ) for false. See render.DepthRange.
---@param ignoreZ boolean Determines whenever to ignore the depth buffer or not.
function cam.IgnoreZ(ignoreZ) end

---[CLIENT] Pops the current active rendering matrix from the stack and reinstates the previous one.
function cam.PopModelMatrix() end

---[CLIENT] Pushes the specified matrix onto the render matrix stack. Unlike opengl, this will replace the current model matrix.
--- This does not work with cam.Start3D2D if multiply is false.
---@param matrix VMatrix The matrix to push.
---@param multiply boolean If set, multiplies given matrix with currently active matrix (cam.GetModelMatrix) before pushing.
function cam.PushModelMatrix(matrix, multiply) end

---[CLIENT] Sets up a new rendering context. This is an extended version of cam.Start3D and cam.Start2D. Must be finished by cam.End3D or cam.End2D.
--- This will not update current view properties for 3D contexts.Issue Tracker: 2682
---@param dataTbl table Render context config. See Structures/RenderCamData
function cam.Start(dataTbl) end

---[CLIENT] Sets up a new 2D rendering context. Must be finished by cam.End2D.
--- This is almost always used with a render target from the render. To set its position use render.SetViewPort with a target already stored.
--- This will put an identity matrix at the top of the model matrix stack. If you are trying to use cam.PushModelMatrix, call it after this function and not before.This is a rendering hook which provides a 2d rendering context.
function cam.Start2D() end

---[CLIENT] Sets up a new 3D rendering context. Must be finished by cam.End3D.
--- For more advanced settings such as an orthographic view, use cam.Start instead.
--- This is a rendering hook which provides a 3d rendering context.Both zNear and zFar need a value before any of them work.
--- zNear also requires a value higher than 0.This will not update current view properties.Issue Tracker: 2682
---@param pos Vector Render cam position.
---@param angles Angle Render cam angles.
---@param fov number Field of view.
---@param x number X coordinate of where to start the new view port.
---@param y number Y coordinate of where to start the new view port.
---@param w number Width of the new viewport.
---@param h number Height of the new viewport.
---@param zNear number Distance to near clipping plane.
---@param zFar number Distance to far clipping plane.
function cam.Start3D(pos, angles, fov, x, y, w, h, zNear, zFar) end

---[CLIENT] Sets up a new 2D rendering context. Must be finished by cam.End3D2D. This function pushes a new matrix onto the stack. (cam.PushModelMatrix)
--- Matrix formula:
--- local m = Matrix()
--- m:SetAngles(angles)
--- m:SetTranslation(pos)
--- m:SetScale(Vector(scale, -scale, 1))This is a rendering hook which provides a 2d rendering context.This is a rendering hook which provides a 3d rendering context.This should be closed by cam.End3D2D otherwise the game crashes
---@param pos Vector Origin of the 3D2D context, ie. the top left corner, (0, 0).
---@param angles Angle Angles of the 3D2D context. +x in the 2d context corresponds to +x of the angle (its forward direction). +y in the 2d context corresponds to -y of the angle (its right direction). If (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).
---@param scale number The scale of the render context. If scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.
function cam.Start3D2D(pos, angles, scale) end

---[CLIENT] Sets up a new 3d context using orthographic projection.
---@param leftOffset number The left plane offset.
---@param topOffset number The top plane offset.
---@param rightOffset number The right plane offset.
---@param bottomOffset number The bottom plane offset.
function cam.StartOrthoView(leftOffset, topOffset, rightOffset, bottomOffset) end

chat = {}

---[CLIENT] Adds text to the local player's chat box (which only they can read).
---@param ... ... The arguments. Arguments can be:  table - Color. Will set the color for all following strings until the next Color argument. string - Text to be added to the chat box. Player - Adds the name of the player in the player's team color to the chat box. any - Any other type, such as Entity will be converted to string and added as text.
function chat.AddText(...) end

---[CLIENT] Closes the chat window.
function chat.Close() end

---[CLIENT] Returns the chatbox position.
---@return number, number number - The X coordinate of the chatbox's position.
---@return number, number number - The Y coordinate of the chatbox's position.
function chat.GetChatBoxPos() end

---[CLIENT] Returns the chatbox size.
---@return number, number number - The width of the chatbox.
---@return number, number number - The height of the chatbox.
function chat.GetChatBoxSize() end

---[CLIENT] Opens the chat window.
---@param mode number If equals 1, opens public chat, otherwise opens team chat
function chat.Open(mode) end

---[CLIENT] Plays the chat "tick" sound.
function chat.PlaySound() end

cleanup = {}

---[SERVER] Adds an entity to a player's cleanup list.
---@param pl Player Who's cleanup list to add the entity to.
---@param type string The type of cleanup.
---@param ent Entity The entity to add to the player's cleanup list.
function cleanup.Add(pl, type, ent) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the gmod_admin_cleanup console command. Allows admins to clean up the server.
---@param pl Player The player that called the console command.
---@param command string The console command that called this function.
---@param args table First and only arg is the cleanup type.
function cleanup.CC_AdminCleanup(pl, command, args) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the gmod_cleanup console command. Allows players to cleanup their own props.
---@param pl Player The player that called the console command.
---@param command string The console command that called this function.
---@param args table First and only argument is the cleanup type.
function cleanup.CC_Cleanup(pl, command, args) end

---[SERVER] Gets the cleanup list.
function cleanup.GetList() end

---[SHARED] Gets the table of cleanup types.
---@return table A list of cleanup types.
function cleanup.GetTable() end

---[SHARED] Registers a new cleanup type.
---@param type string Name of type.
function cleanup.Register(type) end

---[SERVER] Replaces one entity in the cleanup module with another
---@param from Entity Old entity
---@param to Entity New entity
---@return boolean Whether any action was taken.
function cleanup.ReplaceEntity(from, to) end

---[CLIENT] Repopulates the clients cleanup menu
function cleanup.UpdateUI() end

concommand = {}

---[SHARED] Creates a console command that runs a function in lua with optional autocompletion function and help text.
--- This will fail if the concommand was previously removed with concommand.Remove in a different realm (creating a command on the client that was removed from the server and vice-versa).Issue Tracker: 1183
---@param name string The command name to be used in console. This cannot be a name of existing console command or console variable. It will silently fail if it is.
---@param callback function The function to run when the concommand is executed. Arguments passed are:  Player ply - The player that ran the concommand. NULL entity if command was entered with the dedicated server console. string cmd - The concommand string (if one callback is used for several concommands). table args - A table of all string arguments. string argStr - The arguments as a string.
---@param autoComplete function The function to call which should return a table of options for autocompletion. (Autocompletion Tutorial) This only properly works on the client since it is not networked. Arguments passed are:  string cmd - The concommand this autocompletion is for. string args - The arguments typed so far.
---@param helpText string The text to display should a user run 'help cmdName'.
---@param flags number Concommand modifier flags. See Enums/FCVAR.
function concommand.Add(name, callback, autoComplete, helpText, flags) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Used by the engine to call the autocomplete function for a console command, and retrieve returned options.
---@param command string Name of command
---@param arguments string Arguments given to the command
---@return table Possibilities for auto-completion. This is the return value of the auto-complete callback.
function concommand.AutoComplete(command, arguments) end

---[SHARED] Returns the tables of all console command callbacks, and autocomplete functions, that were added to the game with concommand.Add.
---@return table, table table - Table of command callback functions.
---@return table, table table - Table of command autocomplete functions.
function concommand.GetTable() end

---[SHARED] Removes a console command.
--- This will not always remove the command from auto-complete.Issue Tracker: 1183concommand.Add will fail if the concommand was previously removed with this function in a different realm (creating a command on the client that was removed from the server and vice-versa).Issue Tracker: 1183
---@param name string The name of the command to be removed.
function concommand.Remove(name) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- You might be looking for RunConsoleCommand or Player:ConCommand.
--- Used by the engine to run a console command's callback function. This will only be called for commands that were added with AddConsoleCommand, which concommand.Add calls internally. An error is sent to the player's chat if no callback is found.
--- This will still be called for concommands removed with concommand.Remove but will return false.
---@param ply Player Player to run concommand on
---@param cmd string Command name
---@param args any Command arguments. Can be table or string
---@param argumentString string string of all arguments sent to the command
---@return boolean true if the console command with the given name exists, and false if it doesn't.
function concommand.Run(ply, cmd, args, argumentString) end

constraint = {}

---[SERVER] Stores information about constraints in an entity's table.
---@param ent1 Entity The entity to store the information on.
---@param constrt Entity The constraint to store in the entity's table.
---@param ent2 Entity Optional. If different from ent1, the info will also be stored in the table for this entity.
---@param ent3 Entity Optional. Same as ent2.
---@param ent4 Entity Optional. Same as ent2.
function constraint.AddConstraintTable(ent1, constrt, ent2, ent3, ent4) end

---[SERVER] Stores info about the constraints on the entity's table. The only difference between this and constraint.AddConstraintTable is that the constraint does not get deleted when the entity is removed.
---@param ent1 Entity The entity to store the information on.
---@param constrt Entity The constraint to store in the entity's table.
---@param ent2 Entity Optional. If different from ent1, the info will also be stored in the table for this entity.
---@param ent3 Entity Optional. Same as ent2.
---@param ent4 Entity Optional. Same as ent2.
function constraint.AddConstraintTableNoDelete(ent1, constrt, ent2, ent3, ent4) end

---[SERVER] Creates an advanced ballsocket (ragdoll) constraint.
--- Uses a https://developer.valvesoftware.com/wiki/Phys_ragdollconstraint
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param LPos1 Vector Position on the first entity, in its local space coordinates.
---@param LPos2 Vector Position on the second entity, in its local space coordinates.
---@param forcelimit number Amount of force until it breaks (0 = unbreakable)
---@param torquelimit number Amount of torque (rotation speed) until it breaks (0 = unbreakable)
---@param xmin number Minimum angle in rotations around the X axis local to the constraint.
---@param ymin number Minimum angle in rotations around the Y axis local to the constraint.
---@param zmin number Minimum angle in rotations around the Z axis local to the constraint.
---@param xmax number Maximum angle in rotations around the X axis local to the constraint.
---@param ymax number Maximum angle in rotations around the Y axis local to the constraint.
---@param zmax number Maximum angle in rotations around the Z axis local to the constraint.
---@param xfric number Rotational friction in the X axis local to the constraint.
---@param yfric number Rotational friction in the Y axis local to the constraint.
---@param zfric number Rotational friction in the Z axis local to the constraint.
---@param onlyrotation number Only limit rotation, free movement.
---@param nocollide number Whether the entities should be no-collided.
---@return Entity A phys_ragdollconstraint entity. Will return false if the constraint could not be created.
function constraint.AdvBallsocket(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, forcelimit, torquelimit, xmin, ymin, zmin, xmax, ymax, zmax, xfric, yfric, zfric, onlyrotation, nocollide) end

---[SERVER] Creates an axis constraint.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param LPos1 Vector Position on the first entity, in its local space coordinates.
---@param LPos2 Vector Position on the second entity, in its local space coordinates.
---@param forcelimit number Amount of force until it breaks (0 = unbreakable)
---@param torquelimit number Amount of torque (rotational force) until it breaks (0 = unbreakable)
---@param friction number Constraint friction.
---@param nocollide number Whether the entities should be no-collided.
---@param LocalAxis Vector If you include the LocalAxis then LPos2 will not be used in the final constraint. However, LPos2 is still a required argument.
---@param DontAddTable boolean Whether or not to add the constraint info on the entity table. See constraint.AddConstraintTable.
---@return Entity Constraint. Will return false if the constraint could not be created.
function constraint.Axis(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, forcelimit, torquelimit, friction, nocollide, LocalAxis, DontAddTable) end

---[SERVER] Creates a ballsocket joint.
---@param Ent1 Entity First entity
---@param Ent2 Entity Second entity
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param LocalPos Vector Centerposition of the joint, relative to the second entity.
---@param forcelimit number Amount of force until it breaks (0 = unbreakable)
---@param torquelimit number Amount of torque (rotation speed) until it breaks (0 = unbreakable)
---@param nocollide number Whether the entities should be nocollided
---@return Entity Constraint. Will return false if the constraint could not be created.
function constraint.Ballsocket(Ent1, Ent2, Bone1, Bone2, LocalPos, forcelimit, torquelimit, nocollide) end

---[SERVER] Basic checks to make sure that the specified entity and bone are valid. Returns false if we should not be constraining the entity.
---@param ent Entity The entity to check
---@param bone number The bone of the entity to check (use 0 for mono boned ents)
---@return boolean shouldConstrain
function constraint.CanConstrain(ent, bone) end

---[SERVER] Creates a rope without any constraint.
---@param pos Vector Starting position of the rope.
---@param width number Width of the rope.
---@param material string Material of the rope.
---@param Constraint Entity Constraint for the rope.
---@param Ent1 Entity First entity.
---@param LPos1 Vector Position of first end of the rope. Local to Ent1.
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Ent2 Entity Second entity.
---@param LPos2 Vector Position of second end of the rope. Local to Ent2.
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param kv table (Optional) Any additional key/values to be set on the rope.
---@return Entity rope
function constraint.CreateKeyframeRope(pos, width, material, Constraint, Ent1, LPos1, Bone1, Ent2, LPos2, Bone2, kv) end

---[SERVER] Creates an invisible, non-moveable anchor point in the world to which things can be attached.
--- The entity used internally by this function (gmod_anchor) only exists in Sandbox derived gamemodes, meaning this function will only work in these gamemodes.
--- To use this in other gamemodes, you may need to create your own gmod_anchor entity.
---@param pos Vector The position to spawn the anchor at
---@return Entity, PhysObj, number, Vector Entity - anchor
---@return Entity, PhysObj, number, Vector PhysObj - physicsObject,
---@return Entity, PhysObj, number, Vector number - bone
---@return Entity, PhysObj, number, Vector Vector - LPos
function constraint.CreateStaticAnchorPoint(pos) end

---[SERVER] Creates an elastic constraint.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param LPos1 Vector Position of first end of the rope. Local to Ent1.
---@param LPos2 Vector Position of second end of the rope. Local to Ent2.
---@param constant number 
---@param damping number 
---@param rdamping number 
---@param material string The material of the rope.
---@param width number Width of rope.
---@param stretchonly boolean 
---@param color table The color of the rope. See Color.
---@return Entity, Entity Entity - Constraint. Will return false if the constraint could not be created.
---@return Entity, Entity Entity - rope.  Will return nil if the constraint could not be created.
function constraint.Elastic(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, constant, damping, rdamping, material, width, stretchonly, color) end

---[SERVER] Returns the constraint of a specified type between two entities, if it exists
---@param ent1 Entity The first entity to check
---@param ent2 Entity The second entity to check
---@param type string The type of constraint, case sensitive. List of default constrains is as follows:  Weld Axis AdvBallsocket Rope Elastic NoCollide Motor Pulley Ballsocket Winch Hydraulic Muscle Keepupright Slider
---@param bone1 number The bone number for the first entity (0 for monoboned entities)
---@param bone2 number The bone number for the second entity
---@return Entity constraint
function constraint.Find(ent1, ent2, type, bone1, bone2) end

---[SERVER] Returns the first constraint of a specific type directly connected to the entity found
---@param ent Entity The entity to check
---@param type string The type of constraint, case sensitive. List of default constrains is as follows:  Weld Axis AdvBallsocket Rope Elastic NoCollide Motor Pulley Ballsocket Winch Hydraulic Muscle Keepupright Slider
---@return table The constraint table, set with constraint.AddConstraintTable
function constraint.FindConstraint(ent, type) end

---[SERVER] Returns the other entity involved in the first constraint of a specific type directly connected to the entity
---@param ent Entity The entity to check
---@param type string The type of constraint, case sensitive. List of default constrains is as follows:  Weld Axis AdvBallsocket Rope Elastic NoCollide Motor Pulley Ballsocket Winch Hydraulic Muscle Keepupright Slider
---@return Entity The other entity.
function constraint.FindConstraintEntity(ent, type) end

---[SERVER] Returns a table of all constraints of a specific type directly connected to the entity
---@param ent Entity The entity to check
---@param type string The type of constraint, case sensitive. List of default constrains is as follows:  Weld Axis AdvBallsocket Rope Elastic NoCollide Motor Pulley Ballsocket Winch Hydraulic Muscle Keepupright Slider
---@return table All the constraints of this entity.
function constraint.FindConstraints(ent, type) end

---[SERVER] Make this entity forget any constraints it knows about. Note that this will not actually remove the constraints.
---@param ent Entity The entity that will forget its constraints.
function constraint.ForgetConstraints(ent) end

---[SERVER] Returns a table of all entities recursively constrained to an entitiy.
---@param ent Entity The entity to check
---@param ResultTable table Table used to return result. Optional.
---@return table A table containing all of the constrained entities. This includes all entities constrained to entities constrained to the supplied entity, etc.
function constraint.GetAllConstrainedEntities(ent, ResultTable) end

---[SERVER] Returns a table of all constraints directly connected to the entity
---@param ent Entity The entity to check
---@return table A list of all constraints connected to the entity.
function constraint.GetTable(ent) end

---[SERVER] Returns true if the entity has constraints attached to it
---@param ent Entity The entity to check
---@return boolean Whether the entity has any constraints or not.
function constraint.HasConstraints(ent) end

---[SERVER] Creates a Hydraulic constraint.
---@param pl Player The player that will be used to call numpad.OnDown.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls),
---@param Bone2 number Bone of second entity (0 for non-ragdolls).
---@param LPos1 Vector 
---@param LPos2 Vector 
---@param Length1 number 
---@param Length2 number 
---@param width number The width of the rope.
---@param key number The key binding, corresponding to an Enums/KEY
---@param fixed number Whether the hydraulic is fixed.
---@param speed number 
---@param material string The material of the rope.
---@param color table The color of the rope. See Color.
---@return Entity, Entity, Entity, Entity Entity - Constraint. Will return false if the constraint could not be created.
---@return Entity, Entity, Entity, Entity Entity - rope. Will return nil if the constraint could not be created.
---@return Entity, Entity, Entity, Entity Entity - controller. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.
---@return Entity, Entity, Entity, Entity Entity - slider. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.
function constraint.Hydraulic(pl, Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, Length1, Length2, width, key, fixed, speed, material, color) end

---[SERVER] Creates a keep upright constraint.
--- This function only works on prop_physics or prop_ragdoll.
---@param ent Entity The entity to keep upright
---@param ang Angle The angle defined as "upright"
---@param bone number The bone of the entity to constrain (0 for boneless)
---@param angularLimit number Basically, the strength of the constraint
---@return Entity The created constraint, if any or false if the constraint failed to set
function constraint.Keepupright(ent, ang, bone, angularLimit) end

---[SERVER] Creates a motor constraint.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param LPos1 Vector 
---@param LPos2 Vector 
---@param friction number 
---@param torque number 
---@param forcetime number 
---@param nocollide number Whether the entities should be no-collided.
---@param toggle number Whether the constraint is on toggle.
---@param pl Player The player that will be used to call numpad.OnDown and numpad.OnUp.
---@param forcelimit number Amount of force until it breaks (0 = unbreakable)
---@param numpadkey_fwd number The key binding for "forward", corresponding to an Enums/KEY
---@param numpadkey_bwd number The key binding for "backwards", corresponding to an Enums/KEY
---@param direction number 
---@param LocalAxis Vector 
---@return Entity, Entity Entity - Constraint. Will return false if the constraint could not be created.
---@return Entity, Entity Entity - axis. Will return nil if the constraint could not be created.
function constraint.Motor(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, friction, torque, forcetime, nocollide, toggle, pl, forcelimit, numpadkey_fwd, numpadkey_bwd, direction, LocalAxis) end

---[SERVER] Creates a muscle constraint.
---@param pl Player The player that will be used to call numpad.OnDown.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param LPos1 Vector 
---@param LPos2 Vector 
---@param Length1 number 
---@param Length2 number 
---@param width number Width of the rope.
---@param key number The key binding, corresponding to an Enums/KEY
---@param fixed number Whether the constraint is fixed.
---@param period number 
---@param amplitude number 
---@param starton boolean 
---@param material string Material of the rope.
---@param color table The color of the rope. See Color.
---@return Entity, Entity, Entity, Entity Entity - Constraint. Will return false if the constraint could not be created.
---@return Entity, Entity, Entity, Entity Entity - rope. Will return nil if the constraint could not be created.
---@return Entity, Entity, Entity, Entity Entity - controller. Will return nil if the constraint could not be created.
---@return Entity, Entity, Entity, Entity Entity - slider. Will return nil if the fixed argument is not 1 or if the constraint could not be created.
function constraint.Muscle(pl, Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, Length1, Length2, width, key, fixed, period, amplitude, starton, material, color) end

---[SERVER] Creates an no-collide "constraint". Disables collision between two entities.
--- Does not work with players.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls).
---@param Bone2 number Bone of second entity (0 for non-ragdolls).
---@return Entity Constraint. Will return false if the constraint could not be created.
function constraint.NoCollide(Ent1, Ent2, Bone1, Bone2) end

---[SERVER] Creates a pulley constraint.
---@param Ent1 Entity 
---@param Ent4 Entity 
---@param Bone1 number 
---@param Bone4 number 
---@param LPos1 Vector 
---@param LPos4 Vector 
---@param WPos2 Vector 
---@param WPos3 Vector 
---@param forcelimit number Amount of force until it breaks (0 = unbreakable)
---@param rigid boolean Whether the constraint is rigid.
---@param width number Width of the rope.
---@param material string Material of the rope.
---@param color table The color of the rope. See Color.
---@return Entity Constraint. Will return false if the constraint could not be created.
function constraint.Pulley(Ent1, Ent4, Bone1, Bone4, LPos1, LPos4, WPos2, WPos3, forcelimit, rigid, width, material, color) end

---[SERVER] Attempts to remove all constraints associated with an entity
---@param ent Entity The entity to remove constraints from
---@return boolean, number boolean - Whether any constraints were removed
---@return boolean, number number - Number of constraints removed
function constraint.RemoveAll(ent) end

---[SERVER] Attempts to remove all constraints of a specified type associated with an entity
---@param ent Entity The entity to check
---@param type string The constraint type to remove (eg. "Weld", "Elastic", "NoCollide")
---@return boolean, number boolean - Whether we removed any constraints or not
---@return boolean, number number - The amount of constraints removed
function constraint.RemoveConstraints(ent, type) end

---[SERVER] Creates a rope constraint - with rope!
---@param Ent1 Entity First entity
---@param Ent2 Entity Second entity
---@param Bone1 number Bone of first entity (0 for non-ragdolls)
---@param Bone2 number Bone of second entity (0 for non-ragdolls)
---@param LPos1 Vector Position of first end of the rope. Local to Ent1.
---@param LPos2 Vector Position of second end of the rope. Local to Ent2.
---@param length number Length of the rope.
---@param addlength number Amount to add to the length of the rope. Works as it does in the Rope tool.
---@param forcelimit number Amount of force until it breaks (0 = unbreakable).
---@param width number Width of the rope.
---@param material string Material of the rope.
---@param rigid boolean Whether the constraint is rigid.
---@param color table The color of the rope. See Color.
---@return Entity, Entity Entity - Constraint. Will be a keyframe_rope if you roping to the same bone on the same entity. Will return false if the constraint could not be created.
---@return Entity, Entity Entity - rope. Will return nil if "Constraint" is a keyframe_rope or if the constraint could not be created.
function constraint.Rope(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, length, addlength, forcelimit, width, material, rigid, color) end

---[SERVER] Creates a slider constraint.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls),
---@param Bone2 number Bone of second entity (0 for non-ragdolls).
---@param LPos1 Vector 
---@param LPos2 Vector 
---@param width number The width of the rope.
---@param material string The material of the rope.
---@param color table The color of the rope. See Color.
---@return Entity, Entity Entity - Constraint. Will return false if the constraint could not be created.
---@return Entity, Entity Entity - rope. Will return nil if the constraint could not be created.
function constraint.Slider(Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, width, material, color) end

---[SERVER] Creates a weld constraint
---@param ent1 Entity The first entity
---@param ent2 Entity The second entity
---@param bone1 number The bonenumber of the first entity (0 for monoboned entities) PhysObj number for ragdolls, see: Entity:TranslateBoneToPhysBone.
---@param bone2 number The bonenumber of the second entity
---@param forcelimit number The amount of force appliable to the constraint before it will break (0 is never)
---@param nocollide boolean Should ent1 be nocollided to ent2 via this constraint
---@param deleteent1onbreak boolean If true, when ent2 is removed, ent1 will also be removed
---@return Entity constraint
function constraint.Weld(ent1, ent2, bone1, bone2, forcelimit, nocollide, deleteent1onbreak) end

---[SERVER] Creates a Winch constraint.
---@param pl Player The player that will be used to call numpad.OnDown and numpad.OnUp.
---@param Ent1 Entity First entity.
---@param Ent2 Entity Second entity.
---@param Bone1 number Bone of first entity (0 for non-ragdolls),
---@param Bone2 number Bone of second entity (0 for non-ragdolls).
---@param LPos1 Vector 
---@param LPos2 Vector 
---@param width number The width of the rope.
---@param fwd_bind number The key binding for "forward", corresponding to an Enums/KEY
---@param bwd_bind number The key binding for "backwards", corresponding to an Enums/KEY
---@param fwd_speed number Forward speed.
---@param bwd_speed number Backwards speed.
---@param material string The material of the rope.
---@param toggle boolean Whether the winch should be on toggle.
---@param color table The color of the rope. See Color.
---@return Entity, Entity, Entity Entity - Constraint. Can return nil. Will return false if the constraint could not be created.
---@return Entity, Entity, Entity Entity - rope. Will return nil if the constraint could not be created.
---@return Entity, Entity, Entity Entity - controller. Can return nil.
function constraint.Winch(pl, Ent1, Ent2, Bone1, Bone2, LPos1, LPos2, width, fwd_bind, bwd_bind, fwd_speed, bwd_speed, material, toggle, color) end

construct = {}

---[SERVER] Creates a magnet.
---@param ply Player Player that will have the numpad control over the magnet
---@param pos Vector The position of the magnet
---@param ang Angle The angles of the magnet
---@param model string The model of the maget
---@param material string Material of the magnet ( texture )
---@param key number The key to toggle the magnet, see Enums/KEY
---@param maxObjects number Maximum amount of objects the magnet can hold
---@param strength number Strength of the magnet
---@param nopull number If > 0, disallows the magnet to pull objects towards it
---@param allowrot number If > 0, allows rotation of the objects attached
---@param startOn number If > 0, enabled from spawn
---@param toggle number If != 0, pressing the key toggles the magnet, otherwise you'll have to hold the key to keep it enabled
---@param vel Vector Velocity to set on spawn
---@param aVel Angle Angular velocity to set on spawn
---@param frozen boolean Freeze the magnet on start
---@return Entity The magnet
function construct.Magnet(ply, pos, ang, model, material, key, maxObjects, strength, nopull, allowrot, startOn, toggle, vel, aVel, frozen) end

---[SERVER] Sets props physical properties.
---@param ply Player The player. This variable is not used and can be left out.
---@param ent Entity The entity to apply properties to
---@param physObjID number You can use this or the argument below. This will be used in case you don't provide argument below.
---@param physObj PhysObj The physics object to apply the properties to
---@param data table The table containing properties to apply. See Structures/PhysProperties
function construct.SetPhysProp(ply, ent, physObjID, physObj, data) end

controlpanel = {}

---[CLIENT] Clears ALL the control panels ( for tools )
function controlpanel.Clear() end

---[CLIENT] Returns (or creates if not exists) a control panel.
---@param name string The name of the panel. For normal tools this will be equal to TOOL.Mode (the tool's filename without the extension). When you create a tool/option via spawnmenu.AddToolMenuOption, the internal control panel name is TOOL.Mode .. "_" .. tool_tab:lower() .. "_" .. tool_category:lower().
---@return Panel The ControlPanel panel.
function controlpanel.Get(name) end

cookie = {}

---[SHARED] Deletes a cookie on the client.
---@param name string The name of the cookie that you want to delete.
function cookie.Delete(name) end

---[SHARED] Gets the value of a cookie on the client as a number.
---@param name string The name of the cookie that you want to get.
---@param default any Value to return if the cookie does not exist.
---@return number The cookie value
function cookie.GetNumber(name, default) end

---[SHARED] Gets the value of a cookie on the client as a string.
---@param name string The name of the cookie that you want to get.
---@param default any Value to return if the cookie does not exist.
---@return string The cookie value
function cookie.GetString(name, default) end

---[SHARED] Sets the value of a cookie, which is saved automatically by the sql.
--- These are stored in the *.db files - cl.db for clients, mn.db for menu state and sv.db for servers.
---@param key string The name of the cookie that you want to set.
---@param value string Value to store in the cookie.
function cookie.Set(key, value) end

coroutine = {}

---[SHARED] Creates a coroutine of the given function.
---@param func function The function for the coroutine to use.
---@return thread coroutine
function coroutine.create(func) end

---[SHARED] Returns whether the running coroutine can yield.
--- A running coroutine is yieldable if it is not in the main thread, and it is not inside a non-yieldable C function.
--- This is only available on the x86-64 versions, because of the difference in the LuaJIT version. See here
---@return boolean Returns true when the running coroutine can yield.
function coroutine.isyieldable() end

---[SHARED] Resumes the given coroutine and passes the given vararg to either the function arguments or the coroutine.yield that is inside that function and returns whatever yield is called with the next time or by the final return in the function.
---@param coroutine thread Coroutine to resume.
---@param ... ... Arguments to be returned by coroutine.yield.
---@return boolean, ... boolean - If the executed thread code had no errors occur within it.
---@return boolean, ... ... - If an error occurred, this will be a string containing the error message. Otherwise, this will be arguments that were yielded.
function coroutine.resume(coroutine, ...) end

---[SHARED] Returns the active coroutine or nil if we are not within a coroutine.
---@return thread coroutine
function coroutine.running() end

---[SHARED] Returns the status of the coroutine passed to it, the possible statuses are "suspended", "running", and "dead".
---@param coroutine thread Coroutine to check the status of.
---@return string status
function coroutine.status(coroutine) end

---[SHARED] Repeatedly yields the coroutine for the given duration before continuing.
--- Only works inside a coroutine. Only useful in nextbot coroutine think function.
--- This function uses CurTime instead of RealTime.
---@param duration number The number of seconds to wait
function coroutine.wait(duration) end

---[SHARED] Returns a function which calling is equivalent with calling coroutine.resume with the coroutine and all extra parameters.
--- The values returned by the returned function only contain the values passed to the inner coroutine.yield call and do not include the no error status that coroutine.resume provides. In case of failure, an error is thrown instead.
---@param coroutine function Coroutine to resume.
---@return function func
function coroutine.wrap(coroutine) end

---[SHARED] Pauses the active coroutine and passes all additional variables to the call of coroutine.resume that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume.
---@param ... ... Arguments to be returned by the last call of coroutine.resume.
---@return ... Arguments that were set previously by coroutine.resume.
function coroutine.yield(...) end

cvars = {}

---[SHARED] Adds a callback to be called when the named convar changes.
--- This does not callback convars in the menu state.Issue Tracker: 1440This does not callback convars on the client with FCVAR_GAMEDLL and convars on the server without FCVAR_GAMEDLL.Issue Tracker: 3503This does not callback convars on the client with FCVAR_REPLICATED.Issue Tracker: 3740
---@param name string The name of the convar to add the change callback to.
---@param callback function The function to be called when the convar changes. The arguments passed are:  string convar - The name of the convar. string oldValue - The old value of the convar. string newValue - The new value of the convar.
---@param identifier string If set, you will be able to remove the callback using cvars.RemoveChangeCallback. The identifier is not required to be globally unique, as it's paired with the actual name of the convar.
function cvars.AddChangeCallback(name, callback, identifier) end

---[SHARED] Retrieves console variable as a boolean.
---@param cvar string Name of console variable
---@param default boolean The value to return if the console variable does not exist
---@return boolean Retrieved value
function cvars.Bool(cvar, default) end

---[SHARED] Returns a table of the given ConVars callbacks.
---@param name string The name of the ConVar.
---@param createIfNotFound boolean Whether or not to create the internal callback table for given ConVar if there isn't one yet. This argument is internal and should not be used.
---@return table A table of the convar's callbacks, or nil if the convar doesn't exist.
function cvars.GetConVarCallbacks(name, createIfNotFound) end

---[SHARED] Retrieves console variable as a number.
---@param cvar string Name of console variable
---@param default any The value to return if the console variable does not exist
---@return number Retrieved value
function cvars.Number(cvar, default) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- You are probably looking for cvars.AddChangeCallback.
--- Called by the engine when a convar value changes.
---@param name string Convar name
---@param oldVal string The old value of the convar
---@param newVal string The new value of the convar
function cvars.OnConVarChanged(name, oldVal, newVal) end

---[SHARED] Removes a callback for a convar using the the callback's identifier. The identifier should be the third argument specified for cvars.AddChangeCallback.
---@param name string The name of the convar to remove the callback from.
---@param indentifier string The callback's identifier.
function cvars.RemoveChangeCallback(name, indentifier) end

---[SHARED] Retrieves console variable as a string.
---@param cvar string Name of console variable
---@param default any The value to return if the console variable does not exist
---@return string Retrieved value
function cvars.String(cvar, default) end

debug = {}

---[SHARED] Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.
--- 
--- Commands for debug.debug are not lexically nested within any function, and so have no direct access to local variables.
--- This only works on the source dedicated server.
--- To exit this interactive mode, you can press Ctrl + Z then Enter OR type the word 'cont' on a single line and press enter.
function debug.debug() end

---[SHARED] Returns the environment of the passed object. This can be set with debug.setfenv
---@param object table Object to get environment of
---@return table Environment
function debug.getfenv(object) end

---[SHARED] Returns the current hook settings of the passed thread. The thread argument can be omitted. This is completely different to gamemode hooks. More information on hooks can be found at http://www.lua.org/pil/23.2.html
---@param thread thread Which thread to retrieve its hook from
---@return function, string, number function - Hook function
---@return function, string, number string - Hook mask
---@return function, string, number number - Hook count
function debug.gethook(thread) end

---[SHARED] Returns debug information about a function.
---@param funcOrStackLevel function Takes either a function or a number representing the stack level as an argument. Stack level 0 always corresponds to the debug.getinfo call, 1 would be the function calling debug.getinfo, and so on. Returns useful information about that function in a table.
---@param fields string A string whose characters specify the information to be retrieved.  f - Populates the func field. l - Populates the currentline field. L - Populates the activelines field. n - Populates the name and namewhat fields - only works if stack level is passed rather than function pointer. S - Populates the location fields (lastlinedefined, linedefined, short_src, source and what). u - Populates the argument and upvalue fields (isvararg, nparams, nups)
---@return table A table as a Structures/DebugInfo containing information about the function you passed. Can return nil if the stack level didn't point to a valid stack frame.
function debug.getinfo(funcOrStackLevel, fields) end

---[SHARED] Gets the name and value of a local variable indexed from the level.
--- When a function has a tailcall return, you cannot access the locals of this function.
---@param thread thread The thread
---@param level number The level above the thread.  0 = the function that was called (most always this function)'s arguments 1 = the thread that had called this function. 2 = the thread that had called the function that started the thread that called this function.  A function defined in Lua can also be passed as the level. The index will specify the parameter's name to be returned (a parameter will have a value of nil).
---@param index number The variable's index you want to get.  1 = the first local defined in the thread 2 = the second local defined in the thread etc...
---@return string, any string - The name of the variable. Sometimes this will be (*temporary) if the local variable had no name. Variables with names starting with ( are internal variables.Variables with names starting with ( are internal variables.Variables with names starting with ( are internal variables.
---@return string, any any - The value of the local variable.
function debug.getlocal(thread, level, index) end

---[SHARED] Returns the metatable of an object. This function ignores the metatable's __metatable field.
---@param object any The object to retrieve the metatable from.
---@return table The metatable of the given object.
function debug.getmetatable(object) end

---[SHARED] Returns the internal Lua registry table.
--- The Lua registry is used by the engine and binary modules to create references to Lua values. Avoid creating entries into the registry with a number as the key, as they are reserved for the reference system.
--- Improper editing of the registry can result in unintended side effects, including crashing of the game.
---@return table The Lua registry
function debug.getregistry() end

---[SHARED] Used for getting variable values in an index from the passed function. This does nothing for C functions.
---@param func function Function to get the upvalue indexed from.
---@param index number The index in the upvalue array. The max number of entries can be found in debug.getinfo's "nups" key.
---@return string, any string - Name of the upvalue. Will be nil if the index was out of range (< 1 or > debug.getinfo.nups), or the function was defined in C.
---@return string, any any - Value of the upvalue.
function debug.getupvalue(func, index) end

---[SHARED] Sets the environment of the passed object.
---@param object table Object to set environment of
---@param env table Environment to set
---@return table The object
function debug.setfenv(object, env) end

---[SHARED] Sets the given function as a Lua hook. This is completely different to gamemode hooks. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook. This is used by default for infinite loop detection. More information on hooks can be found at http://www.lua.org/pil/23.2.html and https://www.gammon.com.au/scripts/doc.php?lua=debug.sethook
--- Hooks are not always ran when code that has been compiled by LuaJIT's JIT compiler is being executed, this is due to Intermediate Representation internally storing constantly running bytecode for performance reasons.
---@param thread thread Thread to set the hook on. This argument can be omited
---@param hook function Function for the hook to call. First argument in this function will be the mask event that called the hook as a full string (not as 'c' but instead as 'call').
---@param mask string The hook's mask. Can be one or more of the following events:  c - Triggers the hook on each function call made from Lua. r - Triggers the hook on each function return made from Lua. l - Triggers the hook on each line compiled of code. t - Triggers the hook on each function call made from Lua or C/C++. u - Triggers the hook on each function return made from Lua or C/C++. k - Triggers the hook on each function call or return made from Lua or C/C++.
---@param count number How often to call the hook (in instructions). 0 for every instruction
function debug.sethook(thread, hook, mask, count) end

---[SHARED] This function was removed due to security concerns.
--- Sets a local variable's value.
---@param thread thread The thread
---@param level number The level above the thread. 0 is the function that was called (most always this function)'s arguments 1 is the thread that had called this function. 2 is the thread that had called the function that started the thread that called this function.
---@param index number The variable's index you want to get. 1 = the first local defined in the thread 2 = the second local defined in the thread
---@param value any The value to set the local to
---@return string The name of the local variable if the local at the index exists, otherwise nil is returned.
function debug.setlocal(thread, level, index, value) end

---[SHARED] Sets the object's metatable. Unlike setmetatable, this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil.
---@param object any Object to set the metatable for.
---@param metatable table The metatable to set for the object. If this argument is nil, then the object's metatable is removed.
---@return boolean true if the object's metatable was set successfully.
function debug.setmetatable(object, metatable) end

---[SHARED] This function was removed due to security concerns.
--- Sets the variable indexed from func
---@param func function The function to index the upvalue from
---@param index number The index from func
---@param val any The value to set the upvalue to.
---@return string Returns nil if there is no upvalue with the given index, otherwise it returns the upvalue's name.
function debug.setupvalue(func, index, val) end

---[SHARED] Prints out the lua function call stack to the console.
function debug.Trace() end

---[SHARED] Returns a full execution stack trace.
---@param thread thread Thread (ie. error object from xpcall error handler) to build traceback for. If this argument is not set to a proper thread it will act as the next argument.
---@param message string Appended at the beginning of the traceback.
---@param level number Which level to start the traceback.
---@return string A dump of the execution stack.
function debug.traceback(thread, message, level) end

---[SHARED] This function was removed due to security concerns.
--- Returns an unique identifier for the upvalue indexed from func
---@param func function The function to index the upvalue from
---@param index number The index from func
---@return number A unique identifier
function debug.upvalueid(func, index) end

---[SHARED] This function was removed due to security concerns.
--- Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2.
---@param f1 function 
---@param n1 number 
---@param f2 function 
---@param n2 number 
function debug.upvaluejoin(f1, n1, f2, n2) end

debugoverlay = {}

---[SHARED] Displays an axis indicator at the specified position.
--- This function will silently fail if the developer ConVar is set to 0
---@param origin Vector Position origin
---@param ang Angle Angle of the axis
---@param size number Size of the axis
---@param lifetime number Number of seconds to appear
---@param ignoreZ boolean If true, will draw on top of everything; ignoring the Z buffer
function debugoverlay.Axis(origin, ang, size, lifetime, ignoreZ) end

---[SHARED] Displays a solid coloured box at the specified position.
--- This function will silently fail if the developer ConVar is set to 0.
---@param origin Vector Position origin
---@param mins Vector Minimum bounds of the box
---@param maxs Vector Maximum bounds of the box
---@param lifetime number Number of seconds to appear
---@param color table The color of the box. Uses the Color
function debugoverlay.Box(origin, mins, maxs, lifetime, color) end

---[SHARED] Displays a solid colored rotated box at the specified position.
--- This function will silently fail if the developer ConVar is set to 0.
---@param pos Vector World position
---@param mins Vector The mins of the box (lowest corner)
---@param maxs Vector The maxs of the box (highest corner)
---@param ang Angle The angle to draw the box at
---@param lifetime number Amount of seconds to show the box
---@param color table The color of the box. Uses the Color
function debugoverlay.BoxAngles(pos, mins, maxs, ang, lifetime, color) end

---[SHARED] Creates a coloured cross at the specified position for the specified time.
--- This function will silently fail if the developer ConVar is set to 0.
---@param position Vector Position origin
---@param size number Size of the cross
---@param lifetime number Number of seconds the cross will appear for
---@param color table The color of the cross. Uses the Color
---@param ignoreZ boolean If true, will draw on top of everything; ignoring the Z buffer
function debugoverlay.Cross(position, size, lifetime, color, ignoreZ) end

---[SHARED] Displays 2D text at the specified coordinates.
--- This function will silently fail if the developer ConVar is set to 0.
---@param pos Vector The position in 3D to display the text.
---@param line number Line of text, will offset text on the to display the new line unobstructed
---@param text string The text to display
---@param lifetime number Number of seconds to appear
---@param color table The color of the box. Uses the Color
function debugoverlay.EntityTextAtPosition(pos, line, text, lifetime, color) end

---[SHARED] Draws a 3D grid of limited size in given position.
--- This function will silently fail if the developer ConVar is set to 0.
---@param position Vector 
function debugoverlay.Grid(position) end

---[SHARED] Displays a coloured line at the specified position.
--- This function will silently fail if the developer ConVar is set to 0.
---@param pos1 Vector First position of the line
---@param pos2 Vector Second position of the line
---@param lifetime number Number of seconds to appear
---@param color table The color of the line. Uses the Color
---@param ignoreZ boolean If true, will draw on top of everything; ignoring the Z buffer
function debugoverlay.Line(pos1, pos2, lifetime, color, ignoreZ) end

---[SHARED] Displays text triangle at the specified coordinates.
--- This function will silently fail if the developer ConVar is set to 0.
---@param x number The position of the text, from 0 ( left ) to 1 ( right ).
---@param y number The position of the text, from 0 ( top ) to 1 ( bottom ).
---@param text string The text to display
---@param lifetime number Number of seconds to appear
---@param color table The color of the box. Uses the Color
function debugoverlay.ScreenText(x, y, text, lifetime, color) end

---[SHARED] Displays a coloured sphere at the specified position.
--- This function will silently fail if the developer ConVar is set to 0.
---@param origin Vector Position origin
---@param size number Size of the sphere
---@param lifetime number Number of seconds to appear
---@param color table The color of the sphere. Uses the Color
---@param ignoreZ boolean If true, will draw on top of everything; ignoring the Z buffer
function debugoverlay.Sphere(origin, size, lifetime, color, ignoreZ) end

---[SHARED] Displays "swept" box, two boxes connected with lines by their verices.
--- This function will silently fail if the developer ConVar is set to 0.
---@param vStart Vector The start position of the box.
---@param vEnd Vector The end position of the box.
---@param vMins Vector The "minimum" edge of the box.
---@param vMaxs Vector The "maximum" edge of the box.
---@param ang Angle 
---@param lifetime number Number of seconds to appear
---@param color table The color of the box. Uses the Color
function debugoverlay.SweptBox(vStart, vEnd, vMins, vMaxs, ang, lifetime, color) end

---[SHARED] Displays text at the specified position.
--- This function will silently fail if the developer ConVar is set to 0.
---@param origin Vector Position origin
---@param text string String message to display
---@param lifetime number Number of seconds to appear
---@param viewCheck boolean Clip text that is obscured
function debugoverlay.Text(origin, text, lifetime, viewCheck) end

---[SHARED] Displays a colored triangle at the specified coordinates.
--- This function will silently fail if the developer ConVar is set to 0.
---@param pos1 Vector First point of the triangle
---@param pos2 Vector Second point of the triangle
---@param pos3 Vector Third point of the triangle
---@param lifetime number Number of seconds to appear
---@param color table The color of the box. Uses the Color
---@param ignoreZ boolean If true, will draw on top of everything; ignoring the Z buffer
function debugoverlay.Triangle(pos1, pos2, pos3, lifetime, color, ignoreZ) end

derma = {}

---[CLIENT] Gets the color from a Derma skin of a panel and returns default color if not found
---@param name string 
---@param pnl Panel 
---@param default table The default color in case of failure.
function derma.Color(name, pnl, default) end

---[CLIENT] Defines a new Derma control with an optional base.
--- This calls vgui.Register internally, but also does the following:
--- 
--- Adds the control to derma.GetControlList
--- Adds a key "Derma" - This is returned by derma.GetControlList
--- Makes a global table with the name of the control (This is technically deprecated and should not be relied upon)
--- If reloading (i.e. called this function with name of an existing panel), updates all existing instances of panels with this name. (Updates functions, calls PANEL:PreAutoRefresh and PANEL:PostAutoRefresh, etc.)
---@param name string Name of the newly created control
---@param description string Description of the control
---@param tab table Table containing control methods and properties
---@param base string Derma control to base the new control off of
---@return table A table containing the new control's methods and properties
function derma.DefineControl(name, description, tab, base) end

---[CLIENT] Defines a new skin so that it is usable by Derma. The default skin can be found in garrysmod/lua/skins/default.lua
---@param name string Name of the skin
---@param descriptions string Description of the skin
---@param skin table Table containing skin data
function derma.DefineSkin(name, descriptions, skin) end

---[CLIENT] Returns the derma.Controls table, a list of all derma controls registered with derma.DefineControl.
---@return table A listing of all available derma-based controls. See derma.Controls for structure and contents.
function derma.GetControlList() end

---[CLIENT] Returns the default skin table, which can be changed with the hook GM:ForceDermaSkin
---@return table Skin table
function derma.GetDefaultSkin() end

---[CLIENT] Returns the skin table of the skin with the supplied name
---@param name string Name of skin
---@return table Skin table
function derma.GetNamedSkin(name) end

---[CLIENT] Returns a copy of the table containing every Derma skin
---@return table Table of every Derma skin
function derma.GetSkinTable() end

---[CLIENT] Clears all cached panels so that they reassess which skin they should be using.
function derma.RefreshSkins() end

---[CLIENT] Returns how many times derma.RefreshSkins has been called.
---@return number Amount of times derma.RefreshSkins has been called.
function derma.SkinChangeIndex() end

---[CLIENT] Calls the specified hook for the given panel
---@param type string The type of hook to run
---@param name string The name of the hook to run
---@param panel Panel The panel to call the hook for
---@param w number The width of the panel
---@param h number The height of the panel
---@return any The returned variable from the skin hook
function derma.SkinHook(type, name, panel, w, h) end

---[CLIENT] Returns a function to draw a specified texture of panels skin.
---@param name string The identifier of the texture
---@param pnl Panel Panel to get the skin of.
---@param fallback any What to return if we failed to retrieve the texture
---@return function A function that is created with the GWEN to draw a texture.
function derma.SkinTexture(name, pnl, fallback) end

dragndrop = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Calls the receiver function of hovered panel.
---@param bDoDrop boolean true if the mouse was released, false if we right clicked.
---@param command number The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil )
---@param mx number The local to the panel mouse cursor X position when the click happened.
---@param my number The local to the panel  mouse cursor Y position when the click happened.
function dragndrop.CallReceiverFunction(bDoDrop, command, mx, my) end

---[CLIENT] Clears all the internal drag'n'drop variables.
function dragndrop.Clear() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Handles the drop action of drag'n'drop library.
function dragndrop.Drop() end

---[CLIENT] Returns a table of currently dragged panels.
---@param name string If set, the function will return only the panels with this Panel:Droppable name.
---@return table A table of all panels that are being currently dragged, if any.
function dragndrop.GetDroppable(name) end

---[CLIENT] If returns true, calls dragndrop.StopDragging in dragndrop.Drop. Seems to be broken and does nothing. Is it for override?
function dragndrop.HandleDroppedInGame() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Handles the hover think. Called from dragndrop.Think.
function dragndrop.HoverThink() end

---[CLIENT] Returns whether the user is dragging something with the drag'n'drop system.
---@return boolean True if the user is dragging something with the drag'n'drop system.
function dragndrop.IsDragging() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Starts the drag'n'drop.
function dragndrop.StartDragging() end

---[CLIENT] Stops the drag'n'drop and calls dragndrop.Clear.
function dragndrop.StopDragging() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Handles all the drag'n'drop processes. Calls dragndrop.UpdateReceiver and dragndrop.HoverThink.
function dragndrop.Think() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Updates the receiver to drop the panels onto. Called from dragndrop.Think.
function dragndrop.UpdateReceiver() end

draw = {}

---[CLIENT] Simple draw text at position, but this will expand newlines and tabs.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
--- See also MarkupObject for limited width and markup support.
---@param text string Text to be drawn.
---@param font string Name of font to draw the text in. See surface.CreateFont to create your own, or Default Fonts for a list of default fonts.
---@param x number The X Coordinate.
---@param y number The Y Coordinate.
---@param color table Color to draw the text in. Uses the Color.
---@param xAlign number Where to align the text horizontally. Uses the Enums/TEXT_ALIGN.
function draw.DrawText(text, font, x, y, color, xAlign) end

---[CLIENT] Returns the height of the specified font in pixels. This is equivalent to the height of the character W. See surface.GetTextSize.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param font string Name of the font to get the height of.
---@return number The font height
function draw.GetFontHeight(font) end

---[CLIENT] Sets drawing texture to a default white texture (vgui/white) via surface.SetMaterial. Useful for resetting the drawing texture.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
function draw.NoTexture() end

---[CLIENT] Draws a rounded rectangle.
--- If you do not define a cornerRadius, surface.DrawRect will be used instead for performance.This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param cornerRadius number Radius of the rounded corners, works best with a multiple of 2.
---@param x number The x coordinate of the top left of the rectangle.
---@param y number The y coordinate of the top left of the rectangle.
---@param width number The width of the rectangle.
---@param height number The height of the rectangle.
---@param color table The color to fill the rectangle with. Uses the Color.
function draw.RoundedBox(cornerRadius, x, y, width, height, color) end

---[CLIENT] Draws a rounded rectangle. This function also lets you specify which corners are drawn rounded.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param cornerRadius number Radius of the rounded corners, works best with a power of 2 number.
---@param x number The x coordinate of the top left of the rectangle.
---@param y number The y coordinate of the top left of the rectangle.
---@param width number The width of the rectangle.
---@param height number The height of the rectangle.
---@param color table The color to fill the rectangle with. Uses the Color.
---@param roundTopLeft boolean Whether the top left corner should be rounded.
---@param roundTopRight boolean Whether the top right corner should be rounded.
---@param roundBottomLeft boolean Whether the bottom left corner should be rounded.
---@param roundBottomRight boolean Whether the bottom right corner should be rounded.
function draw.RoundedBoxEx(cornerRadius, x, y, width, height, color, roundTopLeft, roundTopRight, roundBottomLeft, roundBottomRight) end

---[CLIENT] Draws text on the screen.
--- This function does not handle newlines properly. See draw.DrawText for a function that does.This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param text string The text to be drawn.
---@param font string The font. See surface.CreateFont to create your own, or see Default Fonts for a list of default fonts.
---@param x number The X Coordinate.
---@param y number The Y Coordinate.
---@param color table The color of the text. Uses the Color.
---@param xAlign number The alignment of the X coordinate using Enums/TEXT_ALIGN.
---@param yAlign number The alignment of the Y coordinate using Enums/TEXT_ALIGN.
---@return number, number number - The width of the text. Same value as if you were calling surface.GetTextSize.
---@return number, number number - The height of the text. Same value as if you were calling surface.GetTextSize.
function draw.SimpleText(text, font, x, y, color, xAlign, yAlign) end

---[CLIENT] Creates a simple line of text that is outlined.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param Text string The text to draw.
---@param font string The font name to draw with. See surface.CreateFont to create your own, or here for a list of default fonts.
---@param x number The X Coordinate.
---@param y number The Y Coordinate.
---@param color table The color of the text. Uses the Color.
---@param xAlign number The alignment of the X Coordinate using Enums/TEXT_ALIGN.
---@param yAlign number The alignment of the Y Coordinate using Enums/TEXT_ALIGN.
---@param outlinewidth number Width of the outline.
---@param outlinecolor table Color of the outline. Uses the Color.
---@return number, number number - The width of the text. Same value as if you were calling surface.GetTextSize.
---@return number, number number - The height of the text. Same value as if you were calling surface.GetTextSize.
function draw.SimpleTextOutlined(Text, font, x, y, color, xAlign, yAlign, outlinewidth, outlinecolor) end

---[CLIENT] Works like draw.SimpleText but uses a table structure instead.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param textdata table The text properties. See the Structures/TextData
---@return number, number number - Width of drawn text
---@return number, number number - Height of drawn text
function draw.Text(textdata) end

---[CLIENT] Works like draw.Text, but draws the text as a shadow.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param textdata table The text properties. See Structures/TextData
---@param distance number How far away the shadow appears.
---@param alpha number How visible the shadow is (0-255).
function draw.TextShadow(textdata, distance, alpha) end

---[CLIENT] Draws a texture with a table structure.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param texturedata table The texture properties. See Structures/TextureData.
function draw.TexturedQuad(texturedata) end

---[CLIENT] Draws a rounded box with text in it.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param bordersize number Size of border, should be multiple of 2. Ideally this will be 8 or 16.
---@param x number The X Coordinate.
---@param y number The Y Coordinate.
---@param text string Text to draw.
---@param font string Font to draw in. See surface.CreateFont to create your own, or here for a list of default fonts.
---@param boxcolor table The box color. Uses the Color.
---@param textcolor table The text color. Uses the Color.
---@param xalign number The alignment of the X coordinate using Enums/TEXT_ALIGN.
---@param yalign number The alignment of the Y coordinate using Enums/TEXT_ALIGN.
---@return number, number number - The width of the word box.
---@return number, number number - The height of the word box.
function draw.WordBox(bordersize, x, y, text, font, boxcolor, textcolor, xalign, yalign) end

drive = {}

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Optionally alter the view.
---@param ply Player The player
---@param view table The view, see Structures/ViewData
---@return boolean true if succeeded
function drive.CalcView(ply, view) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Clientside, the client creates the cmd (usercommand) from their input device (mouse, keyboard) and then it's sent to the server. Restrict view angles here.
---@param cmd CUserCmd The user command
---@return boolean true if succeeded
function drive.CreateMove(cmd) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Destroys players current driving method.
---@param ply Player The player to affect
function drive.DestroyMethod(ply) end

---[SHARED] Player has stopped driving the entity.
---@param ply Player The player
---@param ent Entity The entity
function drive.End(ply, ent) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- The move is finished. Copy mv back into the target.
---@param ply Player The player
---@param mv CMoveData The move data
---@return boolean true if succeeded
function drive.FinishMove(ply, mv) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Returns ( or creates if inexistent ) a driving method.
---@param ply Player The player
---@return table A method object.
function drive.GetMethod(ply) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- The move is executed here.
---@param ply Player The player
---@param mv CMoveData The move data
---@return boolean true if succeeded
function drive.Move(ply, mv) end

---[SHARED] Starts driving for the player.
---@param ply Player The player to affect
---@param ent Entity The entity to drive
---@param mode string The driving mode
function drive.PlayerStartDriving(ply, ent, mode) end

---[SHARED] Stops the player from driving anything. ( For example a prop in sandbox )
---@param ply Player The player to affect
function drive.PlayerStopDriving(ply) end

---[SHARED] Registers a new entity drive.
---@param name string The name of the drive.
---@param data table The data required to create the drive. This includes the functions used by the drive.
---@param base string The base of the drive.
function drive.Register(name, data, base) end

---[SHARED] Called when the player first starts driving this entity
---@param ply Player The player
---@param ent Entity The entity
function drive.Start(ply, ent) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- The user command is received by the server and then converted into a move. This is also run clientside when in multiplayer, for prediction to work.
---@param ply Player The player
---@param mv CMoveData The move data
---@param cmd CUserCmd The user command
---@return boolean true if succeeded
function drive.StartMove(ply, mv, cmd) end

duplicator = {}

---[SHARED] Allow this entity to be duplicated
---@param classname string An entity's classname
function duplicator.Allow(classname) end

---[SERVER] Calls every function registered with duplicator.RegisterBoneModifier on each bone the ent has.
---@param ply Player The player whose entity this is
---@param ent Entity The entity in question
function duplicator.ApplyBoneModifiers(ply, ent) end

---[SERVER] Calls every function registered with duplicator.RegisterEntityModifier on the entity.
---@param ply Player The player whose entity this is
---@param ent Entity The entity in question
function duplicator.ApplyEntityModifiers(ply, ent) end

---[SERVER] Clears/removes the chosen entity modifier from the entity.
---@param ent Entity The entity the modification is stored on
---@param key any The key of the stored entity modifier
function duplicator.ClearEntityModifier(ent, key) end

---[SERVER] Copies the entity, and all of its constraints and entities, then returns them in a table.
---@param ent Entity The entity to duplicate. The function will automatically copy all constrained entities.
---@param tableToAdd table A preexisting table to add entities and constraints in from. Uses the same table format as the table returned from this function.
---@return table A table containing duplication info which includes the following members:  table Entities table Constraints Vector Mins Vector Maxs  The values of Mins & Maxs from the table are returned from duplicator.WorkoutSize
function duplicator.Copy(ent, tableToAdd) end

---[SERVER] Copies the passed table of entities to save for later.
---@param ents table A table of entities to save/copy.
---@return table A table containing duplication info which includes the following members:  table Entities table Constraints Vector Mins Vector Maxs
function duplicator.CopyEnts(ents) end

---[SERVER] Returns a table with some entity data that can be used to create a new entity with duplicator.CreateEntityFromTable
---@param ent Entity The entity table to save
---@return table See Structures/EntityCopyData
function duplicator.CopyEntTable(ent) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Creates a constraint from a saved/copied constraint table.
---@param constraint table Saved/copied constraint table
---@param entityList table The list of entities that are to be constrained
---@return Entity The newly created constraint entity
function duplicator.CreateConstraintFromTable(constraint, entityList) end

---[SERVER] "Create an entity from a table."
--- This creates an entity using the data in EntTable.
--- If an entity factory has been registered for the entity's Class, it will be called.
--- Otherwise, duplicator.GenericDuplicatorFunction will be called instead.
---@param ply Player The player who wants to create something
---@param entTable table The duplication data to build the entity with. See Structures/EntityCopyData
---@return Entity The newly created entity
function duplicator.CreateEntityFromTable(ply, entTable) end

---[SERVER] "Restores the bone's data."
--- Loops through Bones and calls Entity:ManipulateBoneScale, Entity:ManipulateBoneAngles and Entity:ManipulateBonePosition on ent with the table keys and the subtable values s, a and p respectively.
---@param ent Entity The entity to be bone manipulated
---@param bones table Table with a Structures/BoneManipulationData for every bone (that has manipulations applied) using the bone ID as the table index.
function duplicator.DoBoneManipulator(ent, bones) end

---[SERVER] Restores the flex data using Entity:SetFlexWeight and Entity:SetFlexScale
---@param ent Entity The entity to restore the flexes on
---@param flex table The flexes to restore
---@param scale number The flex scale to apply. (Flex scale is unchanged if omitted)
function duplicator.DoFlex(ent, flex, scale) end

---[SERVER] "Applies generic every-day entity stuff for ent from table data."
--- Depending on the values of Model, Angle, Pos, Skin, Flex, Bonemanip, ModelScale, ColGroup, Name, and BodyG (table of multiple values) in the data table, this calls Entity:SetModel, Entity:SetAngles, Entity:SetPos, Entity:SetSkin, duplicator.DoFlex, duplicator.DoBoneManipulator, Entity:SetModelScale, Entity:SetCollisionGroup, Entity:SetName, Entity:SetBodygroup on ent.
--- If ent has a RestoreNetworkVars function, it is called with data.DT.
---@param ent Entity The entity to be applied upon
---@param data table The data to be applied onto the entity
function duplicator.DoGeneric(ent, data) end

---[SERVER] "Applies bone data, generically."
--- If data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates.
---@param ent Entity The entity to be applied upon
---@param ply Player The player who owns the entity. Unused in function as of early 2013
---@param data table The data to be applied onto the entity
function duplicator.DoGenericPhysics(ent, ply, data) end

---[SHARED] Returns the entity class factory registered with duplicator.RegisterEntityClass.
---@param name string The name of the entity class factory
---@return table Is compromised of the following members:  function Func - The function that creates the entity table Args - Arguments to pass to the function
function duplicator.FindEntityClass(name) end

---[SERVER] "Generic function for duplicating stuff"
--- This is called when duplicator.CreateEntityFromTable can't find an entity factory to build with. It calls duplicator.DoGeneric and duplicator.DoGenericPhysics to apply standard duplicator stored things such as the model and position.
---@param ply Player The player who wants to create something
---@param data table The duplication data to build the entity with
---@return Entity The newly created entity
function duplicator.GenericDuplicatorFunction(ply, data) end

---[SERVER] This is used internally - although you're able to use it you probably shouldn't.
--- Fills entStorageTable with all of the entities in a group connected with constraints. Fills constraintStorageTable with all of the constrains constraining the group.
---@param ent Entity The entity to start from
---@param entStorageTable table The table the entities will be inserted into
---@param constraintStorageTable table The table the constraints will be inserted into
---@return table, table table - entStorageTable
---@return table, table table - constraintStorageTable
function duplicator.GetAllConstrainedEntitiesAndConstraints(ent, entStorageTable, constraintStorageTable) end

---[SHARED] Returns whether the entity can be duplicated or not
---@param classname string An entity's classname
---@return boolean Returns true if the entity can be duplicated (nil otherwise)
function duplicator.IsAllowed(classname) end

---[SERVER] "Given entity list and constraint list, create all entities and return their tables"
--- Calls duplicator.CreateEntityFromTable on each sub-table of EntityList. If an entity is actually created, it calls ENTITY:OnDuplicated with the entity's duplicator data, then duplicator.ApplyEntityModifiers, duplicator.ApplyBoneModifiers and finally  ENTITY:PostEntityPaste is called.
--- The constraints are then created with duplicator.CreateConstraintFromTable.
---@param Player Player The player who wants to create something
---@param EntityList table A table of duplicator data to create the entities from
---@param ConstraintList table A table of duplicator data to create the constraints from
---@return table, table table - List of created entities
---@return table, table table - List of created constraints
function duplicator.Paste(Player, EntityList, ConstraintList) end

---[SHARED] Registers a function to be called on each of an entity's bones when duplicator.ApplyBoneModifiers is called.
--- This function is available to call on the client, but registered functions aren't used anywhere!
---@param key any The type of the key doesn't appear to matter, but it is preferable to use a string.
---@param boneModifier function Function called on each bone that an ent has. Called during duplicator.ApplyBoneModifiers. Function parameters are:  Player ply Entity ent number boneID PhysObj bone table data  The data table that is passed to boneModifier is set with duplicator.StoreBoneModifier
function duplicator.RegisterBoneModifier(key, boneModifier) end

---[SHARED] Register a function used for creating a duplicated constraint.
---@param name string The unique name of new constraint
---@param callback function Function to be called when this constraint is created
---@param ... any Arguments passed to the callback function
function duplicator.RegisterConstraint(name, callback, ...) end

---[SHARED] This allows you to specify a specific function to be run when your SENT is pasted with the duplicator, instead of relying on the generic automatic functions.
--- Automatically calls duplicator.Allow for the entity class.
---@param name string The ClassName of the entity you wish to register a factory for
---@param _function function The factory function you want to have called. It should have the arguments (Player, ...) where ... is whatever arguments you request to be passed. It also should return the entity created, otherwise duplicator.Paste result will not include it!
---@param ... ... Strings of the names of arguments you want passed to function the from the Structures/EntityCopyData. As a special case, "Data" will pass the whole structure.
function duplicator.RegisterEntityClass(name, _function, ...) end

---[SHARED] This allows you to register tweaks to entities. For instance, if you were making an "unbreakable" addon, you would use this to enable saving the "unbreakable" state of entities between duplications.
--- This function registers a piece of generic code that is run on all entities with this modifier. In order to have it actually run, use duplicator.StoreEntityModifier.
--- This function does nothing when run clientside.
---@param name string An identifier for your modification. This is not limited, so be verbose. Person's 'Unbreakable' mod is far less likely to cause conflicts than unbreakable
---@param func function The function to be called for your modification. It should have the arguments (Player, Entity, Data), where data is what you pass to duplicator.StoreEntityModifier.
function duplicator.RegisterEntityModifier(name, func) end

---[SERVER] Help to remove certain map created entities before creating the saved entities
--- This is obviously so we don't get duplicate props everywhere.
--- It should be called before calling Paste.
function duplicator.RemoveMapCreatedEntities() end

---[SHARED] "When a copy is copied it will be translated according to these.
--- If you set them - make sure to set them back to 0 0 0!"
---@param v Angle The angle to offset all pastes from
function duplicator.SetLocalAng(v) end

---[SHARED] "When a copy is copied it will be translated according to these.
--- If you set them - make sure to set them back to 0 0 0!"
---@param v Vector The position to offset all pastes from
function duplicator.SetLocalPos(v) end

---[SERVER] Stores bone mod data for a registered bone modification function
---@param ent Entity The entity to add bone mod data to
---@param boneID number The bone ID. See Entity:GetPhysicsObjectNum
---@param key any The key for the bone modification
---@param data table The bone modification data that is passed to the bone modification function
function duplicator.StoreBoneModifier(ent, boneID, key, data) end

---[SERVER] Stores an entity modifier into an entity for saving
---@param entity Entity The entity to store modifier in
---@param name string Unique modifier name as defined in duplicator.RegisterEntityModifier
---@param data table Modifier data
function duplicator.StoreEntityModifier(entity, name, data) end

---[SERVER] Works out the AABB size of the duplication
---@param Ents table A table of entity duplication datums.
---@return vector, vector vector - AABB mins vector
---@return vector, vector vector - AABB maxs vector
function duplicator.WorkoutSize(Ents) end

effects = {}

---[SHARED] Creates a "beam ring point" effect.
---@param pos Vector The origin position of the effect.
---@param lifetime number How long the effect will be drawing for, in seconds.
---@param startRad number Initial radius of the effect.
---@param endRad number Final radius of the effect, at the end of the effect's lifetime.
---@param width number How thick the beam should be.
---@param amplitude number How noisy the beam should be.
---@param color table Beam's Color.
---@param extra table Extra info, all optional. A table with the following keys: (any combination)  number speed - ? number spread - ? number delay - Delay in seconds after which the effect should appear. number flags- Beam flags. number framerate - texture framerate. string material - The material to use instead of the default one.
function effects.BeamRingPoint(pos, lifetime, startRad, endRad, width, amplitude, color, extra) end

---[SHARED] Creates a bunch of bubbles inside a defined box.
---@param mins Vector The lowest extents of the box.
---@param maxs Vector The highest extents of the box.
---@param count number How many bubbles to spawn. There's a hard limit of 500 tempents at any time.
---@param height number How high the bubbles can fly up before disappearing.
---@param speed number How quickly the bubbles move.
---@param delay number Delay in seconds after the function call and before the effect actually spawns.
function effects.Bubbles(mins, maxs, count, height, speed, delay) end

---[SHARED] Creates a bubble trail effect, the very same you get when shooting underwater.
---@param startPos Vector The start position of the effect.
---@param endPos Vector The end position of the effects.
---@param count number How many bubbles to spawn. There's a hard limit of 500 tempents at any time.
---@param height number How high the bubbles can fly up before disappearing.
---@param speed number How quickly the bubbles move.
---@param delay number Delay in seconds after the function call and before the effect actually spawns.
function effects.BubbleTrail(startPos, endPos, count, height, speed, delay) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- You are looking for util.Effect.
--- Returns the table of the effect specified.
---@param name string Effect name.
---@return table Effect table.
function effects.Create(name) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns a list of all Lua-defined effects.
---@return table The effects table.
function effects.GetList() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Registers a new effect.
---@param effect_table table Effect table.
---@param name string Effect name.
function effects.Register(effect_table, name) end

engine = {}

---[SHARED] Returns the name of the currently running gamemode.
---@return string The active gamemode's name. This is the name of the gamemode's folder.
function engine.ActiveGamemode() end

---[SERVER] Closes the server and completely exits.
--- This is only functional when running in server test mode (launch option -systemtest). Server test mode is used internally at Facepunch as part of the build process to make sure that the dedicated servers aren't crashing on startup.
function engine.CloseServer() end

---[SHARED] Returns a list of addons the player have subscribed to on the workshop.
--- This list will also include "Floating" .gma addons that are mounted by the game, but not the folder addons.
---@return table A table of tables containing 8 keys (downloaded, models, title, file, mounted, wsid, size, updated).
function engine.GetAddons() end

---[CLIENT] When starting playing a demo, engine.GetDemoPlaybackTick will be reset and its old value will be added to this functions return value.
---@return number 
function engine.GetDemoPlaybackStartTick() end

---[CLIENT] Current tick of currently loaded demo.
--- If not playing a demo, it will return amount of ticks since last demo playback.
---@return number The amount of ticks of currently loaded demo.
function engine.GetDemoPlaybackTick() end

---[CLIENT] Returns time scale of demo playback.
--- If not during demo playback, returns 1.
---@return number The time scale of demo playback, value of demo_timescale console variable.
function engine.GetDemoPlaybackTimeScale() end

---[CLIENT] Returns total amount of ticks of currently loaded demo.
--- If not playing a demo, returns 0 or the value of last played demo.
---@return number Total amount of ticks of currently loaded demo.
function engine.GetDemoPlaybackTotalTicks() end

---[SHARED] Returns a table containing info for all installed gamemodes
---@return table gamemodes
function engine.GetGamemodes() end

---[SHARED] Returns an array of tables corresponding to all games from which Garry's Mod supports mounting content.
---@return table A table of tables containing all mountable games
function engine.GetGames() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Used internally for in-game menus, may be merged in the future into engine.GetAddons.
--- Returns the UGC (demos, saves and dupes) the player have subscribed to on the workshop.
---@return table Returns a table with 5 keys (title, type, tags, wsid, timeadded)
function engine.GetUserContent() end

---[CLIENT] Returns true if we're currently playing a demo.
--- You will notice that there's no server-side version of this. That's because there is no server when playing a demo. Demos are both recorded and played back purely clientside.
---@return boolean Whether the game is currently playing a demo or not.
function engine.IsPlayingDemo() end

---[CLIENT] Returns true if the game is currently recording a demo file (.dem) using gm_demo
---@return boolean Whether the game is currently recording a demo or not.
function engine.IsRecordingDemo() end

---[SERVER] This is a direct binding to the function engine->LightStyle. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. You’ll need to call render.RedownloadAllLightmaps clientside to refresh the lightmaps to this new color.
--- Calling this function with arguments 0 and "a" will cause dynamic lights such as those produced by the Light tool to stop working.Issue Tracker: 3626
---@param lightstyle number The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0.
---@param pattern string The pattern to change the lightstyle to. a is the darkest, z is the brightest. You can use stuff like "abcxyz" to make flashing patterns. The normal brightness for a map is m. Values over z are allowed, ~ for instance.
function engine.LightStyle(lightstyle, pattern) end

---[CLIENT] Loads a duplication from the local filesystem.
---@param dupeName string Name of the file. e.g, engine.OpenDupe("dupes/8b809dd7a1a9a375e75be01cdc12e61f.dupe")
---@return string Compressed dupeData. Use util.JSONToTable to make it into a format useable by the duplicator tool.
function engine.OpenDupe(dupeName) end

---[CLIENT] Returns an estimate of the server's performance. Equivalent to calling FrameTime from the server, according to source code.
---@return number, number number - Frame time.
---@return number, number number - Server Framerate Std Deviation.
function engine.ServerFrameTime() end

---[MENU] Sets the mounting options for mountable content.
---@param depotID string The depot id of the game to mount.
---@param doMount boolean The mount state, true to mount, false to unmount
function engine.SetMounted(depotID, doMount) end

---[SHARED] Returns the number of ticks since the game server started.
---@return number Number of ticks since the game server started.
function engine.TickCount() end

---[SHARED] Returns the number of seconds between each gametick.
---@return number Number of seconds between each gametick.
function engine.TickInterval() end

---[CLIENT] Returns video recording settings set by video.Record. Used by Demo-To-Video feature.
---@return table The video recording settings, see Structures/VideoData.
function engine.VideoSettings() end

---[CLIENT] Saves a duplication as a file.
---@param dupe string Dupe table, encoded by util.TableToJSON and compressed by util.Compress
---@param jpeg string The dupe icon, created by render.Capture
function engine.WriteDupe(dupe, jpeg) end

---[CLIENT] Stores savedata into the game (can be loaded using the LoadGame menu)
---@param saveData string Data generated by gmsave.SaveMap
---@param name string Name the save will have.
---@param time number When the save was saved during the game (Put CurTime here)
---@param map string The map the save is used for.
function engine.WriteSave(saveData, name, time, map) end

ents = {}

---[SERVER] Creates an entity. This function will fail and return NULL if the networked-edict limit is hit (around 8176), or the provided entity class doesn't exist.
--- Do not use before GM:InitPostEntity has been called, otherwise the server will crash!
--- If you need to perform entity creation when the game starts, create a hook for GM:InitPostEntity and do it there.
---@param class string The classname of the entity to create.
---@return Entity The created entity, or NULL if failed.
function ents.Create(class) end

---[CLIENT] Creates a clientside only prop. See also ClientsideModel.
--- For physics to work you must use the model argument, a simple SetModel call will not be enough.
--- Parented clientside prop will become detached if the parent entity leaves the PVS. A workaround is available on its github page.Issue Tracker: 861
---@param model string The model for the entity to be created. Model must be precached with util.PrecacheModel on the server before usage.Model must be precached with util.PrecacheModel on the server before usage.Model must be precached with util.PrecacheModel on the server before usage.
---@return Entity Created entity (C_PhysPropClientside).
function ents.CreateClientProp(model) end

---[CLIENT] Creates a clientside only scripted entity. The scripted entity must be of "anim" type.
---@param class string The class name of the entity to create.
---@return Entity Created entity.
function ents.CreateClientside(class) end

---[SHARED] Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities.
---@param start Vector The start position of the ray
---@param _end Vector The end position of the ray
---@param mins Vector The mins corner of the ray
---@param maxs Vector The maxs corner of the ray
---@return table Table of the found entities.
function ents.FindAlongRay(start, _end, mins, maxs) end

---[SHARED] Gets all entities with the given class, supports wildcards. This works internally by iterating over ents.GetAll. Even if internally ents.GetAll is used, It is faster to use ents.FindByClass than ents.GetAll with a single class comparison.
--- Asterisks (*) are the only wildcard supported.
---@param class string The class of the entities to find.
---@return table A table containing all found entities
function ents.FindByClass(class) end

---[SHARED] Finds all entities that are of given class and are children of given entity. This works internally by iterating over ents.GetAll.
---@param class string The class of entities to search for
---@param parent Entity Parent of entities that are being searched for
---@return table A table of found entities or nil if none are found
function ents.FindByClassAndParent(class, parent) end

---[SHARED] Gets all entities with the given model, supports wildcards. This works internally by iterating over ents.GetAll.
---@param model string The model of the entities to find.
---@return table A table of all found entities.
function ents.FindByModel(model) end

---[SHARED] Gets all entities with the given hammer targetname. This works internally by iterating over ents.GetAll.
--- Doesn't do anything on client.
---@param name string The targetname to look for
---@return table A table of all found entities
function ents.FindByName(name) end

---[SHARED] Returns all entities within the specified box.
--- Clientside entities will not be returned by this function.There is a limit of 512 entities for the output!
---@param boxMins Vector The box minimum coordinates.
---@param boxMaxs Vector The box maximum coordinates.
---@return table A table of all found entities.
function ents.FindInBox(boxMins, boxMaxs) end

---[SHARED] Finds and returns all entities within the specified cone. Only entities whose Entity:WorldSpaceCenter is within the cone are considered to be in it.
--- The "cone" is actually a conical "slice" of an axis-aligned box (see: ents.FindInBox). The image to the right shows approximately how this function would look in 2D. Due to this, the entity may be farther than the specified range!
--- Clientside entities will not be returned by this function.If there are more than 512 entities in the axis-aligned box around the origin, then the result may be incomplete!
---@param origin Vector The tip of the cone.
---@param normal Vector Direction of the cone.
---@param range number The range of the cone/box around the origin. The function internally adds 1 to this argument before using it.The function internally adds 1 to this argument before using it.The function internally adds 1 to this argument before using it.
---@param angle_cos number The cosine of the angle between the center of the cone to its edges, which is half the overall angle of the cone. 1 makes a 0° cone, 0.707 makes approximately 90°, 0 makes 180°, and so on.
---@return table A table of all found Entitys.
function ents.FindInCone(origin, normal, range, angle_cos) end

---[SERVER] Finds all entities that lie within a PVS.
--- The function won't take in to account AddOriginToPVS and the like.
---@param viewPoint any Entity or Vector to find entities within the PVS of. If a player is given, this function will use the player's view entity.
---@return table The found Entitys.
function ents.FindInPVS(viewPoint) end

---[SHARED] Gets all entities within the specified sphere.
--- Clientside entities will not be returned by this function.
--- This function internally calls ents.FindInBox with some radius checks.
---@param origin Vector Center of the sphere.
---@param radius number Radius of the sphere.
---@return table A table of all found Entitys. Has a limit of 1024 entities.
function ents.FindInSphere(origin, radius) end

---[SERVER] Fires a use event.
---@param target string Name of the target entity.
---@param activator Entity Activator of the event.
---@param caller Entity Caller of the event.
---@param usetype number Use type. See the Enums/USE.
---@param value number This value is passed to ENTITY:Use, but isn't used by any default entities in the engine.
function ents.FireTargets(target, activator, caller, usetype, value) end

---[SHARED] Returns a table of all existing entities. The table is sequential
---@return table Table of all existing Entitys.
function ents.GetAll() end

---[SHARED] Returns an entity by its index. Same as Entity.
---@param entIdx number The index of the entity.
---@return Entity The entity if it exists.
function ents.GetByIndex(entIdx) end

---[SHARED] Gives you the amount of currently existing entities.
--- Similar to #ents.GetAll() but with better performance since the entity table doesn't have to be generated. If ents.GetAll is already being called for iteration, than using the # operator on the table will be faster than calling this function since it is JITted.
---@param IncludeKillMe boolean Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.
---@return number Number of entities
function ents.GetCount(IncludeKillMe) end

---[SERVER] Returns the amount of networked entities, which is limited to 8192. ents.Create will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents.
---@return number Number of networked entities
function ents.GetEdictCount() end

---[SERVER] Returns entity that has given Entity:MapCreationID.
---@param id number Entity's creation id
---@return Entity Found entity
function ents.GetMapCreatedEntity(id) end

file = {}

---[SHARED] Appends a file relative to the data folder.
---@param name string The file's name.
---@param content string The content which should be appended to the file.
function file.Append(name, content) end

---[SHARED] Returns the content of a file asynchronously.
--- All limitations of file.Read also apply.
--- This function is currently broken in the Menu State and won't be fixed. Bug Report
---@param fileName string The name of the file.
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
---@param callback function A callback function that will be called when the file read operation finishes. Arguments are:  string fileName - The fileName argument above. string gamePath - The gamePath argument above. number status - The status of the operation. The list can be found in Enums/FSASYNC. string data - The entirety of the data of the file.
---@param sync boolean If true the file will be read synchronously.
---@return number FSASYNC_OK on success, FSASYNC_ERR_ on failure.
function file.AsyncRead(fileName, gamePath, callback, sync) end

---[SHARED] Creates a directory that is relative to the data folder.
---@param name string The directory's name.
function file.CreateDir(name) end

---[SHARED] Deletes a file or empty folder that is relative to the data folder. You can't remove any files outside of data folder.
---@param name string The file name.
function file.Delete(name) end

---[SHARED] Returns a boolean of whether the file or directory exists or not.
--- This will sometimes return false clientside for directories received from the server via a clientside lua file. You can work around this by using file.Find with the path to the directory followed by a wildcard (no trailing forward slash) and see if the directory is inside the returned directories table (see second example).Issue Tracker: 1038
---@param name string The file or directory's name.
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
---@return boolean Returns true if the file exists and false if it does not.
function file.Exists(name, gamePath) end

---[SHARED] Returns a list of files and directories inside a single folder.
---@param name string The wildcard to search for. models/*.mdl will list .mdl files in the models/ folder.
---@param path string The path to look for the files and directories in. See this list for a list of valid paths.
---@param sorting string The sorting to be used, optional.  nameasc sort the files ascending by name. namedesc sort the files descending by name. dateasc sort the files ascending by date. datedesc sort the files descending by date.
---@return table, table table - A table of found files, or nil if the path is invalid
---@return table, table table - A table of found directories, or nil if the path is invalid
function file.Find(name, path, sorting) end

---[SHARED] Returns whether the given file is a directory or not.
--- This will sometimes return false clientside for directories received from the server via a clientside lua file. You can work around this by using file.Find with the path to the directory followed by a wildcard (no trailing forward slash) and see if the directory is inside the returned directories table (see second example).Issue Tracker: 1038
---@param fileName string The file or directory's name.
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
---@return boolean true if the given path is a directory or false if it's a file.
function file.IsDir(fileName, gamePath) end

---[SHARED] Attempts to open a file with the given mode.
---@param fileName string The files name. See file.Write for details on filename restrictions when writing to files.
---@param fileMode string The mode to open the file in. Possible values are:  r - read mode w - write mode a - append mode rb - binary read mode wb - binary write mode ab - binary append mode
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
---@return file_class The opened file object, or nil if it failed to open due to it not existing or being used by another process.
function file.Open(fileName, fileMode, gamePath) end

---[SHARED] Returns the content of a file.
--- Beware of casing -- some filesystems are case-sensitive. SRCDS on Linux seems to force file/directory creation to lowercase, but will not modify read operations.
---@param fileName string The name of the file.
---@param gamePath string The path to look for the files and directories in. If this argument is set to true then the path will be GAME, otherwise if the argument is false or nil then the path will be DATA. See this list for a list of valid paths.
---@return string The data from the file as a string, or nil if the file isn't found.
function file.Read(fileName, gamePath) end

---[SHARED] Attempts to rename a file with the given name to another given name.
--- This function is constrained to the data/ folder.
---@param orignalFileName string The original file or folder name. See file.Write for details on filename restrictions when writing to files. This argument will be forced lowercase.
---@param targetFileName string The target file or folder name. See file.Write for details on filename restrictions when writing to files. This argument will be forced lowercase.
---@return boolean true on success, false otherwise.
function file.Rename(orignalFileName, targetFileName) end

---[SHARED] Returns the file's size in bytes. If the file is not found, returns -1.
---@param fileName string The file's name.
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
function file.Size(fileName, gamePath) end

---[SHARED] Returns when the file or folder was last modified in Unix time.
---@param path string The file or folder path.
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
---@return number Seconds passed since Unix epoch.
function file.Time(path, gamePath) end

---[SHARED] Writes the given string to a file. Erases all previous data in the file. To add data without deleting previous data, use file.Append.
---@param fileName string The name of the file being written into. The path is relative to the data/ folder. This argument will be forced lowercase. The filename must end with one of the following:  .txt .dat .json .xml .csv .jpg .jpeg .png .vtf .vmt .mp3 .wav .ogg  Restricted symbols are: " :
---@param content string The content that will be written into the file.
function file.Write(fileName, content) end

frame_blend = {}

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds a frame to the blend. Calls frame_blend.CompleteFrame once enough frames have passed since last frame_blend.CompleteFrame call.
function frame_blend.AddFrame() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Blends the frame(s).
function frame_blend.BlendFrame() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Renders the frame onto internal render target.
function frame_blend.CompleteFrame() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Actually draws the frame blend effect.
function frame_blend.DrawPreview() end

---[CLIENT] Returns whether frame blend post processing effect is enabled or not.
---@return boolean Is frame blend enabled or not
function frame_blend.IsActive() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns whether the current frame is the last frame?
---@return boolean Whether the current frame is the last frame?
function frame_blend.IsLastFrame() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Returns amount of frames needed to render?
---@return number Amount of frames needed to render?
function frame_blend.RenderableFrames() end

---[CLIENT] Returns whether we should skip frame or not
---@return boolean Should the frame be skipped or not
function frame_blend.ShouldSkipFrame() end

game = {}

---[SHARED] Adds a new ammo type to the game.
--- You can find a list of default ammo types here.
--- This function must be called on both the client and server in GM:Initialize or you will have unexpected problems.There is a limit of 256 ammo types, including the default ones.
---@param ammoData table The attributes of the ammo. See the Structures/AmmoData.
function game.AddAmmoType(ammoData) end

---[SHARED] Registers a new decal.
--- There's a rather low limit of around 256 for decal materials that may be registered and they are not cleared on map load.
---@param decalName string The name of the decal.
---@param materialName string The material to be used for the decal. May also be a list of material names, in which case a random material from that list will be chosen every time the decal is placed.
function game.AddDecal(decalName, materialName) end

---[SHARED] Loads a particle file.
--- You will still need to call this function clientside regardless if you create the particle effects serverside.
---@param particleFileName string The path of the file to add. Must be (file).pcf.
function game.AddParticles(particleFileName) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Consider using game.GetAmmoTypes and game.GetAmmoData instead.
--- Called by the engine to retrieve the ammo types.
---@return table All ammo types registered via game.AddAmmoType, sorted by its name value.
function game.BuildAmmoTypes() end

---[SHARED] If called serverside it will remove ALL entities which were not created by the map (not players or weapons held by players).
--- On the client it will remove decals, sounds, gibs, dead NPCs, and entities created via ents.CreateClientProp.
--- This function calls GM:PreCleanupMap before cleaning up the map and GM:PostCleanupMap after cleaning up the map.
--- Calling this in a ENTITY:StartTouch or ENTITY:Touch hook will crash the game.Issue Tracker: 1142Calling this destroys all BASS streams.Issue Tracker: 2874This can crash when removing _firesmoke entities. You can use the example below to workaround this issue.Issue Tracker: 3637
---@param dontSendToClients boolean If set to true, don't run this functions on all clients.
---@param extraFilters table Entity classes not to reset during cleanup.
function game.CleanUpMap(dontSendToClients, extraFilters) end

---[SERVER] Runs a console command.
--- Make sure to add a newline ("\n") at the end of the command.
--- If you use data that were received from a client, you should avoid using this function because newline and semicolon (at least) allow the client to run arbitrary commands!
--- For safety, you are urged to prefer using RunConsoleCommand in this case.
---@param stringCommand string String containing the command and arguments to be ran.
function game.ConsoleCommand(stringCommand) end

---[SHARED] Returns the damage type of given ammo type.
---@param id number Ammo ID to retrieve the damage type of. Starts from 1.
---@return number See Enums/DMG
function game.GetAmmoDamageType(id) end

---[SHARED] Returns the Structures/AmmoData for given ID.
---@param id number ID of the ammo type to look up the data for
---@return table The Structures/AmmoData containing all ammo data
function game.GetAmmoData(id) end

---[SHARED] Returns the ammo bullet force that is applied when an entity is hit by a bullet of given ammo type.
---@param id number Ammo ID to retrieve the force of. Starts from 1.
---@return number 
function game.GetAmmoForce(id) end

---[SHARED] Returns the ammo type ID for given ammo type name.
--- See game.GetAmmoName for reverse.
---@param name string Name of the ammo type to look up ID of
---@return number The ammo type ID of given ammo type name, or -1 if not found
function game.GetAmmoID(name) end

---[SHARED] Returns the real maximum amount of ammo of given ammo ID, regardless of the setting of gmod_maxammo convar.
---@param id number Ammo type ID
---@return number The maximum amount of reserve ammo a player can hold of this ammo type.
function game.GetAmmoMax(id) end

---[SHARED] Returns the ammo name for given ammo type ID.
--- See game.GetAmmoID for reverse.
---@param id number Ammo ID to retrieve the name of. Starts from 1.
---@return string The name of given ammo type ID or nil if ammo type ID is invalid.
function game.GetAmmoName(id) end

---[SHARED] Returns the damage given ammo type should do to NPCs.
---@param id number Ammo ID to retrieve the damage info of. Starts from 1.
---@return number 
function game.GetAmmoNPCDamage(id) end

---[SHARED] Returns the damage given ammo type should do to players.
---@param id number Ammo ID to retrieve the damage info of. Starts from 1.
---@return number 
function game.GetAmmoPlayerDamage(id) end

---[SHARED] Returns a list of all ammo types currently registered.
---@return table A table containing all ammo types. The keys are ammo IDs, the values are the names associated with those IDs.
function game.GetAmmoTypes() end

---[SERVER] Returns the counter of a Global State.
--- See Global States for more information.
---@param name string The name of the Global State to set. If the Global State by that name does not exist, it will be created. See Global States for a list of default global states.
---@return number The value of the given Global State, 0 if the global state doesn't exist.
function game.GetGlobalCounter(name) end

---[SERVER] Returns whether a Global State is off, active or dead ( inactive )
--- See Global States for more information.
---@param name string The name of the Global State to retrieve the state of. If the Global State by that name does not exist, GLOBAL_DEAD will be returned. See Global States for a list of default global states.
---@return number The state of the Global State. See Enums/GLOBAL
function game.GetGlobalState(name) end

---[SHARED] Returns the public IP address and port of the current server. This will return the IP/port that you are connecting through when ran clientside.
--- Returns "loopback" in singleplayer.Returns "0.0.0.0:port" on the server when called too early, including in GM:Initialize and GM:InitPostEntity. This bug seems to only happen the first time a server is launched, and will return the correct value after switching maps.Issue Tracker: 3001
---@return string The IP address and port in the format "x.x.x.x:x"
function game.GetIPAddress() end

---[SHARED] Returns the name of the current map, without a file extension.
--- On the menu state, returns "menu".
--- In Multiplayer this does not return the current map in the CLIENT realm before GM:Initialize.
---@return string The name of the current map, without a file extension.
function game.GetMap() end

---[SERVER] Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar.
---@return string nextMap
function game.GetMapNext() end

---[SERVER] Returns the revision (Not to be confused with VBSP Version) of the current map.
---@return number Revision of the currently loaded map.
function game.GetMapVersion() end

---[SHARED] Returns the difficulty level of the game.
--- TIP: You can use this function in your scripted NPCs or Nextbots to make them harder, however, it is a good idea to lock powerful attacks behind the highest difficulty instead of just increasing the health.
--- Internally this is tied to the gamerules entity, so you'll have to wait to wait until GM:InitPostEntity is called to return the skill level
---@return number The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).
function game.GetSkillLevel() end

---[SHARED] Returns the time scale set with game.SetTimeScale.
--- If you want to get the value of host_timescale use
--- local timescale = GetConVar( "host_timescale" ):GetFloat()
---@return number The time scale
function game.GetTimeScale() end

---[SHARED] Returns the worldspawn entity.
---@return Entity The world
function game.GetWorld() end

---[SHARED] Returns true if the server is a dedicated server, false if it is a listen server or a singleplayer game.
--- This always returns false on the client.Issue Tracker: 1495
---@return boolean Is the server dedicated or not.
function game.IsDedicated() end

---[SERVER] Kicks a player from the server. This can be ran before the player has spawned.
---@param id string UserID or SteamID of the player to kick.
---@param reason string Reason to display to the player. This can span across multiple lines. This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.
function game.KickID(id, reason) end

---[SERVER] Loads the next map according to the nextlevel convar, or from the current mapcycle file set by the respective convar.
function game.LoadNextMap() end

---[SERVER] Returns the map load type of the current map.
--- After changing the map with the console command changelevel, "newgame" is returned. With changelevel2 (single player only), "transition" is returned.
---@return string The load type. Possible values are: "newgame", "loadgame", "transition", "background".
function game.MapLoadType() end

---[SHARED] Returns the maximum amount of players (including bots) that the server can have.
---@return number The maximum amount of players
function game.MaxPlayers() end

---[SHARED] Mounts a GMA addon from the disk.
--- Can be used with steamworks.DownloadUGC
--- Any error models currently loaded that the mounted addon provides will be reloaded.
--- Any error materials currently loaded that the mounted addon provides will NOT be reloaded. That means that this cannot be used to fix missing map materials, as the map materials are loaded before you are able to call this.
---@param path string Location of the GMA file to mount, retrieved from steamworks.DownloadUGC. This file does not have to end with the .gma extension, but will be interpreted as a GMA.
---@return boolean, table boolean - success
---@return boolean, table table - If successful, a table of files that have been mounted
function game.MountGMA(path) end

---[SHARED] Removes all the clientside ragdolls.
function game.RemoveRagdolls() end

---[SERVER] Sets the counter of a Global State.
--- See Global States for more information.
---@param name string The name of the Global State to set. If the Global State by that name does not exist, it will be created. See Global States for a list of default global states.
---@param count number The value to set for that Global State.
function game.SetGlobalCounter(name, count) end

---[SERVER] Sets whether a Global State is off, active or dead ( inactive )
--- See Global States for more information.
---@param name string The name of the Global State to set. If the Global State by that name does not exist, it will be created. See Global States for a list of default global states.
---@param state number The state of the Global State. See Enums/GLOBAL
function game.SetGlobalState(name, state) end

---[SERVER] Sets the difficulty level of the game, can be retrieved with game.GetSkillLevel.
--- This will automatically change whenever the "skill" convar is modified serverside.
--- This function will not work if the skill convar doesn't match the targeted value. To work around this, you must use RunConsoleCommand("skill", num) alongside this function.Issue Tracker: 3491
---@param level number The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).
function game.SetSkillLevel(level) end

---[SERVER] Sets the time scale of the game.
--- This function is supposed to remove the need of using the host_timescale convar, which is cheat protected.
--- To slow down or speed up the movement of a specific player, use Player:SetLaggedMovementValue instead.
--- Like host_timescale, this method does not affect sounds, if you wish to change that, look into GM:EntityEmitSound.
--- The true timescale will be host_timescale multiplied by game.GetTimeScale
---@param timeScale number The new timescale, minimum value is 0.001 and maximum is 5.
function game.SetTimeScale(timeScale) end

---[SHARED] Returns whether the current session is a single player game.
---@return boolean isSinglePlayer
function game.SinglePlayer() end

---[SHARED] Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps.
---@return Vector startSpot
function game.StartSpot() end

gameevent = {}

---[SHARED] Adds a game event listener, creating a new hook using the hook library, which can be listened to via hook.Add with the given eventName as event.
--- List of valid events (with examples) can be found here.
--- All gameevents are called in the Menu State, but if you want to use them you need to use some DLL(like this one) or you need to create your own.
---@param eventName string The event to listen to.
function gameevent.Listen(eventName) end

gamemode = {}

---[SHARED] Called by the engine to call a hook within the loaded gamemode.
--- The supplied event 'name' must be defined in the active gamemode. Otherwise, nothing will happen - not even hooks added with hook.Add will be called.
--- This is similar to hook.Run and hook.Call, except the hook library will call hooks created with hook.Add even if there is no corresponding gamemode function.
---@param name string The name of the hook to call.
---@param ... ... The arguments
---@return any The result of the hook function - can be up to 6 values. Returns false if the gamemode function doesn't exist (i.e. nothing happened), but remember - a hook can also return false.
function gamemode.Call(name, ...) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- This returns the internally stored gamemode table.
---@param name string The name of the gamemode you want to get
---@return table The gamemode's table
function gamemode.Get(name) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the engine when a gamemode is being loaded.
---@param gm table Your GM table
---@param name string Name of your gamemode, lowercase, no spaces.
---@param derived string The gamemode name that your gamemode is derived from
function gamemode.Register(gm, name, derived) end

---[CLIENT] Returns if the client is timing out, and time since last ping from the server. Similar to the server side Player:IsTimingOut.
---@return boolean, number boolean - Is timing out?
---@return boolean, number number - Get time since last pinged received.
function GetTimeoutInfo() end

gmod = {}

---[SHARED] Returns GAMEMODE.
---@return table GAMEMODE
function gmod.GetGamemode() end

gmsave = {}

---[SERVER] Loads a saved map.
---@param mapData string The JSON encoded string containing all the map data.
---@param ply Player The player to load positions for.
---@param callback function A function to be called after all the entities have been placed.
function gmsave.LoadMap(mapData, ply, callback) end

---[SERVER] Sets player position and angles from supplied table
---@param ply Player The player to "load" values for
---@param data table A table containing Origin and Angle keys for position and angles to set.
function gmsave.PlayerLoad(ply, data) end

---[SERVER] Returns a table containing player position and angles. Used by gmsave.SaveMap.
---@param ply Player The player to "save"
---@return table A table containing player position ( Origin ) and angles ( Angle )
function gmsave.PlayerSave(ply) end

---[SERVER] Saves the map
---@param ply Player The player, whose position should be saved for loading the save
---@return string The encoded to JSON string containing save data
function gmsave.SaveMap(ply) end

---[SERVER] Returns if we should save this entity in a duplication or a map save or not.
---@param ent Entity The entity
---@param t table A table containing classname key with entities classname.
---@return boolean Should save entity or not
function gmsave.ShouldSaveEntity(ent, t) end

gui = {}

---[CLIENT] Opens the game menu overlay.
function gui.ActivateGameUI() end

---[CLIENT] Enables the mouse cursor without restricting player movement, like using Sandbox's context menu.
--- Some CUserCmd functions will return incorrect values when this function is active.Issue Tracker: 982
---@param enabled boolean Whether the cursor should be enabled or not. (true = enable, false = disable)
function gui.EnableScreenClicker(enabled) end

---[CLIENT] Hides the game menu overlay.
function gui.HideGameUI() end

---[CLIENT] Simulates a mouse move with the given deltas.
---@param deltaX number The movement delta on the x axis.
---@param deltaY number The movement delta on the y axis.
function gui.InternalCursorMoved(deltaX, deltaY) end

---[CLIENT] Simulates a key press for the given key.
---@param key number The key, see Enums/KEY.
function gui.InternalKeyCodePressed(key) end

---[CLIENT] Simulates a key release for the given key.
---@param key number The key, see Enums/KEY.
function gui.InternalKeyCodeReleased(key) end

---[CLIENT] Simulates a key type typing to the specified key.
---@param key number The key, see Enums/KEY.
function gui.InternalKeyCodeTyped(key) end

---[CLIENT] Simulates an ASCII symbol writing.
--- Use to write text in the chat or in VGUI.
--- Doesn't work while the main menu is open!
---@param code number ASCII code of symbol, see http://www.mikroe.com/img/publication/spa/pic-books/programming-in-basic/chapter/04/fig4-24.gif
function gui.InternalKeyTyped(code) end

---[CLIENT] Simulates a double mouse key press for the given mouse key.
---@param key number The key, see Enums/MOUSE.
function gui.InternalMouseDoublePressed(key) end

---[CLIENT] Simulates a mouse key press for the given mouse key.
---@param key number The key, see Enums/MOUSE.
function gui.InternalMousePressed(key) end

---[CLIENT] Simulates a mouse key release for the given mouse key.
---@param key number The key, see Enums/MOUSE.
function gui.InternalMouseReleased(key) end

---[CLIENT] Simulates a mouse wheel scroll with the given delta.
---@param delta number The amount of scrolling to simulate.
function gui.InternalMouseWheeled(delta) end

---[CLIENT] Returns whether the console is visible or not.
---@return boolean Whether the console is visible or not.
function gui.IsConsoleVisible() end

---[CLIENT] Returns whether the game menu overlay ( main menu ) is open or not.
---@return boolean Whether the game menu overlay ( main menu ) is open or not
function gui.IsGameUIVisible() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use input.GetCursorPos instead.
--- Returns the cursor's position on the screen, or 0, 0 if cursor is not visible.
---@return number, number number - mouseX
---@return number, number number - mouseY
function gui.MousePos() end

---[CLIENT] Returns x component of the mouse position.
---@return number mouseX
function gui.MouseX() end

---[CLIENT] Returns y component of the mouse position.
---@return number mouseY
function gui.MouseY() end

---[CLIENT] Opens specified URL in the steam overlay browser.
--- When called clientside, user will be asked for confirmation before the website will open.Will silently fail if the URL is more than 512 characters long.Issue Tracker: 4663
---@param url string URL to open, it has to start with either http:// or https://.
function gui.OpenURL(url) end

---[CLIENT] Converts the specified screen position to a direction vector local to the player's view. A related function is Vector:ToScreen, which translates a 3D position to a screen coordinate.
--- util.AimVector is a more generic version of this, using a custom view instead of the player's current view.
---@param x number X coordinate on the screen.
---@param y number Y coordinate on the screen.
---@return Vector Direction
function gui.ScreenToVector(x, y) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use input.SetCursorPos instead.
--- Sets the cursor's position on the screen, relative to the topleft corner of the window
---@param mouseX number The X coordinate to move the cursor to.
---@param mouseY number The Y coordinate to move the cursor to.
function gui.SetMousePos(mouseX, mouseY) end

---[MENU] Shows console in the game UI.
function gui.ShowConsole() end

halo = {}

---[CLIENT] Applies a halo glow effect to one or multiple entities.
--- Using this function outside of the GM:PreDrawHalos hook can cause instability or crashes.The ignoreZ parameter will cause the halos to draw over the player's viewmodel. You can work around this using render.DepthRange in the GM:PreDrawViewModel, GM:PostDrawViewModel, GM:PreDrawPlayerHands and GM:PostDrawPlayerHands hooks.
---@param entities table A table of entities to add the halo effect to.
---@param color table The desired color of the halo. See Color.
---@param blurX number The strength of the halo's blur on the x axis.
---@param blurY number The strength of the halo's blur on the y axis.
---@param passes number The number of times the halo should be drawn per frame. Increasing this may hinder player FPS.
---@param additive boolean Sets the render mode of the halo to additive.
---@param ignoreZ boolean Renders the halo through anything when set to true.
function halo.Add(entities, color, blurX, blurY, passes, additive, ignoreZ) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Renders a halo according to the specified table, only used internally, called from a GM:PostDrawEffects hook added by the halo library.
---@param entry table Table with info about the halo to draw.
function halo.Render(entry) end

---[CLIENT] Returns the entity the halo library is currently rendering the halo for.
--- The main purpose of this function is to be used in ENTITY:Draw in order not to draw certain parts of the entity when the halo is being rendered, so there's no halo around unwanted entity parts, such as lasers, 3D2D displays, etc.
---@return Entity If set, the currently rendered entity by the halo library.
function halo.RenderedEntity() end

hammer = {}

---[SERVER] Sends command to Hammer, if Hammer is running with the current map loaded.
---@param cmd string Command to send including arguments All commands are in the format "command var1 var2 etc" All commands that pick an entity with x y z , must use the exact position including decimals. i.e. -354.4523 123.4 List of commands    Command Description     "session_begin mapName mapVersion" Starts a hammer edit, locking the editor. mapName is the current map without path or suffix, mapVersion is the current version in the .vmf file   "session_end" Ends a hammer edit, unlocking the editor.   "map_check_version mapName mapVersion" This only works after session_begin, so you'd know the right version already and this only returns ok, this function is apparently useless.   "entity_create entityClass x y z" Creates an entity of entityClass at position x y z   "entity_delete entityClass x y z" Deletes an entity of entityClass at position x y z   "entity_set_keyvalue entityClass x y z "key" "value"" Set's the KeyValue pair of an entity of entityClass at x y z. The Key name and Value String must be in quotes.   "entity_rotate_incremental entityClass x y z incX incY incZ" Rotates an entity of entityClass at x y z by incX incY incZ   "node_create nodeClass nodeID x y z" Creates an AI node of nodeClass with nodeID at x y z you should keep nodeID unique or you will have issues   "node_delete nodeID" Deletes node(s) with nodeID, this will delete multiple nodes if they have the same nodeID   "nodelink_create startNodeID endNodeID" Creates a link between AI nodes startNodeID and endNodeID   "nodelink_delete startNodeID endNodeID" Removes a link between AI nodes startNodeID and endNodeID
---@return string Returns "ok" if command succeeded otherwise returns "badcommand" All changes only happen in hammer, there is NO in game representation/feedback
function hammer.SendCommand(cmd) end

hook = {}

---[SHARED] Add a hook to be called upon the given event occurring.
---@param eventName string The event to hook on to. This can be any GM hook, gameevent after using gameevent.Listen, or custom hook run with hook.Call or hook.Run.
---@param identifier any The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier should be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do. The identifier can be either a string, or a table/object with an IsValid function defined such as an Entity or Panel. numbers and booleans, for example, are not allowed. If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.
---@param func function The function to be called, arguments given to it depend on the identifier used. Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing. It WILL break other addons.Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing. It WILL break other addons.Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing. It WILL break other addons.
function hook.Add(eventName, identifier, func) end

---[SHARED] Calls all hooks associated with the given event until one returns something other than nil, and then returns that data.
--- In almost all cases, you should use hook.Run instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.
---@param eventName string The event to call hooks for.
---@param gamemodeTable table If the gamemode is specified, the gamemode hook within will be called, otherwise not.
---@param ... ... The arguments to be passed to the hooks.
---@return ... Return data from called hooks. Limited to 6 return values.
function hook.Call(eventName, gamemodeTable, ...) end

---[SHARED] Returns a list of all the hooks registered with hook.Add.
---@return table A table of tables. See below for output example.
function hook.GetTable() end

---[SHARED] Removes the hook with the supplied identifier from the given event.
---@param eventName string The event name.
---@param identifier any The unique identifier of the hook to remove, usually a string.
function hook.Remove(eventName, identifier) end

---[SHARED] Calls all hooks associated with the given event until one returns something other than nil and then returns that data. If no hook returns any data, it will try to call the GAMEMODE:<eventName>; alternative, if one exists.
--- This function internally calls hook.Call.
--- See also: gamemode.Call - same as this, but does not call hooks if the gamemode hasn't defined the function.
---@param eventName string The event to call hooks for.
---@param ... ... The arguments to be passed to the hooks.
---@return any Returned data from called hooks.
function hook.Run(eventName, ...) end

http = {}

---[SHARED] Launches an asynchronous GET request to a HTTP server.
--- HTTP requests returning a status code >= 400 are still considered a success and will call the onSuccess callback.
--- The onFailure callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist).
--- A rough overview of possible onFailure messages:
--- 
--- invalid url - Invalid/empty url ( no request was attempted )
--- invalid request - Steam HTTP lib failed to create a HTTP request
--- error - OnComplete callback's second argument, bError, is true
--- unsuccessful - OnComplete's first argument, pResult->m_bRequestSuccessful, returned false
--- 
--- HTTP-requests that respond with a large body may return an unsuccessful error. Try using the Range header to download the file in chunks.HTTP-requests to destinations on private networks (such as 192.168.0.1) won't work.
--- 
--- To enable HTTP-requests to destinations on private networks use Command Line Parameters -allowlocalhttp (serverside only).
---@param url string The URL of the website to fetch.
---@param onSuccess function Function to be called on success. Arguments are  string body string size - equal to string.len(body). table headers number code - The HTTP success code.
---@param onFailure function Function to be called on failure. Arguments are  string error - The error message.
---@param headers table KeyValue table for headers.
function http.Fetch(url, onSuccess, onFailure, headers) end

---[SHARED] Sends an asynchronous POST request to a HTTP server.
--- HTTP requests returning a status code >= 400 are still considered a success and will call the onSuccess callback.
--- The onFailure callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist).
--- HTTP-requests that respond with a large body may return an unsuccessful error. Try using the Range header to download the file in chunks.HTTP-requests to destinations on private networks (such as 192.168.0.1) won't work. To enable HTTP-requests to destinations on private networks use Command Line Parameters -allowlocalhttp (serverside only).
---@param url string The url to of the website to post.
---@param parameters table The post parameters (x-www-form-urlencoded) to be send to the server. Keys and values must be strings.
---@param onSuccess function Function to be called on success. Arguments are  string body string size - equal to string.len(body). table headers number code - The HTTP success code.
---@param onFailure function Function to be called on failure. Arguments are  string error - The error message.
---@param headers table KeyValue table for headers.
function http.Post(url, parameters, onSuccess, onFailure, headers) end

input = {}

---[CLIENT] Returns the last key captured by key trapping.
---@return number The key, see Enums/KEY
function input.CheckKeyTrapping() end

---[CLIENT] Returns the digital value of an analog stick on the current (set up via convars) controller.
---@param axis number The analog axis to poll. See Enums/ANALOG.
---@return number The digital value. A joystick axis returns -32768 when it's pushed completely up/completely left, & returns 32767 when it's pushed completely down/completely right. A mouse wheel starts @ 0 & increases by 1 for every unit of scroll up/decreases by 1 for every unit of scroll down. A mouse axis is 0 when the arrow is @ the top or left of the screen; When the arrow is @ the bottom right of the screen, the mouse y axis is the height of the screen & the mouse x axis is the width of the screen (in pixels). Note that in game, the “arrow” stays near the middle of the screen. Trigger axis always return 0 (verify).A joystick axis returns -32768 when it's pushed completely up/completely left, & returns 32767 when it's pushed completely down/completely right. A mouse wheel starts @ 0 & increases by 1 for every unit of scroll up/decreases by 1 for every unit of scroll down. A mouse axis is 0 when the arrow is @ the top or left of the screen; When the arrow is @ the bottom right of the screen, the mouse y axis is the height of the screen & the mouse x axis is the width of the screen (in pixels). Note that in game, the “arrow” stays near the middle of the screen. Trigger axis always return 0 (verify).A joystick axis returns -32768 when it's pushed completely up/completely left, & returns 32767 when it's pushed completely down/completely right. A mouse wheel starts @ 0 & increases by 1 for every unit of scroll up/decreases by 1 for every unit of scroll down. A mouse axis is 0 when the arrow is @ the top or left of the screen; When the arrow is @ the bottom right of the screen, the mouse y axis is the height of the screen & the mouse x axis is the width of the screen (in pixels). Note that in game, the “arrow” stays near the middle of the screen. Trigger axis always return 0 (verify).
function input.GetAnalogValue(axis) end

---[CLIENT] Returns the cursor's position on the screen.
--- On macOS, the cursor isn't locked on the middle of the screen which causes a significant offset of the positions returned by this function.Issue Tracker: 4964
---@return number, number number - The cursors position on the X axis.
---@return number, number number - The cursors position on the Y axis.
function input.GetCursorPos() end

---[CLIENT] Gets the button code from a button name. This is opposite of input.GetKeyName.
---@param button string The internal button name, such as e or ⇧ shift.
---@return number The button code, see Enums/BUTTON_CODE.
function input.GetKeyCode(button) end

---[CLIENT] Gets the button name from a numeric button code. The name needs to be translated with language.GetPhrase before being displayed.
--- Despite the name of the function, this also works for the full range of keys in Enums/BUTTON_CODE.
---@param button number The button, see Enums/BUTTON_CODE.
---@return string Button name.
function input.GetKeyName(button) end

---[CLIENT] Gets whether the specified button code is down.
--- Unlike input.IsKeyDown this can also detect joystick presses from Enums/JOYSTICK
---@param button number The button, valid values are in the range of Enums/BUTTON_CODE.
---@return boolean Is the button down
function input.IsButtonDown(button) end

---[CLIENT] Returns whether a control key is being pressed
---@return boolean Is Ctrl key down or not
function input.IsControlDown() end

---[CLIENT] Gets whether a key is down.
---@param key number The key, see Enums/KEY.
---@return boolean Is the key down
function input.IsKeyDown(key) end

---[CLIENT] Returns whether key trapping is activate and the next key press will be captured.
---@return boolean Whether key trapping active or not
function input.IsKeyTrapping() end

---[CLIENT] Gets whether a mouse button is down
---@param mouseKey number The key, see Enums/MOUSE
---@return boolean Is the key down
function input.IsMouseDown(mouseKey) end

---[CLIENT] Gets whether a shift key is being pressed
---@return boolean isDown
function input.IsShiftDown() end

---[CLIENT] Returns the client's bound key for the specified console command. If the player has multiple keys bound to a single command, there is no defined behavior of which key will be returned.
---@param binding string The binding name
---@param exact boolean True if the binding should match exactly
---@return string The first key found with that binding or no value if no key with given binding was found. See also input.GetKeyCode.
function input.LookupBinding(binding, exact) end

---[CLIENT] Returns the bind string that the given key is bound to.
---@param key number Key from Enums/BUTTON_CODE
---@return string The bind string of the given key.
function input.LookupKeyBinding(key) end

---[CLIENT] Switches to the provided weapon on the next CUserCmd generation/CreateMove call. Direct binding to CInput::MakeWeaponSelection.
---@param weapon Weapon The weapon entity to switch to.
function input.SelectWeapon(weapon) end

---[CLIENT] Sets the cursor's position on the screen, relative to the topleft corner of the window
---@param mouseX number X coordinate for mouse position
---@param mouseY number Y coordinate for mouse position
function input.SetCursorPos(mouseX, mouseY) end

---[CLIENT] Begins waiting for a key to be pressed so we can save it for input.CheckKeyTrapping. Used by the DBinder.
function input.StartKeyTrapping() end

---[CLIENT] Translates a console command alias, basically reverse of the alias console command.
---@param command string The alias to lookup.
---@return string The command(s) this alias will execute if ran, or nil if the alias doesn't exist.
function input.TranslateAlias(command) end

---[CLIENT] Returns whether a key was initially pressed in the same frame this function was called.
--- This function only works in Move hooks, and will detect key presses even in main menu or when a typing in a text field.
---@param key number The key, see Enums/KEY.
---@return boolean True if the key was initially pressed the same frame that this function was called, false otherwise.
function input.WasKeyPressed(key) end

---[CLIENT] Returns whether a key was released in the same frame this function was called.
--- This function only works in Move hooks, and will detect key releases even in main menu or when a typing in a text field.
---@param key number The key, see Enums/KEY.
---@return boolean True if the key was released the same frame that this function was called, false otherwise.
function input.WasKeyReleased(key) end

---[CLIENT] Returns whether the key is being held down or not.
--- This function only works in Move hooks, and will detect key events even in main menu or when a typing in a text field.
---@param key number The key to test, see Enums/KEY
---@return boolean Whether the key is being held down or not.
function input.WasKeyTyped(key) end

---[CLIENT] Returns whether a mouse key was double pressed in the same frame this function was called.
--- If this function returns true, input.WasMousePressed will return false.
--- This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.
---@param button number The mouse button to test, see Enums/MOUSE
---@return boolean Whether the mouse key was double pressed or not.
function input.WasMouseDoublePressed(button) end

---[CLIENT] Returns whether a mouse key was initially pressed in the same frame this function was called.
--- If input.WasMouseDoublePressed returns true, this function will return false.
--- This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.
---@param key number The key, see Enums/MOUSE
---@return boolean True if the mouse key was initially pressed the same frame that this function was called, false otherwise.
function input.WasMousePressed(key) end

---[CLIENT] Returns whether a mouse key was released in the same frame this function was called.
--- This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.
---@param key number The key to test, see Enums/MOUSE
---@return boolean True if the mouse key was released the same frame that this function was called, false otherwise.
function input.WasMouseReleased(key) end

jit = {}

---[SHARED] You can attach callbacks to a number of compiler events with jit.attach. The callback can be called:
--- 
--- when a function has been compiled to bytecode ("bc");
--- when trace recording starts or stops ("trace");
--- as a trace is being recorded ("record");
--- or when a trace exits through a side exit ("texit").
--- 
--- Set a callback with jit.attach(callback, "event") and clear the same callback with jit.attach(callback)
--- This function isn't officially documented on LuaJIT wiki, use it at your own risk.Using these constantly (especially bytecode) can be very performance heavy due to the constant stream of data being compiled at a time.
---@param callback function The callback function. The arguments passed to the callback depend on the event being reported:  "bc": function func - The function that's just been recorded  "trace": string what - description of the trace event: "flush", "start", "stop", "abort". Available for all events.   number tr - The trace number. Not available for flush. function func - The function being traced. Available for start and abort. number pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort. number otr - start: the parent trace number if this is a side trace, abort: abort code string oex - start: the exit number for the parent trace, abort: abort reason (string)  "record": number tr - The trace number. Not available for flush.  function func - The function being traced. Available for start and abort. number pc - The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort. number depth  - The depth of the inlining of the current bytecode.  "texit": number tr - The trace number. Not available for flush.  number ex - The exit number number ngpr - The number of general-purpose and floating point registers that are active at the exit. number nfpr - The number of general-purpose and floating point registers that are active at the exit.
---@param event string The event to hook into.
function jit.attach(callback, event) end

---[SHARED] Flushes the whole cache of compiled code.
function jit.flush() end

---[SHARED] Disables LuaJIT Lua compilation.
function jit.off() end

---[SHARED] Enables LuaJIT Lua compilation.
function jit.on() end

---[SHARED] JIT compiler optimization control. The opt sub-module provides the backend for the -O command line LuaJIT option.
--- You can also use it programmatically, e.g.:
--- jit.opt.start(2) -- same as -O2
--- jit.opt.start("-dce")
--- jit.opt.start("hotloop=10", "hotexit=2")
--- A list of LuaJIT -O command line options can be found here(a table of various optimization levels are displayed towards the bottom of the page along with exactly which optimization options are enabled for each level): http://luajit.org/running.html
---@param ... ... 
function jit.opt.start(...) end

---[SHARED] Returns the status of the JIT compiler and the current optimizations enabled.
---@return boolean, any boolean - Is JIT enabled
---@return boolean, any any - Strings for CPU-specific features and enabled optimizations
function jit.status() end

---[SHARED] Return table fields:
--- 
--- 0 (ref) (number): first IR ref for the snapshot
--- 1 (nslots) (number): the number of valid slots
--- all indexes except first 2 and last (there might not be any of these): the snapshot map
--- last index in table (number): -16777216 (255 << 24)
---@param tr number trace index to retrieve snapshot for (gotten via jit.attach)
---@param sn number snapshot index for trace (starting from 0 to nexit - 1, nexit gotten via jit.util.traceinfo)
---@return table snapshot
function jit.util.tracesnap(tr, sn) end

killicon = {}

---[CLIENT] Creates new kill icon using a texture.
---@param class string Weapon or entity class
---@param texture string Path to the texture
---@param color table Color of the kill icon
function killicon.Add(class, texture, color) end

---[CLIENT] Creates kill icon from existing one.
---@param new_class string New class of the kill icon
---@param existing_class string Already existing kill icon class
function killicon.AddAlias(new_class, existing_class) end

---[CLIENT] Adds kill icon for given weapon/entity class using special font.
---@param class string Weapon or entity class
---@param font string Font to be used
---@param symbol string The symbol to be used
---@param color table Color of the killicon
function killicon.AddFont(class, font, symbol, color) end

---[CLIENT] Draws a kill icon.
---@param x number X coordinate of the icon
---@param y number Y coordinate of the icon
---@param name string Classname of the kill icon
---@param alpha number Alpha/transparency value ( 0 - 255 ) of the icon
function killicon.Draw(x, y, name, alpha) end

---[CLIENT] Checks if kill icon exists for given class.
---@param class string The class to test
---@return boolean Returns true if kill icon exists
function killicon.Exists(class) end

---[CLIENT] Returns the size of a kill icon.
---@param name string Classname of the kill icon
---@return number, number number - Width of the kill icon
---@return number, number number - Height of the kill icon
function killicon.GetSize(name) end

language = {}

---[CLIENT] Adds a language item. Language placeholders preceded with "#" are replaced with full text in Garry's Mod once registered with this function.
---@param placeholder string The key for this phrase, without the preceding "#".
---@param fulltext string The phrase that should be displayed whenever this key is used.
function language.Add(placeholder, fulltext) end

---[CLIENT] Retrieves the translated version of inputted string. Useful for concentrating multiple translated strings.
---@param phrase string The phrase to translate
---@return string The translated phrase, or the input string if no translation was found
function language.GetPhrase(phrase) end

list = {}

---[SHARED] Adds an item to a named list
---@param identifier string The list identifier
---@param item any The item to add to the list
---@return number The index at which the item was added.
function list.Add(identifier, item) end

---[SHARED] Returns true if the list contains the value. (as a value - not a key)
--- For a function that looks for a key and not a value see list.HasEntry.
---@param list string List to search through
---@param value any The value to test
---@return boolean Returns true if the list contains the value, false otherwise
function list.Contains(list, value) end

---[SHARED] Returns a copy of the list stored at identifier
---@param identifier string The list identifier
---@return table The copy of the list
function list.Get(identifier) end

---[SHARED] Returns the actual table of the list stored at identifier. Modifying this will affect the stored list
---@param identifier string The list identifier
---@return table The actual list
function list.GetForEdit(identifier) end

---[SHARED] Returns a list of all lists currently in use.
---@return table The list of all lists, i.e. a table containing names of all lists.
function list.GetTable() end

---[SHARED] Returns true if the list contains the given key.
--- For a function that looks for values and not keys see list.Contains.
---@param list string List to search through
---@param key any The key to test
---@return boolean Returns true if the list contains the key, false otherwise
function list.HasEntry(list, key) end

---[SHARED] Sets a specific position in the named list to a value.
---@param identifier string The list identifier
---@param key any The key in the list to set
---@param item any The item to set to the list as key
function list.Set(identifier, key, item) end

markup = {}

---[CLIENT] A convenience function that converts a Color into its markup ready string representation.
---@param clr Color The Color to convert.
---@return string The markup color, for example 255,255,255.
function markup.Color(clr) end

---[CLIENT] Converts a string to its escaped, markup-safe equivalent.
---@param text string The string to sanitize.
---@return string The parsed markup object ready to be drawn.
function markup.Escape(text) end

---[CLIENT] Parses markup into a MarkupObject. Currently, this only supports fonts and colors as demonstrated in the example.
---@param markup string The markup to be parsed.
---@param maxWidth number The max width of the output
---@return MarkupObject The parsed markup object ready to be drawn via MarkupObject:Draw.
function markup.Parse(markup, maxWidth) end

math = {}

---[SHARED] Calculates the absolute value of a number (effectively removes any negative sign).
---@param x number The number to get the absolute value of.
---@return number The absolute value.
function math.abs(x) end

---[SHARED] Returns the arccosine of the given number.
---@param cos number Cosine value in range of -1 to 1.
---@return number An angle in radians, between 0 and pi, which has the given cos value. nan if the argument is out of range.
function math.acos(cos) end

---[SHARED] Calculates the difference between two angles.
---@param a number The first angle.
---@param b number The second angle.
---@return number The difference between the angles between -180 and 180
function math.AngleDifference(a, b) end

---[SHARED] Gradually approaches the target value by the specified amount.
---@param current number The value we're currently at.
---@param target number The target value. This function will never overshoot this value.
---@param change number The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.)
---@return number New current value, closer to the target than it was previously.
function math.Approach(current, target, change) end

---[SHARED] Increments an angle towards another by specified rate.
--- This function is for numbers representing angles (0-360), NOT Angle objects!
---@param currentAngle number The current angle to increase
---@param targetAngle number The angle to increase towards
---@param rate number The amount to approach the target angle by
---@return number Modified angle
function math.ApproachAngle(currentAngle, targetAngle, rate) end

---[SHARED] Returns the arcsine of the given number.
---@param normal number Sine value in the range of -1 to 1.
---@return number An angle in radians, in the range -pi/2 to pi/2, which has the given sine value. nan if the argument is out of range.
function math.asin(normal) end

---[SHARED] Returns the arctangent of the given number.
---@param normal number Tangent value.
---@return number An angle in radians, in the range -pi/2 to pi/2, which has the given tangent.
function math.atan(normal) end

---[SHARED] functions like math.atan(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.
--- The Y argument comes first!
---@param y number Y coordinate.
---@param x number X coordinate.
---@return number The angle of the line from (0, 0) to (x, y) in radians, in the left-open interval (-pi, pi]
function math.atan2(y, x) end

---[SHARED] Converts a binary string into a number.
---@param string string Binary string to convert
---@return number Base 10 number.
function math.BinToInt(string) end

---[SHARED] Basic code for  algorithm.
---@param tDiff number From 0 to 1, where alongside the spline the point will be.
---@param tPoints table A table of Vectors. The amount cannot be less than 4.
---@param tMax number Just leave this at 1.
---@return Vector Point on Bezier curve, related to tDiff.
function math.BSplinePoint(tDiff, tPoints, tMax) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Use math.BSplinePoint instead.
--- Basic code for Bezier-Spline algorithm, helper function for math.BSplinePoint.
---@param i number 
---@param k number Sending in a value < 1 will result in an infinite loop.Sending in a value < 1 will result in an infinite loop.Sending in a value < 1 will result in an infinite loop.
---@param t number 
---@param tinc number 
---@return number 
function math.calcBSplineN(i, k, t, tinc) end

---[SHARED] Ceils or rounds a number up.
---@param number number The number to be rounded up.
---@return number ceiled numbers
function math.ceil(number) end

---[SHARED] Clamps a number between a minimum and maximum value.
---@param input number The number to clamp.
---@param min number The minimum value, this function will never return a number less than this.
---@param max number The maximum value, this function will never return a number greater than this.
---@return number The clamped value.
function math.Clamp(input, min, max) end

---[SHARED] Returns the cosine of given angle.
---@param number number Angle in radians
---@return number Cosine of given angle
function math.cos(number) end

---[SHARED] Returns the hyperbolic cosine of the given angle.
---@param number number Angle in radians.
---@return number The hyperbolic cosine of the given angle.
function math.cosh(number) end

---[SHARED] Converts radians to degrees.
---@param radians number Value to be converted to degrees.
---@return number degrees
function math.deg(radians) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use math.Distance instead
--- Returns the difference between two points in 2D space. Alias of math.Distance.
---@param x1 number X position of first point
---@param y1 number Y position of first point
---@param x2 number X position of second point
---@param y2 number Y position of second point
---@return number Distance between the two points.
function math.Dist(x1, y1, x2, y2) end

---[SHARED] Returns the difference between two points in 2D space.
---@param x1 number X position of first point
---@param y1 number Y position of first point
---@param x2 number X position of second point
---@param y2 number Y position of second point
---@return number Distance between the two points
function math.Distance(x1, y1, x2, y2) end

---[SHARED] Returns the squared difference between two points in 2D space. This is computationally faster than math.Distance.
---@param x1 number X position of first point
---@param y1 number Y position of first point
---@param x2 number X position of second point
---@param y2 number Y position of second point
---@return number The squared distance between the two points.
function math.DistanceSqr(x1, y1, x2, y2) end

---[SHARED] Eases out using math.sin.
---@param fraction number Fraction of the progress to ease, from 0 to 1
---@return number "Eased" Value, from 0 to 1
function math.ease.OutSine(fraction) end

---[SHARED] Calculates the progress of a value fraction, taking in to account given easing fractions
---@param progress number Fraction of the progress to ease, from 0 to 1
---@param easeIn number Fraction of how much easing to begin with
---@param easeOut number Fraction of how much easing to end with
---@return number "Eased" Value, from 0 to 1
function math.EaseInOut(progress, easeIn, easeOut) end

---[SHARED] Returns the x power of the Euler constant.
---@param exponent number The exponent for the function.
---@return number e to the specified power
function math.exp(exponent) end

---[SHARED] Floors or rounds a number down.
---@param number number The number to be rounded down.
---@return number floored numbers
function math.floor(number) end

---[SHARED] Returns the modulus of the specified values.
--- While this is similar to the % operator, it will return a negative value if the first argument is negative, whereas the % operator will return a positive value even if the first operand is negative.
---@param base number The base value.
---@param modulator number The modulator.
---@return number The calculated modulus.
function math.fmod(base, modulator) end

---[SHARED] Lua reference description: Returns m and e such that x = m2e, e is an integer and the absolute value of m is in the range ((0.5, 1) (or zero when x is zero).
--- Used to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range 1/2 (inclusive) to 1 (exclusive) and the second is an integer exponent.
--- The result is such that x = m*2^e.
---@param x number The value to get the normalized fraction and the exponent from.
---@return number, number number - m, multiplier - between 0.5 and 1.
---@return number, number number - e, exponent - always an integer.
function math.frexp(x) end

---[SHARED] A variable that effectively represents infinity, in the sense that in any numerical comparison every number will be less than this.
--- For example, if x is a number, x > math.huge will NEVER be true except in the case of overflow (see below).
--- Lua will consider any number greater than or equal to 2^1024 (the exponent limit of a double) as inf and hence equal to this.
---@return number The effective infinity.
function math.huge() end

---[SHARED] Converts an integer to a binary (base-2) string.
---@param int number Number to be converted.
---@return string Binary number string. The length of this will always be a multiple of 3.
function math.IntToBin(int) end

---[SHARED] Takes a normalised number and returns the floating point representation.
---@param normalizedFraction number The value to get the normalized fraction and the exponent from.
---@param exponent number The value to get the normalized fraction and the exponent from.
---@return number result
function math.ldexp(normalizedFraction, exponent) end

---[SHARED] With one argument, return the natural logarithm of x (to base e).
--- With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).
---@param x number The value to get the base from exponent from.
---@param base number The logarithmic base.
---@return number Logarithm of x to the given base
function math.log(x, base) end

---[SHARED] Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10).
---@param x number The value to get the base from exponent from.
---@return number The result.
function math.log10(x) end

---[SHARED] Returns the largest value of all arguments.
---@param ... ... Numbers to get the largest from
---@return number The largest number
function math.max(...) end

---[SHARED] Returns the smallest value of all arguments.
---@param ... ... Numbers to get the smallest from.
---@return number The smallest number
function math.min(...) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This is removed in Lua versions later than what GMod is currently using. You should use the % operator or math.fmod instead.
--- Returns the modulus of the specified values. Same as math.fmod.
---@param base number The base value
---@param modulator number Modulator
---@return number The calculated modulus
function math.mod(base, modulator) end

---[SHARED] Returns the integral and fractional component of the modulo operation.
---@param base number The base value.
---@return number, number number - The integral component.
---@return number, number number - The fractional component.
function math.modf(base) end

---[SHARED] Normalizes angle, so it returns value between -180 and 180.
---@param angle number The angle to normalize, in degrees.
---@return number The normalized angle, in the range of -180 to 180 degrees.
function math.NormalizeAngle(angle) end

---[SHARED] A variable containing the mathematical constant pi. (3.1415926535898)
--- See also: Trigonometry
--- It should be noted that due to the nature of floating point numbers, results of calculations with math.pi may not be what you expect. See second example below.
---@return number The mathematical constant, Pi.
function math.pi() end

---[SHARED] Returns x raised to the power y.
--- In particular, math.pow(1.0, x) and math.pow(x, 0.0) always return 1.0, even when x is a zero or a nan. If both x and y are finite, x is negative, and y is not an integer then math.pow(x, y) is undefined.
---@param x number Base.
---@param y number Exponent.
---@return number y power of x
function math.pow(x, y) end

---[SHARED] Converts an angle in degrees to it's equivalent in radians.
---@param degrees number The angle measured in degrees.
---@return number radians
function math.rad(degrees) end

---[SHARED] Returns a random float between min and max.
--- See also math.random
---@param min number The minimum value.
---@param max number The maximum value.
---@return number Random float between min and max.
function math.Rand(min, max) end

---[SHARED] When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.
--- When called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.
--- When called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.
--- See also math.Rand
---@param m number If m is the only parameter: upper limit. If n is also provided: lower limit. If provided, this must be an integer.
---@param n number Upper limit. If provided, this must be an integer.
---@return number Random value
function math.random(m, n) end

---[SHARED] Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with math.random.
--- For shared random values across predicted realms, use util.SharedRandom.
--- Incorrect usage of this function will affect all random numbers in the game.
---@param seed number The new seed
function math.randomseed(seed) end

---[SHARED] Remaps the value from one range to another
---@param value number The value
---@param inMin number The minimum of the initial range
---@param inMax number The maximum of the initial range
---@param outMin number The minimum of new range
---@param outMax number The maximum of new range
---@return number The number in the new range
function math.Remap(value, inMin, inMax, outMin, outMax) end

---[SHARED] Rounds the given value to the nearest whole number or to the given decimal places.
---@param value number The value to round.
---@param decimals number The decimal places to round to.
---@return number The rounded value.
function math.Round(value, decimals) end

---[SHARED] Returns the sine of given angle.
---@param number number Angle in radians
---@return number Sine for given angle
function math.sin(number) end

---[SHARED] Returns the hyperbolic sine of the given angle.
---@param number number Angle in radians.
---@return number The hyperbolic sine of the given angle.
function math.sinh(number) end

---[SHARED] Snaps a number to the closest multiplicative of given number. See also Angle:SnapTo.
---@param input number The number to snap.
---@param snapTo number What to snap the input number to.
---@return number The clamped value.
function math.SnapTo(input, snapTo) end

---[SHARED] Returns the square root of the number.
---@param value number Value to get the square root of.
---@return number squareRoot
function math.sqrt(value) end

---[SHARED] Returns the tangent of the given angle.
---@param value number Angle in radians
---@return number The tangent of the given angle.
function math.tan(value) end

---[SHARED] Returns the hyperbolic tangent of the given number.
---@param number number Angle in radians.
---@return number The hyperbolic tangent of the given angle.
function math.tanh(number) end

---[SHARED] Returns the fraction of where the current time is relative to the start and end times
---@param start number Start time in seconds
---@param _end number End time in seconds
---@param current number Current time in seconds
---@return number Fraction
function math.TimeFraction(start, _end, current) end

---[SHARED] Rounds towards zero.
---@param num number The number to truncate
---@param digits number The amount of digits to keep after the point.
---@return number The result.
function math.Truncate(num, digits) end

matproxy = {}

---[CLIENT] Adds a material proxy.
---@param MatProxyData table The information about the proxy. See Structures/MatProxyData
function matproxy.Add(MatProxyData) end

---[CLIENT] Called by the engine from OnBind
---@param uname string 
---@param mat IMaterial 
---@param ent Entity 
function matproxy.Call(uname, mat, ent) end

---[CLIENT] Called by the engine from OnBind
---@param name string 
---@param uname string 
---@param mat IMaterial 
---@param values table 
function matproxy.Init(name, uname, mat, values) end

---[CLIENT] Called by engine, returns true if we're overriding a proxy
---@param name string The name of proxy in question
---@return boolean Are we overriding it?
function matproxy.ShouldOverrideProxy(name) end

menu = {}

---[CLIENT] Used by "Demo to Video" to record the frame.
function menu.RecordFrame() end

menubar = {}

---[CLIENT] Creates the menu bar ( The bar at the top of the screen when holding C or Q in sandbox ) and docks it to the top of the screen. It will not appear.
--- Calling this multiple times will NOT remove previous panel.
function menubar.Init() end

---[CLIENT] Checks if the supplied panel is parent to the menubar
---@param pnl Panel The panel to check
---@return boolean Is parent or not
function menubar.IsParent(pnl) end

---[CLIENT] Parents the menubar to the panel and displays the menubar.
---@param pnl Panel The panel to parent to
function menubar.ParentTo(pnl) end

mesh = {}

---[CLIENT] Pushes the new vertex data onto the render stack.
function mesh.AdvanceVertex() end

---[CLIENT] Starts a new dynamic mesh. If an IMesh is passed, it will use that mesh instead.
---@param mesh IMesh Mesh to build. This argument can be removed if you wish to build a "dynamic" mesh. See examples below.
---@param primitiveType number Primitive type, see Enums/MATERIAL.
---@param primiteCount number The amount of primitives.
function mesh.Begin(mesh, primitiveType, primiteCount) end

---[CLIENT] Sets the color to be used for the next vertex.
---@param r number Red component.
---@param g number Green component.
---@param b number Blue component.
---@param a number Alpha component.
function mesh.Color(r, g, b, a) end

---[CLIENT] Ends the mesh and renders it.
function mesh.End() end

---[CLIENT] Sets the normal to be used for the next vertex.
---@param normal Vector The normal of the vertex.
function mesh.Normal(normal) end

---[CLIENT] Sets the position to be used for the next vertex.
---@param position Vector The position of the vertex.
function mesh.Position(position) end

---[CLIENT] Draws a quad using 4 vertices.
---@param vertex1 Vector The first vertex.
---@param vertex2 Vector The second vertex.
---@param vertex3 Vector The third vertex.
---@param vertex4 Vector The fourth vertex.
function mesh.Quad(vertex1, vertex2, vertex3, vertex4) end

---[CLIENT] Draws a quad using a position, a normal and the size.
---@param position Vector The center of the quad.
---@param normal Vector The normal of the quad.
---@param sizeX number X size in pixels.
---@param sizeY number Y size in pixels.
function mesh.QuadEasy(position, normal, sizeX, sizeY) end

---[CLIENT] Sets the specular map values.
--- This function actually does nothing.
---@param r number The red channel multiplier of the specular map.
---@param g number The green channel multiplier of the specular map.
---@param b number The blue channel multiplier of the specular map.
---@param a number The alpha channel multiplier of the specular map.
function mesh.Specular(r, g, b, a) end

---[CLIENT] Sets the s tangent to be used.
--- This function actually does nothing.
---@param sTanger Vector The s tangent.
function mesh.TangentS(sTanger) end

---[CLIENT] Sets the T tangent to be used.
--- This function actually does nothing.
---@param tTanger Vector The t tangent.
function mesh.TangentT(tTanger) end

---[CLIENT] Sets the texture coordinates for the next vertex.
--- Non-zero values of stage require the currently bound material to support it. For example, any LightmappedGeneric material supports stages 1 and 2 (lightmap texture coordinates).
---@param stage number The stage of the texture coordinate.
---@param u number U coordinate.
---@param v number V coordinate.
function mesh.TexCoord(stage, u, v) end

---[CLIENT] It is recommended to use IMesh:BuildFromTriangles instead of the mesh library.
--- A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).
---@param tangentX number 
---@param tangentY number 
---@param tangentZ number 
---@param tangentHandedness number 
function mesh.UserData(tangentX, tangentY, tangentZ, tangentHandedness) end

---[CLIENT] Returns the amount of vertex that have yet been pushed.
---@return number vertexCount
function mesh.VertexCount() end

motionsensor = {}

---[SHARED] 
---@param translator table 
---@param player Player 
---@param rotation Angle 
---@return Vector, Angle, table Vector - Pos
---@return Vector, Angle, table Angle - ang
---@return Vector, Angle, table table - sensor
function motionsensor.BuildSkeleton(translator, player, rotation) end

---[SHARED] 
---@param ent Entity Entity to choose builder for
---@return string Chosen builder
function motionsensor.ChooseBuilderFromEntity(ent) end

---[CLIENT] Returns the depth map material.
---@return IMaterial The material
function motionsensor.GetColourMaterial() end

---[CLIENT] 
function motionsensor.GetSkeleton() end

---[CLIENT] Return whether a kinect is connected - and active (ie - Start has been called).
---@return boolean Connected and active or not
function motionsensor.IsActive() end

---[CLIENT] Returns true if we have detected that there's a kinect connected to the PC
---@return boolean Connected or not
function motionsensor.IsAvailable() end

---[SHARED] 
---@param translator table 
---@param sensor table 
---@param pos Vector 
---@param ang Angle 
---@param special_vectors table 
---@param boneid number 
---@param v table 
---@return boolean Return nil on failure
function motionsensor.ProcessAngle(translator, sensor, pos, ang, special_vectors, boneid, v) end

---[SHARED] 
---@param translator table 
---@param sensor table 
---@param pos Vector 
---@param rotation Angle 
---@return Angle Ang. If !translator.AnglesTable then return - {}
function motionsensor.ProcessAnglesTable(translator, sensor, pos, rotation) end

---[SHARED] 
---@param translator table 
---@param sensor table 
---@return Vector Pos. if !translator.PositionTable then return - {}
function motionsensor.ProcessPositionTable(translator, sensor) end

---[CLIENT] This starts access to the kinect sensor. Note that this usually freezes the game for a couple of seconds.
---@return boolean true if the access has been started
function motionsensor.Start() end

---[CLIENT] Stops the motion capture.
function motionsensor.Stop() end

navmesh = {}

---[SERVER] Add this position and normal to the list of walkable positions, used before map generation with navmesh.BeginGeneration
---@param pos Vector The terrain position.
---@param dir Vector The normal of this terrain position.
function navmesh.AddWalkableSeed(pos, dir) end

---[SERVER] Starts the generation of a new navmesh.
--- This process is highly resource intensive and it's not wise to use during normal gameplay
function navmesh.BeginGeneration() end

---[SERVER] Clears all the walkable positions, used before calling navmesh.BeginGeneration.
function navmesh.ClearWalkableSeeds() end

---[SERVER] Creates a new CNavArea.
---@param corner Vector The first corner of the new CNavArea
---@param opposite_corner Vector The opposite (diagonally) corner of the new CNavArea
---@return CNavArea The new CNavArea or nil if we failed for some reason.
function navmesh.CreateNavArea(corner, opposite_corner) end

---[SERVER] Returns a bunch of areas within distance, used to find hiding spots by NextBots for example.
---@param pos Vector The position to search around
---@param radius number Radius to search within
---@param stepdown number Maximum stepdown( fall distance ) allowed
---@param stepup number Maximum stepup( jump height ) allowed
---@return table A table of CNavAreas
function navmesh.Find(pos, radius, stepdown, stepup) end

---[SERVER] Returns an integer indexed table of all CNavAreas on the current map. If the map doesn't have a navmesh generated then this will return an empty table.
---@return table A table of all the CNavAreas on the current map.
function navmesh.GetAllNavAreas() end

---[SERVER] Returns the position of the edit cursor when nav_edit is set to 1.
---@return Vector The position of the edit cursor.
function navmesh.GetEditCursorPosition() end

---[SERVER] Finds the closest standable ground at, above, or below the provided position.
--- The ground must have at least 32 units of empty space above it to be considered by this function, unless 16 layers are tested without finding valid ground.
---@param pos Vector Position to find the closest ground for.
---@return number, Vector number - The height of the ground layer.
---@return number, Vector Vector - The normal of the ground layer.
function navmesh.GetGroundHeight(pos) end

---[SERVER] Returns the currently marked CNavArea, for use with editing console commands.
---@return CNavArea The currently marked CNavArea.
function navmesh.GetMarkedArea() end

---[SERVER] Returns the currently marked CNavLadder, for use with editing console commands.
---@return CNavLadder The currently marked CNavLadder.
function navmesh.GetMarkedLadder() end

---[SERVER] Returns the Nav Area contained in this position that also satisfies the elevation limit.
--- This function will properly see blocked CNavAreas. See navmesh.GetNearestNavArea.
---@param pos Vector The position to search for.
---@param beneathLimit number The elevation limit at which the Nav Area will be searched.
---@return CNavArea The nav area.
function navmesh.GetNavArea(pos, beneathLimit) end

---[SERVER] Returns a CNavArea by the given ID.
--- Avoid calling this function every frame, as internally it does a lookup trough all the CNavAreas, call this once and store the result
---@param id number ID of the CNavArea to get. Starts with 1.
---@return CNavArea The CNavArea with given ID.
function navmesh.GetNavAreaByID(id) end

---[SERVER] Returns the total count of nav areas on the map. If you want to get all nav areas, use navmesh.GetAllNavAreas instead as nav areas IDs are not always sequential.
---@return number The total count of nav areas on the map.
function navmesh.GetNavAreaCount() end

---[SERVER] Returns a CNavLadder by the given ID.
---@param id number ID of the CNavLadder to get. Starts with 1.
---@return CNavLadder The CNavLadder with given ID.
function navmesh.GetNavLadderByID(id) end

---[SERVER] Returns the closest CNavArea to given position at the same height, or beneath it.
--- This function will ignore blocked CNavAreas. See navmesh.GetNavArea for a function that does see blocked areas.
---@param pos Vector The position to look from
---@param anyZ boolean This argument is ignored and has no effect
---@param maxDist number This is the maximum distance from the given position that the function will look for a CNavArea
---@param checkLOS boolean If this is set to true then the function will internally do a util.TraceLine from the starting position to each potential CNavArea with a MASK_NPCSOLID_BRUSHONLY. If the trace fails then the CNavArea is ignored. If this is set to false then the function will find the closest CNavArea through anything, including the world.
---@param checkGround boolean If checkGround is true then this function will internally call navmesh.GetNavArea to check if there is a CNavArea directly below the position, and return it if so, before checking anywhere else.
---@param team number This will internally call CNavArea:IsBlocked to check if the target CNavArea is not to be navigated by the given team. Currently this appears to do nothing.
---@return CNavArea The closest CNavArea found with the given parameters, or a NULL CNavArea if one was not found.
function navmesh.GetNearestNavArea(pos, anyZ, maxDist, checkLOS, checkGround, team) end

---[SERVER] Returns the classname of the player spawn entity.
---@return string The classname of the spawn point entity. By default returns "info_player_start"
function navmesh.GetPlayerSpawnName() end

---[SERVER] Whether we're currently generating a new navmesh with navmesh.BeginGeneration.
---@return boolean Whether we're generating a nav mesh or not.
function navmesh.IsGenerating() end

---[SERVER] Returns true if a navmesh has been loaded when loading the map.
---@return boolean Whether a navmesh has been loaded when loading the map.
function navmesh.IsLoaded() end

---[SERVER] Loads a new navmesh from the .nav file for current map discarding any changes made to the navmesh previously.
function navmesh.Load() end

---[SERVER] Deletes every CNavArea and CNavLadder on the map without saving the changes.
function navmesh.Reset() end

---[SERVER] Saves any changes made to navmesh to the .nav file.
function navmesh.Save() end

---[SERVER] Sets the CNavArea as marked, so it can be used with editing console commands.
---@param area CNavArea The CNavArea to set as the marked area.
function navmesh.SetMarkedArea(area) end

---[SERVER] Sets the CNavLadder as marked, so it can be used with editing console commands.
---@param area CNavLadder The CNavLadder to set as the marked ladder.
function navmesh.SetMarkedLadder(area) end

---[SERVER] Sets the classname of the default spawn point entity, used before generating a new navmesh with navmesh.BeginGeneration.
---@param spawnPointClass string The classname of what the player uses to spawn, automatically adds it to the walkable positions during map generation.
function navmesh.SetPlayerSpawnName(spawnPointClass) end

net = {}

---[SERVER] Sends the currently built net message to all connected players.
--- More information can be found in Net Library Usage.
function net.Broadcast() end

---[SHARED] Returns the amount of data left to read in the current message. Does nothing when sending data.
--- This will include 6 extra bits (or 1 byte rounded-up) used by the engine internally.
---@return number, number number - The amount of data left to read in the current net message in bytes. Returns nil if no net message has been started.
---@return number, number number - The amount of data left to read in the current net message in bits. Returns nil if no net message has been started.
function net.BytesLeft() end

---[SHARED] Returns the size of the current message.
--- This will include 3 extra bytes (24 bits) used by the engine internally to send the data over the network.
---@return number, number number - The amount of bytes written to the current net message. Returns nil if no net message has been started.
---@return number, number number - The amount of bits written to the current net message. Returns nil if no net message has been started.
function net.BytesWritten() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- You may be looking for net.Receive.
--- Function called by the engine to tell the Lua state a message arrived.
---@param length number The message length, in bits.
---@param client Player The player that sent the message. This will be nil in the client state.
function net.Incoming(length, client) end

---[SHARED] Reads an angle from the received net message.
--- You must read information in same order as you write it.
---@return Angle The read angle, or Angle( 0, 0, 0 ) if no angle could be read
function net.ReadAngle() end

---[SHARED] Reads a bit from the received net message.
--- You must read information in same order as you write it.
---@return number 0 or 1, or 0 if the bit could not be read.
function net.ReadBit() end

---[SHARED] Reads a boolean from the received net message.
--- You must read information in same order as you write it.
---@return boolean true or false, or false if the bool could not be read.
function net.ReadBool() end

---[SHARED] Reads a Color from the current net message.
--- You must read information in same order as you write it.
---@param hasAlpha boolean If the color has alpha written or not. Must match what was given to net.WriteColor.
---@return table The Color read from the current net message, or Color( 0, 0, 0, 0 ) if the color could not be read.
function net.ReadColor(hasAlpha) end

---[SHARED] Reads pure binary data from the message.
--- You must read information in same order as you write it.
---@param length number The length of the data to be read, in bytes.
---@return string The binary data read, or a string containing one character with a byte of 0 if no data could be read.
function net.ReadData(length) end

---[SHARED] Reads a double-precision number from the received net message.
--- You must read information in same order as you write it.
---@return number The double-precision number, or 0 if no number could be read.
function net.ReadDouble() end

---[SHARED] Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefore NULL if it is outside of the players PVS or was already removed.
--- You must read information in same order as you write it.
---@return Entity The entity, or Entity(0) if no entity could be read.
function net.ReadEntity() end

---[SHARED] Reads a floating point number from the received net message.
--- You must read information in same order as you write it.
---@return number The floating point number, or 0 if no number could be read.
function net.ReadFloat() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Reads a word, basically unsigned short. This is used internally to read the "header" of the message which is an unsigned short which can be converted to the corresponding message name via util.NetworkIDToString.
---@return number The header number
function net.ReadHeader() end

---[SHARED] Reads an integer from the received net message.
--- You must read information in same order as you write it.
---@param bitCount number The amount of bits to be read. This must be set to what you set to net.WriteInt. Read more information at net.WriteInt.
---@return number The read integer number, or 0 if no integer could be read.
function net.ReadInt(bitCount) end

---[SHARED] Reads a VMatrix from the received net message.
--- You must read information in same order as you write it.
---@return VMatrix The matrix, or an empty matrix if no matrix could be read.
function net.ReadMatrix() end

---[SHARED] Reads a normal vector from the net message.
--- You must read information in same order as you write it.
---@return Vector The normalized vector ( length = 1 ), or Vector( 0, 0, 1 ) if no normal could be read.
function net.ReadNormal() end

---[SHARED] Reads a null-terminated string from the net stream. The size of the string is 8 bits plus 8 bits for every ASCII character in the string.
--- You must read information in same order as you write it.
---@return string The read string, or a string with 0 length if no string could be read.
function net.ReadString() end

---[SHARED] Reads a table from the received net message.
--- Sometimes when sending a table through the net library, the order of the keys may be switched. So be cautious when comparing (See example 1).You must read information in same order as you write it.
--- See net.WriteTable for extra info.
--- You may get net.ReadType: Couldn't read type X during the execution of the function, the problem is that you are sending objects that cannot be serialized/sent over the network.
---@return table Table recieved via the net message, or a blank table if no table could be read.
function net.ReadTable() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Used internally by net.ReadTable.
--- Reads a value from the net message with the specified type, written by net.WriteType.
--- You must read information in same order as you write it.
---@param typeID number The type of value to be read, using Enums/TYPE.
---@return any The value, or the respective blank value based on the type you're reading if the value could not be read.
function net.ReadType(typeID) end

---[SHARED] Reads an unsigned integer with the specified number of bits from the received net message.
--- You must read information in same order as you write it.
---@param numberOfBits number The size of the integer to be read, in bits. This must be set to what you set to net.WriteUInt. Read more information at net.WriteUInt.
---@return number The unsigned integer read, or 0 if the integer could not be read.
function net.ReadUInt(numberOfBits) end

---[SHARED] Reads a vector from the received net message. Vectors sent by this function are compressed, which may result in precision loss. See net.WriteVector for more information.
--- You must read information in same order as you write it.
---@return Vector The read vector, or Vector( 0, 0, 0 ) if no vector could be read.
function net.ReadVector() end

---[SHARED] Adds a net message handler. Only one receiver can be used to receive the net message.
--- The message-name is converted to lower-case so the message-names "BigBlue" and "bigblue" would be equal.You must put this function outside of any other function or hook for it to work properly unless you know what you are doing!
--- You must read information in the same order as you write it.
--- Each net message has a length limit of 64KB!
---@param messageName string The message name to hook to.
---@param callback function The function to be called if the specified message was received. Arguments are:  number len - Length of the message, in bits. Player ply - The player that sent the message, works only server-side.
function net.Receive(messageName, callback) end

---[SERVER] Sends the current message to the specified player, or to all players listed in the table.
---@param ply Player The player(s) to send the message to. Can be a table of players or a CRecipientFilter.
function net.Send(ply) end

---[SERVER] Sends the current message to all except the specified, or to all except all players in the table.
---@param ply Player The player(s) to NOT send the message to. Can be a table of players.
function net.SendOmit(ply) end

---[SERVER] Sends the message to all players that are in the same Potentially Audible Set (PAS) as the position, or simply said, it adds all players that can potentially hear sounds from this position.
---@param position Vector PAS position.
function net.SendPAS(position) end

---[SERVER] Sends the message to all players the position is in the PVS of or, more simply said, sends the message to players that can potentially see this position.
---@param position Vector Position that must be in players' visibility set.
function net.SendPVS(position) end

---[CLIENT] Sends the current message to the server.
--- Each net message has a length limit of 65,533 bytes (approximately 64 KiB) and your net message will error and fail to send if it is larger than this.
--- The message name must be pooled with util.AddNetworkString beforehand!
function net.SendToServer() end

---[SHARED] Begins a new net message. If another net message is already started and hasn't been sent yet, it will be discarded.
--- Each net message has a length limit of 65,533 bytes (approximately 64 KiB) and your net message will error and fail to send if it is larger than this.
--- The message name must be pooled with util.AddNetworkString beforehand!
--- Net messages will not reliably reach the client until the client's GM:InitPostEntity hook is called.
---@param messageName string The name of the message to send
---@param unreliable boolean If set to true, the message is not guaranteed to reach its destination
---@return boolean true if the message has been started.
function net.Start(messageName, unreliable) end

---[SHARED] Writes an angle to the current net message.
---@param angle Angle The angle to be sent.
function net.WriteAngle(angle) end

---[SHARED] Appends a boolean (as 1 or 0) to the current net message.
--- Please note that the bit is written here from a boolean (true/false) but net.ReadBit returns a number.
---@param boolean boolean Bit status (false = 0, true = 1).
function net.WriteBit(boolean) end

---[SHARED] Appends a boolean to the current net message. Alias of net.WriteBit.
---@param boolean boolean Boolean value to write.
function net.WriteBool(boolean) end

---[SHARED] Appends a Color to the current net message.
---@param Color table The Color you want to append to the net message.
---@param writeAlpha boolean If we should write the alpha of the color or not.
function net.WriteColor(Color, writeAlpha) end

---[SHARED] Writes a chunk of binary data to the message.
---@param binaryData string The binary data to be sent.
---@param length number The length of the binary data to be sent, in bytes.
function net.WriteData(binaryData, length) end

---[SHARED] Appends a double-precision number to the current net message.
---@param double number The double to be sent
function net.WriteDouble(double) end

---[SHARED] Appends an entity to the current net message.
---@param entity Entity The entity to be sent.
function net.WriteEntity(entity) end

---[SHARED] Appends a float (number with decimals) to the current net message.
---@param float number The float to be sent.
function net.WriteFloat(float) end

---[SHARED] Appends an integer - a whole number - to the current net message. Can be read back with net.ReadInt on the receiving end.
--- Use net.WriteUInt to send an unsigned number (that you know will never be negative). Use net.WriteFloat for a non-whole number (e.g. 2.25).
---@param integer number The integer to be sent.
---@param bitCount number The amount of bits the number consists of. This must be 32 or less. If you are unsure what to set, just set it to 32. Consult the table below to determine the bit count you need:    Bit Count Minimum value Maximum value     3 -4 3   4 -8 7   5 -16 15   6 -32 31   7 -64 63   8 -128 127   9 -256 255   10 -512 511   11 -1024 1023   12 -2048 2047   13 -4096 4095   14 -8192 8191   15 -16384 16383   16 -32768 32767   17 -65536 65535   18 -131072 131071   19 -262144 262143   20 -524288 524287   21 -1048576 1048575   22 -2097152 2097151   23 -4194304 4194303   24 -8388608 8388607   25 -16777216 16777215   26 -33554432 33554431   27 -67108864 67108863   28 -134217728 134217727   29 -268435456 268435455   30 -536870912 536870911   31 -1073741824 1073741823   32 -2147483648 2147483647
function net.WriteInt(integer, bitCount) end

---[SHARED] Writes a VMatrix to the current net message.
---@param matrix VMatrix The matrix to be sent.
function net.WriteMatrix(matrix) end

---[SHARED] Writes a normalized/direction vector ( Vector with length of 1 ) to the net message.
--- This function uses less bandwidth compared to net.WriteVector and will not send vectors with length of > 1 properly.
---@param normal Vector The normalized/direction vector to be send.
function net.WriteNormal(normal) end

---[SHARED] Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is 65532 characters.
---@param string string The string to be sent.
function net.WriteString(string) end

---[SHARED] Appends a table to the current net message. Adds 16 extra bits per key/value pair so you're better off writing each individual key/value as the exact type if possible.
--- All net messages have a 64kb buffer. This function will not check or error when that buffer is overflown. You might want to consider using util.TableToJSON and util.Compress and send the resulting string in 60kb chunks, doing the opposite on the receiving end.
---@param table table The table to be sent. If the table contains a nil key the table may not be read correctly. Not all objects can be sent over the network. Things like functions, IMaterials, etc will cause errors when reading the table from a net message.If the table contains a nil key the table may not be read correctly. Not all objects can be sent over the network. Things like functions, IMaterials, etc will cause errors when reading the table from a net message.If the table contains a nil key the table may not be read correctly. Not all objects can be sent over the network. Things like functions, IMaterials, etc will cause errors when reading the table from a net message.
function net.WriteTable(table) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- 
--- Used internally by net.WriteTable.
--- Appends any type of value to the current net message.
--- An additional 8-bit unsigned integer indicating the type will automatically be written to the packet before the value, in order to facilitate reading with net.ReadType. If you know the data type you are writing, use a function meant for that specific data type to reduce amount of data sent.
---@param Data any The data to be sent.
function net.WriteType(Data) end

---[SHARED] Appends an unsigned integer with the specified number of bits to the current net message.
--- Use net.WriteInt if you want to send negative and positive numbers. Use net.WriteFloat for a non-whole number (e.g. 2.25).
--- Unsigned numbers do not support negative numbers.
---@param unsignedInteger number The unsigned integer to be sent.
---@param numberOfBits number The size of the integer to be sent, in bits. Acceptable values range from any number 1 to 32 inclusive. For reference: 1 = bit, 4 = nibble, 8 = byte, 16 = short, 32 = long. Consult the table below to determine the bit count you need. The minimum value for all bit counts is 0.    Bit Count Maximum value     1 1   2 3   3 7   4 15   5 31   6 63   7 127   8 255   9 511   10 1023   11 2047   12 4095   13 8191   14 16383   15 32767   16 65535   17 131071   18 262143   19 524287   20 1048575   21 2097151   22 4194303   23 8388607   24 16777215   25 33554431   26 67108863   27 134217727   28 268435455   29 536870911   30 1073741823   31 2147483647   32 4294967295
function net.WriteUInt(unsignedInteger, numberOfBits) end

---[SHARED] Appends a vector to the current net message.
--- Vectors sent by this function are compressed, which may result in precision loss. XYZ components greater than 16384 or less than -16384 are irrecoverably altered (most significant bits are trimmed) and precision after the decimal point is low.
---@param vector Vector The vector to be sent.
function net.WriteVector(vector) end

notification = {}

---[CLIENT] Adds a standard notification to your screen.
---@param text string The text to display.
---@param type number Determines the notification method (e.g. icon) for displaying the notification. See the Enums/NOTIFY.
---@param length number The number of seconds to display the notification for.
function notification.AddLegacy(text, type, length) end

---[CLIENT] Adds a notification with an animated progress bar.
---@param id any Can be any type. It's used as an index.
---@param strText string The text to show
---@param frac number If set, overrides the progress bar animation with given percentage. Range is 0 to 1.
function notification.AddProgress(id, strText, frac) end

---[CLIENT] Removes the notification after 0.8 seconds.
---@param uid any The unique ID of the notification
function notification.Kill(uid) end

numpad = {}

---[SERVER] Activates numpad key owned by the player
---@param ply Player The player whose numpad should be simulated
---@param key number The key to press, see Enums/KEY
---@param isButton boolean Should this keypress pretend to be a from a gmod_button? (causes numpad.FromButton to return true)
function numpad.Activate(ply, key, isButton) end

---[SERVER] Deactivates numpad key owned by the player
---@param ply Player The player whose numpad should be simulated
---@param key number The key to press, corresponding to Enums/KEY
---@param isButton boolean Should this keypress pretend to be a from a gmod_button? (causes numpad.FromButton to return true)
function numpad.Deactivate(ply, key, isButton) end

---[SERVER] Returns true during a function added with numpad.Register when the third argument to numpad.Activate is true.
--- This is caused when a numpad function is triggered by a button SENT being used.
---@return boolean wasButton
function numpad.FromButton() end

---[SERVER] Calls a function registered with numpad.Register when a player presses specified key.
--- See for key released action: numpad.OnUp
---@param ply Player The player whose numpad should be watched
---@param key number The key, corresponding to Enums/KEY
---@param name string The name of the function to run, corresponding with the one used in numpad.Register
---@param ... ... Arguments to pass to the function passed to numpad.Register.
---@return number The impulse ID
function numpad.OnDown(ply, key, name, ...) end

---[SERVER] Calls a function registered with numpad.Register when a player releases specified key.
--- See for key pressed action: numpad.OnDown
---@param ply Player The player whose numpad should be watched
---@param key number The key, corresponding to Enums/KEY
---@param name string The name of the function to run, corresponding with the one used in numpad.Register
---@param ... ... Arguments to pass to the function passed to numpad.Register.
---@return number The impulse ID
function numpad.OnUp(ply, key, name, ...) end

---[SERVER] Registers a numpad library action for use with numpad.OnDown and numpad.OnUp
---@param id string The unique id of your action.
---@param func function The function to be executed. Arguments are: Player ply - The player who pressed the button vararg ... - The 4th and all subsequent arguments passed from numpad.OnDown and/or numpad.OnUp Returning false in this function will remove the listener which triggered this function (example: return false if one of your varargs is an entity which is no longer valid)
function numpad.Register(id, func) end

---[SERVER] Removes a function added by either numpad.OnUp or numpad.OnDown
---@param ID number The impulse ID returned by numpad.OnUp or numpad.OnDown
function numpad.Remove(ID) end

---[SERVER] Either runs numpad.Activate or numpad.Deactivate depending on the key's current state
---@param ply Player The player whose numpad should be simulated
---@param key number The key to press, corresponding to Enums/KEY
function numpad.Toggle(ply, key) end

os = {}

---[SHARED] Returns the approximate cpu time the application ran.
--- See also SysTime
--- This function has different precision on Linux (1/100).
---@return number runtime
function os.clock() end

---[SHARED] Returns the date/time as a formatted string or in a table.
---@param format string The format string. If this is equal to *t or !*t then this function will return a Structures/DateData, otherwise it will return a string. If this starts with an !, the returned data will use the UTC timezone rather than the local timezone. See http://www.mkssoftware.com/docs/man3/strftime.3.asp for available format flags. Not all flags are available on all operating systems and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the # flags also crashes the game on Windows.Issue Tracker: 329 Known formats that work on all platforms:    Format Description Example of the output     %a Abbreviated weekday name Wed   %A Full weekday name Wednesday   %b Abbreviated month name Sep   %B Full month name September   %c Locale-appropriate date and time Varies by platform and language settings   %d Day of the month [01-31] 16   %H Hour, using a 24-hour clock [00-23] 23   %I Hour, using a 12-hour clock [01-12] 11   %j Day of the year [001-365] 259   %m Month [01-12] 09   %M Minute [00-59] 48   %p Either am or pm pm   %S Second [00-60] 10   %w Weekday [0-6 = Sunday-Saturday] 3   %W Week of the year [00-53] 37   %x Date (Same as %m/%d/%y) 09/16/98   %X Time (Same as %H:%M:%S) 24:48:10   %y Two-digit year [00-99] 98   %Y Full year 1998   %z Timezone -0300   %% A percent sign %   Not all flags are available on all operating systems and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the # flags also crashes the game on Windows.Issue Tracker: 329Not all flags are available on all operating systems and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the # flags also crashes the game on Windows.Issue Tracker: 329
---@param time number Time to use for the format.
---@return string Formatted date This will be a Structures/DateData if the first argument equals to *t or !*tThis will be a Structures/DateData if the first argument equals to *t or !*tThis will be a Structures/DateData if the first argument equals to *t or !*t
function os.date(format, time) end

---[SHARED] Subtracts the second from the first value and rounds the result.
---@param timeA number The first value.
---@param timeB number The value to subtract.
---@return number diffTime
function os.difftime(timeA, timeB) end

---[SHARED] Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members.
---@param dateData table Table to generate the time from. This table's data is interpreted as being in the local timezone. See Structures/DateData
---@return number Seconds passed since Unix epoch
function os.time(dateData) end

package = {}

---[SHARED] Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to module.
---@param module table The module table to be given a metatable
function package.seeall(module) end

permissions = {}

---[CLIENT] Requests the player to connect to a specified server. The player will be prompted with a confirmation window.
---@param address string The address to ask to connect to. If a port is not given, the default :27015 port will be added.
function permissions.AskToConnect(address) end

---[MENU] Connects player to the server. This is what permissions.AskToConnect uses internally.
---@param ip string IP address to connect.
function permissions.Connect(ip) end

---[CLIENT] Activates player's microphone as if they pressed the speak button themself. The player will be prompted with a confirmation window which grants permission temporarily/permanently(depending on checkbox state) for the connected server (revokable).
--- This is used for TTT's traitor voice channel.
---@param enable boolean Enable or disable voice activity. true will run +voicerecord command, anything else -voicerecord.
function permissions.EnableVoiceChat(enable) end

---[MENU] Returns all permissions per server. Permanent permissions are stored in settings/permissions.bin.
---@return table A table of permanent and temporary permissions granted for servers. Example structure: permanent = { 	["123.123.123.123"] = "connect" -- this server has a permission to connect player to any server even after restarting the game }, temporary = { 	["111.111.111.111"] = "voicerecord" -- this server can enable voice activity on player during this game session }permanent = { 	["123.123.123.123"] = "connect" -- this server has a permission to connect player to any server even after restarting the game }, temporary = { 	["111.111.111.111"] = "voicerecord" -- this server can enable voice activity on player during this game session }
function permissions.GetAll() end

---[MENU] Grants permission to the current connected server.
---@param permission string Permission to grant for the server the player is currently connected.
---@param temporary boolean true if the permission should be granted temporary.
function permissions.Grant(permission, temporary) end

---[CLIENT] Returns whether the player has granted the current server a specific permission.
---@param permission string The permission to poll. Currently only 2 permission is valid:  "connect" "voicerecord"
---@return boolean Whether the permission is granted or not.
function permissions.IsGranted(permission) end

---[MENU] Revokes permission from the server.
---@param permission string Permission to revoke from the server.
---@param ip string IP of the server.
function permissions.Revoke(permission, ip) end

physenv = {}

---[SHARED] Adds surface properties to the game's physics environment.
--- The game has a limit of 128 surface properties - this includes properties loaded automatically from surfaceproperties.txt. Due to this, there's only a small amount of open slots that can be registered with GMod's provided surfaceproperties.txt.Issue Tracker: 2604
---@param properties string The properties to add. Each one should include "base" or the game will crash due to some values being missing.
function physenv.AddSurfaceData(properties) end

---[SHARED] Returns the air density used to calculate drag on physics objects.
--- The unit is in kg/m^3.
---@return number Default value is 2.
function physenv.GetAirDensity() end

---[SHARED] Gets the gravitational acceleration used for physics objects in source_unit/s^2.
---@return Vector gravAccel
function physenv.GetGravity() end

---[SHARED] Returns the last simulation duration of the in-game physics.
---@return number The last simulation duration of the in-game physics in seconds
function physenv.GetLastSimulationTime() end

---[SHARED] Gets the current performance settings in table form.
---@return table Performance settings. See Structures/PhysEnvPerformanceSettings
function physenv.GetPerformanceSettings() end

---[SHARED] Sets the air density.
---@param airDensity number The new air density.
function physenv.SetAirDensity(airDensity) end

---[SHARED] Sets the gravitational acceleration used for physics objects.
--- Does not work on players.
---@param gravAccel Vector The new gravity in source_unit/s^2.
function physenv.SetGravity(gravAccel) end

---[SHARED] Sets the performance settings.
---@param performanceSettings table The new performance settings. See Structures/PhysEnvPerformanceSettings
function physenv.SetPerformanceSettings(performanceSettings) end

player = {}

---[SERVER] Similar to the serverside command "bot", this function creates a new Player bot with the given name. This bot will not obey to the usual "bot_*" commands, and it's the same bot base used in TF2 and CS:S.
--- The best way to control the behaviour of a Player bot right now is to use the GM:StartCommand hook and modify its input serverside.
--- Despite this Player being fake, it has to be removed from the server by using Player:Kick and NOT Entity:Remove.
--- Also keep in mind that these bots still use player slots, so you won't be able to spawn them in singleplayer!Any Bot created using this method will be considered UnAuthed by Garry's Mod
---@param botName string The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it. Example: "Bot name test", "Bot name test(1)".
---@return Player The newly created Player bot. Returns NULL if there's no Player slots available to host it.
function player.CreateNextBot(botName) end

---[SHARED] Gets all the current players in the server (not including connecting clients).
--- This function returns bots as well as human players. See player.GetBots and  player.GetHumans.This function returns a sequential table, meaning it should be looped with ipairs instead of pairs for efficiency reasons.
---@return table All Players currently in the server.
function player.GetAll() end

---[SHARED] Returns a table of all bots on the server.
---@return table A table only containing bots ( AI / non human players )
function player.GetBots() end

---[SHARED] Gets the player with the specified AccountID.
--- Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
---@param accountID number The Player:AccountID to find the player by.
---@return Player Player if one is found, false otherwise.
function player.GetByAccountID(accountID) end

---[SHARED] Gets the player with the specified connection ID.
--- Connection ID can be retrieved via gameevent.Listen events.
--- For a function that returns a player based on their Entity:EntIndex, see Entity.
--- For a function that returns a player based on their Player:UserID, see Player.
---@param connectionID number The connection ID to find the player by.
---@return Player Player if one is found, nil otherwise
function player.GetByID(connectionID) end

---[SHARED] Gets the player with the specified SteamID.
--- Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
---@param steamID string The Player:SteamID to find the player by.
---@return Player Player if one is found, false otherwise.
function player.GetBySteamID(steamID) end

---[SHARED] Gets the player with the specified SteamID64.
--- Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
---@param steamID64 string The Player:SteamID64 to find the player by.
---@return Player Player if one is found, false otherwise.
function player.GetBySteamID64(steamID64) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use player.GetBySteamID64, player.GetBySteamID or player.GetByAccountID to get a player by a unique identifier instead.
--- Gets the player with the specified uniqueID (not recommended way to identify players).
--- It is highly recommended to use player.GetByAccountID, player.GetBySteamID or player.GetBySteamID64 instead as this function can have collisions ( be same for different people ) while SteamID is guaranteed to unique to each player.Internally this function iterates over all players in the server, meaning it can be quite expensive in a performance-critical context.
---@param uniqueID string The Player:UniqueID to find the player by.
---@return Player Player if one is found, false otherwise.
function player.GetByUniqueID(uniqueID) end

---[SHARED] Gives you the player count.
--- Similar to #player.GetAll() but with better performance since the player table doesn't have to be generated. If player.GetAll is already being called for iteration, then using the # operator on the table will be faster than calling this function since it is JITted.
---@return number Number of players
function player.GetCount() end

---[SHARED] Returns a table of all human ( non bot/AI ) players.
--- Unlike player.GetAll, this does not include bots.
--- This function returns a sequential table, meaning it should be looped with ipairs instead of pairs for efficiency reasons.
---@return table A table of all human ( non bot/AI ) players.
function player.GetHumans() end

player_manager = {}

---[SHARED] Assigns view model hands to player model.
---@param name string Player model name
---@param model string Hands model
---@param skin number Skin to apply to the hands
---@param bodygroups string Bodygroups to apply to the hands. See Entity:SetBodyGroups for help with the format.
---@param matchBodySkin boolean If set to true, the skin of the hands will be set to the skin of the playermodel. This is useful when player models have multiple user-selectable skins.
function player_manager.AddValidHands(name, model, skin, bodygroups, matchBodySkin) end

---[SHARED] Associates a simplified name with a path to a valid player model.
--- Only used internally.
---@param name string Simplified name
---@param model string Valid PlayerModel path
function player_manager.AddValidModel(name, model) end

---[SHARED] Returns the entire list of valid player models.
function player_manager.AllValidModels() end

---[SHARED] Clears a player's class association by setting their ClassID to 0
---@param ply Player Player to clear class from
function player_manager.ClearPlayerClass(ply) end

---[SHARED] Gets a players class
---@param ply Player Player to get class
---@return string The players class
function player_manager.GetPlayerClass(ply) end

---[SHARED] Retrieves a copy of all registered player classes.
---@return table A copy of all registered player classes.
function player_manager.GetPlayerClasses() end

---[SHARED] Applies basic class variables when the player spawns.
--- Called from GM:PlayerSpawn in the base gamemode.
---@param ply Player Player to setup
function player_manager.OnPlayerSpawn(ply) end

---[SHARED] Register a class metatable to be assigned to players later
---@param name string Class name
---@param table table Class metatable
---@param base string Base class name
function player_manager.RegisterClass(name, table, base) end

---[SHARED] Execute a named function within the player's set class
---@param ply Player Player to execute function on.
---@param funcName string Name of function.
---@param ... ... Optional arguments. Can be of any type.
---@return ... The values returned by the called function.
function player_manager.RunClass(ply, funcName, ...) end

---[SHARED] Sets a player's class
---@param ply Player Player to set class
---@param classname string Name of class to set
function player_manager.SetPlayerClass(ply, classname) end

---[SHARED] Retrieves correct hands for given player model. By default returns citizen hands.
---@param name string Player model name
---@return table A table with following contents:  string model - Model of hands number skin - Skin of hands string body - Bodygroups of hands
function player_manager.TranslatePlayerHands(name) end

---[SHARED] Returns the valid model path for a simplified name.
---@param shortName string The short name of the model.
---@return string The valid model path for the short name.
function player_manager.TranslatePlayerModel(shortName) end

---[SHARED] Returns the simplified name for a valid model path of a player model.
--- Opposite of player_manager.TranslatePlayerModel.
---@param model string The model path to a player model
---@return string The simplified name for that model
function player_manager.TranslateToPlayerModelName(model) end

presets = {}

---[CLIENT] Adds preset to a preset group.
---@param groupname string The preset group name, usually it's tool class name.
---@param name string Preset name, must be unique.
---@param values table A table of preset console commands.
function presets.Add(groupname, name, values) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to tell the player that the name they tried to use in their preset is not acceptable.
function presets.BadNameAlert() end

---[CLIENT] Returns whether a preset with given name exists or not
---@param type string The preset group name, usually it's tool class name.
---@param name string Name of the preset to test
---@return boolean true if the preset does exist
function presets.Exists(type, name) end

---[CLIENT] Returns a table with preset names and values from a single preset group.
---@param groupname string Preset group name.
---@return table All presets in specified group.
function presets.GetTable(groupname) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Used internally to ask the player if they want to override an already existing preset.
---@param callback function 
function presets.OverwritePresetPrompt(callback) end

---[CLIENT] Removes a preset entry from a preset group.
---@param groupname string Preset group to remove from
---@param name string Name of preset to remove
function presets.Remove(groupname, name) end

---[CLIENT] Renames preset.
---@param groupname string Preset group name
---@param oldname string Old preset name
---@param newname string New preset name
function presets.Rename(groupname, oldname, newname) end

properties = {}

---[SHARED] Add properties to the properties module
---@param name string A unique name used to identify the property
---@param propertyData table A table that defines the property. Uses the Structures/PropertyAdd.
function properties.Add(name, propertyData) end

---[SHARED] Returns true if given entity can be targeted by the player via the properties system.
--- This should be used serverside in your properties to prevent abuse by clientside scripting.
---@param ent Entity The entity to test
---@param ply Player If given, will also perform a distance check based on the entity's Orientated Bounding Box.
---@return boolean True if entity can be targeted, false otherwise
function properties.CanBeTargeted(ent, ply) end

---[CLIENT] Returns an entity player is hovering over with their cursor.
---@param pos Vector Eye position of local player, Entity:EyePos
---@param aimVec Vector Aim vector of local player, Player:GetAimVector
---@return Entity The hovered entity
function properties.GetHovered(pos, aimVec) end

---[SHARED] Checks if player hovers over any entities and open a properties menu for it.
---@param eyepos Vector The eye pos of a player
---@param eyevec Vector The aim vector of a player
function properties.OnScreenClick(eyepos, eyevec) end

---[SHARED] Opens properties menu for given entity.
---@param ent Entity The entity to open menu for
---@param tr table The trace that is passed as second argument to Action callback of a property
function properties.OpenEntityMenu(ent, tr) end

render = {}

---[CLIENT] Adds a beam segment to the beam started by render.StartBeam.
---@param startPos Vector Beam start position.
---@param width number The width of the beam.
---@param textureEnd number The end coordinate of the texture used.
---@param color table The color to be used. Uses the Color.
function render.AddBeam(startPos, width, textureEnd, color) end

---[CLIENT] Blurs the render target ( or a given texture )
---@param rendertarget ITexture The texture to blur
---@param blurx number Horizontal amount of blur
---@param blury number Vertical amount of blur
---@param passes number Amount of passes to go through
function render.BlurRenderTarget(rendertarget, blurx, blury, passes) end

---[CLIENT] This function overrides the brush material for next render operations. It can be used with Entity:DrawModel.
---@param mat IMaterial 
function render.BrushMaterialOverride(mat) end

---[CLIENT] Captures a part of the current render target and returns the data as a binary string in the given format.
--- Since the pixel buffer clears itself every frame, this will return a black screen outside of render hooks. To capture the user's final view, use GM:PostRender. This will not capture the Steam overlay or third-party injections (such as the Discord overlay, Overwolf, and advanced cheats) on the user's screen.
--- In PNG mode, this function can produce unexpected result where foreground is rendered as transparent.
--- This is caused by render.SetWriteDepthToDestAlpha set to true when doing most of render operations, including rendering in _rt_fullframefb. If you want to capture render target's content as PNG image only for output quality, set Structures/RenderCaptureData's alpha to false when capturing render targets with render.SetWriteDepthToDestAlpha set to true.Issue Tracker: 2571
---@param captureData table Parameters of the capture. See Structures/RenderCaptureData.
---@return string binaryData
function render.Capture(captureData) end

---[CLIENT] Dumps the current render target and allows the pixels to be accessed by render.ReadPixel.
function render.CapturePixels() end

---[CLIENT] Clears the current render target and the specified buffers.
--- This sets the alpha incorrectly for surface draw calls for render targets.Issue Tracker: 2085
---@param r number Red component to clear to.
---@param g number Green component to clear to.
---@param b number Blue component to clear to.
---@param a number Alpha component to clear to.
---@param clearDepth boolean Clear the depth.
---@param clearStencil boolean Clear the stencil.
function render.Clear(r, g, b, a, clearDepth, clearStencil) end

---[CLIENT] Clears the current rendertarget for obeying the current stencil buffer conditions.
---@param r number Value of the red channel to clear the current rt with.
---@param g number Value of the green channel to clear the current rt with.
---@param b number Value of the blue channel to clear the current rt with.
---@param a number Value of the alpha channel to clear the current rt with.
---@param depth boolean Clear the depth buffer.
function render.ClearBuffersObeyStencil(r, g, b, a, depth) end

---[CLIENT] Resets the depth buffer.
--- This function also clears the stencil buffer. Use render.Clear in the meantime.Issue Tracker: 3317
function render.ClearDepth() end

---[CLIENT] Clears a render target
--- It uses render.Clear then render.SetRenderTarget on the modified render target.
---@param texture ITexture 
---@param color table The color, see Color
function render.ClearRenderTarget(texture, color) end

---[CLIENT] Resets all values in the stencil buffer to zero.
function render.ClearStencil() end

---[CLIENT] Sets the stencil value in a specified rect.
--- This is not affected by render.SetStencilWriteMask
---@param originX number X origin of the rectangle.
---@param originY number Y origin of the rectangle.
---@param endX number The end X coordinate of the rectangle.
---@param endY number The end Y coordinate of the rectangle.
---@param stencilValue number Value to set cleared stencil buffer to.
function render.ClearStencilBufferRectangle(originX, originY, endX, endY, stencilValue) end

---[CLIENT] Calculates the lighting caused by dynamic lights for the specified surface.
---@param position Vector The position to sample from.
---@param normal Vector The normal of the surface.
---@return Vector A vector representing the light at that point.
function render.ComputeDynamicLighting(position, normal) end

---[CLIENT] Calculates the light color of a certain surface.
---@param position Vector The position of the surface to get the light from.
---@param normal Vector The normal of the surface to get the light from.
---@return Vector A vector representing the light at that point.
function render.ComputeLighting(position, normal) end

---[CLIENT] Copies the currently active Render Target to the specified texture.
---@param Target ITexture The texture to copy to
function render.CopyRenderTargetToTexture(Target) end

---[CLIENT] Copies the contents of one texture to another. Only works with rendertargets.
---@param texture_from ITexture 
---@param texture_to ITexture 
function render.CopyTexture(texture_from, texture_to) end

---[CLIENT] Changes the cull mode.
---@param cullMode number Cullmode, see Enums/MATERIAL_CULLMODE
function render.CullMode(cullMode) end

---[CLIENT] Set's the depth range of the upcoming render.
---@param depthmin number The minimum depth of the upcoming render. 0.0 = render normally; 1.0 = render nothing.
---@param depthmax number The maximum depth of the upcoming render. 0.0 = render everything (through walls); 1.0 = render normally.
function render.DepthRange(depthmin, depthmax) end

---[CLIENT] Draws textured beam.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param startPos Vector Beam start position.
---@param endPos Vector Beam end position.
---@param width number The width of the beam.
---@param textureStart number The start coordinate of the texture used.
---@param textureEnd number The end coordinate of the texture used.
---@param color table The color to be used. Uses the Color.
function render.DrawBeam(startPos, endPos, width, textureStart, textureEnd, color) end

---[CLIENT] Draws a box in 3D space.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param position Vector Origin of the box.
---@param angles Angle Orientation of the box.
---@param mins Vector Start position of the box, relative to origin.
---@param maxs Vector End position of the box, relative to origin.
---@param color table The color of the box. Uses the Color.
function render.DrawBox(position, angles, mins, maxs, color) end

---[CLIENT] Draws a line in 3D space.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param startPos Vector Line start position in world coordinates.
---@param endPos Vector Line end position in world coordinates.
---@param color table The color to be used. Uses the Color.
---@param writeZ boolean Whether or not to consider the Z buffer. If false, the line will be drawn over everything currently drawn, if true, the line will be drawn with depth considered, as if it were a regular object in 3D space. Enabling this option will cause the line to ignore the color's alpha.Issue Tracker: 1086Enabling this option will cause the line to ignore the color's alpha.Issue Tracker: 1086Enabling this option will cause the line to ignore the color's alpha.Issue Tracker: 1086
function render.DrawLine(startPos, endPos, color, writeZ) end

---[CLIENT] Draws 2 connected triangles. Expects material to be set by render.SetMaterial.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param vert1 Vector First vertex.
---@param vert2 Vector The second vertex.
---@param vert3 Vector The third vertex.
---@param vert4 Vector The fourth vertex.
---@param color table The color of the quad. See Color
function render.DrawQuad(vert1, vert2, vert3, vert4, color) end

---[CLIENT] Draws a quad.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param position Vector Origin of the sprite.
---@param normal Vector The face direction of the quad.
---@param width number The width of the quad.
---@param height number The height of the quad.
---@param color table The color of the quad. Uses the Color.
---@param rotation number The rotation of the quad counter-clockwise in degrees around the normal axis. In other words, the quad will always face the same way but this will rotate its corners.
function render.DrawQuadEasy(position, normal, width, height, color, rotation) end

---[CLIENT] Draws the current material set by render.SetMaterial to the whole screen. The color cannot be customized.
--- See also render.DrawScreenQuadEx.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param applyPoster boolean If set to true, when rendering a poster the quad will be properly drawn in parts in the poster. This is used internally by some Post Processing effects. Certain special textures (frame buffer like textures) do not need this adjustment.
function render.DrawScreenQuad(applyPoster) end

---[CLIENT] Draws the the current material set by render.SetMaterial to the area specified. Color cannot be customized.
--- See also render.DrawScreenQuad.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param startX number X start position of the rect.
---@param startY number Y start position of the rect.
---@param width number Width of the rect.
---@param height number Height of the rect.
function render.DrawScreenQuadEx(startX, startY, width, height) end

---[CLIENT] Draws a sphere in 3D space. The material previously set with render.SetMaterial will be applied the sphere's surface.
--- See also render.DrawWireframeSphere for a wireframe equivalent.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param position Vector Position of the sphere.
---@param radius number Radius of the sphere. Negative radius will make the sphere render inwards rather than outwards.
---@param longitudeSteps number The number of longitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.
---@param latitudeSteps number The number of latitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.
---@param color table The color of the sphere. Uses the Color.
function render.DrawSphere(position, radius, longitudeSteps, latitudeSteps, color) end

---[CLIENT] Draws a sprite in 3D space.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param position Vector Position of the sprite.
---@param width number Width of the sprite.
---@param height number Height of the sprite.
---@param color table Color of the sprite. Uses the Color.
function render.DrawSprite(position, width, height, color) end

---[CLIENT] Draws a texture over the whole screen.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param tex ITexture The texture to draw
function render.DrawTextureToScreen(tex) end

---[CLIENT] Draws a textured rectangle.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param tex ITexture The texture to draw
---@param x number The x coordinate of the rectangle to draw.
---@param y number The y coordinate of the rectangle to draw.
---@param width number The width of the rectangle to draw.
---@param height number The height of the rectangle to draw.
function render.DrawTextureToScreenRect(tex, x, y, width, height) end

---[CLIENT] Draws a wireframe box in 3D space.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param position Vector Position of the box.
---@param angle Angle Angles of the box.
---@param mins Vector The lowest corner of the box.
---@param maxs Vector The highest corner of the box.
---@param color table The color of the box. Uses the Color.
---@param writeZ boolean Sets whenever to write to the zBuffer.
function render.DrawWireframeBox(position, angle, mins, maxs, color, writeZ) end

---[CLIENT] Draws a wireframe sphere in 3d space.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param position Vector Position of the sphere.
---@param radius number The size of the sphere.
---@param longitudeSteps number The amount of longitude steps. The larger this number is, the smoother the sphere is.
---@param latitudeSteps number The amount of latitude steps. The larger this number is, the smoother the sphere is.
---@param color table The color of the wireframe. Uses the Color.
---@param writeZ boolean Whether or not to consider the Z buffer. If false, the wireframe will be drawn over everything currently drawn. If true, it will be drawn with depth considered, as if it were a regular object in 3D space.
function render.DrawWireframeSphere(position, radius, longitudeSteps, latitudeSteps, color, writeZ) end

---[CLIENT] Sets the status of the clip renderer, returning previous state.
--- To prevent unintended rendering behavior of other mods/the game, you must reset the clipping state to its previous value.Reloading the map does not reset the previous value of this function.Issue Tracker: 3105
---@param state boolean New clipping state.
---@return boolean Previous clipping state.
function render.EnableClipping(state) end

---[CLIENT] Ends the beam mesh of a beam started with render.StartBeam.
function render.EndBeam() end

---[CLIENT] Sets the color of the fog.
---@param red number Red channel of the fog color, 0 - 255.
---@param green number Green channel of the fog color, 0 - 255.
---@param blue number Blue channel of the fog color, 0 - 255.
function render.FogColor(red, green, blue) end

---[CLIENT] Sets the at which the fog reaches its max density.
---@param distance number The distance at which the fog reaches its max density. If used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hookIf used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hookIf used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hook
function render.FogEnd(distance) end

---[CLIENT] Sets the maximum density of the fog.
---@param maxDensity number The maximum density of the fog, 0-1.
function render.FogMaxDensity(maxDensity) end

---[CLIENT] Sets the mode of fog.
---@param fogMode number Fog mode, see Enums/MATERIAL_FOG.
function render.FogMode(fogMode) end

---[CLIENT] Sets the distance at which the fog starts showing up.
---@param fogStart number The distance at which the fog starts showing up. If used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hookIf used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hookIf used in GM:SetupSkyboxFog, this value must be scaled by the first argument of the hook
function render.FogStart(fogStart) end

---[CLIENT] Returns the ambient color of the map.
---@return Vector color
function render.GetAmbientLightColor() end

---[CLIENT] Returns the current alpha blending.
---@return number Current alpha blending in range 0 to 1.
function render.GetBlend() end

---[CLIENT] 
---@return ITexture The bloom texture
function render.GetBloomTex0() end

---[CLIENT] 
---@return ITexture 
function render.GetBloomTex1() end

---[CLIENT] Returns the current color modulation values as normals.
---@return number, number, number number - r
---@return number, number, number number - g
---@return number, number, number number - b
function render.GetColorModulation() end

---[CLIENT] Returns the maximum available directX version.
---@return number dxLevel
function render.GetDXLevel() end

---[CLIENT] Returns the current fog color.
---@return number, number, number number - Red part of the color.
---@return number, number, number number - Green part of the color
---@return number, number, number number - Blue part of the color
function render.GetFogColor() end

---[CLIENT] Returns the fog start and end distance.
---@return number, number, number number - Fog start distance set by render.FogStart
---@return number, number, number number - For end distance set by render.FogEnd
---@return number, number, number number - Fog Z distance set by render.SetFogZ
function render.GetFogDistances() end

---[CLIENT] Returns the fog mode.
---@return number Fog mode, see Enums/MATERIAL_FOG
function render.GetFogMode() end

---[CLIENT] Returns the _rt_FullFrameDepth texture. Alias of _rt_PowerOfTwoFB
---@return ITexture 
function render.GetFullScreenDepthTexture() end

---[CLIENT] Returns whether HDR is currently enabled or not. This takes into account hardware support, current map and current client settings.
---@return boolean true if the player currently has HDR enabled.
function render.GetHDREnabled() end

---[CLIENT] Gets the light exposure on the specified position.
---@param position Vector The position of the surface to get the light from.
---@return Vector lightColor
function render.GetLightColor(position) end

---[CLIENT] 
---@return ITexture 
function render.GetMoBlurTex0() end

---[CLIENT] 
---@return ITexture 
function render.GetMoBlurTex1() end

---[CLIENT] 
---@return ITexture 
function render.GetMorphTex0() end

---[CLIENT] 
---@return ITexture 
function render.GetMorphTex1() end

---[CLIENT] Returns the render target's power of two texture.
---@return ITexture The power of two texture, which is _rt_poweroftwofb by default.
function render.GetPowerOfTwoTexture() end

---[CLIENT] Alias of render.GetPowerOfTwoTexture.
---@return ITexture 
function render.GetRefractTexture() end

---[CLIENT] Returns the currently active render target.
--- Instead of saving the current render target using this function and restoring to it later, it is generally better practice to use render.PushRenderTarget and render.PopRenderTarget.
---@return ITexture The currently active Render Target
function render.GetRenderTarget() end

---[CLIENT] Returns the _rt_ResolvedFullFrameDepth texture for SSAO depth. It will only be updated if GM:NeedsDepthPass returns true.
---@return ITexture The depth texture.
function render.GetResolvedFullFrameDepth() end

---[CLIENT] Obtain an ITexture of the screen. You must call render.UpdateScreenEffectTexture in order to update this texture with the currently rendered scene.
--- This texture is mainly used within GM:RenderScreenspaceEffects
---@param textureIndex number Max index is 3, but engine only creates the first two for you.
---@return ITexture 
function render.GetScreenEffectTexture(textureIndex) end

---[CLIENT] 
---@return ITexture 
function render.GetSmallTex0() end

---[CLIENT] 
---@return ITexture 
function render.GetSmallTex1() end

---[CLIENT] Returns a floating point texture the same resolution as the screen.
--- The gmodscreenspace doesn't behave as expected when drawing a floating-point texture to an integer texture (e.g. the default render target). Use an UnlitGeneric material instead
---@return ITexture Render target named "__rt_supertexture1"
function render.GetSuperFPTex() end

---[CLIENT] See render.GetSuperFPTex
---@return ITexture Render target named "__rt_supertexture2"
function render.GetSuperFPTex2() end

---[CLIENT] Performs a render trace and returns the color of the surface hit, this uses a low res version of the texture.
---@param startPos Vector The start position to trace from.
---@param endPos Vector The end position of the trace.
---@return Vector color
function render.GetSurfaceColor(startPos, endPos) end

---[CLIENT] Returns a vector representing linear tone mapping scale.
---@return Vector The vector representing linear tone mapping scale.
function render.GetToneMappingScaleLinear() end

---[CLIENT] Returns the current view setup.
---@param noPlayer boolean If true, returns the view->GetViewSetup, if false - returns view->GetPlayerViewSetup
---@return table Current current view setup. See Structures/ViewSetup
function render.GetViewSetup(noPlayer) end

---[CLIENT] Sets the render material override for all next calls of Entity:DrawModel. Also overrides render.MaterialOverrideByIndex.
---@param material IMaterial The material to use as override, use nil to disable.
function render.MaterialOverride(material) end

---[CLIENT] Similar to render.MaterialOverride, but overrides the materials per index.
--- render.MaterialOverride overrides effects of this function.
---@param index number Starts with 0, the index of the material to override
---@param material IMaterial The material to override with
function render.MaterialOverrideByIndex(index, material) end

---[CLIENT] Returns the maximum texture height the renderer can handle.
---@return number maxTextureHeight
function render.MaxTextureHeight() end

---[CLIENT] Returns the maximum texture width the renderer can handle.
---@return number maxTextureWidth
function render.MaxTextureWidth() end

---[CLIENT] Creates a new ClientsideModel, renders it at the specified pos/ang, and removes it. Can also be given an existing CSEnt to reuse instead.
--- This function is only meant to be used in a single render pass kind of scenario, if you need to render a model continuously, use a cached ClientsideModel and provide it as a second argument.Using this with a map model (game.GetWorld():GetModel()) crashes the game.Issue Tracker: 3307
---@param settings table Requires:  string model - The model to draw Vector pos - The position to draw the model at Angle angle - The angles to draw the model at
---@param ent CSEnt If provided, this entity will be reused instead of creating a new one with ClientsideModel. Note that the ent's model, position and angles will be changed, and Entity:SetNoDraw will be set to true.
function render.Model(settings, ent) end

---[CLIENT] Sets a material to override a model's default material. Similar to Entity:SetMaterial except it uses an IMaterial argument and it can be used to change materials on models which are part of the world geometry.
---@param material IMaterial The material override.
function render.ModelMaterialOverride(material) end

---[CLIENT] Overrides the write behaviour of all next rendering operations towards the alpha channel of the current render target.
--- See also render.OverrideBlend.
--- Doing surface draw calls with alpha set to 0 is a no-op and will never have any effect.
---@param enable boolean Enable or disable the override.
---@param shouldWrite boolean If the previous argument is true, sets whether the next rendering operations should write to the alpha channel or not. Has no effect if the previous argument is false.
function render.OverrideAlphaWriteEnable(enable, shouldWrite) end

---[CLIENT] Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.
--- See also render.OverrideAlphaWriteEnable.
--- Doing surface draw calls with alpha set to 0 is a no-op and won't have an effect.
---@param enabled boolean true to enable, false to disable. No other arguments are required when disabling.
---@param srcBlend number The source color blend function Enums/BLEND. Determines how a rendered texture's final color should be calculated.
---@param destBlend number The destination color blend function Enums/BLEND.
---@param blendFunc number The blend mode used for drawing the color layer Enums/BLENDFUNC.
---@param srcBlendAlpha number The source alpha blend function Enums/BLEND. Determines how a rendered texture's final alpha should be calculated.
---@param destBlendAlpha number The destination alpha blend function Enums/BLEND.
---@param blendFuncAlpha number The blend mode used for drawing the alpha layer Enums/BLENDFUNC.
function render.OverrideBlend(enabled, srcBlend, destBlend, blendFunc, srcBlendAlpha, destBlendAlpha, blendFuncAlpha) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use render.OverrideBlend instead.
--- Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.
--- See also render.OverrideAlphaWriteEnable.
--- Doing surface draw calls with alpha set to 0 is a no-op and will never have any effect.
---@param enabled boolean true to enable, false to disable. No other arguments are required when disabling.
---@param srcBlend number The source color blend function Enums/BLEND. Determines how a rendered texture's final color should be calculated.
---@param destBlend number 
---@param srcBlendAlpha number The source alpha blend function Enums/BLEND. Determines how a rendered texture's final alpha should be calculated.
---@param destBlendAlpha number 
function render.OverrideBlendFunc(enabled, srcBlend, destBlend, srcBlendAlpha, destBlendAlpha) end

---[CLIENT] Overrides the write behaviour of all next rendering operations towards the color channel of the current render target.
---@param enable boolean Enable or disable the override.
---@param shouldWrite boolean If the previous argument is true, sets whether the next rendering operations should write to the color channel or not. Has no effect if the previous argument is false.
function render.OverrideColorWriteEnable(enable, shouldWrite) end

---[CLIENT] Overrides the write behaviour of all next rendering operations towards the depth buffer.
---@param enable boolean Enable or disable the override.
---@param shouldWrite boolean If the previous argument is true, sets whether the next rendering operations should write to the depth buffer or not. Has no effect if the previous argument is false.
function render.OverrideDepthEnable(enable, shouldWrite) end

---[CLIENT] 
function render.PerformFullScreenStencilOperation() end

---[CLIENT] Removes the current active clipping plane from the clip plane stack.
function render.PopCustomClipPlane() end

---[CLIENT] Pops the current texture magnification filter from the filter stack.
--- See render.PushFilterMag
function render.PopFilterMag() end

---[CLIENT] Pops the current texture minification filter from the filter stack.
--- See render.PushFilterMin
function render.PopFilterMin() end

---[CLIENT] Pops the current flashlight mode from the flashlight mode stack.
function render.PopFlashlightMode() end

---[CLIENT] Pops the last render target and viewport from the RT stack and sets them as the current render target and viewport.
--- This is should be called to restore the previous render target and viewport after a call to render.PushRenderTarget.
function render.PopRenderTarget() end

---[CLIENT] Pushes a new clipping plane of the clip plane stack and sets it as active.
--- A max of 2 clip planes are supported on Linux/POSIX, and 6 on Windows.Issue Tracker: 2687
---@param normal Vector The normal of the clipping plane.
---@param distance number The distance of the plane from the world origin. You can use Vector:Dot between the normal and any point on the plane to find this.
function render.PushCustomClipPlane(normal, distance) end

---[CLIENT] Pushes a texture filter onto the magnification texture filter stack.
--- See also render.PushFilterMin and render.PopFilterMag.
---@param texFilterType number The texture filter type, see Enums/TEXFILTER
function render.PushFilterMag(texFilterType) end

---[CLIENT] Pushes a texture filter onto the minification texture filter stack.
---@param texFilterType number The texture filter type, see Enums/TEXFILTER
function render.PushFilterMin(texFilterType) end

---[CLIENT] Enables the flashlight projection for the upcoming rendering.
--- This will leave models lit under specific conditions.Issue Tracker: 3029
---@param enable boolean Whether the flashlight mode should be enabled or disabled.
function render.PushFlashlightMode(enable) end

---[CLIENT] Pushes the current render target and viewport to the RT stack then sets a new current render target and viewport. If the viewport is not specified, the dimensions of the render target are used instead.
--- This is similar to a call to render.SetRenderTarget and render.SetViewPort where the current render target and viewport have been saved beforehand, except the viewport isn't clipped to screen bounds.
--- See also render.PopRenderTarget.
--- If you want to render to the render target in 2d mode and it is not the same size as the screen, use cam.Start2D and cam.End2D.If the render target is bigger than the screen, rendering done with the surface library will be clipped to the screen bounds unless you call DisableClipping
---@param texture ITexture The new render target to be used.
---@param x number X origin of the viewport.
---@param y number Y origin of the viewport.
---@param w number Width of the viewport.
---@param h number Height of the viewport
function render.PushRenderTarget(texture, x, y, w, h) end

---[CLIENT] Reads the color of the specified pixel from the RenderTarget sent by render.CapturePixels
---@param x number The x coordinate.
---@param y number The y coordinate.
---@return number, number, number, number number - The red channel value.
---@return number, number, number, number number - The green channel value.
---@return number, number, number, number number - The blue channel value.
---@return number, number, number, number number - The alpha channel value or no value if the render target has no alpha channel.
function render.ReadPixel(x, y) end

---[CLIENT] This applies the changes made to map lighting using engine.LightStyle.
---@param DoStaticProps boolean When true, this will also apply lighting changes to static props. This is really slow on large maps.
---@param UpdateStaticLighting boolean Forces all props to update their static lighting. Can be slow.
function render.RedownloadAllLightmaps(DoStaticProps, UpdateStaticLighting) end

---[CLIENT] Renders the HUD on the screen.
---@param x number X position for the HUD draw origin.
---@param y number Y position for the HUD draw origin.
---@param w number Width of the HUD draw.
---@param h number Height of the HUD draw.
function render.RenderHUD(x, y, w, h) end

---[CLIENT] Renders the scene with the specified viewData to the current active render target.
--- Static props and LODs are rendered improperly due to incorrectly perceived distance.Issue Tracker: 1330
---@param view table The view data to be used in the rendering. See Structures/ViewData. Any missing value is assumed to be that of the current view. Similarly, you can make a normal render by simply not passing this table at all.
function render.RenderView(view) end

---[CLIENT] Resets the model lighting to the specified color.
--- Calls render.SetModelLighting for every direction with given color.
---@param r number The red part of the color, 0-1
---@param g number The green part of the color, 0-1
---@param b number The blue part of the color, 0-1
function render.ResetModelLighting(r, g, b) end

---[CLIENT] Resets the HDR tone multiplier to the specified value.
--- This will only work on HDR maps, and the value will automatically fade to what it was ( or whatever render.SetGoalToneMappingScale is ) if called only once.
---@param scale number The value which should be used as multiplier.
function render.ResetToneMappingScale(scale) end

---[CLIENT] Sets the ambient lighting for any upcoming render operation.
---@param r number The red part of the color, 0-1.
---@param g number The green part of the color, 0-1.
---@param b number The blue part of the color, 0-1.
function render.SetAmbientLight(r, g, b) end

---[CLIENT] Sets the alpha blending for every upcoming render operation.
--- This does not affect non-model render.Draw* functions.Issue Tracker: 3166
---@param blending number Blending value from 0-1.
function render.SetBlend(blending) end

---[CLIENT] Sets the current drawing material to "color".
--- The material is defined as:
--- "UnlitGeneric"
---  {
---  	"$basetexture" "color/white"
---  	"$model" 		1
---  	"$translucent" 	1
---  	"$vertexalpha" 	1
---  	"$vertexcolor" 	1
---  }
function render.SetColorMaterial() end

---[CLIENT] Sets the current drawing material to color_ignorez.
--- The material is defined as:
--- "UnlitGeneric"
---  {
---  	"$basetexture" "color/white"
---   	"$model" 		1
---  	"$translucent" 	1
---  	"$vertexalpha" 	1
---  	"$vertexcolor" 	1
---  	"$ignorez"		1
---  }
function render.SetColorMaterialIgnoreZ() end

---[CLIENT] Sets the color modulation.
---@param r number The red channel multiplier normal ranging from 0-1.
---@param g number The green channel multiplier normal ranging from 0-1.
---@param b number The blue channel multiplier normal ranging from 0-1.
function render.SetColorModulation(r, g, b) end

---[CLIENT] If the fog mode is set to MATERIAL_FOG_LINEAR_BELOW_FOG_Z, the fog will only be rendered below the specified height.
---@param fogZ number The fog Z.
function render.SetFogZ(fogZ) end

---[CLIENT] Sets the goal HDR tone mapping scale.
--- Use this in a rendering/think hook as it is reset every frame.
---@param scale number The target scale.
function render.SetGoalToneMappingScale(scale) end

---[CLIENT] Sets lighting mode when rendering something.
--- Do not forget to restore the default value to avoid unexpected behavior, like the world and the HUD/UI being affectedReloading the map does not reset the value of this function.Issue Tracker: 5368
---@param Mode number Lighting render mode Possible values are:  0 - Default 1 - Total fullbright, similar to mat_fullbright 1 but excluding some weapon view models 2 - Increased brightness(?), models look fullbright
function render.SetLightingMode(Mode) end

---[CLIENT] Sets the lighting origin.
--- This does not work for prop_physics.Issue Tracker: 2804
---@param lightingOrigin Vector The position from which the light should be "emitted".
function render.SetLightingOrigin(lightingOrigin) end

---[CLIENT] Sets the texture to be used as the lightmap in upcoming rendering operations. This is required when rendering meshes using a material with a lightmapped shader such as LightmappedGeneric.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param tex ITexture The texture to be used as the lightmap.
function render.SetLightmapTexture(tex) end

---[CLIENT] Sets up the local lighting for any upcoming render operation. Up to 4 local lights can be defined, with one of three different types (point, directional, spot).
--- Disables all local lights if called with no arguments.
---@param lights table A table containing up to 4 tables for each light source that should be set up. Each of these tables should contain the properties of its associated light source, see Structures/LocalLight.
function render.SetLocalModelLights(lights) end

---[CLIENT] Sets the material to be used in any upcoming render operation using the render.
--- Not to be confused with surface.SetMaterial.
---@param mat IMaterial The material to be used.
function render.SetMaterial(mat) end

---[CLIENT] Sets up the ambient lighting for any upcoming render operation. Ambient lighting can be seen as a cube enclosing the object to be drawn, each of its faces representing a directional light source that shines towards the object. Thus, there is a total of six different light sources that can be configured separately.
--- Light color components are not restricted to a specific range (i.e. 0-255), instead, higher values will result in a brighter light.
---@param lightDirection number The light source to edit, see Enums/BOX.
---@param red number The red component of the light color.
---@param green number The green component of the light color.
---@param blue number The blue component of the light color.
function render.SetModelLighting(lightDirection, red, green, blue) end

---[CLIENT] Sets the render target to the specified rt.
---@param texture ITexture The new render target to be used.
function render.SetRenderTarget(texture) end

---[CLIENT] Sets the render target with the specified index to the specified rt.
---@param rtIndex number The index of the rt to set.
---@param texture ITexture The new render target to be used.
function render.SetRenderTargetEx(rtIndex, texture) end

---[CLIENT] Sets a scissoring rect which limits the drawing area.
---@param startX number X start coordinate of the scissor rect.
---@param startY number Y start coordinate of the scissor rect.
---@param endX number X end coordinate of the scissor rect.
---@param endY number Y end coordinate of the scissor rect.
---@param enable boolean Enable or disable the scissor rect.
function render.SetScissorRect(startX, startY, endX, endY, enable) end

---[CLIENT] Sets the shadow color.
---@param red number The red channel of the shadow color.
---@param green number The green channel of the shadow color.
---@param blue number The blue channel of the shadow color.
function render.SetShadowColor(red, green, blue) end

---[CLIENT] Sets the shadow projection direction.
---@param shadowDirections Vector The new shadow direction.
function render.SetShadowDirection(shadowDirections) end

---[CLIENT] Sets the maximum shadow projection range.
---@param shadowDistance number The new maximum shadow distance.
function render.SetShadowDistance(shadowDistance) end

---[CLIENT] Sets whether any future render operations will ignore shadow drawing.
---@param newState boolean 
function render.SetShadowsDisabled(newState) end

---[CLIENT] Sets the compare function of the stencil.
--- Pixels which fail the stencil comparison function are not written to the render target. The operation to be performed on the stencil buffer values for these pixels can be set using render.SetStencilFailOperation.
--- Pixels which pass the stencil comparison function are written to the render target unless they fail the depth buffer test (where applicable). The operation to perform on the stencil buffer values for these pixels can be set using render.SetStencilPassOperation and render.SetStencilZFailOperation.
---@param compareFunction number Compare function, see Enums/STENCILCOMPARISONFUNCTION, and Enums/STENCIL for short.
function render.SetStencilCompareFunction(compareFunction) end

---[CLIENT] Sets whether stencil tests are carried out for each rendered pixel.
--- Only pixels passing the stencil test are written to the render target.
---@param newState boolean The new state.
function render.SetStencilEnable(newState) end

---[CLIENT] Sets the operation to be performed on the stencil buffer values if the compare function was not successful.
--- Note that this takes place before depth testing.
---@param failOperation number Fail operation function, see Enums/STENCILOPERATION.
function render.SetStencilFailOperation(failOperation) end

---[CLIENT] Sets the operation to be performed on the stencil buffer values if the compare function was successful.
---@param passOperation number Pass operation function, see Enums/STENCILOPERATION.
function render.SetStencilPassOperation(passOperation) end

---[CLIENT] Sets the reference value which will be used for all stencil operations. This is an unsigned integer.
---@param referenceValue number Reference value.
function render.SetStencilReferenceValue(referenceValue) end

---[CLIENT] Sets the unsigned 8-bit test bitflag mask to be used for any stencil testing.
---@param mask number The mask bitflag.
function render.SetStencilTestMask(mask) end

---[CLIENT] Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer.
---@param mask number The mask bitflag.
function render.SetStencilWriteMask(mask) end

---[CLIENT] Sets the operation to be performed on the stencil buffer values if the stencil test is passed but the depth buffer test fails.
---@param zFailOperation number Z fail operation function, see Enums/STENCILOPERATION
function render.SetStencilZFailOperation(zFailOperation) end

---[CLIENT] 
---@param vec Vector 
function render.SetToneMappingScaleLinear(vec) end

---[CLIENT] Changes the view port position and size. The values will be clamped to the game's screen resolution.
--- If you are looking to render something to a texture (render target), you should use render.PushRenderTarget.
--- This function will override values of ScrW and ScrH with the ones you set.
---@param x number X origin of the view port.
---@param y number Y origin of the view port.
---@param w number Width of the view port.
---@param h number Height of the view port.
function render.SetViewPort(x, y, w, h) end

---[CLIENT] Sets the internal parameter INT_RENDERPARM_WRITE_DEPTH_TO_DESTALPHA
---@param enable boolean 
function render.SetWriteDepthToDestAlpha(enable) end

---[CLIENT] Swaps the frame buffers/cycles the frame. In other words, this updates the screen.
--- If you take a really long time during a single frame render, it is a good idea to use this and let the user know that the game isn't stuck.
function render.Spin() end

---[CLIENT] Start a new beam draw operation.
--- This is a rendering function that requires a 3d rendering context.
--- This means that it will only work in 3d Rendering Hooks.
---@param segmentCount number Amount of beam segments that are about to be drawn.
function render.StartBeam(segmentCount) end

---[CLIENT] Returns whether the player's hardware supports HDR. (High Dynamic Range) HDR can still be disabled by the mat_hdr_level console variable or just not be supported by the map.
---@return boolean true if the player's hardware supports HDR.
function render.SupportsHDR() end

---[CLIENT] Returns if the current settings and the system allow the usage of pixel shaders 1.4.
---@return boolean Whether Pixel Shaders 1.4 are supported or not.
function render.SupportsPixelShaders_1_4() end

---[CLIENT] Returns if the current settings and the system allow the usage of pixel shaders 2.0.
---@return boolean Whether Pixel Shaders 2.0 are supported or not.
function render.SupportsPixelShaders_2_0() end

---[CLIENT] Returns if the current settings and the system allow the usage of vertex shaders 2.0.
---@return boolean Whether Vertex Shaders 2.0 are supported or not.
function render.SupportsVertexShaders_2_0() end

---[CLIENT] Suppresses or enables any engine lighting for any upcoming render operation.
--- This does not affect IMeshes.Issue Tracker: 4070
---@param suppressLighting boolean True to suppress false to enable.
function render.SuppressEngineLighting(suppressLighting) end

---[CLIENT] Enables HDR tone mapping which influences the brightness.
function render.TurnOnToneMapping() end

---[CLIENT] Updates the texture returned by render.GetFullScreenDepthTexture.
--- Silently fails if render.SupportsPixelShaders_2_0 returns false.
function render.UpdateFullScreenDepthTexture() end

---[CLIENT] Updates the power of two texture.
---@return ITexture Returns render.GetPowerOfTwoTexture.
function render.UpdatePowerOfTwoTexture() end

---[CLIENT] Pretty much alias of render.UpdatePowerOfTwoTexture but does not return the texture.
function render.UpdateRefractTexture() end

---[CLIENT] Copies the entire screen to the screen effect texture, which can be acquired via render.GetScreenEffectTexture. This function is mainly intended to be used in GM:RenderScreenspaceEffects
function render.UpdateScreenEffectTexture() end

---[CLIENT] This function overrides all map materials for one frame.
---@param mat IMaterial 
function render.WorldMaterialOverride(mat) end

resource = {}

---[SERVER] Adds the specified and all related files to the files the client should download.
--- For convenience, this function will automatically add any other files that are related to the selected one, and throw an error if it can't find them. For example, a .vmt file will automatically add the .vtf with the same name, and a .mdl file will automatically add all .vvd, .ani, .dx80.vtx, .dx90.vtx, .sw.vtx, .phy and .jpg files with the same name, with a separate error for each missing file.
--- If you do not want it to do this, use resource.AddSingleFile.
--- There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - resource.AddWorkshop. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.Running this function using a path relative to the main garrysmod/ folder will not work for files in addons and gamemodes. Instead, the files must be added relative to their respective content folders. For example, a sound file from an addon would use the path "sound/[FILENAME_AND_EXTENSION]," despite the file being located in "addons/[ADDON_NAME]/sound/[FILENAME_AND_EXTENSION]"The file must exist on the server or players will not download it!
---@param path string Virtual path of the file to be added, relative to garrysmod/. Do not add .bz2 to the filepath. Do not put gamemodes/*gamemodename*/content/ or addons/*addonname*/ into the path.
function resource.AddFile(path) end

---[SERVER] Adds the specified file to the files the client should download.
--- If you wish to add textures or models, consider using resource.AddFile to add all the files required for a texture/model.
--- There's a 8192 downloadable file limit.If you need more than 8192, consider using Workshop addons - resource.AddWorkshop. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.The file must exist on the server or players will not download it!
---@param path string Path of the file to be added, relative to garrysmod/
function resource.AddSingleFile(path) end

---[SERVER] Adds a workshop addon for the client to download before entering the server.
--- Having the raw files from a workshop item does not count as having already downloaded it.
--- So players who previously downloaded a map through Fast Download will have to re-download it if you use the workshop.
--- You should try to only add addons that have custom content ( models, sounds, etc ).
--- Gamemodes that are workshop enabled are automatically added to this list - so there's no need to add them.
--- The server's current map is also automatically added, if it is loaded from a workshop addon.
--- This will not "install" the addon on your server, see Workshop for Dedicated Servers for installing Steam Workshop addons onto your servers
---@param workshopid string The workshop id of the file. This cannot be a collection.
function resource.AddWorkshop(workshopid) end

saverestore = {}

---[SHARED] Adds a restore/load hook for the Half-Life 2 save system.
---@param identifier string The unique identifier for this hook.
---@param callback function The function to be called when an engine save is being loaded. It has one argument: IRestore save - The restore object to be used to read data from save file that is being loaded You can also use those functions to read data: saverestore.ReadVar saverestore.ReadTable saverestore.LoadEntity
function saverestore.AddRestoreHook(identifier, callback) end

---[SHARED] Adds a save hook for the Half-Life 2 save system. You can this to carry data through level transitions in Half-Life 2.
---@param identifier string The unique identifier for this hook.
---@param callback function The function to be called when an engine save is being saved. It has one argument: ISave save - The save object to be used to write data to the save file that is being saved You can also use those functions to save data: saverestore.WriteVar saverestore.WriteTable saverestore.SaveEntity
function saverestore.AddSaveHook(identifier, callback) end

---[SHARED] Loads Entity:GetTable from the save game file that is being loaded and merges it with the given entitys Entity:GetTable.
---@param ent Entity The entity which will receive the loaded values from the save.
---@param save IRestore The restore object to read the Entity:GetTable from.
function saverestore.LoadEntity(ent, save) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called by engine when a save is being loaded.
--- This handles loading gamemode and calls all of the hooks added with saverestore.AddRestoreHook.
---@param save IRestore The restore object to read data from the save file with.
function saverestore.LoadGlobal(save) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the engine just before saverestore.LoadGlobal is.
function saverestore.PreRestore() end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the engine just before saverestore.SaveGlobal is.
function saverestore.PreSave() end

---[SHARED] Reads a table from the save game file that is being loaded.
---@param save IRestore The restore object to read the table from.
---@return table The table that has been read, if any
function saverestore.ReadTable(save) end

---[SHARED] Loads a variable from the save game file that is being loaded.
--- Variables will be read in the save order you have saved them.
---@param save IRestore The restore object to read variables from.
---@return any The variable that was read, if any.
function saverestore.ReadVar(save) end

---[SHARED] Saves entitys Entity:GetTable to the save game file that is being saved.
---@param ent Entity The entity to save Entity:GetTable of.
---@param save ISave The save object to save Entity:GetTable to.
function saverestore.SaveEntity(ent, save) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called by engine when a save is being saved.
--- This handles saving gamemode and calls all of the hooks added with saverestore.AddSaveHook.
---@param save ISave The save object to write data into the save file.
function saverestore.SaveGlobal(save) end

---[SHARED] Returns how many writable keys are in the given table.
---@param table table The table to test.
---@return number The number of keys that can be written with saverestore.WriteTable.
function saverestore.WritableKeysInTable(table) end

---[SHARED] Write a table to a save game file that is being saved.
---@param table table The table to write
---@param save ISave The save object to write the table to.
function saverestore.WriteTable(table, save) end

---[SHARED] Writes a variable to the save game file that is being saved.
---@param value any The value to save. It can be one of the following types: number, boolean, string, Entity, Angle, Vector or table.
---@param save ISave The save object to write the variable to.
function saverestore.WriteVar(value, save) end

scripted_ents = {}

---[SHARED] Defines an alias string that can be used to refer to another classname
---@param alias string A new string which can be used to refer to another classname
---@param classname string The classname the alias should refer to
function scripted_ents.Alias(alias, classname) end

---[SHARED] Returns a copy of the ENT table for a class, including functions defined by the base class
---@param classname string The classname of the ENT table to return, can be an alias
---@return table entTable
function scripted_ents.Get(classname) end

---[SHARED] Returns a copy of the list of all ENT tables registered
---@return table A table of all entities in the following format: (table keys are the classnames)  table t - The ENT table associated with the entity boolean isBaseType - Always true string Base - The entity base (note capital B in the key name) string type - The entity type
function scripted_ents.GetList() end

---[SHARED] Retrieves a member of entity's table.
---@param class string Entity's class name
---@param name string Name of member to retrieve
---@return any The member or nil if failed
function scripted_ents.GetMember(class, name) end

---[SHARED] Returns a list of all ENT tables which contain ENT.Spawnable
---@return table A table of Structures/ENTs
function scripted_ents.GetSpawnable() end

---[SHARED] Returns the actual ENT table for a class. Modifying functions/variables in this table will change newly spawned entities
---@param classname string The classname of the ENT table to return
---@return table entTable
function scripted_ents.GetStored(classname) end

---[SHARED] Returns the 'type' of a class, this will one of the following: 'anim', 'ai', 'brush', 'point'.
---@param classname string The classname to check
---@return string type
function scripted_ents.GetType(classname) end

---[SHARED] Checks if name is based on base
---@param name string Entity's class name to be checked
---@param base string Base class name to be checked
---@return boolean Returns true if class name is based on base, else false.
function scripted_ents.IsBasedOn(name, base) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called after all ENTS have been loaded and runs baseclass.Set on each one.
--- You can retrieve all the currently registered ENTS with scripted_ents.GetList.
--- This is not called after an ENT auto refresh, and thus the inherited baseclass functions retrieved with baseclass.Get will not be updated
function scripted_ents.OnLoaded() end

---[SHARED] Registers an ENT table with a classname. Reregistering an existing classname will automatically update the functions of all existing entities of that class.
--- Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.
---@param ENT table The ENT table to register.
---@param classname string The classname to register.
function scripted_ents.Register(ENT, classname) end

search = {}

---[CLIENT] Adds a search result provider. For examples, see gamemodes/sandbox/gamemode/cl_search_models.lua
---@param provider function Provider function. It has one argument: string searchQuery You must return a list of tables structured like this:  string text - Text to "Copy to clipboard" function func - Function to use/spawn the item Panel icon - A panel to add to spawnmenu table words - A table of words?
---@param id string If provided, ensures that only one provider exists with the given ID at a time.
function search.AddProvider(provider, id) end

---[CLIENT] Retrieves search results.
---@param query string Search query
---@param types string If set, only searches given provider type(s), instead of everything. For example "tool" will only search tools in Sandbox. Can be a table for multiple types.
---@param maxResults number How many results to stop at
---@return table A table of results
function search.GetResults(query, types, maxResults) end

serverlist = {}

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Adds current server the player is on to their favorites.
function serverlist.AddCurrentServerToFavorites() end

---[MENU] Adds the given server address to their favorites.
---@param address string Server Address. IP:Port like "127.0.0.1:27015"
function serverlist.AddServerToFavorites(address) end

---[MENU] Returns true if the current server address is in their favorites.
---@return boolean true if the current server is in their favorites
function serverlist.IsCurrentServerFavorite() end

---[MENU] Returns true if the given server address is in their favorites.
---@param address string Server Address. IP:Port like "127.0.0.1:27015"
---@return boolean true if the server address is in their favorites
function serverlist.IsServerFavorite(address) end

---[MENU] Queries a server for its information/ping.
---@param ip string The IP address of the server, including the port.
---@param callback function The function to be called if and when the request finishes. Function has the same arguments as the callback of serverlist.Query.
function serverlist.PingServer(ip, callback) end

---[MENU] Queries a server for its player list.
---@param ip string The IP address of the server, including the port.
---@param callback function The function to be called if and when the request finishes. Function has one argument, a table containing tables with player info. Each table with player info has next fields: number time - The amount of time the player is playing on the server, in seconds string name - The player name number score - The players score
function serverlist.PlayerList(ip, callback) end

---[MENU] Queries the master server for server list.
---@param data table The information about what kind of servers we want. See Structures/ServerQueryData.
function serverlist.Query(data) end

---[MENU] Removes the given server address from their favorites.
---@param address string Server Address. IP:Port like "127.0.0.1:27015"
function serverlist.RemoveServerFromFavorites(address) end

sound = {}

---[SHARED] Creates a sound script. It can also override sounds, which seems to only work when set on the server.
---@param soundData table The sounds properties. See Structures/SoundData
function sound.Add(soundData) end

---[SHARED] Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds.
---@param filepath string Path to the script file to load.
function sound.AddSoundOverrides(filepath) end

---[SERVER] Emits a sound hint to the game elements to react to, for example to repel or attract antlions.
---@param hint number The hint to emit. See Enums/SOUND
---@param pos Vector The position to emit the hint at
---@param volume number The volume or radius of the hint
---@param duration number The duration of the hint in seconds
---@param owner Entity 
function sound.EmitHint(hint, pos, volume, duration, owner) end

---[CLIENT] Creates a sound from a function.
---@param indentifier string An unique identified for the sound. You cannot override already existing ones.You cannot override already existing ones.You cannot override already existing ones.
---@param samplerate number The sample rate of the sound. Must be 11025, 22050 or 44100.
---@param length number The length in seconds of the sound to generate.
---@param callback function A function which will be called to generate every sample on the sound. This function gets the current sample number passed as the first argument. The return value must be between -1.0 and 1.0. Other values will wrap back to the -1 to 1 range and basically clip. There are 65535 possible quantifiable values between -1 and 1.
function sound.Generate(indentifier, samplerate, length, callback) end

---[SERVER] Returns the most dangerous/closest sound hint based on given location and types of sounds to sense.
---@param types number The types of sounds to choose from. See SOUND_ enums.
---@param pos Vector The position to sense sounds at.
---@return table A table with SoundHintData structure or nil if no sound hints are nearby.
function sound.GetLoudestSoundHint(types, pos) end

---[SHARED] Returns properties of the soundscript.
---@param name string The name of the sound script
---@return table The properties of the soundscript. See Structures/SoundData
function sound.GetProperties(name) end

---[SHARED] Returns a list of all registered sound scripts.
---@return table The list/array of all registered sound scripts ( No other information is provided )
function sound.GetTable() end

---[SHARED] Plays a sound from the specified position in the world.
--- If you want to play a sound without a position, such as a UI sound, use surface.PlaySound instead.
---@param Name string A path to the sound. Does this function support sound scripts? This should either be a sound script name (sound.Add) or a file path relative to the sound/ folder. (Make note that it's not sounds)Does this function support sound scripts?Does this function support sound scripts?
---@param Pos Vector Where the sound should play.
---@param Level number Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard.
---@param Pitch number The sound pitch. Range is from 0 to 255. 100 is normal pitch.
---@param Volume number Output volume of the sound in range 0 to 1.
function sound.Play(Name, Pos, Level, Pitch, Volume) end

---[CLIENT] Plays a file from GMod directory. You can find a list of all error codes here
--- For external file/stream playback, see sound.PlayURL.
--- This fails for looping .wav files in 3D mode.Issue Tracker: 1752This fails with unicode file names.Issue Tracker: 2304
---@param path string The path to the file to play. Unlike other sound functions and structures, the path is relative to garrysmod/ instead of garrysmod/sound/
---@param flags string Flags for the sound. Can be one or more of following, separated by a space (" "):  3d - Makes the sound 3D, so you can set its position mono - Forces the sound to have only one channel noplay - Forces the sound not to play as soon as this function is called noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for IGModAudioChannel:SetTime.  If you don't want to use any of the above, you can just leave it as "".
---@param callback function Callback function that is called as soon as the the stream is loaded. It has next arguments:  IGModAudioChannel soundchannel - The sound channel. Will be nil if an error occured. number errorID - ID of an error if an error has occured. Will be nil, otherwise. string errorName - Name of an error if an error has occured. Will be nil, otherwise.
function sound.PlayFile(path, flags, callback) end

---[CLIENT] Allows you to play external sound files, as well as online radio streams.
--- You can find a list of all error codes here
--- For offline file playback, see sound.PlayFile.
--- Due to a bug with BASS, AAC codec streams cannot be played in 3D mode.Issue Tracker: 2296
---@param url string The URL of the sound to play
---@param flags string Flags for the sound. Can be one or more of following, separated by a space (" "):  3d - Makes the sound 3D, so you can set its position mono - Forces the sound to have only one channel noplay - Forces the sound not to play as soon as this function is called noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for IGModAudioChannel:SetTime.  If you don't want to use any of the above, you can just leave it as "".
---@param callback function Callback function that is called as soon as the the stream is loaded. It has next arguments: IGModAudioChannel soundchannel - The sound channel number errorID - ID of an error, if an error has occured string errorName - Name of an error, if an error has occured
function sound.PlayURL(url, flags, callback) end

spawnmenu = {}

---[CLIENT] Activates a tool, opens context menu and brings up the tool gun.
---@param tool string Tool class/file name
---@param menu_only boolean Should we activate this tool in the menu only or also the toolgun? true = menu only,false = toolgun aswell
function spawnmenu.ActivateTool(tool, menu_only) end

---[CLIENT] Activates tools context menu in specified tool tab.
---@param tab number The tabID of the tab to open the context menu in
---@param cp Panel The control panel to open
function spawnmenu.ActivateToolPanel(tab, cp) end

---[CLIENT] Returns currently opened control panel of a tool, post process effect or some other menu in spawnmenu.
---@return Panel The currently opened control panel, if any.
function spawnmenu.ActiveControlPanel() end

---[CLIENT] Registers a new content type that is saveable into spawnlists.
--- Created/called by spawnmenu.CreateContentIcon.
---@param name string An unique name of the content type.
---@param constructor function A function that is called whenever we need create a new panel for this content type. It has two arguments: Panel container - The container/parent of the new panel table data - Data for the content type passed from spawnmenu.CreateContentIcon
function spawnmenu.AddContentType(name, constructor) end

---[CLIENT] Inserts a new tab into the CreationMenus table, which will be used by the creation menu to generate its tabs (Spawnlists, Weapons, Entities, etc.)
---@param name string What text will appear on the tab (I.E Spawnlists).
---@param _function function The function called to generate the content of the tab.
---@param material string Path to the material that will be used as an icon on the tab.
---@param order number The order in which this tab should be shown relative to the other tabs on the creation menu.
---@param tooltip string The tooltip to be shown for this tab.
function spawnmenu.AddCreationTab(name, _function, material, order, tooltip) end

---[CLIENT] Used to add addon spawnlists to the spawnmenu tree. This function should be called within SANDBOX:PopulatePropMenu.
--- Addon spawnlists will not save to disk if edited.
--- You should never try to modify player customized spawnlists!
---@param classname string A unique classname of the list.
---@param name string The name of the category displayed to the player, e.g. Comic Props.
---@param contents table A table of entries for the spawn menu. It must be numerically indexed. Each member of the table is a sub-table containing a type member, and other members depending on the type. New content types can be added via spawnmenu.AddContentType.    string type Description Other members     "header" a simple header for organization string text - The text that the header will display   "model" spawns a model where the player is looking string model - The path to the model file 	 number skin - The skin for the model to use (optional)  string body - The bodygroups for the model (optional)  number wide - The width of the spawnicon (optional)  number tall - The height of the spawnicon (optional)   "entity" spawns an entity where the player is looking(appears in the Entities tab by default) string spawnname - The filename of the entity, for example "sent_ball"  string nicename - The name of the entity to display  string material - The icon to display, this should be set to "entities/<sent_name>.png" 	boolean admin - Whether the entity is only spawnable by admins (optional)   "vehicle" spawns a vehicle where the player is looking  (appears in the Vehicles tab by default) string spawnname - The filename of the vehicle  string nicename - The name of the vehicle to display  string material - The icon to display  boolean admin - Whether the vehicle is only spawnable by admins (optional)   "npc" spawns an NPC where the player is looking  (appears in the NPCs tab by default) string spawnname - The spawn name of the NPC 	string nicename - The name to display  string material - The icon to display  table weapon - A table of potential weapons (each a string) to give to the NPC. When spawned, one of these will be chosen randomly each time.  boolean admin - Whether the NPC is only spawnable by admins (optional)   "weapon" When clicked, gives the player a weapon;  When middle-clicked, spawns a weapon where the player is looking  (appears in the Weapons tab by default) string spawnname - The spawn name of the weapon  string nicename - The name to display  string material - The icon to display  boolean admin - Whether the weapon is only spawnable by admins (optional)
---@param icon string The icon to use in the tree.
---@param id number The unique ID number for the spawnlist category. Used to make sub categories. See "parentID" parameter below. If not set, it will be automatically set to ever increasing number, starting with 1000.
---@param parentID number The unique ID of the parent category. This will make the created category a subcategory of category with given unique ID. 0 makes this a base category (such as Builder).
---@param needsApp string The needed game for this prop category, if one is needed. If the specified game is not mounted, the category isn't shown. This uses the shortcut name, e.g. cstrike, and not the Steam AppID.
function spawnmenu.AddPropCategory(classname, name, contents, icon, id, parentID, needsApp) end

---[CLIENT] Used to create a new category in the list inside of a spawnmenu ToolTab.
--- You must call this function from SANDBOX:AddToolMenuCategories for it to work properly.
---@param tab string The ToolTab name, as created with spawnmenu.AddToolTab. You can also use the default ToolTab names "Main" and "Utilities".
---@param RealName string The identifier name
---@param PrintName string The displayed name
function spawnmenu.AddToolCategory(tab, RealName, PrintName) end

---[CLIENT] Adds an option to the right side of the spawnmenu
---@param tab string The spawnmenu tab to add into (for example "Utilities")
---@param category string The category to add into (for example "Admin")
---@param class string Unique identifier of option to add
---@param name string The nice name of item
---@param cmd string Command to execute when the item is selected
---@param config string Config name, used in older versions to load tool settings UI from a file. No longer works. We advise against using this. It may be changed or removed in a future update.We advise against using this. It may be changed or removed in a future update.We advise against using this. It may be changed or removed in a future update.
---@param cpanel function A function to build the context panel. The function has one argument:  Panel pnl - A DForm that will be shown in the context menu
---@param table table Allows to override the table that will be added to the tool list. Some of the fields will be overwritten by this function.
function spawnmenu.AddToolMenuOption(tab, category, class, name, cmd, config, cpanel, table) end

---[CLIENT] Adds a new tool tab to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook.
--- This function is a inferior duplicate of spawnmenu.GetToolMenu, just without its return value.
---@param name string The internal name of the tab. This is used for sorting.
---@param label string The 'nice' name of the tab (Tip: language.Add)
---@param icon string The filepath to the icon of the tab. Should be a .png
function spawnmenu.AddToolTab(name, label, icon) end

---[CLIENT] Clears all the tools from the different tool categories and the categories itself, if ran at the correct place.
--- Seems to only work when ran at initialization.
function spawnmenu.ClearToolMenus() end

---[CLIENT] Creates a new content icon.
---@param type string The type of the content icon.
---@param parent Panel The parent to add the content icon to.
---@param data table The data to send to the content icon in spawnmenu.AddContentType
---@return Panel The created content icon, if it was returned by spawnmenu.AddContentType
function spawnmenu.CreateContentIcon(type, parent, data) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Calls spawnmenu.SaveToTextFiles.
---@param spawnlists table A table containing spawnlists.
function spawnmenu.DoSaveToTextFiles(spawnlists) end

---[CLIENT] Returns the function to create an vgui element for a specified content type
---@param contentType string 
---@return function The panel creation function
function spawnmenu.GetContentType(contentType) end

---[CLIENT] Returns the list of Creation tabs. Creation tabs are added via spawnmenu.AddCreationTab.
---@return table The list of Creation tabs. See the Structures/CreationMenus.
function spawnmenu.GetCreationTabs() end

---[CLIENT] Similar to spawnmenu.GetPropTable, but only returns spawnlists created by addons via spawnmenu.AddPropCategory.
--- These spawnlists are shown in a separate menu in-game.
---@return table See spawnmenu.GetPropTable for table format.
function spawnmenu.GetCustomPropTable() end

---[CLIENT] Returns a table of all prop categories and their props in the spawnmenu.
--- Note that if the spawnmenu has not been populated, this will return an empty table.
--- This will not return spawnlists created by addons, see  spawnmenu.GetCustomPropTable for that.
---@return table Table of all the prop categories and props in the following format: { 	["settings/spawnlist/001-construction props.txt"] = { 		name = "Construction Props", 		icon = "icon16/page.png", 		id = 1, 		parentid = 0, 		needsapp = "", 		contents = { 			{ 				model = "models/Cranes/crane_frame.mdl", 				type = "model" 			} 			-- etc. 		}, 	} 	-- etc. }{ 	["settings/spawnlist/001-construction props.txt"] = { 		name = "Construction Props", 		icon = "icon16/page.png", 		id = 1, 		parentid = 0, 		needsapp = "", 		contents = { 			{ 				model = "models/Cranes/crane_frame.mdl", 				type = "model" 			} 			-- etc. 		}, 	} 	-- etc. }
function spawnmenu.GetPropTable() end

---[CLIENT] Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the SANDBOX:AddToolMenuTabs hook.
---@param name string The internal name of the tab. This is used for sorting.
---@param label string The 'nice' name of the tab
---@param icon string The filepath to the icon of the tab. Should be a .png
---@return table A table of tables representing categories and items in the left part of the tab. See example below to example structure.
function spawnmenu.GetToolMenu(name, label, icon) end

---[CLIENT] Gets a table of tools on the client.
---@return table A table with groups of tools, along with information on each tool.
function spawnmenu.GetTools() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Calls spawnmenu.PopulateFromTextFiles.
function spawnmenu.PopulateFromEngineTextFiles() end

---[CLIENT] Loads spawnlists from text files.
---@param callback function The function to call. Arguments are ( strFilename, strName, tabContents, icon, id, parentid, needsapp )
function spawnmenu.PopulateFromTextFiles(callback) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Saves a table of spawnlists to files.
---@param spawnlists table A table containing spawnlists.
function spawnmenu.SaveToTextFiles(spawnlists) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Sets currently active control panel to be returned by spawnmenu.ActiveControlPanel.
---@param pnl Panel The panel to set.
function spawnmenu.SetActiveControlPanel(pnl) end

---[CLIENT] Switches the creation tab (left side of the spawnmenu) on the spawnmenu to the given tab.
---@param id number The tab ID to open
function spawnmenu.SwitchCreationTab(id) end

---[CLIENT] Opens specified tool tab in spawnmenu.
---@param id number The tab ID to open
function spawnmenu.SwitchToolTab(id) end

sql = {}

---[SHARED] Tells the engine a set of queries is coming. Will wait until sql.Commit is called to run them.
--- This is most useful when you run more than 100+ queries.
--- This is equivalent to :
--- sql.Query( "BEGIN;" )
function sql.Begin() end

---[SHARED] Tells the engine to execute a series of queries queued for execution, must be preceded by sql.Begin.
--- This is equivalent to sql.Query( "COMMIT;" ).
function sql.Commit() end

---[SHARED] Returns true if the index with the specified name exists.
---@param indexName string The name of the index to check.
---@return boolean exists
function sql.IndexExists(indexName) end

---[SHARED] Returns the last error from a SQLite query.
---@return string Last error from SQLite database.
function sql.LastError() end

---[SHARED] Performs a query on the local SQLite database, returns a table as result set, nil if result is empty and false on error.
---@param query string The query to execute.
---@return table false is returned if there is an error, nil if the query returned no data.
function sql.Query(query) end

---[SHARED] Performs the query like sql.Query, but returns the first row found.
--- Basically equivalent to :
--- sql.Query( query .. " LIMIT 1;" )
---@param query string The input query.
---@param row number The row number. Say we receive back 5 rows, putting 3 as this argument will give us row #3.
---@return table The returned row.
function sql.QueryRow(query, row) end

---[SHARED] Performs the query like sql.QueryRow, but returns the first value found.
---@param query string The input query.
---@return string The returned value.
function sql.QueryValue(query) end

---[SHARED] Escapes dangerous characters and symbols from user input used in an SQLite SQL Query.
--- this function is not meant to be used with external database engines such as MySQL. Escaping strings with inadequate functions is dangerous!
---@param string string The string to be escaped.
---@param bNoQuotes boolean Set this as true, and the function will not wrap the input string in apostrophes.
---@return string The escaped input.
function sql.SQLStr(string, bNoQuotes) end

---[SHARED] Returns true if the table with the specified name exists.
---@param tableName string The name of the table to check.
---@return boolean exists
function sql.TableExists(tableName) end

steamworks = {}

---[MENU] Refreshes clients addons.
function steamworks.ApplyAddons() end

---[CLIENT] Downloads a file from the supplied addon and saves it as a .cache file in garrysmod/cache folder.
--- This is mostly used to download the preview image of the addon, but the game seems to also use it to download replays and saves.
--- In case the retrieved file is an image and you need the IMaterial, use AddonMaterial with the path supplied from the callback.
---@param workshopPreviewID string The Preview ID of workshop item.
---@param uncompress boolean Whether to uncompress the file or not, assuming it was compressed with LZMA. You will usually want to set this to true.
---@param resultCallback function The function to process retrieved data. The first and only argument is a string, containing path to the saved file.
function steamworks.Download(workshopPreviewID, uncompress, resultCallback) end

---[CLIENT] Downloads a Steam Workshop file by its ID and returns a path to it.
---@param workshopID string The ID of workshop item to download. NOT a file ID.
---@param resultCallback function The function to process retrieved data. Arguments passed are:  string path - Contains a path to the saved file, or nil if the download failed for any reason. file_class file - A file object pointing to the downloaded .gma file. The file handle will be closed after the function exits.
function steamworks.DownloadUGC(workshopID, resultCallback) end

---[CLIENT] Retrieves info about supplied Steam Workshop addon.
---@param workshopItemID string The ID of Steam Workshop item.
---@param resultCallback function The function to process retrieved data, with the following arguments:  table data - The data about the item, if the request succeeded, nil otherwise. See Structures/UGCFileInfo.
function steamworks.FileInfo(workshopItemID, resultCallback) end

---[CLIENT] Retrieves a customized list of Steam Workshop addons.
---@param type string The type of items to retrieve. Possible values include:  popular (All invalid options will equal to this) trending latest friends followed - Items of people the player is following on Steam friend_favs - Favorites of player's friends favorite - Player's favorites
---@param tags table A table of tags to match.
---@param offset number How much of results to skip from first one. Mainly used for pages.
---@param numRetrieve number How much items to retrieve, up to 50 at a time.
---@param days number When getting Most Popular content from Steam, this determines a time period. ( 7 = most popular addons in last 7 days, 1 = most popular addons today, etc )
---@param userID string "0" to retrieve all addons, "1" to retrieve addons only published by you, or a valid SteamID64 of a user to get workshop items of.
---@param resultCallback function The function to process retrieved data. The first and only argument is a table, containing all the info, or nil in case of error
function steamworks.GetList(type, tags, offset, numRetrieve, days, userID, resultCallback) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use the callback of steamworks.RequestPlayerInfo instead.
--- Retrieves players name by their 64bit SteamID.
--- You must call steamworks.RequestPlayerInfo a decent amount of time before calling this function.
---@param steamID64 string The 64bit Steam ID ( aka Community ID ) of the player
---@return string The name of that player
function steamworks.GetPlayerName(steamID64) end

---[CLIENT] Returns whenever the client is subscribed to the specified Steam Workshop item.
---@param workshopItemID string The ID of the Steam Workshop item.
---@return boolean Is the client subscribed to the addon or not.
function steamworks.IsSubscribed(workshopItemID) end

---[CLIENT] Opens the workshop website in the steam overlay browser.
function steamworks.OpenWorkshop() end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Publishes dupes, saves or demos to workshop.
---@param tags table The workshop tags to apply
---@param filename string Path to the file to upload
---@param image string Path to the image to use as icon
---@param name string Name of the Workshop submission
---@param desc string Description of the Workshop submission
function steamworks.Publish(tags, filename, image, name, desc) end

---[CLIENT] Requests information of the player with SteamID64 for later use with steamworks.GetPlayerName.
---@param steamID64 string The 64bit Steam ID of player.
---@param callback function A callback function with only 1 argument - string name.
function steamworks.RequestPlayerInfo(steamID64, callback) end

---[MENU] 
---@param workshopid string The Steam Workshop item id
---@return string Whatever you have put in as first argument
function steamworks.SetFileCompleted(workshopid) end

---[MENU] Sets whether you have played this addon or not. This will be shown to the user in the Steam Workshop itself:
---@param workshopid string The Steam Workshop item ID
---@return string Whatever you have put in as first argument
function steamworks.SetFilePlayed(workshopid) end

---[MENU] Sets if an addon should be enabled or disabled. Call steamworks.ApplyAddons afterwards to update.
---@param workshopItemID string The ID of the Steam Workshop item we should enable/disable
---@param shouldMount boolean true to enable the item, false to disable.
function steamworks.SetShouldMountAddon(workshopItemID, shouldMount) end

---[CLIENT] Returns whenever the specified Steam Workshop addon will be mounted or not.
---@param workshopItemID string The ID of the Steam Workshop
---@return boolean Will the workshop item be mounted or not
function steamworks.ShouldMountAddon(workshopItemID) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Subscribes to the specified workshop addon. Call steamworks.ApplyAddons afterwards to update.
---@param workshopItemID string The ID of the Steam Workshop item we should subscribe to
function steamworks.Subscribe(workshopItemID) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Unsubscribes to the specified workshop addon. Call steamworks.ApplyAddons afterwards to update.
--- This function should never be called without a user's consent and should not be called if the addon is currently in use (aka: the user is not in the main menu) as it may result in unexpected behaviour.
---@param workshopItemID string The ID of the Steam Workshop item we should unsubscribe from.
function steamworks.Unsubscribe(workshopItemID) end

---[CLIENT] Opens the workshop website for specified Steam Workshop item in the Steam overlay browser.
---@param workshopItemID string The ID of workshop item.
function steamworks.ViewFile(workshopItemID) end

---[MENU] This is used internally - although you're able to use it you probably shouldn't.
--- Makes the user vote for the specified addon
---@param workshopItemID string The ID of workshop item.
---@param upOrDown boolean Sets if the user should vote up/down. True makes them upvote, false down
function steamworks.Vote(workshopItemID, upOrDown) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use data steamworks.FileInfo instead.
--- Retrieves vote info of supplied addon.
---@param workshopItemID string The ID of workshop item.
---@param resultCallback function The function to process retrieved data. The first and only argument is a table, containing all the info.
function steamworks.VoteInfo(workshopItemID, resultCallback) end

string = {}

---[SHARED] Returns the given string's characters in their numeric ASCII representation.
--- This function will throw an error if the slice length is greater than 8000 characters.
---@param string string The string to get the chars from.
---@param startPos number The first character of the string to get the byte of.
---@param endPos number The last character of the string to get the byte of.
---@return ... Numerical bytes
function string.byte(string, startPos, endPos) end

---[SHARED] Takes the given numerical bytes and converts them to a string.
---@param ... ... The bytes to create the string from.
---@return string String built from given bytes
function string.char(...) end

---[SHARED] Inserts commas for every third digit of a given number.
---@param value number The input number to commafy
---@param separator string An optional string that will be used instead of the default comma.
---@return string The commafied string
function string.Comma(value, separator) end

---[SHARED] Returns the binary bytecode of the given function.
--- This does not work with functions created in C/C++. An error will be thrown if it is
---@param func function The function to get the bytecode of
---@param stripDebugInfo boolean True to strip the debug data, false to keep it
---@return string Bytecode
function string.dump(func, stripDebugInfo) end

---[SHARED] Returns whether or not the second passed string matches the end of the first.
---@param str string The string whose end is to be checked.
---@param _end string The string to be matched with the end of the first.
---@return boolean true if the first string ends with the second, or the second is empty, otherwise false.
function string.EndsWith(str, _end) end

---[SHARED] Splits a string up wherever it finds the given separator.
--- This is an alias of string.Split
--- and the reverse operation of string.Implode.
---@param separator string The string will be separated wherever this sequence is found.
---@param str string The string to split up.
---@param use_patterns boolean Set this to true if your separator is a pattern.
---@return table Exploded string as a numerical sequential table.
function string.Explode(separator, str, use_patterns) end

---[SHARED] Attempts to find the specified substring in a string.
--- This function uses Lua Patterns by default.
---@param haystack string The string to search in.
---@param needle string The string to find, can contain patterns if enabled.
---@param startPos number The position to start the search from, can be negative start position will be relative to the end position.
---@param noPatterns boolean Disable patterns.
---@return number, number, string number - Starting position of the found text, or nil if the text wasn't found
---@return number, number, string number - Ending position of found text, or nil if the text wasn't found
---@return number, number, string string - Matched text for each group if patterns are enabled and used, or nil if the text wasn't found
function string.find(haystack, needle, startPos, noPatterns) end

---[SHARED] Formats the specified values into the string given.
---@param format string The string to be formatted. Follows this format: http://www.cplusplus.com/reference/cstdio/printf/ The following features are not supported in Lua:  The n specifier The * width modifier The .* precision modifier All length modifiers  The following specifiers are exclusive to Lua:    Format Description Example of the output     %p Returns pointer to supplied structure (table/function) 0xf20a8968   %q Formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter "test\1\2test"
---@param ... ... Values to be formatted into the string.
---@return string The formatted string
function string.format(format, ...) end

---[SHARED] Returns the time as a formatted string or as a table if no format is given.
---@param float number The time in seconds to format.
---@param format string An optional formatting to use. If no format it specified, a table will be returned instead.
---@return string Returns the time as a formatted string only if a format was specified. Returns a table only if no format was specified. The table will contain these fields:  number ms - milliseconds number s - seconds number m - minutes number h - hours
function string.FormattedTime(float, format) end

---[SHARED] Creates a string from a Color variable.
---@param color table The color to put in the string.
---@return string Output
function string.FromColor(color) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use either string.sub(str, index, index) or str[index].
--- Returns char value from the specified index in the supplied string.
---@param str string The string that you will be searching with the supplied index.
---@param index number The index's value of the string to be returned.
---@return string str
function string.GetChar(str, index) end

---[SHARED] Returns extension of the file.
---@param file string String eg. file-path to get the file extensions from.
---@return string fileExtension
function string.GetExtensionFromFilename(file) end

---[SHARED] Returns file name and extension.
---@param pathString string The string eg. file-path to get the file-name from.
---@return string The file name
function string.GetFileFromFilename(pathString) end

---[SHARED] Returns the path only from a file's path.
---@param Inputstring string String to get path from.
---@return string Path
function string.GetPathFromFilename(Inputstring) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This function is removed in Lua versions later than what GMod is currently using. Use string.gmatch instead.
--- Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop.
---@param data string The string to search in
---@param pattern string The pattern to search for
---@return function The iterator function that can be used in a for-in loop
function string.gfind(data, pattern) end

---[SHARED] Using Patterns, returns an iterator which will return either one value if no capture groups are defined, or any capture group matches.
---@param data string The string to search in
---@param pattern string The pattern to search for
---@return function The iterator function that can be used in a for-in loop
function string.gmatch(data, pattern) end

---[SHARED] This functions main purpose is to replace certain character sequences in a string using Patterns.
---@param string string String which should be modified.
---@param pattern string The pattern that defines what should be matched and eventually be replaced.
---@param replacement string In case of a string the matched sequence will be replaced with it. In case of a table, the matched sequence will be used as key and the table will tested for the key, if a value exists it will be used as replacement. In case of a function all matches will be passed as parameters to the function, the return value(s) of the function will then be used as replacement.
---@param maxReplaces number Maximum number of replacements to be made.
---@return string, number string - replaceResult
---@return string, number number - replaceCount
function string.gsub(string, pattern, replacement, maxReplaces) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You really should just use table.concat.
--- Joins the values of a table together to form a string.
--- This is the reverse of string.Explode and is functionally identical to table.concat, but with less features.
---@param separator string The separator to insert between each piece.
---@param pieces table The table of pieces to concatenate. The keys for these must be numeric and sequential.
---@return string Imploded pieces
function string.Implode(separator, pieces) end

---[SHARED] Interpolates a given string with the given table. This is useful for formatting localized strings.
---@param str string The string that should be interpolated.
---@param lookuptable table The table to search in.
---@return string The modified string.
function string.Interpolate(str, lookuptable) end

---[SHARED] Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings.
---@param str string The string that should be escaped.
---@return string The escaped string.
function string.JavascriptSafe(str) end

---[SHARED] Returns everything left of supplied place of that string.
---@param str string The string to extract from.
---@param num number Amount of chars relative to the beginning (starting from 1).
---@return string Returns a string containing a specified number of characters from the left side of a string.
function string.Left(str, num) end

---[SHARED] Counts the number of characters in the string (length). This is equivalent to using the length operator (#).
---@param str string The string to find the length of.
---@return number Length of the string
function string.len(str) end

---[SHARED] Changes any upper-case letters in a string to lower-case letters.
--- This function doesn't work on special non-English UTF-8 characters.
---@param str string The string to convert.
---@return string A string representing the value of a string converted to lower-case.
function string.lower(str) end

---[SHARED] Finds a Pattern in a string.
---@param string string String which should be searched in for matches.
---@param pattern string The pattern that defines what should be matched.
---@param startPosition number The start index to start the matching from, can be negative to start the match from a position relative to the end.
---@return ... Matched text(s)
function string.match(string, pattern, startPosition) end

---[SHARED] Converts a digital filesize to human-readable text.
---@param bytes number The filesize in bytes.
---@return string The human-readable filesize, in Bytes/KB/MB/GB (whichever is appropriate).
function string.NiceSize(bytes) end

---[SHARED] Formats the supplied number (in seconds) to the highest possible time unit.
---@param num number The number to format, in seconds.
---@return string A nicely formatted time string.
function string.NiceTime(num) end

---[SHARED] Escapes all special characters within a string, making the string safe for inclusion in a Lua pattern.
---@param str string The string to be sanitized
---@return string The string that has been sanitized for inclusion in Lua patterns
function string.PatternSafe(str) end

---[SHARED] Repeats a string by the provided number, with an optional separator.
---@param str string The string to convert.
---@param repetitions number Times to repeat, this value gets rounded internally.
---@param separator string String that will separate the repeated piece. Notice that it doesn't add this string to the start or the end of the result, only between the repeated parts.
---@return string Repeated string.
function string.rep(str, repetitions, separator) end

---[SHARED] Replaces all occurrences of the supplied second string.
---@param str string The string we are seeking to replace an occurrence(s).
---@param find string What we are seeking to replace.
---@param replace string What to replace find with.
---@return string string
function string.Replace(str, find, replace) end

---[SHARED] Reverses a string.
---@param str string The string to be reversed.
---@return string reversed string
function string.reverse(str) end

---[SHARED] Returns the last n-th characters of the string.
---@param str string The string to extract from.
---@param num number Amount of chars relative to the end (starting from 1).
---@return string Returns a string containing a specified number of characters from the right side of a string.
function string.Right(str, num) end

---[SHARED] Sets the character at the specific index of the string.
---@param InputString string The input string
---@param Index number The character index, 1 is the first from left.
---@param ReplacementChar string String to replace with.
---@return string ModifiedString
function string.SetChar(InputString, Index, ReplacementChar) end

---[SHARED] Splits the string into a table of strings, separated by the second argument.
--- This is an alias of string.Explode.
---@param Inputstring string String to split
---@param Separator string Character(s) to split with.
---@return table Split table
function string.Split(Inputstring, Separator) end

---[SHARED] Returns whether or not the first string starts with the second.
---@param inputStr string String to check.
---@param start string String to check with.
---@return boolean Whether the first string starts with the second.
function string.StartsWith(inputStr, start) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Use string.StartsWith.
--- Returns whether or not the first string starts with the second. This is a alias of string.StartsWith.
---@param inputStr string String to check.
---@param start string String to check with.
---@return boolean Whether the first string starts with the second.
function string.StartWith(inputStr, start) end

---[SHARED] Removes the extension of a path.
---@param Inputstring string The path to change.
---@return string Modifiedstring
function string.StripExtension(Inputstring) end

---[SHARED] Returns a sub-string, starting from the character at position StartPos of the string (inclusive), and optionally ending at the character at position EndPos of the string (also inclusive). If EndPos is not given, the rest of the string is returned.
---@param string string The string you'll take a sub-string out of.
---@param StartPos number The position of the first character that will be included in the sub-string.
---@param EndPos number The position of the last character to be included in the sub-string. It can be negative to count from the end.
---@return string The substring.
function string.sub(string, StartPos, EndPos) end

---[SHARED] Fetches a Color type from a string.
---@param Inputstring string The string to convert from.
---@return table The output Color
function string.ToColor(Inputstring) end

---[SHARED] Returns given time in "MM:SS" format.
---@param time number Time in seconds
---@return string Formatted time
function string.ToMinutesSeconds(time) end

---[SHARED] Returns given time in "MM:SS:MS" format.
---@param time number Time in seconds
---@return string Formatted time
function string.ToMinutesSecondsMilliseconds(time) end

---[SHARED] Splits the string into characters and creates a sequential table of characters.
--- As a result of the  encoding, non-ASCII characters will be split into more than one character in the output table. Each character value in the output table will always be 1 byte.
---@param str string The string you'll turn into a table.
---@return table A sequential table where each value is a character from the given string
function string.ToTable(str) end

---[SHARED] Removes leading and trailing matches of a string.
---@param Inputstring string The string to trim.
---@param Char string String to match - can be multiple characters. Matches spaces by default.
---@return string Modified string
function string.Trim(Inputstring, Char) end

---[SHARED] Removes leading spaces/characters from a string.
---@param str string String to trim
---@param char string Custom character to remove
---@return string Trimmed string
function string.TrimLeft(str, char) end

---[SHARED] Removes trailing spaces/passed character from a string.
---@param str string String to remove from
---@param char string Custom character to remove, default is a space
---@return string Trimmed string
function string.TrimRight(str, char) end

---[SHARED] Changes any lower-case letters in a string to upper-case letters.
--- This function doesn't work on special non-English UTF-8 characters.
---@param str string The string to convert.
---@return string A string representing the value of a string converted to upper-case.
function string.upper(str) end

surface = {}

---[CLIENT] Creates a new font.
--- To prevent the font from displaying incorrectly when using the outline setting, set antialias to false. This will ensure the text properly fills out the entire outline.
--- Be sure to check the List of Default Fonts first! Those fonts can be used without using this function.
--- See Also: Finding the Font Name.
--- Due to the static nature of fonts, do NOT create the font more than once. You should only be creating them once, it is recommended to create them at the top of your script. Do not use this function within GM:HUDPaint or any other hook!
--- Define fonts that you will actually use, as fonts are very taxing on performance and will cause crashes! Do not create fonts for every size.
---@param fontName string The new font name.
---@param fontData table The font properties. See the Structures/FontData.
function surface.CreateFont(fontName, fontData) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- Alias of DisableClipping so use that instead.
--- Enables or disables the clipping used by the VGUI that limits the drawing operations to a panels bounds.
--- Identical to DisableClipping. See also Panel:NoClipping.
---@param disable boolean True to disable, false to enable the clipping
function surface.DisableClipping(disable) end

---[CLIENT] Draws a hollow circle, made of lines. For a filled circle, see examples for surface.DrawPoly.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param originX number The center x integer coordinate.
---@param originY number The center y integer coordinate.
---@param radius number The radius of the circle.
---@param r number The red value of the color to draw the circle with, or a Color.
---@param g number The green value of the color to draw the circle with. Unused if a Color was given.
---@param b number The blue value of the color to draw the circle with. Unused if a Color was given.
---@param a number The alpha value of the color to draw the circle with. Unused if a Color was given.
function surface.DrawCircle(originX, originY, radius, r, g, b, a) end

---[CLIENT] Draws a line from one point to another.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param startX number The start x float coordinate.
---@param startY number The start y float coordinate.
---@param endX number The end x float coordinate.
---@param endY number The end y float coordinate.
function surface.DrawLine(startX, startY, endX, endY) end

---[CLIENT] Draws a hollow box with a given border width.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param x number The start x integer coordinate.
---@param y number The start y integer coordinate.
---@param w number The integer width.
---@param h number The integer height.
---@param thickness number The thickness of the outlined box border.
function surface.DrawOutlinedRect(x, y, w, h, thickness) end

---[CLIENT] Draws a textured polygon (secretly a triangle fan) with a maximum of 4096 vertices.
--- Only works properly with convex polygons. You may try to render concave polygons, but there is no guarantee that things wont get messed up.
--- Unlike most surface library functions, non-integer coordinates are not rounded.
--- You must reset the drawing color and texture before calling the function to ensure consistent results. See examples below.This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param vertices table A table containing integer vertices. See the Structures/PolygonVertex. The vertices must be in clockwise order.
function surface.DrawPoly(vertices) end

---[CLIENT] Draws a solid rectangle on the screen.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param x number The X integer co-ordinate.
---@param y number The Y integer co-ordinate.
---@param width number The integer width of the rectangle.
---@param height number The integer height of the rectangle.
function surface.DrawRect(x, y, width, height) end

---[CLIENT] Draw the specified text on the screen, using the previously set position, font and color.
--- This function does not handle newlines properlyThis function sets new text position at the end of the previous drawn text length - this can be used to change text properties (such as font or color) without recalculating and resetting text position. See example #2 for example use of this behavior.This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param text string The text to be rendered.
---@param forceAdditive boolean true to force text to render additive, false to force not additive, nil to use font's value.
function surface.DrawText(text, forceAdditive) end

---[CLIENT] Draw a textured rectangle with the given position and dimensions on the screen, using the current active texture set with surface.SetMaterial. It is also affected by surface.SetDrawColor.
--- See also render.SetMaterial and render.DrawScreenQuadEx.
--- 
--- See also surface.DrawTexturedRectUV.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param x number The X integer co-ordinate.
---@param y number The Y integer co-ordinate.
---@param width number The integer width of the rectangle.
---@param height number The integer height of the rectangle.
function surface.DrawTexturedRect(x, y, width, height) end

---[CLIENT] Draw a textured rotated rectangle with the given position and dimensions and angle on the screen, using the current active texture.
--- This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.
---@param x number The X integer co-ordinate, representing the center of the rectangle.
---@param y number The Y integer co-ordinate, representing the center of the rectangle.
---@param width number The integer width of the rectangle.
---@param height number The integer height of the rectangle.
---@param rotation number The rotation of the rectangle, in degrees.
function surface.DrawTexturedRectRotated(x, y, width, height, rotation) end

---[CLIENT] Draws a textured rectangle with a repeated or partial texture.
--- u and v refer to texture coordinates.
--- 
--- (u, v) = (0, 0) is the top left
--- (u, v) = (1, 0) is the top right
--- (u, v) = (1, 1) is the bottom right
--- (u, v) = (0, 1) is the bottom left
--- 
--- Using a start point of (1, 0) and an end point to (0, 1), you can draw an image flipped horizontally, same goes with other directions. Going above 1 will tile the texture. Negative values are allowed as well.
--- Here's a helper image:
--- If you are using a .png image, you need supply the "noclamp" flag as second parameter for Material if you intend to use tiling.If you find that surface.DrawTexturedRectUV is getting your texture coordinates (u0, v0), (u1, v1) wrong and you're rendering with a material created with CreateMaterial, try adjusting them with the following code:
--- local du = 0.5 / 32 -- half pixel anticorrection
--- local dv = 0.5 / 32 -- half pixel anticorrection
--- local u0, v0 = (u0 - du) / (1 - 2 * du), (v0 - dv) / (1 - 2 * dv)
--- local u1, v1 = (u1 - du) / (1 - 2 * du), (v1 - dv) / (1 - 2 * dv)
--- Explanation:
--- surface.DrawTexturedRectUV tries to correct the texture coordinates by half a pixel (something to do with sampling) and computes the correction using IMaterial::GetMappingWidth()/GetMappingHeight(). If the material was created without a $basetexture, then GetMappingWidth()/GetMappingHeight() uses the width and height of the error material (which is 32x32).This is a rendering function that requires a 2d rendering context.
--- This means that it will only work in 2d Rendering Hooks.The UV offsets might require (sub-)pixel correction for accurate tiling results.Issue Tracker: 3173
---@param x number The X integer coordinate.
---@param y number The Y integer coordinate.
---@param width number The integer width of the rectangle.
---@param height number The integer height of the rectangle.
---@param startU number The U texture mapping of the rectangle origin.
---@param startV number The V texture mapping of the rectangle origin.
---@param endU number The U texture mapping of the rectangle end.
---@param endV number The V texture mapping of the rectangle end.
function surface.DrawTexturedRectUV(x, y, width, height, startU, startV, endU, endV) end

---[CLIENT] Returns the current alpha multiplier affecting drawing operations. This is set by surface.SetAlphaMultiplier or by the game engine in certain other cases.
---@return number The multiplier ranging from 0 to 1.
function surface.GetAlphaMultiplier() end

---[CLIENT] Returns the current color affecting draw operations.
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@return table The color that drawing operations will use as a Color.
function surface.GetDrawColor() end

---[CLIENT] Gets the HUD icon TextureID with the specified name.
---@param name string The name of the texture.
---@return number 
function surface.GetHUDTexture(name) end

---[CLIENT] Returns the current color affecting text draw operations.
--- The returned color will not have the color metatable.Issue Tracker: 2407
---@return table The color that text drawing operations will use as a Color.
function surface.GetTextColor() end

---[CLIENT] Returns the width and height (in pixels) of the given text, but only if the font has been set with surface.SetFont.
---@param text string The string to check the size of.
---@return number, number number - Width of the provided text.
---@return number, number number - Height of the provided text.
function surface.GetTextSize(text) end

---[CLIENT] Returns the texture id of the material with the given name/path, for use with surface.SetTexture.
--- Opposite version of this function is surface.GetTextureNameByID.
--- This function will not work with .png or .jpg images. For that, see Material. You will probably want to use it regardless.
---@param nameOrPath string Name or path of the texture.
---@return number The texture ID
function surface.GetTextureID(nameOrPath) end

---[CLIENT] Returns name/path of texture by ID. Opposite version of this function is surface.GetTextureID.
---@param id number ID of texture.
---@return string Returns name/path of texture.
function surface.GetTextureNameByID(id) end

---[CLIENT] Returns the size of the texture with the associated texture ID.
--- For .png/.jpg textures loaded with Material you can use the $realheight and $realwidth material parameters (IMaterial:GetInt) to get the size of the image.
---@param textureID number The texture ID, returned by surface.GetTextureID.
---@return number, number number - The texture width.
---@return number, number number - The texture height.
function surface.GetTextureSize(textureID) end

---[CLIENT] Play a sound file directly on the client (such as UI sounds, etc).
---@param soundfile string The path to the sound file. Currently does not work with sound scripts (sound.Add)Issue Tracker: 4504 This should either be a sound script name (sound.Add) or a file path relative to the sound/ folder. (Make note that it's not sounds)Currently does not work with sound scripts (sound.Add)Issue Tracker: 4504Currently does not work with sound scripts (sound.Add)Issue Tracker: 4504
function surface.PlaySound(soundfile) end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use ScrH instead.
--- Returns the height of the current client's screen.
---@return number screenHeight
function surface.ScreenHeight() end

---[CLIENT] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use ScrW instead.
--- Returns the width of the current client's screen.
---@return number screenWidth
function surface.ScreenWidth() end

---[CLIENT] Sets the alpha multiplier that will influence all upcoming drawing operations.
--- See also render.SetBlend.
---@param multiplier number The multiplier ranging from 0 to 1.
function surface.SetAlphaMultiplier(multiplier) end

---[CLIENT] Set the color of any future shapes to be drawn, can be set by either using R, G, B, A as separate values or by a Color. Using a color structure is not recommended to be created procedurally.
--- Providing a Color structure is slower than providing four numbers. You may use Color:Unpack for this.The alpha value may not work properly if you're using a material without $vertexalpha.Due to post processing and gamma correction the color you set with this function may appear differently when rendered. This problem does not occur on materials drawn with surface.DrawTexturedRect.
---@param r number The red value of color, or a Color.
---@param g number The green value of color. Unused if a Color was given.
---@param b number The blue value of color. Unused if a Color was given.
---@param a number The alpha value of color. Unused if a Color was given.
function surface.SetDrawColor(r, g, b, a) end

---[CLIENT] Set the current font to be used for text operations later.
--- The fonts must first be created with surface.CreateFont or be one of the Default Fonts.
---@param fontName string The name of the font to use.
function surface.SetFont(fontName) end

---[CLIENT] Sets the material to be used in all upcoming draw operations using the surface library.
--- Not to be confused with render.SetMaterial.
--- If you need to unset the texture, use the draw.NoTexture convenience function.
--- Material function calls are expensive to be done inside this function or inside rendering context, you should be caching the results of Material callsWhen using render.PushRenderTarget or render.SetRenderTarget, material should have the $ignorez flag set to make it visible. If the material is not used in 3D rendering, it is probably safe to add it with this code:
--- material:SetInt( "$flags", bit.bor( material:GetInt( "$flags" ), 32768 ) )
---@param material IMaterial The material to be used.
function surface.SetMaterial(material) end

---[CLIENT] Set the color of any future text to be drawn, can be set by either using R, G, B, A as separate numbers or by a Color.
--- Using a color structure is not recommended to be created procedurally.
--- Providing a Color structure is slower than providing four numbers. You may use Color:Unpack for this.
---@param r number The red value of color, or a Color.
---@param g number The green value of color
---@param b number The blue value of color
---@param a number The alpha value of color
function surface.SetTextColor(r, g, b, a) end

---[CLIENT] Set the top-left position to draw any future text at.
---@param x number The X integer co-ordinate.
---@param y number The Y integer co-ordinate.
function surface.SetTextPos(x, y) end

---[CLIENT] Sets the texture to be used in all upcoming draw operations using the surface library.
--- See surface.SetMaterial for an IMaterial alternative.
--- It's probably best to use the alternative mentioned above.
---@param textureID number The ID of the texture to draw with returned by surface.GetTextureID.
function surface.SetTexture(textureID) end

system = {}

---[SHARED] Returns the total uptime of the current application as reported by Steam.
--- This will return a similar value to SysTime.
--- This function does not work on Dedicated Servers and will instead return no value.
---@return number Seconds of game uptime as an integer.
function system.AppTime() end

---[SHARED] Returns the current battery power.
---@return number 0-100 if a battery (laptop, UPS, etc) is present. Will instead return 255 if plugged in without a battery.
function system.BatteryPower() end

---[CLIENT] Flashes the window, turning the border to white briefly
function system.FlashWindow() end

---[SHARED] Returns the country code of this computer, determined by the localisation settings of the OS.
--- This function does not work on Dedicated Servers and will instead return no value.
---@return string Two-letter country code, using ISO 3166-1 standard.
function system.GetCountry() end

---[SHARED] Returns whether or not the game window has focus.
--- This function does not work on dedicated servers and will instead return no value.
---@return boolean Whether or not the game window has focus.
function system.HasFocus() end

---[SHARED] Returns whether the current OS is Linux.
---@return boolean Whether or not the game is running on Linux.
function system.IsLinux() end

---[SHARED] Returns whether the current OS is OSX.
---@return boolean Whether or not the game is running on OSX.
function system.IsOSX() end

---[CLIENT] Returns whether the game is being run in a window or in fullscreen (you can change this by opening the menu, clicking 'Options', then clicking the 'Video' tab, and changing the Display Mode using the dropdown menu):
---@return boolean Is the game running in a window?
function system.IsWindowed() end

---[SHARED] Returns whether the current OS is Windows.
---@return boolean Whether the system the game runs on is Windows or not.
function system.IsWindows() end

---[SHARED] Returns the synchronized Steam time. This is the number of seconds since the Unix epoch.
--- This function does not work on Dedicated Servers and will instead return no value.
---@return number Current Steam-synchronized Unix time.
function system.SteamTime() end

---[SHARED] Returns the amount of seconds since the Steam user last moved their mouse.
--- This is a direct binding to ISteamUtils->GetSecondsSinceComputerActive, and is most likely related to Steam's automatic "Away" online status.
--- This function does not work on Dedicated Servers and will instead return no value.
---@return number The amount of seconds since the Steam user last moved their mouse.
function system.UpTime() end

table = {}

---[SHARED] Adds the contents from one table into another. The target table will be modified.
--- See also table.insert, table.Inherit and table.Merge.
---@param target table The table to insert the new values into.
---@param source table The table to retrieve the values from.
---@return table The target table.
function table.Add(target, source) end

---[SHARED] Changes all keys to sequential integers. This creates a new table object and does not affect the original.
---@param table table The original table to modify.
---@param saveKeys boolean Save the keys within each member table. This will insert a new field __key into each value, and should not be used if the table contains non-table values.
---@return table Table with integer keys.
function table.ClearKeys(table, saveKeys) end

---[SHARED] Collapses a table with keyvalue structure
---@param input table Input table
---@return table Output table
function table.CollapseKeyValue(input) end

---[SHARED] Concatenates the contents of a table to a string.
---@param tbl table The table to concatenate.
---@param concatenator string A separator to insert between strings
---@param startPos number The key to start at
---@param endPos number The key to end at
---@return string Concatenated values
function table.concat(tbl, concatenator, startPos, endPos) end

---[SHARED] Creates a deep copy and returns that copy.
--- This function does NOT copy userdata, such as Vectors and Angles!
---@param originalTable table The table to be copied.
---@return table A deep copy of the original table
function table.Copy(originalTable) end

---[SHARED] Empties the target table, and merges all values from the source table into it.
---@param source table The table to copy from.
---@param target table The table to write to.
function table.CopyFromTo(source, target) end

---[SHARED] Counts the amount of keys in a table. This should only be used when a table is not numerically and sequentially indexed. For those tables, consider the length (#) operator.
--- If you only want to test if the table is empty or not, use table.IsEmpty instead as it is a lot faster.
---@param tbl table The table to count the keys of.
---@return number The number of keyvalue pairs. This includes non-numeric and non-sequential keys, unlike the length (#) operator.
function table.Count(tbl) end

---[SHARED] Converts a table that has been sanitised with table.Sanitise back to its original form
---@param tbl table Table to be de-sanitised
---@return table De-sanitised table
function table.DeSanitise(tbl) end

---[SHARED] Removes all values from a table.
---@param tbl table The table to empty.
function table.Empty(tbl) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Instead, iterate the table using ipairs or increment from the previous index using next. Non-numerically indexed tables are not ordered.
--- Returns the value positioned after the supplied value in a table. If it isn't found then the first element in the table is returned
---@param tbl table Table to search
---@param value any Value to return element after
---@return any Found element
function table.FindNext(tbl, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Instead, iterate your table with ipairs, storing the previous value and checking for the target. Non-numerically indexed tables are not ordered.
--- Returns the value positioned before the supplied value in a table. If it isn't found then the last element in the table is returned
---@param tbl table Table to search
---@param value any Value to return element before
---@return any Found element
function table.FindPrev(tbl, value) end

---[SHARED] Inserts a value in to the given table even if the table is non-existent
---@param tab table Table to insert value in to
---@param value any Value to insert
---@return table The supplied or created table
function table.ForceInsert(tab, value) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This was deprecated in Lua 5.1 and removed in 5.2. You should use pairs instead.
--- Iterates for each key-value pair in the table, calling the function with the key and value of the pair. If the function returns anything, the loop is broken.
--- This is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see here. You should use pairs instead. The GLua interpretation of this is table.ForEach.
---@param tbl table The table to iterate over.
---@param callback function The function to run for each key and value.
function table.foreach(tbl, callback) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This was deprecated in Lua 5.1 and removed in 5.2. You should use ipairs() instead.
--- Iterates for each numeric index in the table in order.
--- This is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see here. You should use ipairs() instead.
---@param table table The table to iterate over.
---@param func function The function to run for each index.
function table.foreachi(table, func) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Instead, expect the first key to be 1.
--- Non-numerically indexed tables are not ordered and do not have a first key.
---@param tab table Table to retrieve key from
---@return any Key
function table.GetFirstKey(tab) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Instead, index the table with a key of 1.
--- Non-numerically indexed tables are not ordered and do not have a first key.
---@param tab table Table to retrieve value from
---@return any Value
function table.GetFirstValue(tab) end

---[SHARED] Returns all keys of a table.
---@param tabl table The table to get keys of
---@return table Table of keys
function table.GetKeys(tabl) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Instead, use the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
--- Returns the last key found in the given table
---@param tab table Table to retrieve key from
---@return any Key
function table.GetLastKey(tab) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- Instead, index the table with the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
--- Returns the last value found in the given table
---@param tab table Table to retrieve value from
---@return any Value
function table.GetLastValue(tab) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This function was deprecated in Lua 5.1 and is removed in 5.2. Use the length (#) operator instead.
--- Returns the length of the table.
---@param tbl table The table to check.
---@return number Sequential length.
function table.getn(tbl) end

---[SHARED] Returns a key of the supplied table with the highest number value.
---@param inputTable table The table to search in.
---@return any winningKey
function table.GetWinningKey(inputTable) end

---[SHARED] Checks if a table has a value.
--- This function is very inefficient for large tables (O(n)) and should probably not be called in things that run each frame. Instead, consider a table structure such as example 2 below. Also see: Tables: Bad HabitsFor optimization, functions that look for a value by sorting the table should never be needed if you work on a table that you built yourself.
---@param tbl table Table to check
---@param value any Value to search for
---@return boolean Returns true if the table has that value, false otherwise
function table.HasValue(tbl, value) end

---[SHARED] Copies any missing data from base to target, and sets the target's BaseClass member to the base table's pointer.
--- See table.Merge, which overrides existing values and doesn't add a BaseClass member.
--- See also table.Add, which simply adds values of one table to another.
--- Sub-tables aren't inherited. The target's table value will take priority.
---@param target table Table to copy data to
---@param base table Table to copy data from
---@return table Target
function table.Inherit(target, base) end

---[SHARED] Inserts a value into a table at the end of the table or at the given position.
--- This function does not call the __newindex metamethod.
---@param tbl table The table to insert the variable into.
---@param position number The position in the table to insert the variable. If the third argument is nil this argument becomes the value to insert at the end of given table.
---@param value any The variable to insert into the table.
---@return number The index the object was placed at.
function table.insert(tbl, position, value) end

---[SHARED] Returns whether or not the given table is empty.
--- This works on both sequential and non-sequential tables, and is a lot faster to use than table.Count(tbl) == 0.
--- If you want to check if a table is not empty, use next(tbl) ~= nil, as it is slightly faster.
---@param tab table Table to check.
---@return boolean Is empty?
function table.IsEmpty(tab) end

---[SHARED] Returns whether or not the table's keys are sequential
---@param tab table Table to check
---@return boolean Is sequential
function table.IsSequential(tab) end

---[SHARED] Returns the first key found to be containing the supplied value
---@param tab table Table to search
---@param value any Value to search for
---@return any Key
function table.KeyFromValue(tab, value) end

---[SHARED] Returns a table of keys containing the supplied value
---@param tab table Table to search
---@param value any Value to search for
---@return table Keys
function table.KeysFromValue(tab, value) end

---[SHARED] Returns a copy of the input table with all string keys converted to be lowercase recursively
---@param tbl table Table to convert
---@return table New table
function table.LowerKeyNames(tbl) end

---[SHARED] Returns the highest numerical key.
---@param tbl table The table to search.
---@return number The highest numerical key.
function table.maxn(tbl) end

---[SHARED] Returns an array of values of given with given key from each table of given table.
--- See also table.KeysFromValue.
---@param inputTable table The table to search in.
---@param keyName any The key to lookup.
---@return table A list of found values, or an empty table.
function table.MemberValuesFromKey(inputTable, keyName) end

---[SHARED] Merges the contents of the second table with the content in the first one. The destination table will be modified.
--- See table.Inherit, which doesn't override existing values.
--- See also table.Add, which simply adds values of one table to another.
--- This function will cause a stack overflow under certain circumstances.
---@param destination table The table you want the source table to merge with
---@param source table The table you want to merge with the destination table
---@return table Destination table
function table.Merge(destination, source) end

---[SHARED] Moves elements from one part of a table to another part a given table. This is similar to assigning elements from the source table to the destination table in multiple assignments.
--- This is only available on the x86-64 versions, because of the difference in the LuaJIT version. See here
---@param sourceTbl table The source table from which the elements are to be moved.
---@param from number The start index of the source range from which the elements are to be moved.
---@param to number The end index of the source range until which the elements are to be moved.
---@param dest number The index within the destination table where the moved elements should be inserted. If this is not specified, the moved elements will be inserted at the end of the table.
---@param destTbl table The destination table to which the elements are to be moved. By default, this is the same as the source table.
---@return table The modified destination table.
function table.move(sourceTbl, from, to, dest, destTbl) end

---[SHARED] Returns a random value from the supplied table.
--- This function iterates over the given table twice, therefore with sequential tables you should instead use following:
--- mytable[ math.random( #mytable ) ]
---@param haystack table The table to choose from.
---@return any, any any - A random value from the table.
---@return any, any any - The key associated with the random value.
function table.Random(haystack) end

---[SHARED] Removes a value from a table and shifts any other values down to fill the gap.
--- Does nothing if index is less than 1 or greater than #tbl
---@param tbl table The table to remove the value from.
---@param index number The index of the value to remove.
---@return any The value that was removed.
function table.remove(tbl, index) end

---[SHARED] Removes the first instance of a given value from the specified table with table.remove, then returns the key that the value was found at.
--- Avoid usage of this function. It does not remove all instances of given value in the table, only the first found, and it does not work with non sequential tables!
---@param tbl table The table that will be searched.
---@param val any The value to find within the table.
---@return any The key at which the value was found, or false if the value was not found.
function table.RemoveByValue(tbl, val) end

---[SHARED] Returns a reversed copy of a sequential table. Any non-sequential and non-numeric keyvalue pairs will not be copied.
---@param tbl table Table to reverse.
---@return table A reversed copy of the table.
function table.Reverse(tbl) end

---[SHARED] Converts Vectors, Angles and booleans to be able to be converted to and from key-values via util.TableToKeyValues.
--- table.DeSanitise performs the opposite transformation.
---@param tab table Table to sanitise
---@return table Sanitised table
function table.Sanitise(tab) end

---[SHARED] Performs an inline Fisher-Yates shuffle on the table in O(n) time
---@param target table The table to shuffle.
function table.Shuffle(target) end

---[SHARED] Sorts a sequential table either ascending or by the given sort function.
--- This function modifies the table you give to it.
---@param tbl table The table to sort.
---@param sorter function If specified, the function will be called with 2 parameters each. Return true in this function if you want the first parameter to come first in the sorted array.
function table.sort(tbl, sorter) end

---[SHARED] Returns a list of keys sorted based on values of those keys.
--- For normal sorting see table.sort.
---@param tab table Table to sort. All values of this table must be of same type.
---@param descending boolean Should the order be descending?
---@return table A table of keys sorted by values from supplied table.
function table.SortByKey(tab, descending) end

---[SHARED] Sorts a table by a named member.
---@param tab table Table to sort.
---@param memberKey any The key used to identify the member.
---@param ascending boolean Whether or not the order should be ascending.
function table.SortByMember(tab, memberKey, ascending) end

---[SHARED] Sorts a table in reverse order from table.sort.
--- This function modifies the table you give to it. Like table.sort, it does not return anything.
---@param tbl table The table to sort in descending order.
function table.SortDesc(tbl) end

---[SHARED] Converts a table into a string
---@param tbl table The table to iterate over.
---@param displayName string Optional. A name for the table.
---@param niceFormatting boolean Adds new lines and tabs to the string.
---@return string The table formatted as a string.
function table.ToString(tbl, displayName, niceFormatting) end

team = {}

---[SHARED] Increases the score of the given team
---@param index number Index of the team
---@param increment number Amount to increase the team's score by
function team.AddScore(index, increment) end

---[SHARED] Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED
---@return number Team index
function team.BestAutoJoinTeam() end

---[SHARED] Returns a table consisting of information on every defined team
---@return table Team info
function team.GetAllTeams() end

---[SHARED] Returns the selectable classes for the given team. This can be added to with team.SetClass
---@param index number Index of the team
---@return table Selectable classes
function team.GetClass(index) end

---[SHARED] Returns the team's color.
---@param teamIndex number The team index.
---@return table The team's color as a Color.
function team.GetColor(teamIndex) end

---[SHARED] Returns the name of the team.
---@param teamIndex number The team index.
---@return string The team name. If the team is not defined, returns an empty string.
function team.GetName(teamIndex) end

---[SHARED] Returns a table with all player of the specified team.
---@param teamIndex number The team index.
---@return table A table of Players that belong to the requested team.
function team.GetPlayers(teamIndex) end

---[SHARED] Returns the score of the team.
---@param teamIndex number The team index.
---@return number score
function team.GetScore(teamIndex) end

---[SHARED] Returns a table of valid spawnpoint classes the team can use. These are set with team.SetSpawnPoint.
---@param index number Index of the team
---@return table Valid spawnpoint classes
function team.GetSpawnPoint(index) end

---[SHARED] Returns a table of valid spawnpoint entities the team can use. These are set with  team.SetSpawnPoint.
---@param index number Index of the team
---@return table Valid spawnpoint entities
function team.GetSpawnPoints(index) end

---[SHARED] Returns if a team is joinable or not. This is set in team.SetUp.
---@param index number The index of the team.
---@return boolean True if the team is joinable. False otherwise.
function team.Joinable(index) end

---[SHARED] Returns the amount of players in a team.
---@param teamIndex number The team index.
---@return number playerCount
function team.NumPlayers(teamIndex) end

---[SHARED] Sets valid classes for use by a team. Classes can be created using player_manager.RegisterClass
---@param index number Index of the team
---@param classes any A class ID or table of class IDs
function team.SetClass(index, classes) end

---[SHARED] Sets the team's color.
---@param teamIndex number The team index.
---@param color table The team's new color as a Color.
function team.SetColor(teamIndex, color) end

---[SHARED] Sets the score of the given team
---@param index number Index of the team
---@param score number The team's new score
function team.SetScore(index, score) end

---[SHARED] Sets valid spawnpoint classes for use by a team.
--- GM.TeamBased must be set to true for this to work
---@param index number Index of the team
---@param classes any A spawnpoint classname or table of spawnpoint classnames
function team.SetSpawnPoint(index, classes) end

---[SHARED] Creates a new team.
---@param teamIndex number The team index.
---@param teamName string The team name.
---@param teamColor table The team color. Uses the Color.
---@param isJoinable boolean Whether the team is joinable or not.
function team.SetUp(teamIndex, teamName, teamColor, isJoinable) end

---[SHARED] Returns the total number of deaths of all players in the team.
---@param index number The team index.
---@return number Total deaths in team.
function team.TotalDeaths(index) end

---[SHARED] Get's the total frags in a team.
---@param entityOrNumber Entity Entity or number.
---@return number index
function team.TotalFrags(entityOrNumber) end

---[SHARED] Returns true if the given team index is valid
---@param index number Index of the team
---@return boolean Is valid
function team.Valid(index) end

timer = {}

---[SHARED] Adjusts the timer if the timer with the given identifier exists.
---@param identifier any Identifier of the timer to adjust.
---@param delay number The delay interval in seconds. Must be specified.
---@param repetitions number Repetitions. Use 0 for infinite or nil to keep previous value.
---@param func function The new function. Use nil to keep previous value.
---@return boolean true if succeeded.
function timer.Adjust(identifier, delay, repetitions, func) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- If you want to check if whether or not a timer exists, use timer.Exists.
--- This function does nothing.
function timer.Check() end

---[SHARED] Creates a new timer that will repeat its function given amount of times.
--- This function also requires the timer to be named, which allows you to control it after it was created via the timer.
--- For a simple one-time timer with no identifiers, see timer.Simple.
--- Timers use CurTime internally. Due to this, they won't advance while the client is timing out from the server or on an empty dedicated server due to hibernation. (unless sv_hibernate_think is set to 1).
---@param identifier string Identifier of the timer to create. Must be unique. If a timer already exists with the same identifier, that timer will be updated to the new settings and reset.
---@param delay number The delay interval in seconds. If the delay is too small, the timer will fire on the next GM:Tick.
---@param repetitions number The number of times to repeat the timer. Enter 0 or any value below 0 for infinite repetitions.
---@param func function Function called when timer has finished the countdown.
function timer.Create(identifier, delay, repetitions, func) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using timer.Remove instead.
--- Stops and destroys the given timer. Alias of timer.Remove.
---@param identifier string Identifier of the timer to destroy.
function timer.Destroy(identifier) end

---[SHARED] Returns whenever the given timer exists or not.
---@param identifier string Identifier of the timer.
---@return boolean Returns true if the timer exists, false if it doesn't
function timer.Exists(identifier) end

---[SHARED] Pauses the given timer.
---@param identifier any Identifier of the timer.
---@return boolean false if the timer didn't exist or was already paused, true otherwise.
function timer.Pause(identifier) end

---[SHARED] Stops and removes a timer created by timer.Create.
--- The timers are removed in the next frame! Keep this in mind when storing identifiers in variables.
---@param identifier string Identifier of the timer to remove.
function timer.Remove(identifier) end

---[SHARED] Returns amount of repetitions/executions left before the timer destroys itself.
---@param identifier any Identifier of the timer.
---@return number The amount of executions left.
function timer.RepsLeft(identifier) end

---[SHARED] Creates a simple timer that runs the given function after a specified delay.
--- For a more advanced version that you can control after creation, see timer.Create.
--- Timers use CurTime internally. Due to this, they won't advance while the client is timing out from the server or on an empty dedicated server due to hibernation. (unless sv_hibernate_think is set to 1).
---@param delay number How long until the function should be ran (in seconds). Use 0 to have the function run in the next GM:Tick.
---@param func function The function to run after the specified delay.
function timer.Simple(delay, func) end

---[SHARED] Restarts the given timer.
--- Timers use CurTime for timing.Timers won't advance while the client is timing out from the server.
---@param identifier any Identifier of the timer.
---@return boolean true if the timer exists, false if it doesn't.
function timer.Start(identifier) end

---[SHARED] Stops the given timer and rewinds it.
---@param identifier any Identifier of the timer.
---@return boolean false if the timer didn't exist or was already stopped, true otherwise.
function timer.Stop(identifier) end

---[SHARED] Returns amount of time left (in seconds) before the timer executes its function.
--- If the timer is paused, the amount will be negative.
---@param identifier any Identifier of the timer.
---@return number The amount of time left (in seconds).
function timer.TimeLeft(identifier) end

---[SHARED] Runs either timer.Pause or timer.UnPause based on the timer's current status.
---@param identifier any Identifier of the timer.
---@return boolean status of the timer.
function timer.Toggle(identifier) end

---[SHARED] Unpauses the timer.
---@param identifier any Identifier of the timer.
---@return boolean false if the timer didn't exist or was already running, true otherwise.
function timer.UnPause(identifier) end

umsg = {}

---[SERVER] Writes an angle to the usermessage.
---@param angle Angle The angle to be sent.
function umsg.Angle(angle) end

---[SERVER] Writes a bool to the usermessage.
---@param bool boolean The bool to be sent.
function umsg.Bool(bool) end

---[SERVER] Writes a signed char to the usermessage.
---@param char number The char to be sent.
function umsg.Char(char) end

---[SERVER] Dispatches the usermessage to the client(s).
function umsg.End() end

---[SERVER] Writes an entity object to the usermessage.
---@param entity Entity The entity to be sent.
function umsg.Entity(entity) end

---[SERVER] Writes a float to the usermessage.
---@param float number The float to be sent.
function umsg.Float(float) end

---[SERVER] Writes a signed int (32 bit) to the usermessage.
---@param int number The int to be sent.
function umsg.Long(int) end

---[SERVER] We advise against using this. It may be changed or removed in a future update.
--- 
--- Inferior version of util.AddNetworkString
--- The string specified will be networked to the client and receive a identifying number, which will be sent instead of the string to optimize networking.
---@param string string The string to be pooled.
function umsg.PoolString(string) end

---[SERVER] Writes a signed short (16 bit) to the usermessage.
---@param short number The short to be sent.
function umsg.Short(short) end

---[SERVER] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using net instead
--- Starts a new usermessage.
--- Usermessages have a limit of only 256 bytes!
---@param name string The name of the message to be sent.
---@param filter Player If passed a player object, it will only be sent to the player, if passed a CRecipientFilter of players, it will be sent to all specified players, if passed nil (or another invalid value), the message will be sent to all players.
function umsg.Start(name, filter) end

---[SERVER] Writes a null terminated string to the usermessage.
---@param string string The string to be sent.
function umsg.String(string) end

---[SERVER] Writes a Vector to the usermessage.
---@param vector Vector The vector to be sent.
function umsg.Vector(vector) end

---[SERVER] Writes a vector normal to the usermessage.
---@param normal Vector The vector normal to be sent.
function umsg.VectorNormal(normal) end

undo = {}

---[SERVER] Adds an entity to the current undo block
---@param ent Entity The entity to add
function undo.AddEntity(ent) end

---[SERVER] Adds a function to call when the current undo block is undone. Note that if an undo has a function, the player will always be notified when this undo is performed, even if the entity it is meant to undo no longer exists.
---@param func function The function to call. First argument will be the Undo Structure, all subsequent arguments will be what was passed after this function in the argument below. Returning false will mark execution of this function as "failed", meaning that the undo might be skipped if no other entities are removed by it. This is useful when for example an entity you want to access is removed therefore there's nothing to do.
---@param ... ... Arguments to pass to the function (after the undo info table)
function undo.AddFunction(func, ...) end

---[SERVER] Begins a new undo entry
---@param name string Name of the undo message to show to players
function undo.Create(name) end

---[SERVER] Processes an undo block (in table form). This is used internally by the undo manager when a player presses Z.
--- You should use gm_undo or gm_undonum *num* console commands instead of calling this function directly.
---@param tab table The undo block to process as an Structures/Undo
---@return number Number of removed entities
function undo.Do_Undo(tab) end

---[SERVER] Completes an undo entry, and registers it with the player's client
---@param NiceText string Text that appears in the player's undo history
function undo.Finish(NiceText) end

---[SHARED] Serverside, returns a table containing all undo blocks of all players. Clientside, returns a table of the local player's undo blocks.
--- Serverside, this table's keys use Player:UniqueID to store a player's undo blocks.
---@return table The undo table.
function undo.GetTable() end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Makes the UI dirty - it will re-create the controls the next time it is viewed.
function undo.MakeUIDirty() end

---[SERVER] Replaces any instance of the "from" reference with the "to" reference, in any existing undo block. Returns true if something was replaced
---@param from Entity The old entity
---@param to Entity The new entity to replace the old one
---@return boolean somethingReplaced
function undo.ReplaceEntity(from, to) end

---[SERVER] Sets a custom undo text for the current undo block
---@param customText string The text to display when the undo block is undone
function undo.SetCustomUndoText(customText) end

---[SERVER] Sets the player which the current undo block belongs to
---@param ply Player The player responsible for undoing the block
function undo.SetPlayer(ply) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Adds a hook (CPanelPaint) to the control panel paint function so we can determine when it is being drawn.
function undo.SetupUI() end

usermessage = {}

---[SHARED] Returns a table of every usermessage hook
---@return table hooks
function usermessage.GetTable() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should be using net instead
--- Sets a hook for the specified to be called when a usermessage with the specified name arrives.
--- Usermessages have a limit of only 256 bytes!
---@param name string The message name to hook to.
---@param callback function The function to be called if the specified message was received.  bf_read msg vararg preArgs
---@param ... ... Arguments that are passed to the callback function when the hook is called.
function usermessage.Hook(name, callback, ...) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called by the engine when a usermessage arrives, this method calls the hook function specified by usermessage.Hook if any.
---@param name string The message name.
---@param msg bf_read The message.
function usermessage.IncomingMessage(name, msg) end

utf8 = {}

---[SHARED] Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
---@param ... ... Unicode code points to be converted in to a UTF-8 string.
---@return string UTF-8 string generated from given arguments.
function utf8.char(...) end

---[SHARED] Returns the codepoints (as numbers) from all characters in the given string that start between byte position startPos and endPos. It raises an error if it meets any invalid byte sequence. This functions similarly to string.byte.
---@param string string The string that you will get the code(s) from.
---@param startPos number The starting byte of the string to get the codepoint of.
---@param endPos number The ending byte of the string to get the codepoint of.
---@return ... The codepoint number(s).
function utf8.codepoint(string, startPos, endPos) end

---[SHARED] Returns an iterator (like string.gmatch) which returns both the position and codepoint of each utf8 character in the string. It raises an error if it meets any invalid byte sequence.
---@param string string The string that you will get the codes from.
---@return function The iterator (to be used in a for loop).
function utf8.codes(string) end

---[SHARED] Forces a string to contain only valid UTF-8 data. Invalid sequences are replaced with U+FFFD (the Unicode replacement character).
--- This is a lazy way for users to ensure a string contains only valid UTF-8 data.
---@param string string The string that will become a valid UTF-8 string.
---@return string The UTF-8 string.
function utf8.force(string) end

---[SHARED] A UTF-8 compatible version of string.GetChar.
---@param str string The string that you will be searching with the supplied index.
---@param index number The index's value of the string to be returned.
---@return string str
function utf8.GetChar(str, index) end

---[SHARED] Returns the number of UTF-8 sequences in the given string between positions startPos and endPos (both inclusive). If it finds any invalid UTF-8 byte sequence, returns false as well as the position of the first invalid byte.
---@param string string The string to calculate the length of.
---@param startPos number The starting position to get the length from.
---@param endPos number The ending position to get the length from.
---@return number, number number - The number of UTF-8 characters in the string. If there are invalid bytes, this will be false.
---@return number, number number - The position of the first invalid byte. If there were no invalid bytes, this will be nil.
function utf8.len(string, startPos, endPos) end

---[SHARED] Returns the byte-index of the n'th UTF-8-character after the given startPos (nil if none). startPos defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character startPos lies within.
---@param string string The string that you will get the byte position from.
---@param n number The position to get the beginning byte position from.
---@param startPos number The offset for n.
---@return number Starting byte-index of the given position.
function utf8.offset(string, n, startPos) end

---[SHARED] A UTF-8 compatible version of string.sub.
--- Avoid using this function on large strings every tick/frame, as it may cause lags.
---@param string string The string you'll take a sub-string out of.
---@param StartPos number The position of the first character that will be included in the sub-string.
---@param EndPos number The position of the last character to be included in the sub-string. It can be negative to count from the end.
---@return string The substring.
function utf8.sub(string, StartPos, EndPos) end

util = {}

---[SERVER] Adds the specified string to a string table, which will cache it and network it to all clients automatically.
--- Whenever you want to create a net message with net.Start, you must add the name of that message as a networked string via this function.
--- If the passed string already exists, nothing will happen and the ID of the existing item will be returned.
--- Each unique network name needs to be pooled once - do not put this function call into any other functions if you're using a constant string. Preferable place for this function is in a serverside lua file, or in a shared file with the net.Receive function.
--- The string table used for this function does not interfere with the engine string tables and has 4095 slots.
--- This limit is shared among all entities, SetNW* and SetGlobal* functions. If you exceed the limit, you cannot create new variables, and you will get the following warning:
--- Warning:  Table networkstring is full, can't add [key]Existing variables will still get updated without the warning. You can check the limit by counting up until util.NetworkIDToString returns nil
---@param str string Adds the specified string to the string table.
---@return number The id of the string that was added to the string table. Same as calling util.NetworkStringToID.
function util.AddNetworkString(str) end

---[SHARED] Function used to calculate aim vector from 2D screen position. It is used in SuperDOF calculate Distance.
--- Essentially a generic version of gui.ScreenToVector.
---@param ViewAngles Angle View angles
---@param ViewFOV number View Field of View
---@param x number Mouse X position
---@param y number Mouse Y position
---@param scrWidth number Screen width
---@param scrHeight number Screen height
---@return Vector Calculated aim vector
function util.AimVector(ViewAngles, ViewFOV, x, y, scrWidth, scrHeight) end

---[SHARED] Decodes the specified string from base64.
---@param str string String to decode.
---@return string The raw bytes of the decoded string.
function util.Base64Decode(str) end

---[SHARED] Encodes the specified string to base64.
--- Unless disabled with the inline argument, the Base64 returned is compliant to the RFC 2045 standard. This means it will have a line break after every 76th character.
---@param str string String to encode.
---@param inline boolean true to disable RFC 2045 compliance (newline every 76th character)
---@return string Base 64 encoded string.
function util.Base64Encode(str, inline) end

---[SERVER] Applies explosion damage to all entities in the specified radius.
---@param inflictor Entity The entity that caused the damage.
---@param attacker Entity The entity that attacked.
---@param damageOrigin Vector The center of the explosion
---@param damageRadius number The radius in which entities will be damaged.
---@param damage number The amount of damage to be applied.
function util.BlastDamage(inflictor, attacker, damageOrigin, damageRadius, damage) end

---[SERVER] Applies spherical damage based on damage info to all entities in the specified radius.
---@param dmg CTakeDamageInfo The information about the damage
---@param damageOrigin Vector Center of the spherical damage
---@param damageRadius number The radius in which entities will be damaged.
function util.BlastDamageInfo(dmg, damageOrigin, damageRadius) end

---[SHARED] Compresses the given string using the LZMA algorithm.
--- Use with net.WriteData and net.ReadData for networking and  util.Decompress to decompress the data.
---@param str string String to compress.
---@return string The compressed string, or nil if the input string was zero length ("").
function util.Compress(str) end

---[SHARED] Generates the CRC Checksum of the specified string.
--- This is NOT a hashing function. It is a checksum, typically used for error detection/data corruption detection. It is possible for this function to generate "collisions", where two different strings will produce the same CRC. If you need a hashing function, use util.SHA256.
---@param stringToChecksum string The string to calculate the checksum of.
---@return string The unsigned 32 bit checksum.
function util.CRC(stringToChecksum) end

---[SHARED] Returns the current date formatted like '2012-10-31 18-00-00'
---@return string date
function util.DateStamp() end

---[SHARED] Performs a trace and paints a decal to the surface hit.
---@param name string The name of the decal to paint.
---@param start Vector The start of the trace.
---@param _end Vector The end of the trace.
---@param filter Entity If set, the decal will not be able to be placed on given entity. Can also be a table of entities.
function util.Decal(name, start, _end, filter) end

---[CLIENT] Performs a trace and paints a decal to the surface hit.
--- This function has trouble spanning across multiple brushes on the map.
---@param material IMaterial The name of the decal to paint. Can be retrieved with util.DecalMaterial.
---@param ent Entity The entity to apply the decal to
---@param position Vector The position of the decal.
---@param normal Vector The direction of the decal.
---@param color table The color of the decal. Uses the Color. This only works when used on a brush model and only if the decal material has set $vertexcolor to 1.
---@param w number The width scale of the decal.
---@param h number The height scale of the decal.
function util.DecalEx(material, ent, position, normal, color, w, h) end

---[SHARED] Gets the full material path by the decal name. Used with util.DecalEx.
---@param decalName string Name of the decal.
---@return string Material path of the decal.
function util.DecalMaterial(decalName) end

---[SHARED] Decompresses the given string using LZMA algorithm. Used to decompress strings previously compressed with util.Compress.
---@param compressedString string The compressed string to decompress.
---@param maxSize number The maximal size in bytes it will decompress.
---@return string The original, decompressed string or an empty string on failure or invalid input.
function util.Decompress(compressedString, maxSize) end

---[SHARED] Gets the distance between a line and a point in 3d space.
---@param lineStart Vector Start of the line.
---@param lineEnd Vector End of the line.
---@param pointPos Vector The position of the point.
---@return number, Vector, number number - Distance from line.
---@return number, Vector, number Vector - Nearest point on line.
---@return number, Vector, number number - Distance along line from start.
function util.DistanceToLine(lineStart, lineEnd, pointPos) end

---[SHARED] Creates an effect with the specified data.
--- For Orange Box .pcf particles, see ParticleEffect, ParticleEffectAttach and  CreateParticleSystem.
--- When dispatching an effect from the server, some values may be clamped for networking optimizations. Visit the Set accessors on CEffectData to see which ones are affected.
--- You will need to couple this function with IsFirstTimePredicted if you want to use it in predicted hook.
---@param effectName string The name of the effect to create. You can find a list of built-in engine effects here. You can create your own, example effects can be found here and here.
---@param effectData CEffectData The effect data describing the effect.
---@param allowOverride boolean Whether Lua-defined effects should override engine-defined effects with the same name for this/single function call.
---@param ignorePredictionOrRecipientFilter any Can either be a boolean to ignore the prediction filter or a CRecipientFilter. Set this to true if you wish to call this function in multiplayer from server.
function util.Effect(effectName, effectData, allowOverride, ignorePredictionOrRecipientFilter) end

---[CLIENT] Filters given text using Steam's filtering system. The function will obey local client's Steam settings for chat filtering:
--- In some cases, especially in a chatbox, messages from some players may return an empty string if the context argument used for filtering is TEXT_FILTER_CHAT and if the local player has blocked the sender of the message on Steam.
---@param str string String to filter.
---@param context number Filtering context. See Enums/TEXT_FILTER.
---@param player Player Used to determine if the text should be filtered according to local user's Steam chat filtering settings.
---@return string The filtered text based on given settings.
function util.FilterText(str, context, player) end

---[MENU] Converts the Full path of the given GMA file to the Relative Path.
--- You can use util.RelativePathToFull_Menu to convert the Relative path back to the Full Path.
---@param gma string The Full path to the GMA file. like: "[Steam folder]\common\garrysmod\garrysmod\addons[Name].gma"
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
---@return string The relative path to the GMA file.
function util.FullPathToRelative_Menu(gma, gamePath) end

---[SHARED] Returns a table containing the info about the model.
--- This function will silently fail if used on models with following strings in them:
--- 
--- _shared
--- _anims
--- _gestures
--- _anim
--- _postures
--- _gst
--- _pst
--- _shd
--- _ss
--- _anm
--- _include
---@param mdl string Model path
---@return table The model info as a table with the following keys:  number SkinCount - Identical to Entity:SkinCount. string KeyValues - Valve key-value formatted info about the model's physics (Constraint Info, etc). This is limited to 4096 characters. string ModelKeyValues - Valve key-value formatted info about the model ($keyvalues command in the .qc of the model), if present
function util.GetModelInfo(mdl) end

---[SHARED] Returns a table of visual meshes of given model.
--- This does not work on brush models (*number models)
--- See also ENTITY:GetRenderMesh.
---@param model string The full path to a model to get the visual meshes of.
---@param lod number 
---@param bodygroupMask number 
---@return table, table table - A table of tables with the following format:  string material - The material of the specific mesh table triangles - A table of Structures/MeshVertexes ready to be fed into IMesh:BuildFromTriangles table verticies - A table of Structures/MeshVertexes representing all the vertices of the mesh. This table is used internally to generate the "triangles" table.  Each Structures/MeshVertex returned also has an extra table of tables field called "weights" with the following data:  number bone - The bone this vertex is attached to number weight - How "strong" this vertex is attached to the bone. A vertex can be attached to multiple bones at once.
---@return table, table table - A table of tables containing the model bind pose (where the keys are the bone ID) with the following contents:  number parent - The ID of the parent bone. VMatrix matrix - The bone's bind transform in model (not bone) space.
function util.GetModelMeshes(model, lod, bodygroupMask) end

---[SHARED] Gets PData of an offline player using their SteamID
--- This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
---@param steamID string SteamID of the player
---@param name string Variable name to get the value of
---@param default string The default value, in case there's nothing stored
---@return string The stored value
function util.GetPData(steamID, name, default) end

---[CLIENT] Creates a new PixVis handle. See util.PixelVisible.
---@return pixelvis_handle_t PixVis
function util.GetPixelVisibleHandle() end

---[SHARED] Utility function to quickly generate a trace table that starts at the players view position, and ends 32768 units along a specified direction.
---@param ply Player The player the trace should be based on
---@param dir Vector The direction of the trace
---@return table The trace data. See Structures/Trace
function util.GetPlayerTrace(ply, dir) end

---[CLIENT] Gets information about the sun position and obstruction or nil if there is no sun.
---@return table The sun info. See Structures/SunInfo
function util.GetSunInfo() end

---[SHARED] Returns data of a surface property at given ID.
---@param id number Surface property ID. You can get it from Structures/TraceResult.
---@return table The data or no value if there is no valid surface property at given index. See Structures/SurfacePropertyData
function util.GetSurfaceData(id) end

---[SHARED] Returns the matching surface property index for the given surface property name.
--- See also util.GetSurfaceData and util.GetSurfacePropName for opposite function.
---@param surfaceName string The name of the surface.
---@return number The surface property index, or -1 if name doesn't correspond to a valid surface property.
function util.GetSurfaceIndex(surfaceName) end

---[SHARED] Returns the name of a surface property at given ID.
--- See also util.GetSurfaceData and util.GetSurfaceIndex for opposite function.
---@param id number Surface property ID. You can get it from Structures/TraceResult.
---@return string The name or an empty string if there is no valid surface property at given index.
function util.GetSurfacePropName(id) end

---[SERVER] Returns a table of all SteamIDs that have a usergroup.
--- This returns the original usergroups table, changes done to this table are not retroactive and will only affect newly connected usersThis returns only groups that are registered in the settings/users.txt file of your server.
--- In order to get the usergroup of a connected player, please use Player:GetUserGroup instead.
---@return table A table of users where the key is the SteamID of the user and the value is a table with 2 fields: > string name - Player Steam name > string group - Player usergroup name
function util.GetUserGroups() end

---[SHARED] Performs a "ray" box intersection and returns position, normal and the fraction.
---@param rayStart Vector Origin/start position of the ray.
---@param rayDelta Vector The ray vector itself. This can be thought of as: the ray end point relative to the start point. Note that in this implementation, the ray is not infinite - it's only a segment.
---@param boxOrigin Vector The center of the box.
---@param boxAngles Angle The angles of the box.
---@param boxMins Vector The min position of the box.
---@param boxMaxs Vector The max position of the box.
---@return Vector, Vector, number Vector - Hit position, nil if not hit.
---@return Vector, Vector, number Vector - Normal/direction vector, nil if not hit.
---@return Vector, Vector, number number - Fraction of trace used, nil if not hit.
function util.IntersectRayWithOBB(rayStart, rayDelta, boxOrigin, boxAngles, boxMins, boxMaxs) end

---[SHARED] Performs a ray-plane intersection and returns the hit position or nil.
---@param rayOrigin Vector Origin/start position of the ray.
---@param rayDirection Vector The direction of the ray.
---@param planePosition Vector Any position of the plane.
---@param planeNormal Vector The normal vector of the plane.
---@return Vector The position of intersection, nil if not hit.
function util.IntersectRayWithPlane(rayOrigin, rayDirection, planePosition, planeNormal) end

---[SHARED] Returns whether a binary module is installed and is resolvable by require.
---@param name string Name of the binary module, exactly the same as you would enter it as the argument to require.
---@return boolean Whether the binary module is installed and require can resolve it.
function util.IsBinaryModuleInstalled(name) end

---[SERVER] Checks if a certain position is within the world bounds.
---@param position Vector Position to check.
---@return boolean Whether the vector is in world.
function util.IsInWorld(position) end

---[SHARED] Checks if the model is loaded in the game.
---@param modelName string Name/Path of the model to check.
---@return boolean Returns true if the model is loaded in the game; otherwise false.
function util.IsModelLoaded(modelName) end

---[CLIENT] Performs OBB on OBB intersection test.
---@param box1Origin Vector The center of the first box.
---@param box1Angles Angle The angles of the first box.
---@param box1Mins Vector The min position of the first box.
---@param box1Maxs Vector The max position of the first box.
---@param box2Origin Vector The center of the second box.
---@param box2Angles Angle The angles of the second box.
---@param box2Mins Vector The min position of the second box.
---@param box2Maxs Vector The max position of the second box.
---@return boolean Whether there is an intersection.
function util.IsOBBIntersectingOBB(box1Origin, box1Angles, box1Mins, box1Maxs, box2Origin, box2Angles, box2Mins, box2Maxs) end

---[CLIENT] Check whether the skybox is visible from the point specified.
--- This will always return true in fullbright maps.
---@param position Vector The position to check the skybox visibility from.
---@return boolean Whether the skybox is visible from the position.
function util.IsSkyboxVisibleFromPoint(position) end

---[SHARED] Checks if the specified model is valid.
--- A model is considered invalid in following cases:
--- 
--- Starts with a space or maps
--- Doesn't start with models
--- Contains any of the following:
--- 
--- 
--- _gestures
--- 
--- 
--- 
--- 
--- _animations
--- 
--- 
--- 
--- 
--- _postures
--- 
--- 
--- 
--- 
--- _gst
--- 
--- 
--- 
--- 
--- _pst
--- 
--- 
--- 
--- 
--- _shd
--- 
--- 
--- 
--- 
--- _ss
--- 
--- 
--- 
--- 
--- _anm
--- 
--- 
--- 
--- 
--- .bsp
--- 
--- 
--- 
--- 
--- cs_fix
--- 
--- 
--- If the model isn't precached on the server, AND if the model file doesn't exist on disk
--- If precache failed
--- Model is the error model
--- 
--- Running this function will also precache the model.
---@param modelName string Name/Path of the model to check.
---@return boolean Whether the model is valid or not. Returns false clientside if the model is not precached by the server.
function util.IsValidModel(modelName) end

---[SHARED] Checks if given numbered physics object of given entity is valid or not. Most useful for ragdolls.
---@param ent Entity The entity
---@param physobj number Number of the physics object to test
---@return boolean true is valid, false otherwise
function util.IsValidPhysicsObject(ent, physobj) end

---[SHARED] Checks if the specified prop is valid.
---@param modelName string Name/Path of the model to check.
---@return boolean Returns true if the specified prop is valid; otherwise false.
function util.IsValidProp(modelName) end

---[SHARED] Checks if the specified model name points to a valid ragdoll.
---@param ragdollName string Name/Path of the ragdoll model to check.
---@return boolean Returns true if the specified model name points to a valid ragdoll; otherwise false.
function util.IsValidRagdoll(ragdollName) end

---[SHARED] Converts a JSON string to a Lua table.
--- Keys are converted to numbers wherever possible. This means using Player:SteamID64 as keys won't work.
--- There is a limit of 15,000 keys total.Colors will not have the color metatable.Issue Tracker: 2407
---@param json string The JSON string to convert.
---@return table The table containing converted information. Returns nothing on failure.
function util.JSONToTable(json) end

---[SHARED] Converts a Valve KeyValue string (typically from util.TableToKeyValues) to a Lua table.
--- Due to how tables work in Lua, keys will not repeat within a table. See util.KeyValuesToTablePreserveOrder for alternative.
---@param keyValues string The KeyValue string to convert.
---@param usesEscapeSequences boolean If set to true, will replace \t, \n, \" and \\ in the input text with their escaped variants
---@param preserveKeyCase boolean Whether we should preserve key case (may fail) or not (always lowercase)
---@return table The converted table
function util.KeyValuesToTable(keyValues, usesEscapeSequences, preserveKeyCase) end

---[SHARED] Similar to util.KeyValuesToTable but it also preserves order of keys.
---@param keyvals string The key value string
---@param usesEscapeSequences boolean If set to true, will replace \t, \n, \" and \\ in the input text with their escaped variants
---@param preserveKeyCase boolean Whether we should preserve key case (may fail) or not (always lowercase)
---@return table The output table
function util.KeyValuesToTablePreserveOrder(keyvals, usesEscapeSequences, preserveKeyCase) end

---[SHARED] Returns a vector in world coordinates based on an entity and local coordinates
---@param ent Entity The entity lpos is local to
---@param lpos Vector Coordinates local to the ent
---@param bonenum number The bonenumber of the ent lpos is local to
---@return Vector wpos
function util.LocalToWorld(ent, lpos, bonenum) end

---[SHARED] Generates the MD5 hash of the specified string.
--- MD5 is considered cryptographically broken and is known to be vulnerable to a variety of attacks including duplicate return values. If security or duplicate returns is a concern, use util.SHA256.
---@param stringToHash string The string to calculate the MD5 hash of.
---@return string The MD5 hash of the string in hexadecimal form.
function util.MD5(stringToHash) end

---[SHARED] Returns the networked string associated with the given ID from the string table.
---@param stringTableID number ID to get the associated string from.
---@return string The networked string, or nil if it wasn't found.
function util.NetworkIDToString(stringTableID) end

---[SHARED] Returns the networked ID associated with the given string from the string table.
---@param networkString string String to get the associated networked ID from.
---@return number The networked ID of the string, or 0 if it hasn't been networked with util.AddNetworkString.
function util.NetworkStringToID(networkString) end

---[SHARED] Formats a float by stripping off extra 0's and .'s.
---@param float number The float to format.
---@return string Formatted float.
function util.NiceFloat(float) end

---[SHARED] Creates a tracer effect with the given parameters.
---@param name string The name of the tracer effect.
---@param startPos Vector The start position of the tracer.
---@param endPos Vector The end position of the tracer.
---@param doWhiz boolean Play the hit miss(whiz) sound.
function util.ParticleTracer(name, startPos, endPos, doWhiz) end

---[SHARED] Creates a tracer effect with the given parameters.
---@param name string The name of the tracer effect.
---@param startPos Vector The start position of the tracer.
---@param endPos Vector The end position of the tracer.
---@param doWhiz boolean Play the hit miss(whiz) sound.
---@param entityIndex number Entity index of the emitting entity.
---@param attachmentIndex number Attachment index to be used as origin.
function util.ParticleTracerEx(name, startPos, endPos, doWhiz, entityIndex, attachmentIndex) end

---[CLIENT] Returns the visibility of a sphere in the world.
---@param position Vector The center of the visibility test.
---@param radius number The radius of the sphere to check for visibility.
---@param PixVis pixelvis_handle_t The PixVis handle created with util.GetPixelVisibleHandle. Don't use the same handle twice per tick or it will give unpredictable results.Don't use the same handle twice per tick or it will give unpredictable results.Don't use the same handle twice per tick or it will give unpredictable results.
---@return number Visibility, ranges from 0-1. 0 when none of the area is visible, 1 when all of it is visible.
function util.PixelVisible(position, radius, PixVis) end

---[SHARED] Returns the contents of the position specified.
--- This function will sample only the world environments. It can be used to check if Entity:GetPos is underwater for example unlike Entity:WaterLevel which works for players only.
---@param position Vector Position to get the contents sample from.
---@return number Contents bitflag, see Enums/CONTENTS
function util.PointContents(position) end

---[SHARED] Precaches a model for later use. Model is cached after being loaded once.
--- Modelprecache is limited to 4096 unique models. When it reaches the limit the game will crash.
---@param modelName string The model to precache.
function util.PrecacheModel(modelName) end

---[SHARED] Precaches a sound for later use. Sound is cached after being loaded once.
--- Soundcache is limited to 16384 unique sounds on the server.Broken on purpose because hitting the limit above causes the server to shutdownUltimately does nothing on client, and only works with sound scripts, not direct paths.
---@param soundName string The sound to precache.
function util.PrecacheSound(soundName) end

---[SHARED] Performs a trace with the given origin, direction, and filter.
---@param origin Vector The origin of the trace.
---@param dir Vector The direction of the trace times the distance of the trace. This is added to the origin to determine the endpos.
---@param filter Entity Entity which should be ignored by the trace. Can also be a table of entities or a function - see Structures/Trace.
---@return table Trace result. See Structures/TraceResult.
function util.QuickTrace(origin, dir, filter) end

---[MENU] Converts the relative path of the given GMA file to the Full Path.
--- You can use util.FullPathToRelative_Menu to convert the Full path back to the Relative Path.
---@param gma string The Relative path to the GMA file. like: "addons/[Name].gma"
---@param gamePath string The path to look for the files and directories in. See this list for a list of valid paths.
---@return string The full path to the GMA file.
function util.RelativePathToFull_Menu(gma, gamePath) end

---[MENU] Returns the AddonInfo of the Addon the given file belongs to.
---@param gma string The Full path to the GMA file. like: "[Steam folder]\common\garrysmod\garrysmod\addons[Name].gma"
---@return table The AddonInfo of the GMA file. Will return nil if the File doesn't belongs to an addon. Table Structure: Author	=	[Addon Author] File	=	[Steam folder]\workshop\content\4000\[Addon ID]/[GMA Name].gma ID	=	[Addon ID] Title	=	[Addon Title]Author	=	[Addon Author] File	=	[Steam folder]\workshop\content\4000\[Addon ID]/[GMA Name].gma ID	=	[Addon ID] Title	=	[Addon Title]
function util.RelativePathToGMA_Menu(gma) end

---[SHARED] Removes PData of offline player using their SteamID.
--- This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
---@param steamID string SteamID of the player
---@param name string Variable name to remove
function util.RemovePData(steamID, name) end

---[SHARED] Makes the screen shake.
--- The screen shake effect is rendered by modifying the view origin on the client. If you override the view origin in GM:CalcView you may not be able to see the shake effect.
---@param pos Vector The origin of the effect. Does nothing on client.Does nothing on client.Does nothing on client.
---@param amplitude number The strength of the effect.
---@param frequency number The frequency of the effect in hertz.
---@param duration number The duration of the effect in seconds.
---@param radius number The range from the origin within which views will be affected, in Hammer units. Does nothing on client.Does nothing on client.Does nothing on client.
function util.ScreenShake(pos, amplitude, frequency, duration, radius) end

---[SHARED] Sets PData for offline player using his SteamID.
--- This function internally uses Player:UniqueID, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.
---@param steamID string SteamID of the player.
---@param name string Variable name to store the value in.
---@param value any The value to store.
function util.SetPData(steamID, name, value) end

---[SHARED] Generates the SHA-1 hash of the specified string.
--- SHA-1 is considered cryptographically broken and is known to be vulnerable to a variety of attacks. If security is a concern, use util.SHA256.
---@param stringToHash string The string to calculate the SHA-1 hash of.
---@return string The SHA-1 hash of the string in hexadecimal form.
function util.SHA1(stringToHash) end

---[SHARED] Generates the SHA-256 hash of the specified string.
---@param stringToHash string The string to calculate the SHA-256 hash of.
---@return string The SHA-256 hash of the string in hexadecimal form.
function util.SHA256(stringToHash) end

---[SHARED] Generates a random float value that should be the same on client and server.
--- This function is best used in a Predicted Hook
---@param uniqueName string The seed for the random value
---@param min number The minimum value of the random range
---@param max number The maximum value of the random range
---@param additionalSeed number The additional seed
---@return number The random float value
function util.SharedRandom(uniqueName, min, max, additionalSeed) end

---[SERVER] Adds a trail to the specified entity.
---@param ent Entity Entity to attach trail to
---@param attachmentID number Attachment ID of the entities model to attach trail to. If you are not sure, set this to 0
---@param color table Color of the trail, use Color
---@param additive boolean Should the trail be additive or not
---@param startWidth number Start width of the trail
---@param endWidth number End width of the trail
---@param lifetime number How long it takes to transition from startWidth to endWidth
---@param textureRes number The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5
---@param texture string Path to the texture to use as a trail.
---@return Entity Entity of created trail (env_spritetrail)
function util.SpriteTrail(ent, attachmentID, color, additive, startWidth, endWidth, lifetime, textureRes, texture) end

---[SHARED] Returns a new Stack object.
---@return Stack A brand new stack object.
function util.Stack() end

---[SHARED] Given a 64bit SteamID will return a STEAM_0: style Steam ID
---@param id string The 64 bit Steam ID
---@return string STEAM_0 style Steam ID
function util.SteamIDFrom64(id) end

---[SHARED] Given a STEAM_0 style Steam ID will return a 64bit Steam ID
---@param id string The STEAM_0 style id
---@return string 64bit Steam ID or 0 (as a string) on fail
function util.SteamIDTo64(id) end

---[SHARED] Converts a string to the specified type.
--- This can be useful when dealing with ConVars.
---@param str string The string to convert
---@param typename string The type to attempt to convert the string to. This can be vector, angle, float, int, bool, or string (case insensitive).
---@return any The result of the conversion, or nil if a bad type is specified.
function util.StringToType(str, typename) end

---[SHARED] Converts a table to a JSON string.
--- Trying to serialize or deserialize SteamID64s in JSON will NOT work correctly. They will be interpreted as numbers which cannot be precisely stored by JavaScript, Lua and JSON, leading to loss of data. You may want to use util.SteamIDFrom64 to work around this.
--- Alternatively, just append a character to the SteamID64 to force util.JSONToTable to treat it as a string.All keys are strings in the JSON format, so all keys will be converted to strings!This will produce invalid JSON if the provided table contains nan or inf values.Issue Tracker: 3561
---@param table table Table to convert.
---@param prettyPrint boolean Format and indent the JSON.
---@return string A JSON formatted string containing the serialized data
function util.TableToJSON(table, prettyPrint) end

---[SHARED] Converts the given table into a Valve key value string.
--- Use util.KeyValuesToTable to perform the opposite transformation.
--- You should consider using util.TableToJSON instead.
---@param table table The table to convert.
---@param rootKey string The root key name for the output KV table.
---@return string The output.
function util.TableToKeyValues(table, rootKey) end

---[SHARED] Creates a timer object.
---@param startdelay number How long you want the timer to be.
---@return table A timer object. It has next methods: Reset() - Resets the timer to nothing Start( time ) - Starts the timer, call with end time Started() - Returns true if the timer has been started Elapsed() - Returns true if the time has elapsed
function util.Timer(startdelay) end

---[SHARED] Returns the time since this function has been last called
---@return number Time since this function has been last called in ms
function util.TimerCycle() end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- You should use tobool instead.
--- Converts string or a number to a bool, if possible. Alias of tobool.
---@param input any A string or a number to convert.
---@return boolean False if the input is equal to the string or boolean "false", if the input is equal to the string or number "0", or if the input is nil. Returns true otherwise.
function util.tobool(input) end

---[SHARED] Runs a trace using the entity's collisionmodel between two points. This does not take the entity's angles into account and will trace its unrotated collisionmodel.
--- Clientside entities will not be hit by traces.
---@param tracedata table Trace data. See Structures/Trace
---@param ent Entity The entity to use
---@return table Trace result. See Structures/TraceResult
function util.TraceEntity(tracedata, ent) end

---[SHARED] We advise against using this. It may be changed or removed in a future update.
--- 
--- This function is broken and returns the same values all the time
--- Traces from one entity to another.
---@param ent1 Entity The first entity to trace from
---@param ent2 Entity The second entity to trace to
---@return table Trace result. See Structures/TraceResult
function util.TraceEntityHull(ent1, ent2) end

---[SHARED] Performs an AABB hull (axis-aligned bounding box, aka not rotated) trace with the given trace data.
--- Clientside entities will not be hit by traces.This function may not always give desired results clientside due to certain physics mechanisms not existing on the client. Use it serverside for accurate results.
---@param TraceData table The trace data to use. See Structures/HullTrace
---@return table Trace result. See Structures/TraceResult
function util.TraceHull(TraceData) end

---[SHARED] Performs a trace with the given trace data.
--- Clientside entities will not be hit by traces.
--- When server side trace starts inside a solid, it will hit the most inner solid the beam start position is located in. Traces are triggered by change of boundary.
---@param TraceData table The trace data to use. See Structures/Trace
---@return table Trace result. See Structures/TraceResult. Can return nil if game.GetWorld or its physics object is invalid. This will be the case for any traces done before GM:InitPostEntity is called.
function util.TraceLine(TraceData) end

---[SHARED] Converts a type to a (nice, but still parsable) string
---@param input any What to convert
---@return string Converted string
function util.TypeToString(input) end

---[CLIENT] Starts picking an entity in the world. This will suppress the next mouse click, and instead use it as a direction in the trace sent to the callback.
---@param callback function Function to call after an entity choice has been made. Argument is: table tr - TraceResult from the mouse press. tr.Entity will return the entity clicked
function util.worldpicker.Start(callback) end

vgui = {}

---[CLIENT] Creates a panel by the specified classname.
--- Custom VGUI elements are not loaded instantly. Use GM:OnGamemodeLoaded to create them on startup.
---@param classname string Classname of the panel to create. Default panel classnames can be found on the VGUI Element List. New panels can be registered via vgui.Register
---@param parent Panel Panel to parent to.
---@param name string Custom name of the created panel for scripting/debugging purposes. Can be retrieved with Panel:GetName.
---@return Panel The created panel, or nil if creation failed for whatever reason.
function vgui.Create(classname, parent, name) end

---[CLIENT] Creates a panel from table. Typically used with vgui.RegisterFile and vgui.RegisterTable.
---@param metatable table Your PANEL table.
---@param parent Panel Which panel to parent the newly created panel to.
---@param name string Custom name of the created panel for scripting/debugging purposes. Can be retrieved with Panel:GetName.
---@return Panel The created panel, or nil if creation failed for whatever reason.
function vgui.CreateFromTable(metatable, parent, name) end

---[CLIENT] This is used internally - although you're able to use it you probably shouldn't.
--- Creates an engine panel.
---@param class string Class of the panel to create
---@param parent Panel If specified, parents created panel to given one
---@param name string Name of the created panel
---@return Panel Created panel
function vgui.CreateX(class, parent, name) end

---[CLIENT] Returns whenever the cursor is currently active and visible.
---@return boolean isCursorVisible
function vgui.CursorVisible() end

---[CLIENT] Returns true if Lua-defined panel exists by name. Uses vgui.GetControlTable internally.
---@param Panelname string The name of the panel to get test.
---@return boolean Whether a panel with given name was registered yet or not.
function vgui.Exists(Panelname) end

---[CLIENT] Returns whether the currently focused panel is a child of the given one.
---@param parent Panel The parent panel to check the currently focused one against. This doesn't need to be a direct parent (focused panel can be a child of a child and so on).
---@return boolean Whether or not the focused panel is a child of the passed one.
function vgui.FocusedHasParent(parent) end

---[CLIENT] Returns the table of a Lua-defined panel by name. Does not return parent members of the table!
---@param Panelname string The name of the panel to get the table of.
---@return table The PANEL table of the a Lua-defined panel with given name.
function vgui.GetControlTable(Panelname) end

---[CLIENT] Returns the panel the cursor is hovering above.
--- This returns a cached value that is only updated after rendering and before the next VGUI Think/Layout pass.
--- ie. it lags one frame behind panel layout and is completely unhelpful for PANEL:Paint if your panels are moving around under the mouse a lot every frame.
---@return Panel The panel that the user is currently hovering over with their cursor.
function vgui.GetHoveredPanel() end

---[CLIENT] Returns the panel which is currently receiving keyboard input.
---@return Panel The panel with keyboard focus
function vgui.GetKeyboardFocus() end

---[CLIENT] Returns the global world panel which is the parent to all others, except for the HUD panel.
--- See also GetHUDPanel.
---@return Panel The world panel
function vgui.GetWorldPanel() end

---[CLIENT] Returns whenever the cursor is hovering the world panel.
---@return boolean isHoveringWorld
function vgui.IsHoveringWorld() end

---[CLIENT] Registers a panel for later creation via vgui.Create.
---@param classname string Classname of the panel to register. This is what you will need to pass to vgui.Create's first argument.
---@param panelTable table The table containing the panel information.
---@param baseName string Classname of a panel to inherit functionality from. Functions with same names will be overwritten preferring the panel that is being registered.
---@return table The given panel table from second argument
function vgui.Register(classname, panelTable, baseName) end

---[CLIENT] Registers a new VGUI panel from a file, to be used with vgui.CreateFromTable.
--- File file must use the PANEL global that is provided just before the file is included, for example:
--- PANEL.Base = "Panel"
--- 
--- function PANEL:Init()
--- 	-- Your code...
--- end
--- 
--- function PANEL:Think()
--- 	-- Your code...
--- end
---@param file string The file to register
---@return table A table containing info about the panel.
function vgui.RegisterFile(file) end

---[CLIENT] Registers a table to use as a panel, to be used with vgui.CreateFromTable.
--- All this function does is assigns Base key to your table and returns the table.
---@param panel table The PANEL table.
---@param base string A base for the panel.
---@return table The PANEL table
function vgui.RegisterTable(panel, base) end

video = {}

---[CLIENT] Attempts to create an IVideoWriter.
---@param config table The video config. See Structures/VideoData.
---@return IVideoWriter, string IVideoWriter - The video object (returns false if there is an error)
---@return IVideoWriter, string string - The error string, if there is an error
function video.Record(config) end

weapons = {}

---[SHARED] Get a copy of weapon table by name. This function also inherits fields from the weapon's base class, unlike weapons.GetStored.
--- This will only work on SWEP's, this means that this will not return anything for HL2/HL:S weapons.
---@param classname string Class name of weapon to retrieve
---@return table The retrieved table or nil
function weapons.Get(classname) end

---[SHARED] Get a list of all the registered SWEPs. This does not include weapons added to spawnmenu manually.
---@return table List of all the registered SWEPs
function weapons.GetList() end

---[SHARED] Gets the REAL weapon table, not a copy. The produced table does not inherit fields from the weapon's base class, unlike weapons.Get.
--- Modifying this table will modify what is stored by the weapons library. Take a copy or use weapons.Get to avoid this.
---@param weapon_class string Weapon class to retrieve weapon table of
---@return table The weapon table
function weapons.GetStored(weapon_class) end

---[SHARED] Checks if name is based on base
---@param name string Entity's class name to be checked
---@param base string Base class name to be checked
---@return boolean Returns true if class name is based on base, else false.
function weapons.IsBasedOn(name, base) end

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Called after all SWEPS have been loaded and runs baseclass.Set on each one.
--- You can retrieve all the currently registered SWEPS with weapons.GetList.
--- This is not called after a SWEP auto refresh, and thus the inherited baseclass functions retrieved with baseclass.Get will not be updated
function weapons.OnLoaded() end

---[SHARED] Registers a Scripted Weapon (SWEP) class manually. When the engine spawns an entity, weapons registered with this function will be created if the class names match.
--- See also scripted_ents.Register for Scripted Entities (SENTs)
--- Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.
---@param swep_table table The SWEP table
---@param classname string Classname to assign to that swep
function weapons.Register(swep_table, classname) end

widgets = {}

---[SHARED] This is used internally - although you're able to use it you probably shouldn't.
--- Automatically called to update all widgets.
---@param ply Player The player
---@param mv CMoveData Player move data
function widgets.PlayerTick(ply, mv) end

---[CLIENT] Renders a widget. Normally you won't need to call this.
---@param ent Entity Widget entity to render
function widgets.RenderMe(ent) end

